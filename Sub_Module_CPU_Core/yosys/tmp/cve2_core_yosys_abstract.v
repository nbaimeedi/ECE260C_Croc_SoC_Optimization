/* Generated by Yosys 0.51 (git sha1 c4b519022, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

(* src = "../rtl/cve2/cve2_alu.sv:9.8" *)
module \cve2_alu$cve2_core.ex_block_i.alu_i (multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, instr_first_cycle_i, operator_i, operand_a_i, operand_b_i, multdiv_sel_i, adder_result_o, adder_result_ext_o, result_o, comparison_result_o, is_equal_result_o);
  wire \$auto$builder.cc:338:Biop$2612 ;
  wire \$auto$builder.cc:338:Biop$2618 ;
  wire \$auto$builder.cc:338:Biop$2620 ;
  wire \$auto$builder.cc:338:Biop$2675 ;
  wire \$auto$builder.cc:338:Biop$2731 ;
  wire \$auto$builder.cc:338:Biop$2733 ;
  wire \$auto$builder.cc:338:Biop$2737 ;
  wire \$auto$builder.cc:338:Biop$2739 ;
  wire \$auto$builder.cc:364:Unop$2624 ;
  wire \$auto$builder.cc:364:Unop$2626 ;
  wire [5:0] \$auto$wreduce.cc:513:run$10701 ;
  wire [7:0] \$procmux$3688_CMP ;
  wire \$procmux$3688_CTRL ;
  wire [4:0] \$procmux$3689_CMP ;
  wire \$procmux$3689_CTRL ;
  wire [4:0] \$procmux$3690_CMP ;
  wire \$procmux$3690_CTRL ;
  wire \$procmux$3691_CTRL ;
  wire [5:0] \$procmux$3716_CMP ;
  wire \$procmux$3716_CTRL ;
  wire [3:0] \$procmux$3717_CMP ;
  wire \$procmux$3717_CTRL ;
  (* src = "../rtl/cve2/cve2_alu.sv:52.16" *)
  wire [32:0] adder_in_a;
  (* src = "../rtl/cve2/cve2_alu.sv:52.28" *)
  wire [32:0] adder_in_b;
  (* src = "../rtl/cve2/cve2_alu.sv:51.16" *)
  wire adder_op_b_negate;
  (* src = "../rtl/cve2/cve2_alu.sv:28.29" *)
  output [33:0] adder_result_ext_o;
  wire [33:0] adder_result_ext_o;
  (* src = "../rtl/cve2/cve2_alu.sv:27.29" *)
  output [31:0] adder_result_o;
  wire [31:0] adder_result_o;
  (* src = "../rtl/cve2/cve2_alu.sv:362.9" *)
  wire bwlogic_and;
  (* src = "../rtl/cve2/cve2_alu.sv:365.16" *)
  wire [31:0] bwlogic_and_result;
  (* src = "../rtl/cve2/cve2_alu.sv:361.9" *)
  wire bwlogic_or;
  (* src = "../rtl/cve2/cve2_alu.sv:364.16" *)
  wire [31:0] bwlogic_or_result;
  (* src = "../rtl/cve2/cve2_alu.sv:367.16" *)
  wire [31:0] bwlogic_result;
  (* src = "../rtl/cve2/cve2_alu.sv:366.16" *)
  wire [31:0] bwlogic_xor_result;
  (* src = "../rtl/cve2/cve2_alu.sv:117.9" *)
  wire cmp_signed;
  (* src = "../rtl/cve2/cve2_alu.sv:31.29" *)
  output comparison_result_o;
  wire comparison_result_o;
  (* src = "../rtl/cve2/cve2_alu.sv:24.29" *)
  output [63:0] imd_val_d_o;
  wire [63:0] imd_val_d_o;
  (* src = "../rtl/cve2/cve2_alu.sv:23.29" *)
  input [63:0] imd_val_q_i;
  wire [63:0] imd_val_q_i;
  (* src = "../rtl/cve2/cve2_alu.sv:25.29" *)
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  (* src = "../rtl/cve2/cve2_alu.sv:16.29" *)
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  (* src = "../rtl/cve2/cve2_alu.sv:32.29" *)
  output is_equal_result_o;
  wire is_equal_result_o;
  (* src = "../rtl/cve2/cve2_alu.sv:116.9" *)
  wire is_greater_equal;
  (* src = "../rtl/cve2/cve2_alu.sv:18.29" *)
  input [32:0] multdiv_operand_a_i;
  wire [32:0] multdiv_operand_a_i;
  (* src = "../rtl/cve2/cve2_alu.sv:19.29" *)
  input [32:0] multdiv_operand_b_i;
  wire [32:0] multdiv_operand_b_i;
  (* src = "../rtl/cve2/cve2_alu.sv:21.29" *)
  input multdiv_sel_i;
  wire multdiv_sel_i;
  (* src = "../rtl/cve2/cve2_alu.sv:13.29" *)
  input [31:0] operand_a_i;
  wire [31:0] operand_a_i;
  (* src = "../rtl/cve2/cve2_alu.sv:14.29" *)
  input [31:0] operand_b_i;
  wire [31:0] operand_b_i;
  (* src = "../rtl/cve2/cve2_alu.sv:37.16" *)
  wire [32:0] operand_b_neg;
  (* src = "../rtl/cve2/cve2_alu.sv:12.29" *)
  input [6:0] operator_i;
  wire [6:0] operator_i;
  (* src = "../rtl/cve2/cve2_alu.sv:30.29" *)
  output [31:0] result_o;
  wire [31:0] result_o;
  wire [4:0] shift_amt;
  wire [4:0] shift_amt_compl;
  (* src = "../rtl/cve2/cve2_alu.sv:244.15" *)
  wire shift_arith;
  (* src = "../rtl/cve2/cve2_alu.sv:242.15" *)
  wire shift_left;
  (* src = "../rtl/cve2/cve2_alu.sv:250.23" *)
  wire [31:0] shift_operand;
  (* src = "../rtl/cve2/cve2_alu.sv:254.23" *)
  wire [31:0] shift_result;
  wire [31:0] shift_result_ext;
  assign adder_result_ext_o = adder_in_a + adder_in_b;
  assign is_equal_result_o = ! adder_result_ext_o[32:1];
  assign \$auto$builder.cc:338:Biop$2612  = operand_a_i[31] ^ operand_b_i[31];
  assign \$auto$builder.cc:338:Biop$2618  = ~ adder_result_ext_o[32];
  assign \$auto$builder.cc:338:Biop$2620  = operand_a_i[31] ^ cmp_signed;
  assign shift_amt_compl = 1'h0 - operand_b_i[4:0];
  assign shift_arith = operator_i == 4'h8;
  assign \$auto$builder.cc:338:Biop$2675  = shift_arith & shift_operand[31];
  assign shift_result_ext = $signed({ \$auto$builder.cc:338:Biop$2675 , shift_operand }) >>> shift_amt;
  assign bwlogic_or_result = operand_a_i | operand_b_i;
  assign bwlogic_and_result = operand_a_i & operand_b_i;
  assign bwlogic_xor_result = operand_a_i ^ operand_b_i;
  assign \$auto$builder.cc:338:Biop$2731  = operator_i == 2'h3;
  assign \$auto$builder.cc:338:Biop$2733  = operator_i == 3'h6;
  assign bwlogic_or = \$auto$builder.cc:338:Biop$2731  | \$auto$builder.cc:338:Biop$2733 ;
  assign \$auto$builder.cc:338:Biop$2737  = operator_i == 3'h4;
  assign \$auto$builder.cc:338:Biop$2739  = operator_i == 3'h7;
  assign bwlogic_and = \$auto$builder.cc:338:Biop$2737  | \$auto$builder.cc:338:Biop$2739 ;
  assign \$auto$builder.cc:364:Unop$2624  = ~ is_equal_result_o;
  assign \$auto$builder.cc:364:Unop$2626  = ~ is_greater_equal;
  assign operand_b_neg[32:1] = ~ operand_b_i;
  assign shift_amt = instr_first_cycle_i ? operand_b_i[4:0] : shift_amt_compl;
  assign shift_operand = shift_left ? { operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] } : operand_a_i;
  assign shift_result = shift_left ? { shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] } : shift_result_ext;
  function [31:0] \$procmux$3687 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$3687  = b[31:0];
      4'b??1?:
        \$procmux$3687  = b[63:32];
      4'b?1??:
        \$procmux$3687  = b[95:64];
      4'b1???:
        \$procmux$3687  = b[127:96];
      default:
        \$procmux$3687  = a;
    endcase
  endfunction
  assign result_o = \$procmux$3687 (32'd0, { bwlogic_result, adder_result_ext_o[32:1], shift_result, 31'h00000000, comparison_result_o }, { \$procmux$3691_CTRL , \$procmux$3690_CTRL , \$procmux$3689_CTRL , \$procmux$3688_CTRL  });
  assign \$procmux$3688_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) \$procmux$3688_CMP ;
  assign \$procmux$3688_CMP [0] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1d;
  assign \$procmux$3688_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1e;
  assign \$procmux$3688_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1b;
  assign \$procmux$3688_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1c;
  assign \$procmux$3688_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h19;
  assign \$procmux$3688_CMP [5] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h1a;
  assign \$procmux$3688_CMP [6] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 6'h2b;
  assign \$procmux$3688_CMP [7] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1350.27-1350.57|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 6'h2c;
  assign \$procmux$3689_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1338.26-1338.50|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) { \$procmux$3689_CMP [4:3], \$procmux$3689_CMP [1], shift_arith, shift_left };
  assign shift_left = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1338.26-1338.50|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'ha;
  assign \$procmux$3689_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1338.26-1338.50|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'h9;
  assign \$procmux$3689_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1338.26-1338.50|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'hc;
  assign \$procmux$3689_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1338.26-1338.50|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 4'hb;
  assign \$procmux$3690_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1332.19-1332.43|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) \$procmux$3690_CMP ;
  assign \$procmux$3690_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1332.19-1332.43|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) operator_i;
  assign \$procmux$3690_CMP [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1332.19-1332.43|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 1'h1;
  assign \$procmux$3690_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1332.19-1332.43|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h16;
  assign \$procmux$3690_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1332.19-1332.43|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h17;
  assign \$procmux$3690_CMP [4] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1332.19-1332.43|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 5'h18;
  assign \$procmux$3691_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1326.27-1326.53|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) { \$auto$wreduce.cc:513:run$10701 [1:0], \$auto$builder.cc:338:Biop$2739 , \$auto$builder.cc:338:Biop$2737 , \$auto$builder.cc:338:Biop$2733 , \$auto$builder.cc:338:Biop$2731  };
  assign \$auto$wreduce.cc:513:run$10701 [0] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1326.27-1326.53|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 2'h2;
  assign \$auto$wreduce.cc:513:run$10701 [1] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:1326.27-1326.53|../rtl/cve2/cve2_alu.sv:1322.5-1394.12" *) 3'h5;
  function [31:0] \$procmux$3693 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_alu.sv:394.20-394.56|../rtl/cve2/cve2_alu.sv:392.5-396.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3693  = b[31:0];
      2'b1?:
        \$procmux$3693  = b[63:32];
      default:
        \$procmux$3693  = a;
    endcase
  endfunction
  assign bwlogic_result = \$procmux$3693 (bwlogic_xor_result, { bwlogic_or_result, bwlogic_and_result }, { bwlogic_or, bwlogic_and });
  function [0:0] \$procmux$3715 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_alu.sv:167.27-167.58|../rtl/cve2/cve2_alu.sv:160.5-170.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3715  = b[0:0];
      3'b?1?:
        \$procmux$3715  = b[1:1];
      3'b1??:
        \$procmux$3715  = b[2:2];
      default:
        \$procmux$3715  = a;
    endcase
  endfunction
  assign comparison_result_o = \$procmux$3715 (is_equal_result_o, { \$auto$builder.cc:364:Unop$2624 , is_greater_equal, \$auto$builder.cc:364:Unop$2626  }, { \$procmux$3688_CMP [1], \$procmux$3717_CTRL , \$procmux$3716_CTRL  });
  assign \$procmux$3716_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:167.27-167.58|../rtl/cve2/cve2_alu.sv:160.5-170.12" *) { \$procmux$3716_CMP [3:2], \$procmux$3688_CMP [7:4] };
  assign \$procmux$3716_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:167.27-167.58|../rtl/cve2/cve2_alu.sv:160.5-170.12" *) 5'h1f;
  assign \$procmux$3716_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:167.27-167.58|../rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h20;
  assign \$procmux$3717_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:164.27-164.57|../rtl/cve2/cve2_alu.sv:160.5-170.12" *) { \$procmux$3717_CMP [3:2], \$procmux$3688_CMP [3:2] };
  assign \$procmux$3717_CMP [2] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:164.27-164.57|../rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h21;
  assign \$procmux$3717_CMP [3] = operator_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:164.27-164.57|../rtl/cve2/cve2_alu.sv:160.5-170.12" *) 6'h22;
  assign is_greater_equal = \$auto$builder.cc:338:Biop$2612  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:138.7-138.53|../rtl/cve2/cve2_alu.sv:137.5-141.8" *) \$auto$builder.cc:338:Biop$2620  : \$auto$builder.cc:338:Biop$2618 ;
  assign cmp_signed = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:126.16-126.34|../rtl/cve2/cve2_alu.sv:120.5-129.12" *) { \$procmux$3717_CMP [2], \$procmux$3716_CMP [2], \$procmux$3688_CMP [6], \$procmux$3688_CMP [4], \$procmux$3688_CMP [2] };
  function [32:0] \$procmux$3726 ;
    input [32:0] a;
    input [65:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_alu.sv:99.26-99.53|../rtl/cve2/cve2_alu.sv:97.5-101.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3726  = b[32:0];
      2'b1?:
        \$procmux$3726  = b[65:33];
      default:
        \$procmux$3726  = a;
    endcase
  endfunction
  assign adder_in_b = \$procmux$3726 ({ operand_b_i, 1'h0 }, { multdiv_operand_b_i, operand_b_neg[32:1], 1'h1 }, { multdiv_sel_i, adder_op_b_negate });
  assign adder_in_a = multdiv_sel_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:89.26-89.67|../rtl/cve2/cve2_alu.sv:85.5-91.12" *) multdiv_operand_a_i : { operand_a_i, 1'h1 };
  assign adder_op_b_negate = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_alu.sv:72.27-72.52|../rtl/cve2/cve2_alu.sv:60.5-80.12" *) { \$procmux$3717_CMP [3:2], \$procmux$3716_CMP [3:2], \$procmux$3690_CMP [1], \$procmux$3688_CMP  };
  assign adder_result_o = adder_result_ext_o[32:1];
  assign \$procmux$3717_CMP [1:0] = \$procmux$3688_CMP [3:2];
  assign { \$procmux$3716_CMP [5:4], \$procmux$3716_CMP [1:0] } = \$procmux$3688_CMP [7:4];
  assign imd_val_d_o = 64'h0000000000000000;
  assign imd_val_we_o = 2'h0;
  assign { \$procmux$3689_CMP [2], \$procmux$3689_CMP [0] } = { shift_arith, shift_left };
  assign operand_b_neg[0] = 1'h1;
  assign \$auto$wreduce.cc:513:run$10701 [5:2] = { \$auto$builder.cc:338:Biop$2739 , \$auto$builder.cc:338:Biop$2737 , \$auto$builder.cc:338:Biop$2733 , \$auto$builder.cc:338:Biop$2731  };
endmodule

(* src = "../rtl/cve2/cve2_compressed_decoder.sv:16.8" *)
module \cve2_compressed_decoder$cve2_core.if_stage_i.compressed_decoder_i (clk_i, rst_ni, valid_i, instr_i, instr_o, is_compressed_o, illegal_instr_o);
  wire \$auto$builder.cc:338:Biop$1702 ;
  wire \$auto$builder.cc:338:Biop$1711 ;
  wire \$auto$builder.cc:338:Biop$1716 ;
  wire \$auto$builder.cc:338:Biop$1737 ;
  wire \$auto$builder.cc:338:Biop$1746 ;
  wire \$auto$builder.cc:364:Unop$1709 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10585 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1707 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1726 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1728 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1730 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1755 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1767 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1769 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1706 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1714 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1725 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1727 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1729 ;
  wire [24:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1754 ;
  wire [20:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1764 ;
  wire [24:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1765 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1766 ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\instr_o$1768 ;
  wire \$procmux$8301_CMP ;
  wire \$procmux$8303_CMP ;
  wire \$procmux$8392_CMP ;
  wire [3:0] \$procmux$8397_CMP ;
  wire \$procmux$8397_CTRL ;
  wire \$procmux$8398_CMP ;
  wire [3:0] \$procmux$8434_CMP ;
  wire \$procmux$8435_CMP ;
  wire \$procmux$8436_CMP ;
  wire \$procmux$8437_CMP ;
  wire \$procmux$8440_CMP ;
  wire \$procmux$8444_CMP ;
  wire \$procmux$8462_CMP ;
  wire \$procmux$8519_CTRL ;
  wire \$procmux$8526_CTRL ;
  wire \$procmux$8542_CMP ;
  wire \$procmux$8561_CTRL ;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:17.23" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:23.23" *)
  output illegal_instr_o;
  wire illegal_instr_o;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:20.23" *)
  input [31:0] instr_i;
  wire [31:0] instr_i;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:21.23" *)
  output [31:0] instr_o;
  wire [31:0] instr_o;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:22.23" *)
  output is_compressed_o;
  wire is_compressed_o;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:18.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_compressed_decoder.sv:19.23" *)
  input valid_i;
  wire valid_i;
  assign \$auto$builder.cc:338:Biop$1702  = ! instr_i[12:5];
  assign \$auto$builder.cc:338:Biop$1711  = instr_i[11:7] == 2'h2;
  assign \$auto$builder.cc:338:Biop$1716  = ! { instr_i[12], instr_i[6:2] };
  assign \$auto$builder.cc:338:Biop$1737  = ! instr_i[11:7];
  assign \$auto$builder.cc:338:Biop$1746  = | instr_i[6:2];
  assign is_compressed_o = instr_i[1:0] != 2'h3;
  assign \$auto$builder.cc:364:Unop$1709  = ~ instr_i[15];
  assign \$auto$opt_reduce.cc:137:opt_pmux$10585  = | { \$procmux$8398_CMP , \$procmux$8392_CMP  };
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [19:15], \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [20], \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [7] } = \$auto$builder.cc:338:Biop$1737  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:242.19-242.47|../rtl/cve2/cve2_compressed_decoder.sv:240.17-246.20" *) 7'h02 : { instr_i[11:7], 2'h1 };
  assign \$procmux$8301_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h4;
  assign \$procmux$8303_CMP  = instr_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16|../rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) 2'h2;
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [24:15], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [11:6], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [4], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [2] } = \$auto$builder.cc:338:Biop$1746  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:238.17-238.97|../rtl/cve2/cve2_compressed_decoder.sv:235.15-247.18" *) { instr_i[6:2], instr_i[11:7], instr_i[11:7], 3'h2 } : { 4'h0, \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [20:15], 4'h0, \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [7], 1'h1, \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [20], \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [7] };
  assign \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1767  = instr_i[12] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|../rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1755 ;
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [24:15], \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [11:6], \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [4], \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [2] } = instr_i[12] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18|../rtl/cve2/cve2_compressed_decoder.sv:224.13-248.16" *) { \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [24:15], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [11:6], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [4], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [2] } : { \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [24:15], \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [11:6], \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [4], \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [6] };
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [24:15], \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [11:7], \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [4], \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [6] } = \$auto$builder.cc:338:Biop$1746  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|../rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *) { instr_i[6:2], 5'h00, instr_i[11:7], 2'h2 } : { 5'h00, instr_i[11:7], 7'h01 };
  assign \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1755  = \$auto$builder.cc:338:Biop$1746  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:228.17-228.88|../rtl/cve2/cve2_compressed_decoder.sv:225.15-233.18" *) 1'h0 : \$auto$builder.cc:338:Biop$1737 ;
  assign \$procmux$8392_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:216.19-221.14|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 2'h2;
  function [0:0] \$procmux$8396 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$8396  = b[0:0];
      4'b??1?:
        \$procmux$8396  = b[1:1];
      4'b?1??:
        \$procmux$8396  = b[2:2];
      4'b1???:
        \$procmux$8396  = b[3:3];
      default:
        \$procmux$8396  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1769  = \$procmux$8396 (instr_i[12], { \$auto$builder.cc:338:Biop$1737 , \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1767 , 2'h1 }, { \$procmux$8392_CMP , \$procmux$8301_CMP , \$procmux$8398_CMP , \$procmux$8397_CTRL  });
  assign \$procmux$8397_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) \$procmux$8397_CMP ;
  assign \$procmux$8397_CMP [0] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 1'h1;
  assign \$procmux$8397_CMP [1] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 2'h3;
  assign \$procmux$8397_CMP [2] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h5;
  assign \$procmux$8397_CMP [3] = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h7;
  assign \$procmux$8398_CMP  = instr_i[15:13] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:253.13-254.62|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *) 3'h6;
  function [31:0] \$procmux$8408 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:261.13-261.36|../rtl/cve2/cve2_compressed_decoder.sv:208.9-267.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$8408  = b[31:0];
      4'b??1?:
        \$procmux$8408  = b[63:32];
      4'b?1??:
        \$procmux$8408  = b[95:64];
      4'b1???:
        \$procmux$8408  = b[127:96];
      default:
        \$procmux$8408  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\instr_o$1768  = \$procmux$8408 ({ 7'h00, instr_i[6:2], instr_i[11:7], 3'h1, instr_i[11:7], 7'h13 }, { 4'h0, instr_i[3:2], instr_i[12], instr_i[6:4], 10'h012, instr_i[11:7], 14'h0180, \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [24:15], 3'h0, \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [11:6], 1'h1, \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [4], 1'h0, \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [2], 6'h30, instr_i[8:7], instr_i[12], instr_i[6:2], 8'h12, instr_i[11:9], 9'h023, instr_i }, { \$procmux$8392_CMP , \$procmux$8301_CMP , \$procmux$8398_CMP , \$procmux$8397_CTRL  });
  function [28:0] \$procmux$8433 ;
    input [28:0] a;
    input [115:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$8433  = b[28:0];
      4'b??1?:
        \$procmux$8433  = b[57:29];
      4'b?1??:
        \$procmux$8433  = b[86:58];
      4'b1???:
        \$procmux$8433  = b[115:87];
      default:
        \$procmux$8433  = a;
    endcase
  endfunction
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1725 [31:10], \$auto$slang_frontend.cc:694:finish$\instr_o$1725 [6:0] } = \$procmux$8433 ({ 9'h081, instr_i[4:2], 2'h1, instr_i[9:7], 12'h0b3 }, { 9'h001, instr_i[4:2], 2'h1, instr_i[9:7], 21'h116601, instr_i[4:2], 2'h1, instr_i[9:7], 21'h196601, instr_i[4:2], 2'h1, instr_i[9:7], 12'heb3, instr_i[31:10], instr_i[6:0] }, { \$procmux$8437_CMP , \$procmux$8436_CMP , \$procmux$8435_CMP , \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1726  });
  assign \$procmux$8434_CMP [0] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h4;
  assign \$procmux$8434_CMP [1] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h5;
  assign \$procmux$8434_CMP [2] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h6;
  assign \$procmux$8434_CMP [3] = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 3'h7;
  assign \$procmux$8435_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:163.21-164.66|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 2'h3;
  assign \$procmux$8436_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:157.21-158.66|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 2'h2;
  assign \$procmux$8437_CMP  = { instr_i[12], instr_i[6:5] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:151.21-152.66|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) 1'h1;
  assign \$procmux$8440_CMP  = instr_i[11:10] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|../rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) 2'h3;
  assign \$procmux$8444_CMP  = instr_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16|../rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1726  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:173.21-173.44|../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24" *) \$procmux$8434_CMP ;
  function [0:0] \$procmux$8460 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|../rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8460  = b[0:0];
      2'b1?:
        \$procmux$8460  = b[1:1];
      default:
        \$procmux$8460  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1728  = \$procmux$8460 (instr_i[12], { 1'h0, \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1726  }, { \$procmux$8462_CMP , \$procmux$8440_CMP  });
  assign \$procmux$8462_CMP  = instr_i[11:10] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:137.17-138.74|../rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *) 2'h2;
  function [28:0] \$procmux$8473 ;
    input [28:0] a;
    input [57:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:142.17-179.24|../rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8473  = b[28:0];
      2'b1?:
        \$procmux$8473  = b[57:29];
      default:
        \$procmux$8473  = a;
    endcase
  endfunction
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1727 [31:10], \$auto$slang_frontend.cc:694:finish$\instr_o$1727 [6:0] } = \$procmux$8473 ({ 1'h0, instr_i[10], 5'h00, instr_i[6:2], 2'h1, instr_i[9:7], 12'ha93 }, { instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 2'h1, instr_i[9:7], 12'he93, \$auto$slang_frontend.cc:694:finish$\instr_o$1725 [31:10], \$auto$slang_frontend.cc:694:finish$\instr_o$1725 [6:0] }, { \$procmux$8462_CMP , \$procmux$8440_CMP  });
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [28:23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [16:7], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [5] } = \$auto$builder.cc:338:Biop$1711  ? (* src = "../rtl/cve2/cve2_compressed_decoder.sv:116.15-117.83|../rtl/cve2/cve2_compressed_decoder.sv:114.13-118.16" *) { instr_i[4:3], instr_i[5], instr_i[2], instr_i[6], 12'h404 } : { instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 1'h1 };
  function [31:0] \$procmux$8518 ;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|../rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$8518  = b[31:0];
      5'b???1?:
        \$procmux$8518  = b[63:32];
      5'b??1??:
        \$procmux$8518  = b[95:64];
      5'b?1???:
        \$procmux$8518  = b[127:96];
      5'b1????:
        \$procmux$8518  = b[159:128];
      default:
        \$procmux$8518  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\instr_o$1729  = \$procmux$8518 ({ instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h13 }, { instr_i[12], instr_i[8], instr_i[10:9], instr_i[6], instr_i[7], instr_i[2], instr_i[11], instr_i[5:3], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], 4'h0, \$auto$builder.cc:364:Unop$1709 , 7'h6f, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 8'h00, instr_i[11:7], 7'h13, instr_i[12], instr_i[12], instr_i[12], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [28:23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [16:7], 1'h0, \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [5], 2'h2, \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [5], 2'h3, \$auto$slang_frontend.cc:694:finish$\instr_o$1727 [31:10], instr_i[9:7], \$auto$slang_frontend.cc:694:finish$\instr_o$1727 [6:0], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:5], instr_i[2], 7'h01, instr_i[9:7], 2'h0, instr_i[13], instr_i[11:10], instr_i[4:3], instr_i[12], 7'h63 }, { \$procmux$8526_CTRL , \$procmux$8392_CMP , \$procmux$8397_CMP [1], \$procmux$8301_CMP , \$procmux$8519_CTRL  });
  assign \$procmux$8519_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:191.13-193.54|../rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *) { \$procmux$8398_CMP , \$procmux$8397_CMP [3] };
  assign \$procmux$8526_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:97.13-99.77|../rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *) { \$procmux$8397_CMP [2], \$procmux$8397_CMP [0] };
  function [0:0] \$procmux$8534 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:124.13-185.20|../rtl/cve2/cve2_compressed_decoder.sv:86.9-199.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8534  = b[0:0];
      2'b1?:
        \$procmux$8534  = b[1:1];
      default:
        \$procmux$8534  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1730  = \$procmux$8534 (1'h0, { \$auto$builder.cc:338:Biop$1716 , \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1728  }, { \$procmux$8397_CMP [1], \$procmux$8301_CMP  });
  function [0:0] \$procmux$8541 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:271.13-271.14|../rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$8541  = b[0:0];
      3'b?1?:
        \$procmux$8541  = b[1:1];
      3'b1??:
        \$procmux$8541  = b[2:2];
      default:
        \$procmux$8541  = a;
    endcase
  endfunction
  assign illegal_instr_o = \$procmux$8541 (\$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1707 , { \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1730 , \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1769 , 1'h0 }, { \$procmux$8444_CMP , \$procmux$8303_CMP , \$procmux$8542_CMP  });
  assign \$procmux$8542_CMP  = instr_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:271.13-271.14|../rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *) 2'h3;
  function [31:0] \$procmux$8549 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:271.13-271.14|../rtl/cve2/cve2_compressed_decoder.sv:42.5-276.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$8549  = b[31:0];
      3'b?1?:
        \$procmux$8549  = b[63:32];
      3'b1??:
        \$procmux$8549  = b[95:64];
      default:
        \$procmux$8549  = a;
    endcase
  endfunction
  assign instr_o = \$procmux$8549 (\$auto$slang_frontend.cc:694:finish$\instr_o$1706 , { \$auto$slang_frontend.cc:694:finish$\instr_o$1729 , \$auto$slang_frontend.cc:694:finish$\instr_o$1768 , instr_i }, { \$procmux$8444_CMP , \$procmux$8303_CMP , \$procmux$8542_CMP  });
  function [0:0] \$procmux$8560 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|../rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8560  = b[0:0];
      2'b1?:
        \$procmux$8560  = b[1:1];
      default:
        \$procmux$8560  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\illegal_instr_o$1707  = \$procmux$8560 (\$auto$builder.cc:338:Biop$1702 , 2'h1, { \$auto$opt_reduce.cc:137:opt_pmux$10585 , \$procmux$8561_CTRL  });
  assign \$procmux$8561_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|../rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *) { \$procmux$8397_CMP , \$procmux$8301_CMP  };
  function [31:0] \$procmux$8571 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_compressed_decoder.sv:71.13-71.36|../rtl/cve2/cve2_compressed_decoder.sv:45.9-77.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$8571  = b[31:0];
      3'b?1?:
        \$procmux$8571  = b[63:32];
      3'b1??:
        \$procmux$8571  = b[95:64];
      default:
        \$procmux$8571  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\instr_o$1706  = \$procmux$8571 ({ 2'h0, instr_i[10:7], instr_i[12:11], instr_i[5], instr_i[6], 12'h041, instr_i[4:2], 7'h13 }, { 5'h00, instr_i[5], instr_i[12:10], instr_i[6], 4'h1, instr_i[9:7], 5'h09, instr_i[4:2], 12'h060, instr_i[5], instr_i[12], 2'h1, instr_i[4:2], 2'h1, instr_i[9:7], 3'h2, instr_i[11:10], instr_i[6], 9'h023, instr_i }, { \$procmux$8392_CMP , \$procmux$8398_CMP , \$procmux$8561_CTRL  });
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [31:29], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [22:17], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [6], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [4:0] } = { instr_i[12], instr_i[12], instr_i[12], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [23], 3'h2, \$auto$slang_frontend.cc:694:finish$\instr_o$1714 [5], 2'h3 };
  assign \$auto$slang_frontend.cc:694:finish$\instr_o$1725 [9:7] = instr_i[9:7];
  assign \$auto$slang_frontend.cc:694:finish$\instr_o$1727 [9:7] = instr_i[9:7];
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [14:12], \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [5], \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [3:0] } = { 5'h02, \$auto$slang_frontend.cc:694:finish$\instr_o$1754 [6], 2'h3 };
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [14:8], \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [6:0] } = { 9'h003, \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [20], 1'h0, \$auto$slang_frontend.cc:694:finish$\instr_o$1764 [7], 2'h3 };
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [14:12], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [5], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [3], \$auto$slang_frontend.cc:694:finish$\instr_o$1765 [1:0] } = 7'h0b;
  assign { \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [31:25], \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [14:12], \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [5], \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [3], \$auto$slang_frontend.cc:694:finish$\instr_o$1766 [1:0] } = 14'h000b;
endmodule

(* src = "../rtl/cve2/cve2_controller.sv:12.8" *)
module \cve2_controller$cve2_core.id_stage_i.controller_i (clk_i, rst_ni, instr_req_o, irq_nm_i, debug_req_i, fetch_enable_i, ctrl_busy_o, instr_valid_i, instr_is_compressed_i, instr_valid_clear_o, id_in_ready_o, pc_set_o, pc_mux_o, exc_pc_mux_o, exc_cause_o, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, csr_save_if_o, csr_save_id_o, csr_restore_mret_id_o
, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i, irqs_i, nmi_mode_o, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, perf_jump_o, perf_tbranch_o, instr_i, illegal_insn_i
, ecall_insn_i, mret_insn_i, dret_insn_i, wfi_insn_i, ebrk_insn_i, csr_pipe_flush_i, instr_compressed_i, controller_run_o, load_err_i, store_err_i, branch_set_i, jump_set_i, stall_id_i, flush_id_o);
  wire \$auto$builder.cc:338:Biop$2164 ;
  wire \$auto$builder.cc:338:Biop$2166 ;
  wire \$auto$builder.cc:338:Biop$2168 ;
  wire \$auto$builder.cc:338:Biop$2172 ;
  wire \$auto$builder.cc:338:Biop$2174 ;
  wire \$auto$builder.cc:338:Biop$2176 ;
  wire \$auto$builder.cc:338:Biop$2180 ;
  wire \$auto$builder.cc:338:Biop$2182 ;
  wire \$auto$builder.cc:338:Biop$2184 ;
  wire \$auto$builder.cc:338:Biop$2194 ;
  wire \$auto$builder.cc:338:Biop$2196 ;
  wire \$auto$builder.cc:338:Biop$2240 ;
  wire \$auto$builder.cc:338:Biop$2244 ;
  wire \$auto$builder.cc:338:Biop$2252 ;
  wire \$auto$builder.cc:338:Biop$2256 ;
  wire \$auto$builder.cc:338:Biop$2260 ;
  wire \$auto$builder.cc:338:Biop$2272 ;
  wire \$auto$builder.cc:338:Biop$2274 ;
  wire \$auto$builder.cc:338:Biop$2276 ;
  wire \$auto$builder.cc:338:Biop$2353 ;
  wire \$auto$builder.cc:338:Biop$2355 ;
  wire \$auto$builder.cc:338:Biop$2357 ;
  wire \$auto$builder.cc:338:Biop$2359 ;
  wire \$auto$builder.cc:338:Biop$2380 ;
  wire \$auto$builder.cc:338:Biop$2387 ;
  wire \$auto$builder.cc:338:Biop$2389 ;
  wire \$auto$builder.cc:338:Biop$2391 ;
  wire \$auto$builder.cc:338:Biop$2400 ;
  wire \$auto$builder.cc:338:Biop$2404 ;
  wire \$auto$builder.cc:338:Biop$2422 ;
  wire \$auto$builder.cc:338:Biop$2426 ;
  wire \$auto$builder.cc:338:Biop$2452 ;
  wire \$auto$builder.cc:338:Biop$2460 ;
  wire \$auto$builder.cc:338:Biop$2462 ;
  wire [31:0] \$auto$builder.cc:338:Biop$2472 ;
  wire \$auto$builder.cc:338:Biop$2486 ;
  wire \$auto$builder.cc:338:Biop$2538 ;
  wire \$auto$builder.cc:338:Biop$2542 ;
  wire \$auto$builder.cc:338:Biop$2574 ;
  wire \$auto$builder.cc:338:Biop$2580 ;
  wire \$auto$builder.cc:364:Unop$2160 ;
  wire \$auto$builder.cc:364:Unop$2270 ;
  wire \$auto$builder.cc:364:Unop$2396 ;
  wire \$auto$builder.cc:364:Unop$2398 ;
  wire \$auto$builder.cc:364:Unop$2402 ;
  wire \$auto$builder.cc:364:Unop$2420 ;
  wire \$auto$builder.cc:364:Unop$2450 ;
  wire \$auto$builder.cc:364:Unop$2540 ;
  wire \$auto$builder.cc:364:Unop$2570 ;
  wire \$auto$builder.cc:364:Unop$2572 ;
  wire \$auto$builder.cc:364:Unop$2576 ;
  wire \$auto$builder.cc:364:Unop$2582 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10759 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10761 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10763 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10765 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10770 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10772 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10776 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10781 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10783 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10785 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10767 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10778 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10787 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10587 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10591 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10595 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10597 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10599 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10603 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10959 ;
  wire \$auto$rtlil.cc:2874:Mux$2264 ;
  wire [31:0] \$auto$rtlil.cc:2874:Mux$2474 ;
  wire [31:0] \$auto$rtlil.cc:2874:Mux$2478 ;
  (* src = "../rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\csr_mtval_o$2499 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\csr_mtval_o$2532 ;
  (* src = "../rtl/cve2/cve2_controller.sv:658.11-672.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_restore_dret_id_o$2520 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_restore_dret_id_o$2530 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_restore_mret_id_o$2529 ;
  (* src = "../rtl/cve2/cve2_controller.sv:614.15-644.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2492 ;
  (* src = "../rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2498 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2531 ;
  (* src = "../rtl/cve2/cve2_controller.sv:417.9-422.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2373 ;
  (* src = "../rtl/cve2/cve2_controller.sv:441.9-450.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2377 ;
  (* src = "../rtl/cve2/cve2_controller.sv:472.20-481.14" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2411 ;
  (* src = "../rtl/cve2/cve2_controller.sv:466.11-481.14" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2413 ;
  (* src = "../rtl/cve2/cve2_controller.sv:465.9-482.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2415 ;
  (* src = "../rtl/cve2/cve2_controller.sv:614.15-644.18" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2494 ;
  (* src = "../rtl/cve2/cve2_controller.sv:600.11-655.18" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2501 ;
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2511 ;
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2515 ;
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2521 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2534 ;
  (* src = "../rtl/cve2/cve2_controller.sv:689.9-691.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2545 ;
  (* src = "../rtl/cve2/cve2_controller.sv:534.18-538.12" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2447 ;
  (* src = "../rtl/cve2/cve2_controller.sv:532.9-538.12" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2448 ;
  (* src = "../rtl/cve2/cve2_controller.sv:237.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\ebrk_insn_prio$2221 ;
  (* src = "../rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\ebrk_insn_prio$2226 ;
  (* src = "../rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\ecall_insn_prio$2225 ;
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2433 ;
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2434 ;
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2435 ;
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2436 ;
  (* src = "../rtl/cve2/cve2_controller.sv:490.9-514.12" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2439 ;
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2496 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2527 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\exc_pc_mux_o$2526 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\flush_id$2533 ;
  (* src = "../rtl/cve2/cve2_controller.sv:417.9-422.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\halt_if$2374 ;
  (* src = "../rtl/cve2/cve2_controller.sv:472.20-481.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\halt_if$2412 ;
  (* src = "../rtl/cve2/cve2_controller.sv:466.11-481.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\halt_if$2414 ;
  (* src = "../rtl/cve2/cve2_controller.sv:465.9-482.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\halt_if$2416 ;
  (* src = "../rtl/cve2/cve2_controller.sv:241.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\load_err_prio$2216 ;
  (* src = "../rtl/cve2/cve2_controller.sv:239.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\load_err_prio$2219 ;
  (* src = "../rtl/cve2/cve2_controller.sv:237.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\load_err_prio$2223 ;
  (* src = "../rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\load_err_prio$2228 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2293 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2297 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2301 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2305 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2309 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2313 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2317 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2321 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2325 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2329 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2333 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2337 ;
  (* src = "../rtl/cve2/cve2_controller.sv:305.7-307.10" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mfip_id$2341 ;
  (* src = "../rtl/cve2/cve2_controller.sv:497.11-513.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\nmi_mode_d$2437 ;
  (* src = "../rtl/cve2/cve2_controller.sv:658.11-672.14" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2518 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2525 ;
  (* src = "../rtl/cve2/cve2_controller.sv:588.9-673.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\pc_set_o$2524 ;
  (* src = "../rtl/cve2/cve2_controller.sv:452.9-457.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\perf_jump_o$2384 ;
  (* src = "../rtl/cve2/cve2_controller.sv:452.9-457.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\perf_tbranch_o$2385 ;
  (* src = "../rtl/cve2/cve2_controller.sv:239.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\store_err_prio$2218 ;
  (* src = "../rtl/cve2/cve2_controller.sv:237.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\store_err_prio$2222 ;
  (* src = "../rtl/cve2/cve2_controller.sv:235.16-245.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\store_err_prio$2227 ;
  wire \$procmux$3770_CMP ;
  wire \$procmux$4211_CMP ;
  wire \$procmux$4239_CMP ;
  wire \$procmux$4268_CMP ;
  wire \$procmux$4533_CMP ;
  wire \$procmux$4589_CMP ;
  wire \$procmux$4624_CMP ;
  wire \$procmux$4625_CMP ;
  wire \$procmux$4627_CMP ;
  (* src = "../rtl/cve2/cve2_controller.sv:58.33" *)
  input branch_set_i;
  wire branch_set_i;
  (* src = "../rtl/cve2/cve2_controller.sv:14.33" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_controller.sv:41.33" *)
  output controller_run_o;
  wire controller_run_o;
  (* src = "../rtl/cve2/cve2_controller.sv:63.33" *)
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  (* src = "../rtl/cve2/cve2_controller.sv:87.33" *)
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  (* src = "../rtl/cve2/cve2_controller.sv:85.33" *)
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  (* src = "../rtl/cve2/cve2_controller.sv:150.9" *)
  wire csr_pipe_flush;
  (* src = "../rtl/cve2/cve2_controller.sv:27.33" *)
  input csr_pipe_flush_i;
  wire csr_pipe_flush_i;
  (* src = "../rtl/cve2/cve2_controller.sv:83.33" *)
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  (* src = "../rtl/cve2/cve2_controller.sv:82.33" *)
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  (* src = "../rtl/cve2/cve2_controller.sv:84.33" *)
  output csr_save_cause_o;
  wire csr_save_cause_o;
  (* src = "../rtl/cve2/cve2_controller.sv:81.33" *)
  output csr_save_id_o;
  wire csr_save_id_o;
  (* src = "../rtl/cve2/cve2_controller.sv:80.33" *)
  output csr_save_if_o;
  wire csr_save_if_o;
  (* src = "../rtl/cve2/cve2_controller.sv:18.33" *)
  output ctrl_busy_o;
  wire ctrl_busy_o;
  (* src = "../rtl/cve2/cve2_controller.sv:107.14" *)
  reg [3:0] ctrl_fsm_cs;
  (* src = "../rtl/cve2/cve2_controller.sv:107.27" *)
  wire [3:0] ctrl_fsm_ns;
  (* src = "../rtl/cve2/cve2_controller.sv:72.33" *)
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  (* src = "../rtl/cve2/cve2_controller.sv:73.33" *)
  output debug_csr_save_o;
  wire debug_csr_save_o;
  (* src = "../rtl/cve2/cve2_controller.sv:76.33" *)
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  (* src = "../rtl/cve2/cve2_controller.sv:77.33" *)
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  (* src = "../rtl/cve2/cve2_controller.sv:110.23" *)
  wire debug_mode_d;
  (* src = "../rtl/cve2/cve2_controller.sv:74.33" *)
  output debug_mode_o;
  reg debug_mode_o;
  (* src = "../rtl/cve2/cve2_controller.sv:71.33" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "../rtl/cve2/cve2_controller.sv:75.33" *)
  input debug_single_step_i;
  wire debug_single_step_i;
  (* src = "../rtl/cve2/cve2_controller.sv:135.9" *)
  wire do_single_step_d;
  (* src = "../rtl/cve2/cve2_controller.sv:136.9" *)
  reg do_single_step_q;
  (* src = "../rtl/cve2/cve2_controller.sv:147.9" *)
  wire dret_insn;
  (* src = "../rtl/cve2/cve2_controller.sv:24.33" *)
  input dret_insn_i;
  wire dret_insn_i;
  (* src = "../rtl/cve2/cve2_controller.sv:140.9" *)
  wire ebreak_into_debug;
  (* src = "../rtl/cve2/cve2_controller.sv:149.9" *)
  wire ebrk_insn;
  (* src = "../rtl/cve2/cve2_controller.sv:26.33" *)
  input ebrk_insn_i;
  wire ebrk_insn_i;
  (* src = "../rtl/cve2/cve2_controller.sv:121.9" *)
  wire ebrk_insn_prio;
  (* src = "../rtl/cve2/cve2_controller.sv:145.9" *)
  wire ecall_insn;
  (* src = "../rtl/cve2/cve2_controller.sv:22.33" *)
  input ecall_insn_i;
  wire ecall_insn_i;
  (* src = "../rtl/cve2/cve2_controller.sv:120.9" *)
  wire ecall_insn_prio;
  (* src = "../rtl/cve2/cve2_controller.sv:139.9" *)
  wire enter_debug_mode;
  (* src = "../rtl/cve2/cve2_controller.sv:137.9" *)
  wire enter_debug_mode_prio_d;
  (* src = "../rtl/cve2/cve2_controller.sv:138.9" *)
  reg enter_debug_mode_prio_q;
  (* src = "../rtl/cve2/cve2_controller.sv:50.33" *)
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  (* src = "../rtl/cve2/cve2_controller.sv:49.33" *)
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  (* src = "../rtl/cve2/cve2_controller.sv:113.20" *)
  wire exc_req_d;
  (* src = "../rtl/cve2/cve2_controller.sv:131.9" *)
  wire exc_req_lsu;
  (* src = "../rtl/cve2/cve2_controller.sv:113.9" *)
  reg exc_req_q;
  (* src = "../rtl/cve2/cve2_controller.sv:17.33" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "../rtl/cve2/cve2_controller.sv:91.33" *)
  output flush_id_o;
  wire flush_id_o;
  (* src = "../rtl/cve2/cve2_controller.sv:126.9" *)
  wire halt_if;
  (* src = "../rtl/cve2/cve2_controller.sv:141.9" *)
  wire handle_irq;
  (* src = "../rtl/cve2/cve2_controller.sv:40.33" *)
  output id_in_ready_o;
  wire id_in_ready_o;
  (* src = "../rtl/cve2/cve2_controller.sv:129.9" *)
  wire illegal_dret;
  (* src = "../rtl/cve2/cve2_controller.sv:114.25" *)
  wire illegal_insn_d;
  (* src = "../rtl/cve2/cve2_controller.sv:21.33" *)
  input illegal_insn_i;
  wire illegal_insn_i;
  (* src = "../rtl/cve2/cve2_controller.sv:119.9" *)
  wire illegal_insn_prio;
  (* src = "../rtl/cve2/cve2_controller.sv:114.9" *)
  reg illegal_insn_q;
  (* src = "../rtl/cve2/cve2_controller.sv:130.9" *)
  wire illegal_umode;
  (* src = "../rtl/cve2/cve2_controller.sv:32.33" *)
  input [15:0] instr_compressed_i;
  wire [15:0] instr_compressed_i;
  (* src = "../rtl/cve2/cve2_controller.sv:151.9" *)
  wire instr_fetch_err;
  (* src = "../rtl/cve2/cve2_controller.sv:34.33" *)
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  (* src = "../rtl/cve2/cve2_controller.sv:35.33" *)
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  (* src = "../rtl/cve2/cve2_controller.sv:31.33" *)
  input [31:0] instr_i;
  wire [31:0] instr_i;
  (* src = "../rtl/cve2/cve2_controller.sv:33.33" *)
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  (* src = "../rtl/cve2/cve2_controller.sv:45.33" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "../rtl/cve2/cve2_controller.sv:39.33" *)
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  (* src = "../rtl/cve2/cve2_controller.sv:30.33" *)
  input instr_valid_i;
  wire instr_valid_i;
  (* src = "../rtl/cve2/cve2_controller.sv:67.33" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "../rtl/cve2/cve2_controller.sv:64.33" *)
  input irq_pending_i;
  wire irq_pending_i;
  (* src = "../rtl/cve2/cve2_controller.sv:65.33" *)
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  (* src = "../rtl/cve2/cve2_controller.sv:60.33" *)
  input jump_set_i;
  wire jump_set_i;
  (* src = "../rtl/cve2/cve2_controller.sv:54.33" *)
  input load_err_i;
  wire load_err_i;
  (* src = "../rtl/cve2/cve2_controller.sv:123.9" *)
  wire load_err_prio;
  (* src = "../rtl/cve2/cve2_controller.sv:111.9" *)
  reg load_err_q;
  (* src = "../rtl/cve2/cve2_controller.sv:53.33" *)
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  (* src = "../rtl/cve2/cve2_controller.sv:142.15" *)
  wire [3:0] mfip_id;
  (* src = "../rtl/cve2/cve2_controller.sv:146.9" *)
  wire mret_insn;
  (* src = "../rtl/cve2/cve2_controller.sv:23.33" *)
  input mret_insn_i;
  wire mret_insn_i;
  (* src = "../rtl/cve2/cve2_controller.sv:109.21" *)
  wire nmi_mode_d;
  (* src = "../rtl/cve2/cve2_controller.sv:68.33" *)
  output nmi_mode_o;
  reg nmi_mode_o;
  (* src = "../rtl/cve2/cve2_controller.sv:36.33" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "../rtl/cve2/cve2_controller.sv:47.33" *)
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  (* src = "../rtl/cve2/cve2_controller.sv:46.33" *)
  output pc_set_o;
  wire pc_set_o;
  (* src = "../rtl/cve2/cve2_controller.sv:94.33" *)
  output perf_jump_o;
  wire perf_jump_o;
  (* src = "../rtl/cve2/cve2_controller.sv:96.33" *)
  output perf_tbranch_o;
  wire perf_tbranch_o;
  (* src = "../rtl/cve2/cve2_controller.sv:86.33" *)
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  (* src = "../rtl/cve2/cve2_controller.sv:127.9" *)
  wire retain_id;
  (* src = "../rtl/cve2/cve2_controller.sv:15.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_controller.sv:132.9" *)
  wire special_req;
  (* src = "../rtl/cve2/cve2_controller.sv:134.9" *)
  wire special_req_flush_only;
  (* src = "../rtl/cve2/cve2_controller.sv:133.9" *)
  wire special_req_pc_change;
  (* src = "../rtl/cve2/cve2_controller.sv:90.33" *)
  input stall_id_i;
  wire stall_id_i;
  (* src = "../rtl/cve2/cve2_controller.sv:55.33" *)
  input store_err_i;
  wire store_err_i;
  (* src = "../rtl/cve2/cve2_controller.sv:122.9" *)
  wire store_err_prio;
  (* src = "../rtl/cve2/cve2_controller.sv:112.9" *)
  reg store_err_q;
  (* src = "../rtl/cve2/cve2_controller.sv:78.33" *)
  input trigger_match_i;
  wire trigger_match_i;
  (* src = "../rtl/cve2/cve2_controller.sv:148.9" *)
  wire wfi_insn;
  (* src = "../rtl/cve2/cve2_controller.sv:25.33" *)
  input wfi_insn_i;
  wire wfi_insn_i;
  assign ecall_insn = ecall_insn_i & instr_valid_i;
  assign mret_insn = mret_insn_i & instr_valid_i;
  assign dret_insn = dret_insn_i & instr_valid_i;
  assign wfi_insn = wfi_insn_i & instr_valid_i;
  assign ebrk_insn = ebrk_insn_i & instr_valid_i;
  assign csr_pipe_flush = csr_pipe_flush_i & instr_valid_i;
  assign instr_fetch_err = instr_fetch_err_i & instr_valid_i;
  assign illegal_dret = dret_insn & \$auto$builder.cc:364:Unop$2160 ;
  assign \$auto$builder.cc:338:Biop$2164  = priv_mode_i != 2'h3;
  assign \$auto$builder.cc:338:Biop$2166  = csr_mstatus_tw_i & wfi_insn;
  assign \$auto$builder.cc:338:Biop$2168  = mret_insn | \$auto$builder.cc:338:Biop$2166 ;
  assign illegal_umode = \$auto$builder.cc:338:Biop$2164  & \$auto$builder.cc:338:Biop$2168 ;
  assign \$auto$builder.cc:338:Biop$2172  = illegal_insn_i | illegal_dret;
  assign \$auto$builder.cc:338:Biop$2174  = \$auto$builder.cc:338:Biop$2172  | illegal_umode;
  assign \$auto$builder.cc:338:Biop$2176  = ctrl_fsm_cs != 3'h6;
  assign illegal_insn_d = \$auto$builder.cc:338:Biop$2174  & \$auto$builder.cc:338:Biop$2176 ;
  assign \$auto$builder.cc:338:Biop$2180  = ecall_insn | ebrk_insn;
  assign \$auto$builder.cc:338:Biop$2182  = \$auto$builder.cc:338:Biop$2180  | illegal_insn_d;
  assign \$auto$builder.cc:338:Biop$2184  = \$auto$builder.cc:338:Biop$2182  | instr_fetch_err;
  assign exc_req_d = \$auto$builder.cc:338:Biop$2184  & \$auto$builder.cc:338:Biop$2176 ;
  assign exc_req_lsu = store_err_i | load_err_i;
  assign special_req_flush_only = wfi_insn | csr_pipe_flush;
  assign \$auto$builder.cc:338:Biop$2194  = mret_insn | dret_insn;
  assign \$auto$builder.cc:338:Biop$2196  = \$auto$builder.cc:338:Biop$2194  | exc_req_d;
  assign special_req_pc_change = \$auto$builder.cc:338:Biop$2196  | exc_req_lsu;
  assign special_req = special_req_pc_change | special_req_flush_only;
  assign \$auto$builder.cc:338:Biop$2240  = \$auto$builder.cc:364:Unop$2160  & debug_single_step_i;
  assign \$auto$builder.cc:338:Biop$2244  = debug_req_i | do_single_step_d;
  assign enter_debug_mode_prio_d = \$auto$builder.cc:338:Biop$2244  & \$auto$builder.cc:364:Unop$2160 ;
  assign \$auto$builder.cc:338:Biop$2252  = trigger_match_i & \$auto$builder.cc:364:Unop$2160 ;
  assign enter_debug_mode = enter_debug_mode_prio_d | \$auto$builder.cc:338:Biop$2252 ;
  assign \$auto$builder.cc:338:Biop$2256  = priv_mode_i == 2'h3;
  assign \$auto$builder.cc:338:Biop$2260  = ! priv_mode_i;
  assign \$auto$builder.cc:338:Biop$2272  = \$auto$builder.cc:364:Unop$2160  & \$auto$builder.cc:364:Unop$2270 ;
  assign \$auto$builder.cc:338:Biop$2274  = irq_pending_i & csr_mstatus_mie_i;
  assign \$auto$builder.cc:338:Biop$2276  = irq_nm_i | \$auto$builder.cc:338:Biop$2274 ;
  assign handle_irq = \$auto$builder.cc:338:Biop$2272  & \$auto$builder.cc:338:Biop$2276 ;
  assign \$auto$builder.cc:338:Biop$2353  = irq_nm_i || irq_pending_i;
  assign \$auto$builder.cc:338:Biop$2355  = \$auto$builder.cc:338:Biop$2353  || debug_req_i;
  assign \$auto$builder.cc:338:Biop$2357  = \$auto$builder.cc:338:Biop$2355  || debug_mode_o;
  assign \$auto$builder.cc:338:Biop$2359  = \$auto$builder.cc:338:Biop$2357  || debug_single_step_i;
  assign \$auto$builder.cc:338:Biop$2380  = branch_set_i || jump_set_i;
  assign \$auto$builder.cc:338:Biop$2387  = enter_debug_mode || handle_irq;
  assign \$auto$builder.cc:338:Biop$2389  = stall_id_i || instr_valid_i;
  assign \$auto$builder.cc:338:Biop$2391  = \$auto$builder.cc:338:Biop$2387  && \$auto$builder.cc:338:Biop$2389 ;
  assign \$auto$builder.cc:338:Biop$2400  = \$auto$builder.cc:364:Unop$2396  && \$auto$builder.cc:364:Unop$2398 ;
  assign \$auto$builder.cc:338:Biop$2404  = \$auto$builder.cc:338:Biop$2400  && \$auto$builder.cc:364:Unop$2402 ;
  assign \$auto$builder.cc:338:Biop$2422  = irq_nm_i && \$auto$builder.cc:364:Unop$2420 ;
  assign \$auto$builder.cc:338:Biop$2426  = | irqs_i[15:0];
  assign \$auto$builder.cc:338:Biop$2452  = ebreak_into_debug && \$auto$builder.cc:364:Unop$2450 ;
  assign \$auto$builder.cc:338:Biop$2460  = exc_req_q || store_err_q;
  assign \$auto$builder.cc:338:Biop$2462  = \$auto$builder.cc:338:Biop$2460  || load_err_q;
  assign \$auto$builder.cc:338:Biop$2472 [31:1] = pc_id_i[31:1] + 1'h1;
  assign \$auto$builder.cc:338:Biop$2486  = debug_mode_o | ebreak_into_debug;
  assign \$auto$builder.cc:338:Biop$2538  = ebrk_insn_prio && ebreak_into_debug;
  assign \$auto$builder.cc:338:Biop$2542  = enter_debug_mode_prio_q && \$auto$builder.cc:364:Unop$2540 ;
  assign \$auto$builder.cc:338:Biop$2574  = \$auto$builder.cc:364:Unop$2570  & \$auto$builder.cc:364:Unop$2572 ;
  assign id_in_ready_o = \$auto$builder.cc:338:Biop$2574  & \$auto$builder.cc:364:Unop$2576 ;
  assign \$auto$builder.cc:338:Biop$2580  = stall_id_i | retain_id;
  assign instr_valid_clear_o = \$auto$builder.cc:364:Unop$2582  | flush_id_o;
  assign \$auto$builder.cc:364:Unop$2160  = ~ debug_mode_o;
  assign \$auto$builder.cc:364:Unop$2270  = ~ nmi_mode_o;
  assign \$auto$builder.cc:364:Unop$2396  = ! stall_id_i;
  assign \$auto$builder.cc:364:Unop$2398  = ! special_req;
  assign \$auto$builder.cc:364:Unop$2402  = ! instr_valid_i;
  assign \$auto$builder.cc:364:Unop$2420  = ! nmi_mode_o;
  assign \$auto$builder.cc:364:Unop$2450  = ! debug_mode_o;
  assign \$auto$builder.cc:364:Unop$2540  = ! \$auto$builder.cc:338:Biop$2538 ;
  assign \$auto$builder.cc:364:Unop$2570  = ~ stall_id_i;
  assign \$auto$builder.cc:364:Unop$2572  = ~ halt_if;
  assign \$auto$builder.cc:364:Unop$2576  = ~ retain_id;
  assign \$auto$builder.cc:364:Unop$2582  = ~ \$auto$builder.cc:338:Biop$2580 ;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) nmi_mode_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10767 ) nmi_mode_o <= nmi_mode_d;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) debug_mode_o <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10778 ) debug_mode_o <= debug_mode_d;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ctrl_fsm_cs <= 4'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10787 ) ctrl_fsm_cs <= ctrl_fsm_ns;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10759  = { \$procmux$4268_CMP , handle_irq } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10761  = { \$procmux$3770_CMP , \$auto$builder.cc:338:Biop$2462 , mret_insn } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10763  = { \$procmux$3770_CMP , \$auto$builder.cc:338:Biop$2462  } != 2'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10765  = | { \$procmux$4268_CMP , \$procmux$3770_CMP  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10770  = { \$procmux$3770_CMP , \$auto$builder.cc:338:Biop$2462 , dret_insn, mret_insn } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10772  = { \$procmux$3770_CMP , \$auto$builder.cc:338:Biop$2462 , mret_insn } != 3'h5;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10776  = | { \$procmux$3770_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10597  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10781  = { \$procmux$4627_CMP , fetch_enable_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10783  = { \$procmux$4533_CMP , handle_irq, enter_debug_mode, id_in_ready_o } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10785  = { \$procmux$4589_CMP , \$auto$builder.cc:338:Biop$2359  } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10767  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10759 , \$auto$opt_dff.cc:194:make_patterns_logic$10763 , \$auto$opt_dff.cc:194:make_patterns_logic$10765 , \$auto$opt_dff.cc:194:make_patterns_logic$10761  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10778  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10776 , \$auto$opt_dff.cc:194:make_patterns_logic$10763 , \$auto$opt_dff.cc:194:make_patterns_logic$10772 , \$auto$opt_dff.cc:194:make_patterns_logic$10770  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10787  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10781 , \$auto$opt_dff.cc:194:make_patterns_logic$10783 , \$auto$opt_dff.cc:194:make_patterns_logic$10785  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10587  = | { \$procmux$4268_CMP , \$procmux$4239_CMP , \$procmux$4211_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10591  = | { \$procmux$4627_CMP , \$procmux$4625_CMP , \$procmux$4239_CMP , \$procmux$4211_CMP  };
  assign instr_req_o = | { \$procmux$4625_CMP , \$procmux$4533_CMP , \$procmux$4268_CMP , \$procmux$4239_CMP , \$procmux$4211_CMP , \$procmux$3770_CMP , controller_run_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10595  = | { \$procmux$4624_CMP , \$procmux$4589_CMP , \$procmux$3770_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10597  = | { \$procmux$4239_CMP , \$procmux$4211_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10599  = | { \$procmux$4624_CMP , \$procmux$4589_CMP , \$procmux$4239_CMP , \$procmux$4211_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10603  = | { load_err_prio, store_err_prio };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10959  = | { \$procmux$4625_CMP , \$procmux$4589_CMP  };
  assign do_single_step_d = instr_valid_i ? \$auto$builder.cc:338:Biop$2240  : do_single_step_q;
  assign \$auto$rtlil.cc:2874:Mux$2264  = \$auto$builder.cc:338:Biop$2260  & debug_ebreaku_i;
  assign ebreak_into_debug = \$auto$builder.cc:338:Biop$2256  ? debug_ebreakm_i : \$auto$rtlil.cc:2874:Mux$2264 ;
  assign \$auto$rtlil.cc:2874:Mux$2474 [31:1] = instr_fetch_err_plus2_i ? \$auto$builder.cc:338:Biop$2472 [31:1] : pc_id_i[31:1];
  assign \$auto$rtlil.cc:2874:Mux$2478  = instr_is_compressed_i ? { 16'h0000, instr_compressed_i } : instr_i;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) do_single_step_q <= 1'h0;
    else do_single_step_q <= do_single_step_d;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) enter_debug_mode_prio_q <= 1'h0;
    else enter_debug_mode_prio_q <= enter_debug_mode_prio_d;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) exc_req_q <= 1'h0;
    else exc_req_q <= exc_req_d;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) illegal_insn_q <= 1'h0;
    else illegal_insn_q <= illegal_insn_d;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) load_err_q <= 1'h0;
    else load_err_q <= load_err_i;
  (* src = "../rtl/cve2/cve2_controller.sv:728.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) store_err_q <= 1'h0;
    else store_err_q <= store_err_i;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2545  = \$auto$builder.cc:338:Biop$2542  ? (* src = "../rtl/cve2/cve2_controller.sv:690.11-690.38|../rtl/cve2/cve2_controller.sv:689.9-691.12" *) 4'h8 : \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2534 ;
  assign \$procmux$3770_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h6;
  assign { \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2511 [1], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2511 [2] } = wfi_insn ? (* src = "../rtl/cve2/cve2_controller.sv:671.13-671.48|../rtl/cve2/cve2_controller.sv:670.20-672.14" *) 2'h2 : 2'h1;
  assign { \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2515 [1], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2515 [2] } = dret_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:665.35-670.14|../rtl/cve2/cve2_controller.sv:665.20-672.14" *) 2'h1 : { \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2511 [1], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2511 [2] };
  assign \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2518 [2:1] = mret_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:658.26-665.14|../rtl/cve2/cve2_controller.sv:658.11-672.14" *) 2'h1 : { dret_insn, 1'h0 };
  assign { \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2521 [1], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2521 [2] } = mret_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:658.26-665.14|../rtl/cve2/cve2_controller.sv:658.11-672.14" *) 2'h1 : { \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2515 [1], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2515 [2] };
  assign \$auto$slang_frontend.cc:694:finish$\csr_restore_dret_id_o$2520  = mret_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:658.26-665.14|../rtl/cve2/cve2_controller.sv:658.11-672.14" *) 1'h0 : dret_insn;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2534  = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) { \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2501 [3:2], 2'h1 } : { 1'h0, \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2521 [2:1], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2521 [2] };
  assign \$auto$slang_frontend.cc:694:finish$\flush_id$2533  = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2498  : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\csr_mtval_o$2532  = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$auto$slang_frontend.cc:694:finish$\csr_mtval_o$2499  : 32'd0;
  assign \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2531  = \$auto$builder.cc:338:Biop$2462  & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2498 ;
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2527 [3:0] = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2496  : 4'h0;
  assign \$auto$slang_frontend.cc:694:finish$\exc_pc_mux_o$2526  = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) { debug_mode_o, debug_mode_o } : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2525  = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) 3'h2 : { \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2518 [2:1], \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2518 [1] };
  assign \$auto$slang_frontend.cc:694:finish$\pc_set_o$2524  = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2498  : \$auto$builder.cc:338:Biop$2194 ;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2494 [3:2] = \$auto$builder.cc:338:Biop$2486  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:614.53-633.18|../rtl/cve2/cve2_controller.sv:614.15-644.18" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2492  = ~ (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:614.53-633.18|../rtl/cve2/cve2_controller.sv:614.15-644.18" *) \$auto$builder.cc:338:Biop$2486 ;
  function [31:0] \$procmux$4093 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:650.28-653.16|../rtl/cve2/cve2_controller.sv:600.11-655.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4093  = b[31:0];
      3'b?1?:
        \$procmux$4093  = b[63:32];
      3'b1??:
        \$procmux$4093  = b[95:64];
      default:
        \$procmux$4093  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\csr_mtval_o$2499  = \$procmux$4093 (32'd0, { \$auto$rtlil.cc:2874:Mux$2474 [31:1], pc_id_i[0], \$auto$rtlil.cc:2874:Mux$2478 , lsu_addr_last_i }, { instr_fetch_err, illegal_insn_prio, \$auto$opt_reduce.cc:137:opt_pmux$10603  });
  function [3:0] \$procmux$4106 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:650.28-653.16|../rtl/cve2/cve2_controller.sv:600.11-655.18" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$4106  = b[3:0];
      6'b????1?:
        \$procmux$4106  = b[7:4];
      6'b???1??:
        \$procmux$4106  = b[11:8];
      6'b??1???:
        \$procmux$4106  = b[15:12];
      6'b?1????:
        \$procmux$4106  = b[19:16];
      6'b1?????:
        \$procmux$4106  = b[23:20];
      default:
        \$procmux$4106  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2496  = \$procmux$4106 (4'h0, { 10'h04a, \$auto$builder.cc:338:Biop$2256 , \$auto$builder.cc:338:Biop$2256 , 2'h0, \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2492 , \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2492 , 8'h75 }, { instr_fetch_err, illegal_insn_prio, ecall_insn_prio, ebrk_insn_prio, store_err_prio, load_err_prio });
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2501 [3:2] = ebrk_insn_prio ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:614.15-644.18|../rtl/cve2/cve2_controller.sv:600.11-655.18" *) \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2494 [3:2] : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2498  = ebrk_insn_prio ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:614.15-644.18|../rtl/cve2/cve2_controller.sv:600.11-655.18" *) \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2492  : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\csr_restore_dret_id_o$2530  = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\csr_restore_dret_id_o$2520 ;
  assign \$auto$slang_frontend.cc:694:finish$\csr_restore_mret_id_o$2529  = \$auto$builder.cc:338:Biop$2462  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:588.53-656.12|../rtl/cve2/cve2_controller.sv:588.9-673.12" *) 1'h0 : mret_insn;
  assign \$procmux$4211_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:546.21-575.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 4'h9;
  assign \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2447 [2:1] = debug_req_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:535.11-535.45|../rtl/cve2/cve2_controller.sv:534.18-538.12" *) 2'h1 : 2'h2;
  assign \$procmux$4239_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:519.21-544.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 4'h8;
  assign \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2448  = trigger_match_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:533.11-533.45|../rtl/cve2/cve2_controller.sv:532.9-538.12" *) 3'h2 : { \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2447 [2:1], \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2447 [1] };
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2433 [2] = ~ (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:510.13-510.52|../rtl/cve2/cve2_controller.sv:509.20-513.14" *) irqs_i[18];
  assign \$procmux$4268_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:486.18-517.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h7;
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2434 [3:2] = irqs_i[16] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:508.13-508.52|../rtl/cve2/cve2_controller.sv:507.20-513.14" *) 2'h2 : { 1'h0, \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2433 [2] };
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2435  = \$auto$builder.cc:338:Biop$2426  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:506.13-506.59|../rtl/cve2/cve2_controller.sv:500.20-513.14" *) { 1'h1, mfip_id } : { 1'h0, \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2434 [3:2], 2'h3 };
  assign \$auto$slang_frontend.cc:694:finish$\nmi_mode_d$2437  = nmi_mode_o | (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:497.40-500.14|../rtl/cve2/cve2_controller.sv:497.11-513.14" *) \$auto$builder.cc:338:Biop$2422 ;
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2436  = \$auto$builder.cc:338:Biop$2422  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:497.40-500.14|../rtl/cve2/cve2_controller.sv:497.11-513.14" *) 6'h20 : { 1'h0, \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2435  };
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2439  = handle_irq ? (* src = "../rtl/cve2/cve2_controller.sv:490.25-514.12|../rtl/cve2/cve2_controller.sv:490.9-514.12" *) { 1'h1, \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2436  } : 7'h00;
  assign \$auto$slang_frontend.cc:694:finish$\halt_if$2412  = \$auto$builder.cc:338:Biop$2391  | (* src = "../rtl/cve2/cve2_controller.sv:472.36-481.14|../rtl/cve2/cve2_controller.sv:472.20-481.14" *) handle_irq;
  assign controller_run_o = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:425.15-484.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h5;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2411  = handle_irq ? (* src = "../rtl/cve2/cve2_controller.sv:472.36-481.14|../rtl/cve2/cve2_controller.sv:472.20-481.14" *) 4'h7 : \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2377 ;
  assign \$auto$slang_frontend.cc:694:finish$\halt_if$2414  = \$auto$slang_frontend.cc:694:finish$\halt_if$2412  | (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:466.33-472.14|../rtl/cve2/cve2_controller.sv:466.11-481.14" *) enter_debug_mode;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2413  = enter_debug_mode ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:466.33-472.14|../rtl/cve2/cve2_controller.sv:466.11-481.14" *) 4'h8 : \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2411 ;
  assign \$auto$slang_frontend.cc:694:finish$\halt_if$2416  = \$auto$builder.cc:338:Biop$2404  ? (* src = "../rtl/cve2/cve2_controller.sv:466.11-481.14|../rtl/cve2/cve2_controller.sv:465.9-482.12" *) \$auto$slang_frontend.cc:694:finish$\halt_if$2414  : \$auto$builder.cc:338:Biop$2391 ;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2415  = \$auto$builder.cc:338:Biop$2404  ? (* src = "../rtl/cve2/cve2_controller.sv:466.11-481.14|../rtl/cve2/cve2_controller.sv:465.9-482.12" *) \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2413  : \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2377 ;
  assign \$auto$slang_frontend.cc:694:finish$\perf_tbranch_o$2385  = \$auto$builder.cc:338:Biop$2380  & (* src = "../rtl/cve2/cve2_controller.sv:452.41-457.12|../rtl/cve2/cve2_controller.sv:452.9-457.12" *) branch_set_i;
  assign \$auto$slang_frontend.cc:694:finish$\perf_jump_o$2384  = \$auto$builder.cc:338:Biop$2380  & (* src = "../rtl/cve2/cve2_controller.sv:452.41-457.12|../rtl/cve2/cve2_controller.sv:452.9-457.12" *) jump_set_i;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2377  = special_req ? (* src = "../rtl/cve2/cve2_controller.sv:441.26-450.12|../rtl/cve2/cve2_controller.sv:441.9-450.12" *) 4'h6 : ctrl_fsm_cs;
  assign \$auto$slang_frontend.cc:694:finish$\halt_if$2374  = handle_irq | (* src = "../rtl/cve2/cve2_controller.sv:417.31-422.12|../rtl/cve2/cve2_controller.sv:417.9-422.12" *) enter_debug_mode;
  assign \$procmux$4533_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:400.20-423.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 3'h4;
  assign { \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2373 [3], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2373 [1], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2373 [2] } = enter_debug_mode ? (* src = "../rtl/cve2/cve2_controller.sv:417.31-422.12|../rtl/cve2/cve2_controller.sv:417.9-422.12" *) 3'h4 : { 1'h0, handle_irq, 1'h1 };
  assign \$procmux$4589_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:383.14-398.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 2'h3;
  function [3:0] \$procmux$4605 ;
    input [3:0] a;
    input [27:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$4605  = b[3:0];
      7'b?????1?:
        \$procmux$4605  = b[7:4];
      7'b????1??:
        \$procmux$4605  = b[11:8];
      7'b???1???:
        \$procmux$4605  = b[15:12];
      7'b??1????:
        \$procmux$4605  = b[19:16];
      7'b?1?????:
        \$procmux$4605  = b[23:20];
      7'b1??????:
        \$procmux$4605  = b[27:24];
      default:
        \$procmux$4605  = a;
    endcase
  endfunction
  assign ctrl_fsm_ns = \$procmux$4605 (4'h0, { 12'h134, \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2373 [3:1], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2373 [2], \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2415 , 4'h5, \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2545  }, { \$procmux$4627_CMP , \$procmux$4624_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10959 , \$procmux$4533_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$10587 , \$procmux$3770_CMP  });
  assign \$procmux$4624_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:375.19-381.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 2'h2;
  assign \$procmux$4625_CMP  = ctrl_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:366.17-373.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 1'h1;
  assign \$procmux$4627_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:357.14-365.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) ctrl_fsm_cs;
  function [2:0] \$procmux$4631 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4631  = b[2:0];
      3'b?1?:
        \$procmux$4631  = b[5:3];
      3'b1??:
        \$procmux$4631  = b[8:6];
      default:
        \$procmux$4631  = a;
    endcase
  endfunction
  assign pc_mux_o = \$procmux$4631 (3'h0, { 6'h0a, \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2525  }, { controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$10587 , \$procmux$3770_CMP  });
  function [0:0] \$procmux$4652 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$4652  = b[0:0];
      4'b??1?:
        \$procmux$4652  = b[1:1];
      4'b?1??:
        \$procmux$4652  = b[2:2];
      4'b1???:
        \$procmux$4652  = b[3:3];
      default:
        \$procmux$4652  = a;
    endcase
  endfunction
  assign pc_set_o = \$procmux$4652 (1'h0, { \$auto$builder.cc:338:Biop$2380 , handle_irq, 1'h1, \$auto$slang_frontend.cc:694:finish$\pc_set_o$2524  }, { controller_run_o, \$procmux$4268_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10591 , \$procmux$3770_CMP  });
  assign retain_id = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:425.15-484.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) special_req;
  function [0:0] \$procmux$4728 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$4728  = b[0:0];
      3'b?1?:
        \$procmux$4728  = b[1:1];
      3'b1??:
        \$procmux$4728  = b[2:2];
      default:
        \$procmux$4728  = a;
    endcase
  endfunction
  assign halt_if = \$procmux$4728 (1'h0, { \$auto$slang_frontend.cc:694:finish$\halt_if$2374 , \$auto$slang_frontend.cc:694:finish$\halt_if$2416 , 1'h1 }, { \$procmux$4533_CMP , controller_run_o, \$auto$opt_reduce.cc:137:opt_pmux$10595  });
  assign debug_mode_d = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$procmux$3770_CMP ;
  assign nmi_mode_d = \$procmux$3770_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\nmi_mode_d$2437 ;
  function [0:0] \$procmux$4782 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4782  = b[0:0];
      2'b1?:
        \$procmux$4782  = b[1:1];
      default:
        \$procmux$4782  = a;
    endcase
  endfunction
  assign flush_id_o = \$procmux$4782 (1'h0, { 1'h1, \$auto$slang_frontend.cc:694:finish$\flush_id$2533  }, { \$auto$opt_reduce.cc:137:opt_pmux$10599 , \$procmux$3770_CMP  });
  assign perf_tbranch_o = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:425.15-484.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$auto$slang_frontend.cc:694:finish$\perf_tbranch_o$2385 ;
  assign perf_jump_o = controller_run_o & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:425.15-484.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$auto$slang_frontend.cc:694:finish$\perf_jump_o$2384 ;
  function [0:0] \$procmux$4836 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:546.21-575.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4836  = b[0:0];
      2'b1?:
        \$procmux$4836  = b[1:1];
      default:
        \$procmux$4836  = a;
    endcase
  endfunction
  assign debug_csr_save_o = \$procmux$4836 (1'h0, { 1'h1, \$auto$builder.cc:338:Biop$2452  }, { \$procmux$4239_CMP , \$procmux$4211_CMP  });
  assign debug_cause_o = \$procmux$4239_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:546.21-575.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2448  : 3'h1;
  assign csr_mtval_o = \$procmux$3770_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$auto$slang_frontend.cc:694:finish$\csr_mtval_o$2532  : 32'd0;
  function [0:0] \$procmux$4857 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$4857  = b[0:0];
      4'b??1?:
        \$procmux$4857  = b[1:1];
      4'b?1??:
        \$procmux$4857  = b[2:2];
      4'b1???:
        \$procmux$4857  = b[3:3];
      default:
        \$procmux$4857  = a;
    endcase
  endfunction
  assign csr_save_cause_o = \$procmux$4857 (1'h0, { handle_irq, 1'h1, \$auto$builder.cc:338:Biop$2452 , \$auto$slang_frontend.cc:694:finish$\csr_save_cause_o$2531  }, { \$procmux$4268_CMP , \$procmux$4239_CMP , \$procmux$4211_CMP , \$procmux$3770_CMP  });
  assign csr_restore_dret_id_o = \$procmux$3770_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$auto$slang_frontend.cc:694:finish$\csr_restore_dret_id_o$2530 ;
  assign csr_restore_mret_id_o = \$procmux$3770_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$auto$slang_frontend.cc:694:finish$\csr_restore_mret_id_o$2529 ;
  assign csr_save_id_o = \$procmux$4211_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *) \$auto$builder.cc:338:Biop$2452 ;
  function [0:0] \$procmux$4889 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:519.21-544.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4889  = b[0:0];
      2'b1?:
        \$procmux$4889  = b[1:1];
      default:
        \$procmux$4889  = a;
    endcase
  endfunction
  assign csr_save_if_o = \$procmux$4889 (1'h0, { handle_irq, 1'h1 }, { \$procmux$4268_CMP , \$procmux$4239_CMP  });
  function [6:0] \$procmux$4896 ;
    input [6:0] a;
    input [13:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4896  = b[6:0];
      2'b1?:
        \$procmux$4896  = b[13:7];
      default:
        \$procmux$4896  = a;
    endcase
  endfunction
  assign exc_cause_o = \$procmux$4896 (7'h00, { \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2439 , 3'h0, \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2527 [3:0] }, { \$procmux$4268_CMP , \$procmux$3770_CMP  });
  function [1:0] \$procmux$4905 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:577.14-692.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4905  = b[1:0];
      2'b1?:
        \$procmux$4905  = b[3:2];
      default:
        \$procmux$4905  = a;
    endcase
  endfunction
  assign exc_pc_mux_o = \$procmux$4905 (2'h1, { 2'h2, \$auto$slang_frontend.cc:694:finish$\exc_pc_mux_o$2526  }, { \$auto$opt_reduce.cc:137:opt_pmux$10597 , \$procmux$3770_CMP  });
  function [0:0] \$procmux$4932 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_controller.sv:383.14-398.10|../rtl/cve2/cve2_controller.sv:356.5-698.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$4932  = b[0:0];
      2'b1?:
        \$procmux$4932  = b[1:1];
      default:
        \$procmux$4932  = a;
    endcase
  endfunction
  assign ctrl_busy_o = \$procmux$4932 (1'h1, { 1'h0, \$auto$builder.cc:338:Biop$2359  }, { \$procmux$4624_CMP , \$procmux$4589_CMP  });
  assign mfip_id = irqs_i[0] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h0 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2341 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2341  = irqs_i[1] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h1 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2337 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2337  = irqs_i[2] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h2 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2333 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2333  = irqs_i[3] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h3 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2329 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2329  = irqs_i[4] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h4 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2325 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2325  = irqs_i[5] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h5 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2321 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2321  = irqs_i[6] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h6 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2317 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2317  = irqs_i[7] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h7 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2313 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2313  = irqs_i[8] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h8 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2309 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2309  = irqs_i[9] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'h9 : \$auto$slang_frontend.cc:694:finish$\mfip_id$2305 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2305  = irqs_i[10] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'ha : \$auto$slang_frontend.cc:694:finish$\mfip_id$2301 ;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2301  = irqs_i[11] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 4'hb : { \$auto$slang_frontend.cc:694:finish$\mfip_id$2297 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2297 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2297 [1:0] };
  assign { \$auto$slang_frontend.cc:694:finish$\mfip_id$2297 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2297 [1:0] } = irqs_i[12] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 3'h4 : { \$auto$slang_frontend.cc:694:finish$\mfip_id$2293 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2293 [1:0] };
  assign { \$auto$slang_frontend.cc:694:finish$\mfip_id$2293 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2293 [1:0] } = irqs_i[13] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 3'h5 : { \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 [0] };
  assign { \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 [0] } = irqs_i[14] ? (* src = "../rtl/cve2/cve2_controller.sv:306.9-306.26|../rtl/cve2/cve2_controller.sv:305.7-307.10" *) 2'h2 : { irqs_i[15], irqs_i[15] };
  assign \$auto$slang_frontend.cc:694:finish$\load_err_prio$2216  = store_err_q ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:242.9-242.31|../rtl/cve2/cve2_controller.sv:241.16-245.10" *) 1'h0 : load_err_q;
  assign \$auto$slang_frontend.cc:694:finish$\load_err_prio$2219  = ebrk_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:240.9-240.31|../rtl/cve2/cve2_controller.sv:239.16-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\load_err_prio$2216 ;
  assign \$auto$slang_frontend.cc:694:finish$\store_err_prio$2218  = ebrk_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:240.9-240.31|../rtl/cve2/cve2_controller.sv:239.16-245.10" *) 1'h0 : store_err_q;
  assign \$auto$slang_frontend.cc:694:finish$\load_err_prio$2223  = ecall_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:238.9-238.32|../rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\load_err_prio$2219 ;
  assign \$auto$slang_frontend.cc:694:finish$\store_err_prio$2222  = ecall_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:238.9-238.32|../rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\store_err_prio$2218 ;
  assign \$auto$slang_frontend.cc:694:finish$\ebrk_insn_prio$2221  = ecall_insn ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:238.9-238.32|../rtl/cve2/cve2_controller.sv:237.16-245.10" *) 1'h0 : ebrk_insn;
  assign \$auto$slang_frontend.cc:694:finish$\load_err_prio$2228  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:236.9-236.34|../rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\load_err_prio$2223 ;
  assign \$auto$slang_frontend.cc:694:finish$\store_err_prio$2227  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:236.9-236.34|../rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\store_err_prio$2222 ;
  assign \$auto$slang_frontend.cc:694:finish$\ebrk_insn_prio$2226  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:236.9-236.34|../rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\ebrk_insn_prio$2221 ;
  assign \$auto$slang_frontend.cc:694:finish$\ecall_insn_prio$2225  = illegal_insn_q ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:236.9-236.34|../rtl/cve2/cve2_controller.sv:235.16-245.10" *) 1'h0 : ecall_insn;
  assign load_err_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:234.9-234.37|../rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\load_err_prio$2228 ;
  assign store_err_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:234.9-234.37|../rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\store_err_prio$2227 ;
  assign ebrk_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:234.9-234.37|../rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\ebrk_insn_prio$2226 ;
  assign ecall_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:234.9-234.37|../rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\ecall_insn_prio$2225 ;
  assign illegal_insn_prio = instr_fetch_err ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_controller.sv:234.9-234.37|../rtl/cve2/cve2_controller.sv:233.7-245.10" *) 1'h0 : illegal_insn_q;
  assign \$auto$builder.cc:338:Biop$2472 [0] = pc_id_i[0];
  assign \$auto$rtlil.cc:2874:Mux$2474 [0] = pc_id_i[0];
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2373 [0] = \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2373 [2];
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2494 [1:0] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2501 [1:0] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2511 [0] = \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2511 [2];
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2515 [0] = \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2515 [2];
  assign \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2521 [0] = \$auto$slang_frontend.cc:694:finish$\ctrl_fsm_ns$2521 [2];
  assign \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2447 [0] = \$auto$slang_frontend.cc:694:finish$\debug_cause_o$2447 [1];
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2433 [1:0] = 2'h3;
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2434 [1:0] = 2'h3;
  assign \$auto$slang_frontend.cc:694:finish$\exc_cause_o$2527 [6:4] = 3'h0;
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 [2:1] = { \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 [3], \$auto$slang_frontend.cc:694:finish$\mfip_id$2289 [3] };
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2293 [2] = \$auto$slang_frontend.cc:694:finish$\mfip_id$2293 [3];
  assign \$auto$slang_frontend.cc:694:finish$\mfip_id$2297 [2] = \$auto$slang_frontend.cc:694:finish$\mfip_id$2297 [3];
  assign \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2518 [0] = \$auto$slang_frontend.cc:694:finish$\pc_mux_o$2518 [1];
endmodule

(* top =  1  *)
(* src = "../rtl/cve2/cve2_core.sv:15.8" *)
module cve2_core(clk_i, rst_ni, test_en_i, hart_id_i, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, irq_software_i
, irq_timer_i, irq_external_i, irq_fast_i, irq_nm_i, irq_pending_o, debug_req_i, crash_dump_o, fetch_enable_i, core_busy_o);
  wire \$auto$builder.cc:338:Biop$2 ;
  wire \$auto$builder.cc:364:Unop$6 ;
  (* src = "../rtl/cve2/cve2_core.sv:177.16" *)
  wire [31:0] alu_adder_result_ex;
  (* src = "../rtl/cve2/cve2_core.sv:174.16" *)
  wire [31:0] alu_operand_a_ex;
  (* src = "../rtl/cve2/cve2_core.sv:175.16" *)
  wire [31:0] alu_operand_b_ex;
  (* src = "../rtl/cve2/cve2_core.sv:173.16" *)
  wire [6:0] alu_operator_ex;
  (* src = "../rtl/cve2/cve2_core.sv:36.40" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "../rtl/cve2/cve2_core.sv:146.16" *)
  wire branch_decision;
  (* src = "../rtl/cve2/cve2_core.sv:145.16" *)
  wire [31:0] branch_target_ex;
  (* src = "../rtl/cve2/cve2_core.sv:30.40" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_core.sv:106.40" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "../rtl/cve2/cve2_core.sv:67.40" *)
  output [127:0] crash_dump_o;
  wire [127:0] crash_dump_o;
  (* src = "../rtl/cve2/cve2_core.sv:191.16" *)
  wire csr_access;
  (* src = "../rtl/cve2/cve2_core.sv:194.16" *)
  wire [11:0] csr_addr;
  (* src = "../rtl/cve2/cve2_core.sv:226.26" *)
  wire [31:0] csr_depc;
  (* src = "../rtl/cve2/cve2_core.sv:226.16" *)
  wire [31:0] csr_mepc;
  (* src = "../rtl/cve2/cve2_core.sv:225.16" *)
  wire csr_mstatus_mie;
  (* src = "../rtl/cve2/cve2_core.sv:243.16" *)
  wire csr_mstatus_tw;
  (* src = "../rtl/cve2/cve2_core.sv:242.16" *)
  wire [31:0] csr_mtval;
  (* src = "../rtl/cve2/cve2_core.sv:241.16" *)
  wire [31:0] csr_mtvec;
  (* src = "../rtl/cve2/cve2_core.sv:240.16" *)
  wire csr_mtvec_init;
  (* src = "../rtl/cve2/cve2_core.sv:192.16" *)
  wire [1:0] csr_op;
  (* src = "../rtl/cve2/cve2_core.sv:193.16" *)
  wire csr_op_en;
  (* src = "../rtl/cve2/cve2_core.sv:229.17" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135" *)
  wire [135:0] csr_pmp_addr;
  (* src = "../rtl/cve2/cve2_core.sv:230.17" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23" *)
  wire [23:0] csr_pmp_cfg;
  (* src = "../rtl/cve2/cve2_core.sv:231.17" *)
  (* unused_bits = "0 1 2" *)
  wire [2:0] csr_pmp_mseccfg;
  (* src = "../rtl/cve2/cve2_core.sv:195.16" *)
  wire [31:0] csr_rdata;
  (* src = "../rtl/cve2/cve2_core.sv:238.16" *)
  wire csr_restore_dret_id;
  (* src = "../rtl/cve2/cve2_core.sv:237.16" *)
  wire csr_restore_mret_id;
  (* src = "../rtl/cve2/cve2_core.sv:239.16" *)
  wire csr_save_cause;
  (* src = "../rtl/cve2/cve2_core.sv:236.16" *)
  wire csr_save_id;
  (* src = "../rtl/cve2/cve2_core.sv:235.16" *)
  wire csr_save_if;
  (* src = "../rtl/cve2/cve2_core.sv:149.16" *)
  wire ctrl_busy;
  (* src = "../rtl/cve2/cve2_core.sv:52.40" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "../rtl/cve2/cve2_core.sv:51.40" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "../rtl/cve2/cve2_core.sv:55.40" *)
  input data_err_i;
  wire data_err_i;
  (* src = "../rtl/cve2/cve2_core.sv:48.40" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "../rtl/cve2/cve2_core.sv:54.40" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "../rtl/cve2/cve2_core.sv:47.40" *)
  output data_req_o;
  wire data_req_o;
  (* src = "../rtl/cve2/cve2_core.sv:49.40" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "../rtl/cve2/cve2_core.sv:53.40" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "../rtl/cve2/cve2_core.sv:50.40" *)
  output data_we_o;
  wire data_we_o;
  (* src = "../rtl/cve2/cve2_core.sv:249.16" *)
  wire [2:0] debug_cause;
  (* src = "../rtl/cve2/cve2_core.sv:250.16" *)
  wire debug_csr_save;
  (* src = "../rtl/cve2/cve2_core.sv:252.16" *)
  wire debug_ebreakm;
  (* src = "../rtl/cve2/cve2_core.sv:253.16" *)
  wire debug_ebreaku;
  (* src = "../rtl/cve2/cve2_core.sv:248.16" *)
  wire debug_mode;
  (* src = "../rtl/cve2/cve2_core.sv:66.40" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "../rtl/cve2/cve2_core.sv:251.16" *)
  wire debug_single_step;
  (* src = "../rtl/cve2/cve2_core.sv:182.16" *)
  wire div_en_ex;
  (* src = "../rtl/cve2/cve2_core.sv:184.16" *)
  wire div_sel_ex;
  (* src = "../rtl/cve2/cve2_core.sv:220.16" *)
  wire en_wb;
  (* src = "../rtl/cve2/cve2_core.sv:210.16" *)
  wire ex_valid;
  (* src = "../rtl/cve2/cve2_core.sv:135.16" *)
  wire [6:0] exc_cause;
  (* src = "../rtl/cve2/cve2_core.sv:134.16" *)
  wire [1:0] exc_pc_mux_id;
  (* src = "../rtl/cve2/cve2_core.sv:105.40" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "../rtl/cve2/cve2_core.sv:798.16" *)
  (* unused_bits = "0 1" *)
  wire [1:0] \g_no_pmp.unused_priv_lvl_ls ;
  (* src = "../rtl/cve2/cve2_core.sv:35.40" *)
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  (* src = "../rtl/cve2/cve2_core.sv:209.16" *)
  wire id_in_ready;
  (* src = "../rtl/cve2/cve2_core.sv:150.16" *)
  wire if_busy;
  (* src = "../rtl/cve2/cve2_core.sv:123.16" *)
  wire illegal_c_insn_id;
  (* src = "../rtl/cve2/cve2_core.sv:197.16" *)
  wire illegal_csr_insn_id;
  (* src = "../rtl/cve2/cve2_core.sv:273.16" *)
  (* unused_bits = "0" *)
  wire illegal_insn_id;
  (* src = "../rtl/cve2/cve2_core.sv:126.16" *)
  wire [67:0] imd_val_d_ex;
  (* src = "../rtl/cve2/cve2_core.sv:127.16" *)
  wire [67:0] imd_val_q_ex;
  (* src = "../rtl/cve2/cve2_core.sv:128.16" *)
  wire [1:0] imd_val_we_ex;
  (* src = "../rtl/cve2/cve2_core.sv:42.40" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "../rtl/cve2/cve2_core.sv:44.40" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "../rtl/cve2/cve2_core.sv:121.16" *)
  wire instr_fetch_err;
  (* src = "../rtl/cve2/cve2_core.sv:122.16" *)
  wire instr_fetch_err_plus2;
  (* src = "../rtl/cve2/cve2_core.sv:130.16" *)
  wire instr_first_cycle_id;
  (* src = "../rtl/cve2/cve2_core.sv:40.40" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "../rtl/cve2/cve2_core.sv:258.16" *)
  (* unused_bits = "0" *)
  wire instr_id_done;
  (* src = "../rtl/cve2/cve2_core.sv:119.16" *)
  wire instr_is_compressed_id;
  (* src = "../rtl/cve2/cve2_core.sv:114.16" *)
  (* unused_bits = "0" *)
  wire instr_new_id;
  (* src = "../rtl/cve2/cve2_core.sv:120.16" *)
  wire instr_perf_count_id;
  (* src = "../rtl/cve2/cve2_core.sv:116.16" *)
  wire [31:0] instr_rdata_alu_id;
  (* src = "../rtl/cve2/cve2_core.sv:118.16" *)
  wire [15:0] instr_rdata_c_id;
  (* src = "../rtl/cve2/cve2_core.sv:43.40" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "../rtl/cve2/cve2_core.sv:115.16" *)
  wire [31:0] instr_rdata_id;
  (* src = "../rtl/cve2/cve2_core.sv:217.16" *)
  wire instr_req_gated;
  (* src = "../rtl/cve2/cve2_core.sv:39.40" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "../rtl/cve2/cve2_core.sv:41.40" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "../rtl/cve2/cve2_core.sv:131.16" *)
  wire instr_valid_clear;
  (* src = "../rtl/cve2/cve2_core.sv:113.16" *)
  wire instr_valid_id;
  (* src = "../rtl/cve2/cve2_core.sv:60.40" *)
  input irq_external_i;
  wire irq_external_i;
  (* src = "../rtl/cve2/cve2_core.sv:61.40" *)
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  (* src = "../rtl/cve2/cve2_core.sv:62.40" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "../rtl/cve2/cve2_core.sv:63.40" *)
  output irq_pending_o;
  wire irq_pending_o;
  (* src = "../rtl/cve2/cve2_core.sv:58.40" *)
  input irq_software_i;
  wire irq_software_i;
  (* src = "../rtl/cve2/cve2_core.sv:59.40" *)
  input irq_timer_i;
  wire irq_timer_i;
  (* src = "../rtl/cve2/cve2_core.sv:224.16" *)
  wire [18:0] irqs;
  (* src = "../rtl/cve2/cve2_core.sv:141.16" *)
  wire lsu_addr_incr_req;
  (* src = "../rtl/cve2/cve2_core.sv:142.16" *)
  wire [31:0] lsu_addr_last;
  (* src = "../rtl/cve2/cve2_core.sv:151.16" *)
  wire lsu_busy;
  (* src = "../rtl/cve2/cve2_core.sv:137.16" *)
  wire lsu_load_err;
  (* src = "../rtl/cve2/cve2_core.sv:205.16" *)
  wire lsu_req;
  (* src = "../rtl/cve2/cve2_core.sv:213.16" *)
  wire lsu_resp_err;
  (* src = "../rtl/cve2/cve2_core.sv:212.16" *)
  wire lsu_resp_valid;
  (* src = "../rtl/cve2/cve2_core.sv:204.16" *)
  wire lsu_sign_ext;
  (* src = "../rtl/cve2/cve2_core.sv:138.16" *)
  wire lsu_store_err;
  (* src = "../rtl/cve2/cve2_core.sv:203.16" *)
  wire [1:0] lsu_type;
  (* src = "../rtl/cve2/cve2_core.sv:206.16" *)
  wire [31:0] lsu_wdata;
  (* src = "../rtl/cve2/cve2_core.sv:202.16" *)
  wire lsu_we;
  (* src = "../rtl/cve2/cve2_core.sv:181.16" *)
  wire mult_en_ex;
  (* src = "../rtl/cve2/cve2_core.sv:183.16" *)
  wire mult_sel_ex;
  (* src = "../rtl/cve2/cve2_core.sv:187.16" *)
  wire [31:0] multdiv_operand_a_ex;
  (* src = "../rtl/cve2/cve2_core.sv:188.16" *)
  wire [31:0] multdiv_operand_b_ex;
  (* src = "../rtl/cve2/cve2_core.sv:185.16" *)
  wire [1:0] multdiv_operator_ex;
  (* src = "../rtl/cve2/cve2_core.sv:186.16" *)
  wire [1:0] multdiv_signed_mode_ex;
  (* src = "../rtl/cve2/cve2_core.sv:223.16" *)
  wire nmi_mode;
  (* src = "../rtl/cve2/cve2_core.sv:125.16" *)
  wire [31:0] pc_id;
  (* src = "../rtl/cve2/cve2_core.sv:124.16" *)
  wire [31:0] pc_if;
  (* src = "../rtl/cve2/cve2_core.sv:133.16" *)
  wire [2:0] pc_mux_id;
  (* src = "../rtl/cve2/cve2_core.sv:132.16" *)
  wire pc_set;
  (* src = "../rtl/cve2/cve2_core.sv:267.16" *)
  wire perf_branch;
  (* src = "../rtl/cve2/cve2_core.sv:265.16" *)
  wire perf_div_wait;
  (* src = "../rtl/cve2/cve2_core.sv:263.16" *)
  wire perf_dside_wait;
  (* src = "../rtl/cve2/cve2_core.sv:261.16" *)
  wire perf_instr_ret_compressed_wb;
  (* src = "../rtl/cve2/cve2_core.sv:260.16" *)
  wire perf_instr_ret_wb;
  (* src = "../rtl/cve2/cve2_core.sv:262.16" *)
  wire perf_iside_wait;
  (* src = "../rtl/cve2/cve2_core.sv:266.16" *)
  wire perf_jump;
  (* src = "../rtl/cve2/cve2_core.sv:269.16" *)
  wire perf_load;
  (* src = "../rtl/cve2/cve2_core.sv:270.16" *)
  wire perf_store;
  (* src = "../rtl/cve2/cve2_core.sv:268.16" *)
  wire perf_tbranch;
  (* src = "../rtl/cve2/cve2_core.sv:264.16" *)
  wire perf_wfi_wait;
  (* src = "../rtl/cve2/cve2_core.sv:244.16" *)
  wire [1:0] priv_mode_id;
  (* src = "../rtl/cve2/cve2_core.sv:178.16" *)
  wire [31:0] result_ex;
  (* src = "../rtl/cve2/cve2_core.sv:154.16" *)
  wire [4:0] rf_raddr_a;
  (* src = "../rtl/cve2/cve2_core.sv:156.16" *)
  wire [4:0] rf_raddr_b;
  (* src = "../rtl/cve2/cve2_core.sv:155.16" *)
  wire [31:0] rf_rdata_a;
  (* src = "../rtl/cve2/cve2_core.sv:157.16" *)
  wire [31:0] rf_rdata_b;
  (* src = "../rtl/cve2/cve2_core.sv:158.16" *)
  (* unused_bits = "0" *)
  wire rf_ren_a;
  (* src = "../rtl/cve2/cve2_core.sv:159.16" *)
  (* unused_bits = "0" *)
  wire rf_ren_b;
  (* src = "../rtl/cve2/cve2_core.sv:168.16" *)
  wire [4:0] rf_waddr_id;
  (* src = "../rtl/cve2/cve2_core.sv:160.16" *)
  wire [4:0] rf_waddr_wb;
  (* src = "../rtl/cve2/cve2_core.sv:169.16" *)
  wire [31:0] rf_wdata_id;
  (* src = "../rtl/cve2/cve2_core.sv:164.16" *)
  wire [31:0] rf_wdata_lsu;
  (* src = "../rtl/cve2/cve2_core.sv:161.16" *)
  wire [31:0] rf_wdata_wb;
  (* src = "../rtl/cve2/cve2_core.sv:170.16" *)
  wire rf_we_id;
  (* src = "../rtl/cve2/cve2_core.sv:166.16" *)
  wire rf_we_lsu;
  (* src = "../rtl/cve2/cve2_core.sv:165.16" *)
  wire rf_we_wb;
  (* src = "../rtl/cve2/cve2_core.sv:31.40" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_core.sv:33.40" *)
  input test_en_i;
  wire test_en_i;
  (* src = "../rtl/cve2/cve2_core.sv:254.16" *)
  wire trigger_match;
  assign \$auto$builder.cc:338:Biop$2  = ctrl_busy | if_busy;
  assign lsu_resp_err = lsu_load_err | lsu_store_err;
  assign core_busy_o = \$auto$builder.cc:338:Biop$2  | lsu_busy;
  assign perf_iside_wait = id_in_ready & \$auto$builder.cc:364:Unop$6 ;
  assign \$auto$builder.cc:364:Unop$6  = ~ instr_valid_id;
  assign csr_addr = csr_access ? alu_operand_b_ex[11:0] : 12'h000;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/cve2/cve2_core.sv:680.5" *)
  \cve2_cs_registers$cve2_core.cs_registers_i  cs_registers_i (
    .boot_addr_i(boot_addr_i),
    .branch_i(perf_branch),
    .branch_taken_i(perf_tbranch),
    .clk_i(clk_i),
    .csr_access_i(csr_access),
    .csr_addr_i(csr_addr),
    .csr_depc_o(csr_depc),
    .csr_mcause_i(exc_cause),
    .csr_mepc_o(csr_mepc),
    .csr_mstatus_mie_o(csr_mstatus_mie),
    .csr_mstatus_tw_o(csr_mstatus_tw),
    .csr_mtval_i(csr_mtval),
    .csr_mtvec_init_i(csr_mtvec_init),
    .csr_mtvec_o(csr_mtvec),
    .csr_op_en_i(csr_op_en),
    .csr_op_i(csr_op),
    .csr_pmp_addr_o(csr_pmp_addr),
    .csr_pmp_cfg_o(csr_pmp_cfg),
    .csr_pmp_mseccfg_o(csr_pmp_mseccfg),
    .csr_rdata_o(csr_rdata),
    .csr_restore_dret_i(csr_restore_dret_id),
    .csr_restore_mret_i(csr_restore_mret_id),
    .csr_save_cause_i(csr_save_cause),
    .csr_save_id_i(csr_save_id),
    .csr_save_if_i(csr_save_if),
    .csr_wdata_i(alu_operand_a_ex),
    .debug_cause_i(debug_cause),
    .debug_csr_save_i(debug_csr_save),
    .debug_ebreakm_o(debug_ebreakm),
    .debug_ebreaku_o(debug_ebreaku),
    .debug_mode_i(debug_mode),
    .debug_single_step_o(debug_single_step),
    .div_wait_i(perf_div_wait),
    .dside_wait_i(perf_dside_wait),
    .hart_id_i(hart_id_i),
    .illegal_csr_insn_o(illegal_csr_insn_id),
    .instr_ret_compressed_i(perf_instr_ret_compressed_wb),
    .instr_ret_i(perf_instr_ret_wb),
    .irq_external_i(irq_external_i),
    .irq_fast_i(irq_fast_i),
    .irq_pending_o(irq_pending_o),
    .irq_software_i(irq_software_i),
    .irq_timer_i(irq_timer_i),
    .irqs_o(irqs),
    .iside_wait_i(perf_iside_wait),
    .jump_i(perf_jump),
    .mem_load_i(perf_load),
    .mem_store_i(perf_store),
    .nmi_mode_i(nmi_mode),
    .pc_id_i(pc_id),
    .pc_if_i(pc_if),
    .priv_mode_id_o(priv_mode_id),
    .priv_mode_lsu_o(\g_no_pmp.unused_priv_lvl_ls ),
    .rst_ni(rst_ni),
    .trigger_match_o(trigger_match),
    .wfi_wait_i(perf_wfi_wait)
  );
  (* src = "../rtl/cve2/cve2_core.sv:490.5" *)
  \cve2_ex_block$cve2_core.ex_block_i  ex_block_i (
    .alu_adder_result_ex_o(alu_adder_result_ex),
    .alu_instr_first_cycle_i(instr_first_cycle_id),
    .alu_operand_a_i(alu_operand_a_ex),
    .alu_operand_b_i(alu_operand_b_ex),
    .alu_operator_i(alu_operator_ex),
    .branch_decision_o(branch_decision),
    .branch_target_o(branch_target_ex),
    .clk_i(clk_i),
    .div_en_i(div_en_ex),
    .div_sel_i(div_sel_ex),
    .ex_valid_o(ex_valid),
    .imd_val_d_o(imd_val_d_ex),
    .imd_val_q_i(imd_val_q_ex),
    .imd_val_we_o(imd_val_we_ex),
    .mult_en_i(mult_en_ex),
    .mult_sel_i(mult_sel_ex),
    .multdiv_operand_a_i(multdiv_operand_a_ex),
    .multdiv_operand_b_i(multdiv_operand_b_ex),
    .multdiv_operator_i(multdiv_operator_ex),
    .multdiv_signed_mode_i(multdiv_signed_mode_ex),
    .result_ex_o(result_ex),
    .rst_ni(rst_ni)
  );
  (* src = "../rtl/cve2/cve2_core.sv:357.5" *)
  \cve2_id_stage$cve2_core.id_stage_i  id_stage_i (
    .alu_operand_a_ex_o(alu_operand_a_ex),
    .alu_operand_b_ex_o(alu_operand_b_ex),
    .alu_operator_ex_o(alu_operator_ex),
    .branch_decision_i(branch_decision),
    .clk_i(clk_i),
    .csr_access_o(csr_access),
    .csr_mstatus_mie_i(csr_mstatus_mie),
    .csr_mstatus_tw_i(csr_mstatus_tw),
    .csr_mtval_o(csr_mtval),
    .csr_op_en_o(csr_op_en),
    .csr_op_o(csr_op),
    .csr_rdata_i(csr_rdata),
    .csr_restore_dret_id_o(csr_restore_dret_id),
    .csr_restore_mret_id_o(csr_restore_mret_id),
    .csr_save_cause_o(csr_save_cause),
    .csr_save_id_o(csr_save_id),
    .csr_save_if_o(csr_save_if),
    .ctrl_busy_o(ctrl_busy),
    .debug_cause_o(debug_cause),
    .debug_csr_save_o(debug_csr_save),
    .debug_ebreakm_i(debug_ebreakm),
    .debug_ebreaku_i(debug_ebreaku),
    .debug_mode_o(debug_mode),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step),
    .div_en_ex_o(div_en_ex),
    .div_sel_ex_o(div_sel_ex),
    .en_wb_o(en_wb),
    .ex_valid_i(ex_valid),
    .exc_cause_o(exc_cause),
    .exc_pc_mux_o(exc_pc_mux_id),
    .fetch_enable_i(fetch_enable_i),
    .id_in_ready_o(id_in_ready),
    .illegal_c_insn_i(illegal_c_insn_id),
    .illegal_csr_insn_i(illegal_csr_insn_id),
    .illegal_insn_o(illegal_insn_id),
    .imd_val_d_ex_i(imd_val_d_ex),
    .imd_val_q_ex_o(imd_val_q_ex),
    .imd_val_we_ex_i(imd_val_we_ex),
    .instr_fetch_err_i(instr_fetch_err),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2),
    .instr_first_cycle_id_o(instr_first_cycle_id),
    .instr_id_done_o(instr_id_done),
    .instr_is_compressed_i(instr_is_compressed_id),
    .instr_perf_count_id_o(instr_perf_count_id),
    .instr_rdata_alu_i(instr_rdata_alu_id),
    .instr_rdata_c_i(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_id),
    .instr_req_o(instr_req_gated),
    .instr_valid_clear_o(instr_valid_clear),
    .instr_valid_i(instr_valid_id),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_o),
    .irqs_i(irqs),
    .lsu_addr_incr_req_i(lsu_addr_incr_req),
    .lsu_addr_last_i(lsu_addr_last),
    .lsu_load_err_i(lsu_load_err),
    .lsu_req_o(lsu_req),
    .lsu_resp_valid_i(lsu_resp_valid),
    .lsu_sign_ext_o(lsu_sign_ext),
    .lsu_store_err_i(lsu_store_err),
    .lsu_type_o(lsu_type),
    .lsu_wdata_o(lsu_wdata),
    .lsu_we_o(lsu_we),
    .mult_en_ex_o(mult_en_ex),
    .mult_sel_ex_o(mult_sel_ex),
    .multdiv_operand_a_ex_o(multdiv_operand_a_ex),
    .multdiv_operand_b_ex_o(multdiv_operand_b_ex),
    .multdiv_operator_ex_o(multdiv_operator_ex),
    .multdiv_signed_mode_ex_o(multdiv_signed_mode_ex),
    .nmi_mode_o(nmi_mode),
    .pc_id_i(pc_id),
    .pc_mux_o(pc_mux_id),
    .pc_set_o(pc_set),
    .perf_branch_o(perf_branch),
    .perf_div_wait_o(perf_div_wait),
    .perf_dside_wait_o(perf_dside_wait),
    .perf_jump_o(perf_jump),
    .perf_tbranch_o(perf_tbranch),
    .perf_wfi_wait_o(perf_wfi_wait),
    .priv_mode_i(priv_mode_id),
    .result_ex_i(result_ex),
    .rf_raddr_a_o(rf_raddr_a),
    .rf_raddr_b_o(rf_raddr_b),
    .rf_rdata_a_i(rf_rdata_a),
    .rf_rdata_b_i(rf_rdata_b),
    .rf_ren_a_o(rf_ren_a),
    .rf_ren_b_o(rf_ren_b),
    .rf_waddr_id_o(rf_waddr_id),
    .rf_wdata_id_o(rf_wdata_id),
    .rf_we_id_o(rf_we_id),
    .rst_ni(rst_ni),
    .trigger_match_i(trigger_match)
  );
  (* src = "../rtl/cve2/cve2_core.sv:290.5" *)
  \cve2_if_stage$cve2_core.if_stage_i  if_stage_i (
    .boot_addr_i(boot_addr_i),
    .branch_target_ex_i(branch_target_ex),
    .clk_i(clk_i),
    .csr_depc_i(csr_depc),
    .csr_mepc_i(csr_mepc),
    .csr_mtvec_i(csr_mtvec),
    .csr_mtvec_init_o(csr_mtvec_init),
    .exc_cause(exc_cause),
    .exc_pc_mux_i(exc_pc_mux_id),
    .id_in_ready_i(id_in_ready),
    .if_busy_o(if_busy),
    .illegal_c_insn_id_o(illegal_c_insn_id),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_fetch_err_o(instr_fetch_err),
    .instr_fetch_err_plus2_o(instr_fetch_err_plus2),
    .instr_gnt_i(instr_gnt_i),
    .instr_is_compressed_id_o(instr_is_compressed_id),
    .instr_new_id_o(instr_new_id),
    .instr_rdata_alu_id_o(instr_rdata_alu_id),
    .instr_rdata_c_id_o(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_i),
    .instr_rdata_id_o(instr_rdata_id),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .instr_valid_clear_i(instr_valid_clear),
    .instr_valid_id_o(instr_valid_id),
    .pc_id_o(pc_id),
    .pc_if_o(pc_if),
    .pc_mux_i(pc_mux_id),
    .pc_set_i(pc_set),
    .pmp_err_if_i(1'h0),
    .pmp_err_if_plus2_i(1'h0),
    .req_i(instr_req_gated),
    .rst_ni(rst_ni)
  );
  (* src = "../rtl/cve2/cve2_core.sv:532.24" *)
  \cve2_load_store_unit$cve2_core.load_store_unit_i  load_store_unit_i (
    .adder_result_ex_i(alu_adder_result_ex),
    .addr_incr_req_o(lsu_addr_incr_req),
    .addr_last_o(lsu_addr_last),
    .busy_o(lsu_busy),
    .clk_i(clk_i),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_pmp_err_i(1'h0),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .load_err_o(lsu_load_err),
    .lsu_rdata_o(rf_wdata_lsu),
    .lsu_rdata_valid_o(rf_we_lsu),
    .lsu_req_i(lsu_req),
    .lsu_resp_valid_o(lsu_resp_valid),
    .lsu_sign_ext_i(lsu_sign_ext),
    .lsu_type_i(lsu_type),
    .lsu_wdata_i(lsu_wdata),
    .lsu_we_i(lsu_we),
    .perf_load_o(perf_load),
    .perf_store_o(perf_store),
    .rst_ni(rst_ni),
    .store_err_o(lsu_store_err)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/cve2/cve2_core.sv:646.5" *)
  \cve2_register_file_ff$cve2_core.register_file_i  register_file_i (
    .clk_i(clk_i),
    .raddr_a_i(rf_raddr_a),
    .raddr_b_i(rf_raddr_b),
    .rdata_a_o(rf_rdata_a),
    .rdata_b_o(rf_rdata_b),
    .rst_ni(rst_ni),
    .test_en_i(test_en_i),
    .waddr_a_i(rf_waddr_wb),
    .wdata_a_i(rf_wdata_wb),
    .we_a_i(rf_we_wb)
  );
  (* src = "../rtl/cve2/cve2_core.sv:578.5" *)
  \cve2_wb$cve2_core.wb_i  wb_i (
    .clk_i(clk_i),
    .en_wb_i(en_wb),
    .instr_is_compressed_id_i(instr_is_compressed_id),
    .instr_perf_count_id_i(instr_perf_count_id),
    .lsu_resp_err_i(lsu_resp_err),
    .lsu_resp_valid_i(lsu_resp_valid),
    .perf_instr_ret_compressed_wb_o(perf_instr_ret_compressed_wb),
    .perf_instr_ret_wb_o(perf_instr_ret_wb),
    .rf_waddr_id_i(rf_waddr_id),
    .rf_waddr_wb_o(rf_waddr_wb),
    .rf_wdata_id_i(rf_wdata_id),
    .rf_wdata_lsu_i(rf_wdata_lsu),
    .rf_wdata_wb_o(rf_wdata_wb),
    .rf_we_id_i(rf_we_id),
    .rf_we_lsu_i(rf_we_lsu),
    .rf_we_wb_o(rf_we_wb),
    .rst_ni(rst_ni)
  );
  assign crash_dump_o = { pc_id, pc_if, lsu_addr_last, csr_mepc };
endmodule

(* src = "../rtl/cve2/cve2_counter.sv:1.8" *)
module \cve2_counter$cve2_core.cs_registers_i.mcycle_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10790 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10792 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10799 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10794 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10801 ;
  (* src = "../rtl/cve2/cve2_counter.sv:8.23" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_counter.sv:23.28" *)
  wire [63:0] counter_d;
  (* src = "../rtl/cve2/cve2_counter.sv:11.23" *)
  input counter_inc_i;
  wire counter_inc_i;
  (* src = "../rtl/cve2/cve2_counter.sv:21.28" *)
  wire [63:0] counter_load;
  (* src = "../rtl/cve2/cve2_counter.sv:20.28" *)
  wire [63:0] counter_upd;
  (* src = "../rtl/cve2/cve2_counter.sv:14.23" *)
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  (* src = "../rtl/cve2/cve2_counter.sv:15.23" *)
  output [63:0] counter_val_o;
  reg [63:0] counter_val_o;
  (* src = "../rtl/cve2/cve2_counter.sv:16.23" *)
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  (* src = "../rtl/cve2/cve2_counter.sv:13.23" *)
  input counter_we_i;
  wire counter_we_i;
  (* src = "../rtl/cve2/cve2_counter.sv:12.23" *)
  input counterh_we_i;
  wire counterh_we_i;
  (* src = "../rtl/cve2/cve2_counter.sv:9.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_counter.sv:22.28" *)
  wire we;
  assign counter_upd = counter_val_o + 1'h1;
  assign we = counter_we_i | counterh_we_i;
  (* src = "../rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10794 ) counter_val_o[63:32] <= counter_d[63:32];
  (* src = "../rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10801 ) counter_val_o[31:0] <= counter_d[31:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10790  = | { we, counter_inc_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10792  = { we, counterh_we_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10799  = { we, counterh_we_i } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10794  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10792 , \$auto$opt_dff.cc:194:make_patterns_logic$10790  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10801  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10799 , \$auto$opt_dff.cc:194:make_patterns_logic$10790  };
  assign counter_d = we ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_counter.sv:41.7-41.50|../rtl/cve2/cve2_counter.sv:40.5-46.8" *) counter_load : counter_upd;
  assign counter_load = counterh_we_i ? (* src = "../rtl/cve2/cve2_counter.sv:34.24-37.8|../rtl/cve2/cve2_counter.sv:34.5-37.8" *) { counter_val_i, 32'hxxxxxxxx } : { 32'hxxxxxxxx, counter_val_i };
  assign counter_val_upd_o = 64'h0000000000000000;
endmodule

(* src = "../rtl/cve2/cve2_counter.sv:1.8" *)
module \cve2_counter$cve2_core.cs_registers_i.minstret_counter_i (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10804 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10806 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10813 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10808 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10815 ;
  (* src = "../rtl/cve2/cve2_counter.sv:8.23" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_counter.sv:23.28" *)
  wire [63:0] counter_d;
  (* src = "../rtl/cve2/cve2_counter.sv:11.23" *)
  input counter_inc_i;
  wire counter_inc_i;
  (* src = "../rtl/cve2/cve2_counter.sv:21.28" *)
  wire [63:0] counter_load;
  (* src = "../rtl/cve2/cve2_counter.sv:14.23" *)
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  (* src = "../rtl/cve2/cve2_counter.sv:15.23" *)
  output [63:0] counter_val_o;
  reg [63:0] counter_val_o;
  (* src = "../rtl/cve2/cve2_counter.sv:16.23" *)
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  (* src = "../rtl/cve2/cve2_counter.sv:13.23" *)
  input counter_we_i;
  wire counter_we_i;
  (* src = "../rtl/cve2/cve2_counter.sv:12.23" *)
  input counterh_we_i;
  wire counterh_we_i;
  (* src = "../rtl/cve2/cve2_counter.sv:9.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_counter.sv:22.28" *)
  wire we;
  assign counter_val_upd_o = counter_val_o + 1'h1;
  assign we = counter_we_i | counterh_we_i;
  (* src = "../rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[63:32] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10808 ) counter_val_o[63:32] <= counter_d[63:32];
  (* src = "../rtl/cve2/cve2_counter.sv:63.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_val_o[31:0] <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10815 ) counter_val_o[31:0] <= counter_d[31:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10804  = | { we, counter_inc_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10806  = { we, counterh_we_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10813  = { we, counterh_we_i } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10808  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10804 , \$auto$opt_dff.cc:194:make_patterns_logic$10806  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10815  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10804 , \$auto$opt_dff.cc:194:make_patterns_logic$10813  };
  assign counter_d = we ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_counter.sv:41.7-41.50|../rtl/cve2/cve2_counter.sv:40.5-46.8" *) counter_load : counter_val_upd_o;
  assign counter_load = counterh_we_i ? (* src = "../rtl/cve2/cve2_counter.sv:34.24-37.8|../rtl/cve2/cve2_counter.sv:34.5-37.8" *) { counter_val_i, 32'hxxxxxxxx } : { 32'hxxxxxxxx, counter_val_i };
endmodule

(* src = "../rtl/cve2/cve2_cs_registers.sv:15.8" *)
module \cve2_cs_registers$cve2_core.cs_registers_i (clk_i, rst_ni, hart_id_i, boot_addr_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_pending_o, pc_id_i, priv_mode_id_o, priv_mode_lsu_o, csr_mstatus_tw_o, csr_mtvec_o, csr_mtvec_init_i, csr_access_i, csr_addr_i, csr_wdata_i, csr_op_i, csr_op_en_i, csr_rdata_o
, nmi_mode_i, irqs_o, csr_mstatus_mie_o, csr_mepc_o, csr_pmp_cfg_o, csr_pmp_addr_o, csr_pmp_mseccfg_o, debug_mode_i, debug_cause_i, debug_csr_save_i, csr_depc_o, debug_single_step_o, debug_ebreakm_o, debug_ebreaku_o, trigger_match_o, pc_if_i, csr_save_if_i, csr_save_id_i, csr_restore_mret_i, csr_restore_dret_i, csr_save_cause_i
, csr_mcause_i, csr_mtval_i, illegal_csr_insn_o, instr_ret_i, instr_ret_compressed_i, iside_wait_i, jump_i, branch_i, branch_taken_i, mem_load_i, mem_store_i, dside_wait_i, wfi_wait_i, div_wait_i);
  wire [1023:0] \$auto$bmuxmap.cc:84:execute$12584 ;
  wire [511:0] \$auto$bmuxmap.cc:84:execute$12601 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$12610 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$12615 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$12618 ;
  wire \$auto$builder.cc:338:Biop$1177 ;
  wire \$auto$builder.cc:338:Biop$1181 ;
  wire \$auto$builder.cc:338:Biop$1183 ;
  wire \$auto$builder.cc:338:Biop$1285 ;
  wire \$auto$builder.cc:338:Biop$1287 ;
  wire \$auto$builder.cc:338:Biop$1289 ;
  wire \$auto$builder.cc:338:Biop$1294 ;
  wire \$auto$builder.cc:338:Biop$1296 ;
  wire \$auto$builder.cc:338:Biop$1298 ;
  wire \$auto$builder.cc:338:Biop$1393 ;
  wire [31:0] \$auto$builder.cc:338:Biop$1431 ;
  wire [31:0] \$auto$builder.cc:338:Biop$1435 ;
  wire \$auto$builder.cc:338:Biop$1446 ;
  wire \$auto$builder.cc:338:Biop$1565 ;
  wire \$auto$builder.cc:338:Biop$1569 ;
  wire \$auto$builder.cc:364:Unop$1192 ;
  wire [31:0] \$auto$builder.cc:364:Unop$1433 ;
  wire \$auto$builder.cc:364:Unop$1448 ;
  wire \$auto$builder.cc:364:Unop$1567 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10818 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$10748 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10605 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10607 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10609 ;
  wire \$auto$rtlil.cc:2746:ReduceBool$1272 ;
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$auto$rtlil.cc:2786:And$10581 ;
  wire \$auto$rtlil.cc:2793:Eq$1232 ;
  wire \$auto$rtlil.cc:2793:Eq$1234 ;
  wire \$auto$rtlil.cc:2793:Eq$1236 ;
  wire \$auto$rtlil.cc:2793:Eq$1238 ;
  wire \$auto$rtlil.cc:2793:Eq$1240 ;
  wire \$auto$rtlil.cc:2793:Eq$1242 ;
  wire \$auto$rtlil.cc:2793:Eq$1244 ;
  wire \$auto$rtlil.cc:2793:Eq$1246 ;
  wire \$auto$rtlil.cc:2793:Eq$1248 ;
  wire \$auto$rtlil.cc:2793:Eq$1250 ;
  wire \$auto$rtlil.cc:2793:Eq$1252 ;
  wire \$auto$rtlil.cc:2793:Eq$1254 ;
  wire \$auto$rtlil.cc:2793:Eq$1256 ;
  wire \$auto$rtlil.cc:2793:Eq$1258 ;
  wire \$auto$rtlil.cc:2793:Eq$1260 ;
  wire \$auto$rtlil.cc:2793:Eq$1262 ;
  wire \$auto$rtlil.cc:2793:Eq$1264 ;
  wire \$auto$rtlil.cc:2793:Eq$1266 ;
  wire \$auto$rtlil.cc:2793:Eq$1268 ;
  wire \$auto$rtlil.cc:2793:Eq$1270 ;
  wire \$auto$rtlil.cc:2793:Eq$1438 ;
  wire \$auto$rtlil.cc:2793:Eq$1440 ;
  wire \$auto$rtlil.cc:2793:Eq$1442 ;
  wire [31:0] \$auto$rtlil.cc:2874:Mux$1206 ;
  wire [63:0] \$auto$rtlil.cc:2874:Mux$1216 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dcsr_d$1338 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dcsr_d$1354 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:560.11-562.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\dcsr_d[0]$1301 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\dcsr_d[0]$1386 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\dcsr_d[6]$1387 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\dcsr_en$1339 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\dcsr_en$1355 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\dcsr_en$1388 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\depc_d$1389 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\depc_en$1340 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\depc_en$1356 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\depc_en$1390 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\dscratch0_en$1341 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\dscratch1_en$1342 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:626.9-634.16" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\exception_pc$1362 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_csr$1230 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\mcause_d$1373 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\mcause_d$1382 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\mcause_d$1402 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\mcause_en$1335 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\mcause_en$1351 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mcause_en$1374 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mcause_en$1383 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mcause_en$1403 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\mcountinhibit_we$1343 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\mepc_d$1371 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\mepc_d$1380 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\mepc_d$1400 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\mepc_en$1334 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\mepc_en$1350 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mepc_en$1372 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mepc_en$1381 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mepc_en$1401 ;
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\mhpmcounter_we$1344 ;
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\mhpmcounterh_we$1345 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\mie_en$1332 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\mscratch_en$1333 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mstack_en$1391 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\mstatus_d$1330 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\mstatus_d$1346 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:676.9-678.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mstatus_d[1]$1396 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:534.11-536.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1292 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1369 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1378 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1399 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\mstatus_en$1331 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\mstatus_en$1347 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mstatus_en$1370 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mstatus_en$1379 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\mtval_d$1375 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\mtval_d$1384 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\mtval_en$1336 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\mtval_en$1352 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mtval_en$1376 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mtval_en$1385 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\mtvec_en$1337 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][0][0]$b$12493 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][1][1]$b$12499 ;
  wire [1:0] \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][2][3]$b$12511 ;
  wire \$procmux$8596_CMP ;
  wire [30:0] \$procmux$9156_CMP ;
  wire \$procmux$9156_CTRL ;
  wire [30:0] \$procmux$9162_CMP ;
  wire \$procmux$9162_CTRL ;
  wire \$procmux$9233_CMP ;
  wire [28:0] \$procmux$9534_CMP ;
  wire \$procmux$9534_CTRL ;
  wire \$procmux$9542_CMP ;
  wire \$procmux$9549_CMP ;
  wire \$procmux$9551_CMP ;
  wire \$procmux$9552_CMP ;
  wire \$procmux$9553_CMP ;
  wire \$procmux$9556_CMP ;
  wire \$procmux$9593_CMP ;
  wire [1:0] \$procmux$9596_CMP ;
  wire \$procmux$9597_CMP ;
  wire \$procmux$9599_CMP ;
  wire \$procmux$9601_CMP ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:43.32" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:98.32" *)
  input branch_i;
  wire branch_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:99.32" *)
  input branch_taken_i;
  wire branch_taken_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:29.32" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:46.32" *)
  input csr_access_i;
  wire csr_access_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:47.32" *)
  input [11:0] csr_addr_i;
  wire [11:0] csr_addr_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:73.32" *)
  output [31:0] csr_depc_o;
  wire [31:0] csr_depc_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:88.32" *)
  input [6:0] csr_mcause_i;
  wire [6:0] csr_mcause_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:62.32" *)
  output [31:0] csr_mepc_o;
  wire [31:0] csr_mepc_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:61.32" *)
  output csr_mstatus_mie_o;
  wire csr_mstatus_mie_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:38.32" *)
  output csr_mstatus_tw_o;
  wire csr_mstatus_tw_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:89.32" *)
  input [31:0] csr_mtval_i;
  wire [31:0] csr_mtval_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:42.32" *)
  input csr_mtvec_init_i;
  wire csr_mtvec_init_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:41.32" *)
  output [31:0] csr_mtvec_o;
  wire [31:0] csr_mtvec_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:50.32" *)
  input csr_op_en_i;
  wire csr_op_en_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:49.32" *)
  input [1:0] csr_op_i;
  wire [1:0] csr_op_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:66.34" *)
  output [135:0] csr_pmp_addr_o;
  wire [135:0] csr_pmp_addr_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:65.34" *)
  output [23:0] csr_pmp_cfg_o;
  wire [23:0] csr_pmp_cfg_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:67.34" *)
  output [2:0] csr_pmp_mseccfg_o;
  wire [2:0] csr_pmp_mseccfg_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:51.32" *)
  output [31:0] csr_rdata_o;
  wire [31:0] csr_rdata_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:86.32" *)
  input csr_restore_dret_i;
  wire csr_restore_dret_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:85.32" *)
  input csr_restore_mret_i;
  wire csr_restore_mret_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:87.32" *)
  input csr_save_cause_i;
  wire csr_save_cause_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:84.32" *)
  input csr_save_id_i;
  wire csr_save_id_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:83.32" *)
  input csr_save_if_i;
  wire csr_save_if_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:48.32" *)
  input [31:0] csr_wdata_i;
  wire [31:0] csr_wdata_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:227.16" *)
  wire [31:0] csr_wdata_int;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:229.16" *)
  wire csr_we_int;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:230.16" *)
  wire csr_wr;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:180.24" *)
  wire [31:0] dcsr_d;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:181.16" *)
  wire dcsr_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:180.16" *)
  wire [31:0] dcsr_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:71.32" *)
  input [2:0] debug_cause_i;
  wire [2:0] debug_cause_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:72.32" *)
  input debug_csr_save_i;
  wire debug_csr_save_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:75.32" *)
  output debug_ebreakm_o;
  wire debug_ebreakm_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:76.32" *)
  output debug_ebreaku_o;
  wire debug_ebreaku_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:70.32" *)
  input debug_mode_i;
  wire debug_mode_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:74.32" *)
  output debug_single_step_o;
  wire debug_single_step_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:182.24" *)
  wire [31:0] depc_d;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:183.16" *)
  wire depc_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:104.32" *)
  input div_wait_i;
  wire div_wait_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:186.16" *)
  wire dscratch0_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:184.16" *)
  wire [31:0] dscratch0_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:186.30" *)
  wire dscratch1_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:185.16" *)
  wire [31:0] dscratch1_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:102.32" *)
  input dside_wait_i;
  wire dside_wait_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:33.32" *)
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:233.16" *)
  wire illegal_csr;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:90.32" *)
  output illegal_csr_insn_o;
  wire illegal_csr_insn_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:234.16" *)
  wire illegal_csr_priv;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:235.16" *)
  wire illegal_csr_write;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:95.32" *)
  input instr_ret_compressed_i;
  wire instr_ret_compressed_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:94.32" *)
  input instr_ret_i;
  wire instr_ret_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:56.32" *)
  input irq_external_i;
  wire irq_external_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:57.32" *)
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:59.32" *)
  output irq_pending_o;
  wire irq_pending_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:54.32" *)
  input irq_software_i;
  wire irq_software_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:55.32" *)
  input irq_timer_i;
  wire irq_timer_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:60.32" *)
  output [18:0] irqs_o;
  wire [18:0] irqs_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:96.32" *)
  input iside_wait_i;
  wire iside_wait_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:97.32" *)
  input jump_i;
  wire jump_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:173.26" *)
  wire [6:0] mcause_d;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:174.16" *)
  wire mcause_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:173.16" *)
  wire [6:0] mcause_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:201.32" *)
  wire [31:0] mcountinhibit;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:204.32" *)
  wire mcountinhibit_we;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:100.32" *)
  input mem_load_i;
  wire mem_load_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:101.32" *)
  input mem_store_i;
  wire mem_store_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:171.24" *)
  wire [31:0] mepc_d;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:172.16" *)
  wire mepc_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:209.16" *)
  wire [2047:0] mhpmcounter;
  (* unused_bits = "1" *)
  wire [2:0] mhpmcounter_we;
  (* unused_bits = "1" *)
  wire [2:0] mhpmcounterh_we;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:168.16" *)
  wire mie_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:167.16" *)
  wire [18:0] mie_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:219.16" *)
  wire [63:0] minstret_raw;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:170.16" *)
  wire mscratch_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:169.16" *)
  wire [31:0] mscratch_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:193.16" *)
  wire [6:0] mstack_cause_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:191.16" *)
  wire mstack_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:192.16" *)
  wire [31:0] mstack_epc_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:190.16" *)
  wire [2:0] mstack_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:165.27" *)
  wire [5:0] mstatus_d;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:166.16" *)
  wire mstatus_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:165.16" *)
  wire [5:0] mstatus_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:175.25" *)
  wire [31:0] mtval_d;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:176.16" *)
  wire mtval_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:175.16" *)
  wire [31:0] mtval_q;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:177.25" *)
  wire [31:0] mtvec_d;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:178.16" *)
  wire mtvec_en;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:58.32" *)
  input nmi_mode_i;
  wire nmi_mode_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:80.32" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:79.32" *)
  input [31:0] pc_if_i;
  wire [31:0] pc_if_i;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:164.28" *)
  wire [1:0] priv_lvl_d;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:36.32" *)
  output [1:0] priv_mode_id_o;
  reg [1:0] priv_mode_id_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:37.32" *)
  output [1:0] priv_mode_lsu_o;
  wire [1:0] priv_mode_lsu_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:30.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:77.32" *)
  output trigger_match_o;
  wire trigger_match_o;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:103.32" *)
  input wfi_wait_i;
  wire wfi_wait_i;
  assign \$auto$bmuxmap.cc:84:execute$12584 [63:0] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [127:64] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [191:128] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [255:192] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [319:256] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [383:320] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [447:384] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [511:448] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [575:512] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [639:576] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [703:640] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [767:704] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [831:768] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [895:832] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? 64'h0000000000000000 : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [959:896] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? minstret_raw : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12584 [1023:960] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] ? mhpmcounter[2047:1984] : 64'h0000000000000000;
  assign \$auto$bmuxmap.cc:84:execute$12601 [63:0] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? \$auto$bmuxmap.cc:84:execute$12584 [127:64] : \$auto$bmuxmap.cc:84:execute$12584 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$12601 [127:64] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? \$auto$bmuxmap.cc:84:execute$12584 [255:192] : \$auto$bmuxmap.cc:84:execute$12584 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$12601 [191:128] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? \$auto$bmuxmap.cc:84:execute$12584 [383:320] : \$auto$bmuxmap.cc:84:execute$12584 [319:256];
  assign \$auto$bmuxmap.cc:84:execute$12601 [255:192] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? \$auto$bmuxmap.cc:84:execute$12584 [511:448] : \$auto$bmuxmap.cc:84:execute$12584 [447:384];
  assign \$auto$bmuxmap.cc:84:execute$12601 [319:256] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? \$auto$bmuxmap.cc:84:execute$12584 [639:576] : \$auto$bmuxmap.cc:84:execute$12584 [575:512];
  assign \$auto$bmuxmap.cc:84:execute$12601 [383:320] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? \$auto$bmuxmap.cc:84:execute$12584 [767:704] : \$auto$bmuxmap.cc:84:execute$12584 [703:640];
  assign \$auto$bmuxmap.cc:84:execute$12601 [447:384] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? \$auto$bmuxmap.cc:84:execute$12584 [895:832] : \$auto$bmuxmap.cc:84:execute$12584 [831:768];
  assign \$auto$bmuxmap.cc:84:execute$12601 [511:448] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? \$auto$bmuxmap.cc:84:execute$12584 [1023:960] : \$auto$bmuxmap.cc:84:execute$12584 [959:896];
  assign \$auto$bmuxmap.cc:84:execute$12610 [63:0] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [2] ? \$auto$bmuxmap.cc:84:execute$12601 [127:64] : \$auto$bmuxmap.cc:84:execute$12601 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$12610 [127:64] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [2] ? \$auto$bmuxmap.cc:84:execute$12601 [255:192] : \$auto$bmuxmap.cc:84:execute$12601 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$12610 [191:128] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [2] ? \$auto$bmuxmap.cc:84:execute$12601 [383:320] : \$auto$bmuxmap.cc:84:execute$12601 [319:256];
  assign \$auto$bmuxmap.cc:84:execute$12610 [255:192] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [2] ? \$auto$bmuxmap.cc:84:execute$12601 [511:448] : \$auto$bmuxmap.cc:84:execute$12601 [447:384];
  assign \$auto$bmuxmap.cc:84:execute$12615 [63:0] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [3] ? \$auto$bmuxmap.cc:84:execute$12610 [127:64] : \$auto$bmuxmap.cc:84:execute$12610 [63:0];
  assign \$auto$bmuxmap.cc:84:execute$12615 [127:64] = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [3] ? \$auto$bmuxmap.cc:84:execute$12610 [255:192] : \$auto$bmuxmap.cc:84:execute$12610 [191:128];
  assign \$auto$bmuxmap.cc:84:execute$12618  = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [4] ? \$auto$bmuxmap.cc:84:execute$12615 [127:64] : \$auto$bmuxmap.cc:84:execute$12615 [63:0];
  assign \$auto$rtlil.cc:2746:ReduceBool$1272  = | { \$auto$rtlil.cc:2793:Eq$1270 , \$auto$rtlil.cc:2793:Eq$1268 , \$auto$rtlil.cc:2793:Eq$1266 , \$auto$rtlil.cc:2793:Eq$1264 , \$auto$rtlil.cc:2793:Eq$1262 , \$auto$rtlil.cc:2793:Eq$1260 , \$auto$rtlil.cc:2793:Eq$1258 , \$auto$rtlil.cc:2793:Eq$1256 , \$auto$rtlil.cc:2793:Eq$1254 , \$auto$rtlil.cc:2793:Eq$1252 , \$auto$rtlil.cc:2793:Eq$1250 , \$auto$rtlil.cc:2793:Eq$1248 , \$auto$rtlil.cc:2793:Eq$1246 , \$auto$rtlil.cc:2793:Eq$1244 , \$auto$rtlil.cc:2793:Eq$1242 , \$auto$rtlil.cc:2793:Eq$1240 , \$auto$rtlil.cc:2793:Eq$1238 , \$auto$rtlil.cc:2793:Eq$1236 , \$auto$rtlil.cc:2793:Eq$1234 , \$auto$rtlil.cc:2793:Eq$1232  };
  assign csr_wr = | { \$auto$rtlil.cc:2793:Eq$1442 , \$auto$rtlil.cc:2793:Eq$1440 , \$auto$rtlil.cc:2793:Eq$1438  };
  assign illegal_csr_priv = csr_addr_i[9:8] > priv_mode_id_o;
  assign \$auto$builder.cc:338:Biop$1177  = csr_addr_i[11:10] == 2'h3;
  assign illegal_csr_write = \$auto$builder.cc:338:Biop$1177  && csr_wr;
  assign \$auto$builder.cc:338:Biop$1181  = illegal_csr | illegal_csr_write;
  assign \$auto$builder.cc:338:Biop$1183  = \$auto$builder.cc:338:Biop$1181  | illegal_csr_priv;
  assign illegal_csr_insn_o = csr_access_i & \$auto$builder.cc:338:Biop$1183 ;
  assign \$auto$builder.cc:338:Biop$1285  = csr_wdata_int[12:11] != 2'h3;
  assign \$auto$builder.cc:338:Biop$1287  = | csr_wdata_int[12:11];
  assign \$auto$builder.cc:338:Biop$1289  = \$auto$builder.cc:338:Biop$1285  && \$auto$builder.cc:338:Biop$1287 ;
  assign \$auto$builder.cc:338:Biop$1294  = csr_wdata_int[1:0] != 2'h3;
  assign \$auto$builder.cc:338:Biop$1296  = | csr_wdata_int[1:0];
  assign \$auto$builder.cc:338:Biop$1298  = \$auto$builder.cc:338:Biop$1294  && \$auto$builder.cc:338:Biop$1296 ;
  assign \$auto$builder.cc:338:Biop$1393  = mstatus_q[3:2] != 2'h3;
  assign \$auto$builder.cc:338:Biop$1431  = csr_wdata_i | csr_rdata_o;
  assign \$auto$builder.cc:338:Biop$1435  = \$auto$builder.cc:364:Unop$1433  & csr_rdata_o;
  assign \$auto$builder.cc:338:Biop$1446  = csr_wr & csr_op_en_i;
  assign csr_we_int = \$auto$builder.cc:338:Biop$1446  & \$auto$builder.cc:364:Unop$1448 ;
  assign irqs_o = { irq_software_i, irq_timer_i, irq_external_i, irq_fast_i } & mie_q;
  assign \$auto$builder.cc:338:Biop$1569  = instr_ret_i & \$auto$builder.cc:364:Unop$1567 ;
  assign \$auto$builder.cc:364:Unop$1192  = ~ debug_mode_i;
  assign \$auto$builder.cc:364:Unop$1433  = ~ csr_wdata_i;
  assign \$auto$builder.cc:364:Unop$1448  = ~ illegal_csr_insn_o;
  assign irq_pending_o = | irqs_o;
  assign \$auto$builder.cc:338:Biop$1565  = ~ mcountinhibit[0];
  assign \$auto$builder.cc:364:Unop$1567  = ~ mcountinhibit[2];
  assign \$auto$rtlil.cc:2793:Eq$1232  = csr_addr_i == 10'h3a0;
  assign \$auto$rtlil.cc:2793:Eq$1234  = csr_addr_i == 10'h3a1;
  assign \$auto$rtlil.cc:2793:Eq$1236  = csr_addr_i == 10'h3a2;
  assign \$auto$rtlil.cc:2793:Eq$1238  = csr_addr_i == 10'h3a3;
  assign \$auto$rtlil.cc:2793:Eq$1240  = csr_addr_i == 10'h3b0;
  assign \$auto$rtlil.cc:2793:Eq$1242  = csr_addr_i == 10'h3b1;
  assign \$auto$rtlil.cc:2793:Eq$1244  = csr_addr_i == 10'h3b2;
  assign \$auto$rtlil.cc:2793:Eq$1246  = csr_addr_i == 10'h3b3;
  assign \$auto$rtlil.cc:2793:Eq$1248  = csr_addr_i == 10'h3b4;
  assign \$auto$rtlil.cc:2793:Eq$1250  = csr_addr_i == 10'h3b5;
  assign \$auto$rtlil.cc:2793:Eq$1252  = csr_addr_i == 10'h3b6;
  assign \$auto$rtlil.cc:2793:Eq$1254  = csr_addr_i == 10'h3b7;
  assign \$auto$rtlil.cc:2793:Eq$1256  = csr_addr_i == 10'h3b8;
  assign \$auto$rtlil.cc:2793:Eq$1258  = csr_addr_i == 10'h3b9;
  assign \$auto$rtlil.cc:2793:Eq$1260  = csr_addr_i == 10'h3ba;
  assign \$auto$rtlil.cc:2793:Eq$1262  = csr_addr_i == 10'h3bb;
  assign \$auto$rtlil.cc:2793:Eq$1264  = csr_addr_i == 10'h3bc;
  assign \$auto$rtlil.cc:2793:Eq$1266  = csr_addr_i == 10'h3bd;
  assign \$auto$rtlil.cc:2793:Eq$1268  = csr_addr_i == 10'h3be;
  assign \$auto$rtlil.cc:2793:Eq$1270  = csr_addr_i == 10'h3bf;
  assign \$auto$rtlil.cc:2793:Eq$1438  = csr_op_i == 1'h1;
  assign \$auto$rtlil.cc:2793:Eq$1440  = csr_op_i == 2'h2;
  assign \$auto$rtlil.cc:2793:Eq$1442  = csr_op_i == 2'h3;
  assign \$auto$rtlil.cc:2786:And$10581 [0] = csr_addr_i[4:0] == 5'h00;
  assign \$auto$rtlil.cc:2786:And$10581 [1] = csr_addr_i[4:0] == 5'h01;
  assign \$auto$rtlil.cc:2786:And$10581 [2] = csr_addr_i[4:0] == 5'h02;
  assign \$auto$rtlil.cc:2786:And$10581 [3] = csr_addr_i[4:0] == 5'h03;
  assign \$auto$rtlil.cc:2786:And$10581 [4] = csr_addr_i[4:0] == 5'h04;
  assign \$auto$rtlil.cc:2786:And$10581 [5] = csr_addr_i[4:0] == 5'h05;
  assign \$auto$rtlil.cc:2786:And$10581 [6] = csr_addr_i[4:0] == 5'h06;
  assign \$auto$rtlil.cc:2786:And$10581 [7] = csr_addr_i[4:0] == 5'h07;
  assign \$auto$rtlil.cc:2786:And$10581 [8] = csr_addr_i[4:0] == 5'h08;
  assign \$auto$rtlil.cc:2786:And$10581 [9] = csr_addr_i[4:0] == 5'h09;
  assign \$auto$rtlil.cc:2786:And$10581 [10] = csr_addr_i[4:0] == 5'h0a;
  assign \$auto$rtlil.cc:2786:And$10581 [11] = csr_addr_i[4:0] == 5'h0b;
  assign \$auto$rtlil.cc:2786:And$10581 [12] = csr_addr_i[4:0] == 5'h0c;
  assign \$auto$rtlil.cc:2786:And$10581 [13] = csr_addr_i[4:0] == 5'h0d;
  assign \$auto$rtlil.cc:2786:And$10581 [14] = csr_addr_i[4:0] == 5'h0e;
  assign \$auto$rtlil.cc:2786:And$10581 [15] = csr_addr_i[4:0] == 5'h0f;
  assign \$auto$rtlil.cc:2786:And$10581 [16] = csr_addr_i[4:0] == 5'h10;
  assign \$auto$rtlil.cc:2786:And$10581 [17] = csr_addr_i[4:0] == 5'h11;
  assign \$auto$rtlil.cc:2786:And$10581 [18] = csr_addr_i[4:0] == 5'h12;
  assign \$auto$rtlil.cc:2786:And$10581 [19] = csr_addr_i[4:0] == 5'h13;
  assign \$auto$rtlil.cc:2786:And$10581 [20] = csr_addr_i[4:0] == 5'h14;
  assign \$auto$rtlil.cc:2786:And$10581 [21] = csr_addr_i[4:0] == 5'h15;
  assign \$auto$rtlil.cc:2786:And$10581 [22] = csr_addr_i[4:0] == 5'h16;
  assign \$auto$rtlil.cc:2786:And$10581 [23] = csr_addr_i[4:0] == 5'h17;
  assign \$auto$rtlil.cc:2786:And$10581 [24] = csr_addr_i[4:0] == 5'h18;
  assign \$auto$rtlil.cc:2786:And$10581 [25] = csr_addr_i[4:0] == 5'h19;
  assign \$auto$rtlil.cc:2786:And$10581 [26] = csr_addr_i[4:0] == 5'h1a;
  assign \$auto$rtlil.cc:2786:And$10581 [27] = csr_addr_i[4:0] == 5'h1b;
  assign \$auto$rtlil.cc:2786:And$10581 [28] = csr_addr_i[4:0] == 5'h1c;
  assign \$auto$rtlil.cc:2786:And$10581 [29] = csr_addr_i[4:0] == 5'h1d;
  assign \$auto$rtlil.cc:2786:And$10581 [30] = csr_addr_i[4:0] == 5'h1e;
  assign \$auto$rtlil.cc:2786:And$10581 [31] = csr_addr_i[4:0] == 5'h1f;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:704.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) priv_mode_id_o <= 2'h3;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$10818 ) priv_mode_id_o <= priv_lvl_d;
  reg [1:0] \$auto$ff.cc:266:slice$10821 ;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:1303.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10821  <= 2'h0;
    else if (mcountinhibit_we) \$auto$ff.cc:266:slice$10821  <= { csr_wdata_int[2], csr_wdata_int[0] };
  assign { mcountinhibit[2], mcountinhibit[0] } = \$auto$ff.cc:266:slice$10821 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10818  = | { csr_save_cause_i, csr_restore_dret_i, csr_restore_mret_i };
  assign \$auto$opt_expr.cc:205:group_cell_inputs$10748  = ~ csr_addr_i[4:0];
  assign \$auto$opt_reduce.cc:137:opt_pmux$10605  = | { \$procmux$8596_CMP , \$auto$rtlil.cc:2793:Eq$1438  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10607  = | { \$procmux$9601_CMP , \$procmux$9599_CMP , \$procmux$9597_CMP , \$procmux$9596_CMP , \$procmux$9593_CMP , \$procmux$9556_CMP , \$procmux$9553_CMP , \$procmux$9552_CMP , \$procmux$9551_CMP , \$procmux$9549_CMP , \$procmux$9542_CMP , \$procmux$9534_CMP , \$procmux$9233_CMP , \$procmux$9162_CMP , \$procmux$9156_CMP , \$auto$slang_frontend.cc:694:finish$\mcountinhibit_we$1343 , \$auto$slang_frontend.cc:694:finish$\mtval_en$1336 , \$auto$slang_frontend.cc:694:finish$\mcause_en$1335 , \$auto$slang_frontend.cc:694:finish$\mepc_en$1334 , \$auto$slang_frontend.cc:694:finish$\mscratch_en$1333 , \$auto$slang_frontend.cc:694:finish$\mie_en$1332 , \$auto$slang_frontend.cc:694:finish$\mstatus_en$1331 , \$auto$rtlil.cc:2793:Eq$1270 , \$auto$rtlil.cc:2793:Eq$1268 , \$auto$rtlil.cc:2793:Eq$1266 , \$auto$rtlil.cc:2793:Eq$1264 , \$auto$rtlil.cc:2793:Eq$1262 , \$auto$rtlil.cc:2793:Eq$1260 , \$auto$rtlil.cc:2793:Eq$1258 , \$auto$rtlil.cc:2793:Eq$1256 , \$auto$rtlil.cc:2793:Eq$1254 , \$auto$rtlil.cc:2793:Eq$1252 , \$auto$rtlil.cc:2793:Eq$1250 , \$auto$rtlil.cc:2793:Eq$1248 , \$auto$rtlil.cc:2793:Eq$1246 , \$auto$rtlil.cc:2793:Eq$1244 , \$auto$rtlil.cc:2793:Eq$1242 , \$auto$rtlil.cc:2793:Eq$1240 , \$auto$rtlil.cc:2793:Eq$1238 , \$auto$rtlil.cc:2793:Eq$1236 , \$auto$rtlil.cc:2793:Eq$1234 , \$auto$rtlil.cc:2793:Eq$1232  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10609  = | { \$auto$slang_frontend.cc:694:finish$\dscratch1_en$1342 , \$auto$slang_frontend.cc:694:finish$\dscratch0_en$1341 , \$auto$slang_frontend.cc:694:finish$\depc_en$1340 , \$auto$slang_frontend.cc:694:finish$\dcsr_en$1339  };
  assign mtvec_d[31:8] = csr_mtvec_init_i ? boot_addr_i[31:8] : csr_wdata_int[31:8];
  assign priv_mode_lsu_o = mstatus_q[1] ? mstatus_q[3:2] : priv_mode_id_o;
  assign { \$auto$rtlil.cc:2874:Mux$1206 [2], \$auto$rtlil.cc:2874:Mux$1206 [0] } = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [4] ? \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][0][0]$b$12493  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][0][0]$b$12493  = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [3] ? \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][1][1]$b$12499  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][1][1]$b$12499  = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [2] ? \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][2][3]$b$12511  : 2'h0;
  assign \$memory$auto$memory_bmux2rom.cc:63:execute$12486$rdmux[0][2][3]$b$12511  = \$auto$opt_expr.cc:205:group_cell_inputs$10748 [1] ? { 1'h0, \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0] } : { \$auto$opt_expr.cc:205:group_cell_inputs$10748 [0], 1'h0 };
  function [31:0] \$procmux$8595 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:723.21-723.49|../rtl/cve2/cve2_cs_registers.sv:719.5-725.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8595  = b[31:0];
      2'b1?:
        \$procmux$8595  = b[63:32];
      default:
        \$procmux$8595  = a;
    endcase
  endfunction
  assign csr_wdata_int = \$procmux$8595 (\$auto$builder.cc:338:Biop$1431 , { \$auto$builder.cc:338:Biop$1435 , csr_wdata_i }, { \$auto$rtlil.cc:2793:Eq$1442 , \$auto$opt_reduce.cc:137:opt_pmux$10605  });
  assign \$procmux$8596_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:723.21-723.49|../rtl/cve2/cve2_cs_registers.sv:719.5-725.12" *) csr_op_i;
  function [3:0] \$procmux$8606 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:671.27-697.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8606  = b[3:0];
      2'b1?:
        \$procmux$8606  = b[7:4];
      default:
        \$procmux$8606  = a;
    endcase
  endfunction
  assign mstatus_d[5:2] = \$procmux$8606 (\$auto$slang_frontend.cc:694:finish$\mstatus_d$1346 [5:2], { \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1378 , mstatus_q[4], \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1399  }, { csr_save_cause_i, csr_restore_mret_i });
  assign \$auto$slang_frontend.cc:694:finish$\mcause_d$1402  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:683.25-691.12|../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_cause_q : { csr_wdata_int[31], csr_wdata_int[5:0] };
  assign \$auto$slang_frontend.cc:694:finish$\mepc_en$1401  = \$auto$slang_frontend.cc:694:finish$\mepc_en$1350  | (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:683.25-691.12|../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) nmi_mode_i;
  assign \$auto$slang_frontend.cc:694:finish$\mepc_d$1400  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:683.25-691.12|../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_epc_q : { csr_wdata_int[31:1], 1'h0 };
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1399  = nmi_mode_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:683.25-691.12|../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) mstack_q : 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_d[1]$1396  = \$auto$builder.cc:338:Biop$1393  ? (* src = "../rtl/cve2/cve2_cs_registers.sv:677.11-677.33|../rtl/cve2/cve2_cs_registers.sv:676.9-678.12" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\mstatus_d$1346 [1];
  assign mstack_en = csr_save_cause_i & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:625.25-665.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\mstack_en$1391 ;
  assign depc_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:625.25-665.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\depc_en$1390  : \$auto$slang_frontend.cc:694:finish$\depc_en$1356 ;
  assign depc_d = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:625.25-665.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\depc_d$1389  : { csr_wdata_int[31:1], 1'h0 };
  assign dcsr_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:625.25-665.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\dcsr_en$1388  : \$auto$slang_frontend.cc:694:finish$\dcsr_en$1355 ;
  assign dcsr_d[8:6] = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:625.25-665.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\dcsr_d[6]$1387  : dcsr_q[8:6];
  assign dcsr_d[1:0] = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:625.25-665.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\dcsr_d[0]$1386  : \$auto$slang_frontend.cc:694:finish$\dcsr_d$1354 [1:0];
  assign mtval_en = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:625.25-665.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\mtval_en$1385  : \$auto$slang_frontend.cc:694:finish$\mtval_en$1352 ;
  assign mtval_d = csr_save_cause_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:625.25-665.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\mtval_d$1384  : csr_wdata_int;
  function [0:0] \$procmux$8733 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:671.27-697.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8733  = b[0:0];
      2'b1?:
        \$procmux$8733  = b[1:1];
      default:
        \$procmux$8733  = a;
    endcase
  endfunction
  assign mcause_en = \$procmux$8733 (\$auto$slang_frontend.cc:694:finish$\mcause_en$1351 , { \$auto$slang_frontend.cc:694:finish$\mcause_en$1383 , \$auto$slang_frontend.cc:694:finish$\mcause_en$1403  }, { csr_save_cause_i, csr_restore_mret_i });
  function [6:0] \$procmux$8742 ;
    input [6:0] a;
    input [13:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:671.27-697.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8742  = b[6:0];
      2'b1?:
        \$procmux$8742  = b[13:7];
      default:
        \$procmux$8742  = a;
    endcase
  endfunction
  assign mcause_d = \$procmux$8742 ({ csr_wdata_int[31], csr_wdata_int[5:0] }, { \$auto$slang_frontend.cc:694:finish$\mcause_d$1382 , \$auto$slang_frontend.cc:694:finish$\mcause_d$1402  }, { csr_save_cause_i, csr_restore_mret_i });
  function [0:0] \$procmux$8751 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:671.27-697.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8751  = b[0:0];
      2'b1?:
        \$procmux$8751  = b[1:1];
      default:
        \$procmux$8751  = a;
    endcase
  endfunction
  assign mepc_en = \$procmux$8751 (\$auto$slang_frontend.cc:694:finish$\mepc_en$1350 , { \$auto$slang_frontend.cc:694:finish$\mepc_en$1381 , \$auto$slang_frontend.cc:694:finish$\mepc_en$1401  }, { csr_save_cause_i, csr_restore_mret_i });
  function [31:0] \$procmux$8760 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:671.27-697.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8760  = b[31:0];
      2'b1?:
        \$procmux$8760  = b[63:32];
      default:
        \$procmux$8760  = a;
    endcase
  endfunction
  assign mepc_d = \$procmux$8760 ({ csr_wdata_int[31:1], 1'h0 }, { \$auto$slang_frontend.cc:694:finish$\mepc_d$1380 , \$auto$slang_frontend.cc:694:finish$\mepc_d$1400  }, { csr_save_cause_i, csr_restore_mret_i });
  function [0:0] \$procmux$8769 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:671.27-697.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8769  = b[0:0];
      2'b1?:
        \$procmux$8769  = b[1:1];
      default:
        \$procmux$8769  = a;
    endcase
  endfunction
  assign mstatus_en = \$procmux$8769 (\$auto$slang_frontend.cc:694:finish$\mstatus_en$1347 , { \$auto$slang_frontend.cc:694:finish$\mstatus_en$1379 , 1'h1 }, { csr_save_cause_i, csr_restore_mret_i });
  assign mstatus_d[1] = csr_restore_mret_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:671.27-697.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *) \$auto$slang_frontend.cc:694:finish$\mstatus_d[1]$1396  : \$auto$slang_frontend.cc:694:finish$\mstatus_d$1346 [1];
  function [1:0] \$procmux$8784 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:671.27-697.10|../rtl/cve2/cve2_cs_registers.sv:623.5-700.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8784  = b[1:0];
      2'b1?:
        \$procmux$8784  = b[3:2];
      default:
        \$procmux$8784  = a;
    endcase
  endfunction
  assign priv_lvl_d = \$procmux$8784 (2'h3, { dcsr_q[1:0], mstatus_q[3:2] }, { csr_restore_dret_i, csr_restore_mret_i });
  assign \$auto$slang_frontend.cc:694:finish$\mtval_en$1376  = debug_mode_i ? (* src = "../rtl/cve2/cve2_cs_registers.sv:647.37-664.12|../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$auto$slang_frontend.cc:694:finish$\mtval_en$1352  : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\mtval_d$1375  = debug_mode_i ? (* src = "../rtl/cve2/cve2_cs_registers.sv:647.37-664.12|../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) csr_wdata_int : csr_mtval_i;
  assign \$auto$slang_frontend.cc:694:finish$\mcause_en$1374  = debug_mode_i ? (* src = "../rtl/cve2/cve2_cs_registers.sv:647.37-664.12|../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$auto$slang_frontend.cc:694:finish$\mcause_en$1351  : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\mcause_d$1373  = debug_mode_i ? (* src = "../rtl/cve2/cve2_cs_registers.sv:647.37-664.12|../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) { csr_wdata_int[31], csr_wdata_int[5:0] } : csr_mcause_i;
  assign \$auto$slang_frontend.cc:694:finish$\mepc_en$1372  = debug_mode_i ? (* src = "../rtl/cve2/cve2_cs_registers.sv:647.37-664.12|../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$auto$slang_frontend.cc:694:finish$\mepc_en$1350  : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\mepc_d$1371  = debug_mode_i ? (* src = "../rtl/cve2/cve2_cs_registers.sv:647.37-664.12|../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) { csr_wdata_int[31:1], 1'h0 } : \$auto$slang_frontend.cc:694:finish$\exception_pc$1362 ;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_en$1370  = debug_mode_i ? (* src = "../rtl/cve2/cve2_cs_registers.sv:647.37-664.12|../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$auto$slang_frontend.cc:694:finish$\mstatus_en$1347  : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1369  = debug_mode_i ? (* src = "../rtl/cve2/cve2_cs_registers.sv:647.37-664.12|../rtl/cve2/cve2_cs_registers.sv:647.18-664.12" *) \$auto$slang_frontend.cc:694:finish$\mstatus_d$1346 [5:2] : { 1'h0, mstatus_q[5], priv_mode_id_o };
  assign \$auto$slang_frontend.cc:694:finish$\depc_en$1390  = \$auto$slang_frontend.cc:694:finish$\depc_en$1356  | (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_csr_save_i;
  assign \$auto$slang_frontend.cc:694:finish$\depc_d$1389  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$auto$slang_frontend.cc:694:finish$\exception_pc$1362  : { csr_wdata_int[31:1], 1'h0 };
  assign \$auto$slang_frontend.cc:694:finish$\dcsr_en$1388  = \$auto$slang_frontend.cc:694:finish$\dcsr_en$1355  | (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_csr_save_i;
  assign \$auto$slang_frontend.cc:694:finish$\dcsr_d[6]$1387  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) debug_cause_i : dcsr_q[8:6];
  assign \$auto$slang_frontend.cc:694:finish$\dcsr_d[0]$1386  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) priv_mode_id_o : \$auto$slang_frontend.cc:694:finish$\dcsr_d$1354 [1:0];
  assign \$auto$slang_frontend.cc:694:finish$\mstack_en$1391  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) 1'h0 : \$auto$builder.cc:364:Unop$1192 ;
  assign \$auto$slang_frontend.cc:694:finish$\mtval_en$1385  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$auto$slang_frontend.cc:694:finish$\mtval_en$1352  : \$auto$slang_frontend.cc:694:finish$\mtval_en$1376 ;
  assign \$auto$slang_frontend.cc:694:finish$\mtval_d$1384  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) csr_wdata_int : \$auto$slang_frontend.cc:694:finish$\mtval_d$1375 ;
  assign \$auto$slang_frontend.cc:694:finish$\mcause_en$1383  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$auto$slang_frontend.cc:694:finish$\mcause_en$1351  : \$auto$slang_frontend.cc:694:finish$\mcause_en$1374 ;
  assign \$auto$slang_frontend.cc:694:finish$\mcause_d$1382  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) { csr_wdata_int[31], csr_wdata_int[5:0] } : \$auto$slang_frontend.cc:694:finish$\mcause_d$1373 ;
  assign \$auto$slang_frontend.cc:694:finish$\mepc_en$1381  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$auto$slang_frontend.cc:694:finish$\mepc_en$1350  : \$auto$slang_frontend.cc:694:finish$\mepc_en$1372 ;
  assign \$auto$slang_frontend.cc:694:finish$\mepc_d$1380  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) { csr_wdata_int[31:1], 1'h0 } : \$auto$slang_frontend.cc:694:finish$\mepc_d$1371 ;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_en$1379  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$auto$slang_frontend.cc:694:finish$\mstatus_en$1347  : \$auto$slang_frontend.cc:694:finish$\mstatus_en$1370 ;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1378  = debug_csr_save_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:639.31-647.12|../rtl/cve2/cve2_cs_registers.sv:639.9-664.12" *) \$auto$slang_frontend.cc:694:finish$\mstatus_d$1346 [5:2] : \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1369 ;
  assign \$auto$slang_frontend.cc:694:finish$\exception_pc$1362  = csr_save_if_i ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:628.13-628.36|../rtl/cve2/cve2_cs_registers.sv:626.9-634.16" *) pc_if_i : pc_id_i;
  assign \$auto$slang_frontend.cc:694:finish$\mcause_en$1403  = \$auto$slang_frontend.cc:694:finish$\mcause_en$1351  | (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:683.25-691.12|../rtl/cve2/cve2_cs_registers.sv:683.9-696.12" *) nmi_mode_i;
  assign \$auto$slang_frontend.cc:694:finish$\dcsr_d[0]$1301  = \$auto$builder.cc:338:Biop$1298  ? (* src = "../rtl/cve2/cve2_cs_registers.sv:561.13-561.37|../rtl/cve2/cve2_cs_registers.sv:560.11-562.14" *) 2'h3 : csr_wdata_int[1:0];
  assign \$auto$slang_frontend.cc:694:finish$\dcsr_en$1339  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:556.19-581.12|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b0;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_en$1331  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:524.22-537.12|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h300;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_d$1330  = \$auto$slang_frontend.cc:694:finish$\mstatus_en$1331  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:524.22-537.12|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) { csr_wdata_int[3], csr_wdata_int[7], \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1292 , csr_wdata_int[17], csr_wdata_int[21] } : mstatus_q;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_d[2]$1292  = \$auto$builder.cc:338:Biop$1289  ? (* src = "../rtl/cve2/cve2_cs_registers.sv:535.13-535.40|../rtl/cve2/cve2_cs_registers.sv:534.11-536.14" *) 2'h3 : csr_wdata_int[12:11];
  assign \$auto$slang_frontend.cc:694:finish$\mhpmcounterh_we$1345  = \$procmux$9156_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$auto$rtlil.cc:2786:And$10581 [2:0] : 3'h0;
  assign \$procmux$9156_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb80;
  assign \$procmux$9156_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb82;
  assign \$procmux$9156_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8b;
  assign \$procmux$9156_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8c;
  assign \$procmux$9156_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8d;
  assign \$procmux$9156_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8e;
  assign \$procmux$9156_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8f;
  assign \$procmux$9156_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb90;
  assign \$procmux$9156_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb91;
  assign \$procmux$9156_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb92;
  assign \$procmux$9156_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb93;
  assign \$procmux$9156_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb94;
  assign \$procmux$9156_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb83;
  assign \$procmux$9156_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb95;
  assign \$procmux$9156_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb96;
  assign \$procmux$9156_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb97;
  assign \$procmux$9156_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb98;
  assign \$procmux$9156_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb99;
  assign \$procmux$9156_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9a;
  assign \$procmux$9156_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9b;
  assign \$procmux$9156_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9c;
  assign \$procmux$9156_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9d;
  assign \$procmux$9156_CMP [29] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9e;
  assign \$procmux$9156_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb84;
  assign \$procmux$9156_CMP [30] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb9f;
  assign \$procmux$9156_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb85;
  assign \$procmux$9156_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb86;
  assign \$procmux$9156_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb87;
  assign \$procmux$9156_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb88;
  assign \$procmux$9156_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb89;
  assign \$procmux$9156_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:615.11-615.51|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb8a;
  assign \$auto$slang_frontend.cc:694:finish$\mhpmcounter_we$1344  = \$procmux$9162_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$auto$rtlil.cc:2786:And$10581 [2:0] : 3'h0;
  assign \$procmux$9162_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$procmux$9162_CMP ;
  assign \$procmux$9162_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb00;
  assign \$procmux$9162_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb02;
  assign \$procmux$9162_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0b;
  assign \$procmux$9162_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0c;
  assign \$procmux$9162_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0d;
  assign \$procmux$9162_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0e;
  assign \$procmux$9162_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0f;
  assign \$procmux$9162_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb10;
  assign \$procmux$9162_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb11;
  assign \$procmux$9162_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb12;
  assign \$procmux$9162_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb13;
  assign \$procmux$9162_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb14;
  assign \$procmux$9162_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb03;
  assign \$procmux$9162_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb15;
  assign \$procmux$9162_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb16;
  assign \$procmux$9162_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb17;
  assign \$procmux$9162_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb18;
  assign \$procmux$9162_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb19;
  assign \$procmux$9162_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1a;
  assign \$procmux$9162_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1b;
  assign \$procmux$9162_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1c;
  assign \$procmux$9162_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1d;
  assign \$procmux$9162_CMP [29] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1e;
  assign \$procmux$9162_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb04;
  assign \$procmux$9162_CMP [30] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb1f;
  assign \$procmux$9162_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb05;
  assign \$procmux$9162_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb06;
  assign \$procmux$9162_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb07;
  assign \$procmux$9162_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb08;
  assign \$procmux$9162_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb09;
  assign \$procmux$9162_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:602.11-602.50|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 12'hb0a;
  assign \$auto$slang_frontend.cc:694:finish$\mcountinhibit_we$1343  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:590.28-590.52|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h320;
  assign \$auto$slang_frontend.cc:694:finish$\dscratch1_en$1342  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:587.24-587.44|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b3;
  assign \$auto$slang_frontend.cc:694:finish$\dscratch0_en$1341  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:586.24-586.44|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b2;
  assign \$auto$slang_frontend.cc:694:finish$\depc_en$1340  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:584.18-584.33|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 11'h7b1;
  assign { \$auto$slang_frontend.cc:694:finish$\dcsr_d$1338 [31:9], \$auto$slang_frontend.cc:694:finish$\dcsr_d$1338 [5:0] } = \$auto$slang_frontend.cc:694:finish$\dcsr_en$1339  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:556.19-581.12|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) { 16'h4000, csr_wdata_int[15], 1'h0, csr_wdata_int[13:12], 6'h00, csr_wdata_int[2], \$auto$slang_frontend.cc:694:finish$\dcsr_d[0]$1301  } : { dcsr_q[31:9], dcsr_q[5:0] };
  assign \$auto$slang_frontend.cc:694:finish$\mtvec_en$1337  = csr_mtvec_init_i | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:554.20-554.36|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) \$procmux$9233_CMP ;
  assign \$procmux$9233_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:554.20-554.36|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h305;
  assign \$auto$slang_frontend.cc:694:finish$\mtval_en$1336  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:551.20-551.36|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h343;
  assign \$auto$slang_frontend.cc:694:finish$\mcause_en$1335  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:548.21-548.38|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h342;
  assign \$auto$slang_frontend.cc:694:finish$\mepc_en$1334  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:545.19-545.34|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h341;
  assign \$auto$slang_frontend.cc:694:finish$\mscratch_en$1333  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:542.23-542.42|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h340;
  assign \$auto$slang_frontend.cc:694:finish$\mie_en$1332  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:540.18-540.32|../rtl/cve2/cve2_cs_registers.sv:522.7-619.14" *) 10'h304;
  assign mhpmcounterh_we = csr_we_int ? (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mhpmcounterh_we$1345  : 3'h0;
  assign mhpmcounter_we = csr_we_int ? (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mhpmcounter_we$1344  : 3'h0;
  assign mcountinhibit_we = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mcountinhibit_we$1343 ;
  assign dscratch1_en = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\dscratch1_en$1342 ;
  assign dscratch0_en = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\dscratch0_en$1341 ;
  assign \$auto$slang_frontend.cc:694:finish$\depc_en$1356  = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\depc_en$1340 ;
  assign \$auto$slang_frontend.cc:694:finish$\dcsr_en$1355  = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\dcsr_en$1339 ;
  assign { dcsr_d[31:9], dcsr_d[5:2], \$auto$slang_frontend.cc:694:finish$\dcsr_d$1354 [1:0] } = csr_we_int ? (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) { \$auto$slang_frontend.cc:694:finish$\dcsr_d$1338 [31:9], \$auto$slang_frontend.cc:694:finish$\dcsr_d$1338 [5:0] } : { dcsr_q[31:9], dcsr_q[5:0] };
  assign mtvec_en = csr_we_int ? (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mtvec_en$1337  : csr_mtvec_init_i;
  assign \$auto$slang_frontend.cc:694:finish$\mtval_en$1352  = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mtval_en$1336 ;
  assign \$auto$slang_frontend.cc:694:finish$\mcause_en$1351  = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mcause_en$1335 ;
  assign \$auto$slang_frontend.cc:694:finish$\mepc_en$1350  = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mepc_en$1334 ;
  assign mscratch_en = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mscratch_en$1333 ;
  assign mie_en = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mie_en$1332 ;
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_en$1347  = csr_we_int & (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mstatus_en$1331 ;
  assign { \$auto$slang_frontend.cc:694:finish$\mstatus_d$1346 [5:1], mstatus_d[0] } = csr_we_int ? (* src = "../rtl/cve2/cve2_cs_registers.sv:522.7-619.14|../rtl/cve2/cve2_cs_registers.sv:521.5-620.8" *) \$auto$slang_frontend.cc:694:finish$\mstatus_d$1330  : mstatus_q;
  assign illegal_csr = \$auto$slang_frontend.cc:694:finish$\illegal_csr$1230  | (* src = "../rtl/cve2/cve2_cs_registers.sv:479.9-479.28|../rtl/cve2/cve2_cs_registers.sv:474.7-480.10" *) \$auto$rtlil.cc:2746:ReduceBool$1272 ;
  function [31:0] \$procmux$9531 ;
    input [31:0] a;
    input [639:0] b;
    input [19:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:434.9-434.61|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
    (* parallel_case *)
    casez (s)
      20'b???????????????????1:
        \$procmux$9531  = b[31:0];
      20'b??????????????????1?:
        \$procmux$9531  = b[63:32];
      20'b?????????????????1??:
        \$procmux$9531  = b[95:64];
      20'b????????????????1???:
        \$procmux$9531  = b[127:96];
      20'b???????????????1????:
        \$procmux$9531  = b[159:128];
      20'b??????????????1?????:
        \$procmux$9531  = b[191:160];
      20'b?????????????1??????:
        \$procmux$9531  = b[223:192];
      20'b????????????1???????:
        \$procmux$9531  = b[255:224];
      20'b???????????1????????:
        \$procmux$9531  = b[287:256];
      20'b??????????1?????????:
        \$procmux$9531  = b[319:288];
      20'b?????????1??????????:
        \$procmux$9531  = b[351:320];
      20'b????????1???????????:
        \$procmux$9531  = b[383:352];
      20'b???????1????????????:
        \$procmux$9531  = b[415:384];
      20'b??????1?????????????:
        \$procmux$9531  = b[447:416];
      20'b?????1??????????????:
        \$procmux$9531  = b[479:448];
      20'b????1???????????????:
        \$procmux$9531  = b[511:480];
      20'b???1????????????????:
        \$procmux$9531  = b[543:512];
      20'b??1?????????????????:
        \$procmux$9531  = b[575:544];
      20'b?1??????????????????:
        \$procmux$9531  = b[607:576];
      20'b1???????????????????:
        \$procmux$9531  = b[639:608];
      default:
        \$procmux$9531  = a;
    endcase
  endfunction
  assign csr_rdata_o = \$procmux$9531 (32'd0, { 64'h0000060200000023, hart_id_i, 10'h000, mstatus_q[0], 3'h0, mstatus_q[1], 4'h0, mstatus_q[3:2], 3'h0, mstatus_q[4], 3'h0, mstatus_q[5], 35'h040101104, mie_q[15:0], 4'h0, mie_q[16], 3'h0, mie_q[17], 3'h0, mie_q[18], 3'h0, mscratch_q, csr_mtvec_o, csr_mepc_o, mcause_q[6], 25'h0000000, mcause_q[5:0], mtval_q, irq_fast_i, 4'h0, irq_external_i, 3'h0, irq_timer_i, 3'h0, irq_software_i, 3'h0, dcsr_q, csr_depc_o, dscratch0_q, dscratch1_q, 29'h1fffffff, mcountinhibit[2], 1'h0, mcountinhibit[0], 29'h00000000, \$auto$rtlil.cc:2874:Mux$1206 [2], 1'h0, \$auto$rtlil.cc:2874:Mux$1206 [0], \$auto$rtlil.cc:2874:Mux$1216 [31:0], \$auto$rtlil.cc:2874:Mux$1216 [63:32] }, { \$procmux$9553_CMP , \$procmux$9552_CMP , \$procmux$9551_CMP , \$auto$slang_frontend.cc:694:finish$\mstatus_en$1331 , \$procmux$9549_CMP , \$auto$slang_frontend.cc:694:finish$\mie_en$1332 , \$auto$slang_frontend.cc:694:finish$\mscratch_en$1333 , \$procmux$9233_CMP , \$auto$slang_frontend.cc:694:finish$\mepc_en$1334 , \$auto$slang_frontend.cc:694:finish$\mcause_en$1335 , \$auto$slang_frontend.cc:694:finish$\mtval_en$1336 , \$procmux$9542_CMP , \$auto$slang_frontend.cc:694:finish$\dcsr_en$1339 , \$auto$slang_frontend.cc:694:finish$\depc_en$1340 , \$auto$slang_frontend.cc:694:finish$\dscratch0_en$1341 , \$auto$slang_frontend.cc:694:finish$\dscratch1_en$1342 , \$auto$slang_frontend.cc:694:finish$\mcountinhibit_we$1343 , \$procmux$9534_CTRL , \$procmux$9162_CTRL , \$procmux$9156_CTRL  });
  assign \$procmux$9156_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:434.9-434.61|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) \$procmux$9156_CMP ;
  assign \$procmux$9534_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) \$procmux$9534_CMP ;
  assign \$procmux$9534_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h323;
  assign \$procmux$9534_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h324;
  assign \$procmux$9534_CMP [10] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32d;
  assign \$procmux$9534_CMP [11] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32e;
  assign \$procmux$9534_CMP [12] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32f;
  assign \$procmux$9534_CMP [13] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h330;
  assign \$procmux$9534_CMP [14] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h331;
  assign \$procmux$9534_CMP [15] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h332;
  assign \$procmux$9534_CMP [16] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h333;
  assign \$procmux$9534_CMP [17] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h334;
  assign \$procmux$9534_CMP [18] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h335;
  assign \$procmux$9534_CMP [19] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h336;
  assign \$procmux$9534_CMP [2] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h325;
  assign \$procmux$9534_CMP [20] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h337;
  assign \$procmux$9534_CMP [21] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h338;
  assign \$procmux$9534_CMP [22] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h339;
  assign \$procmux$9534_CMP [23] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33a;
  assign \$procmux$9534_CMP [24] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33b;
  assign \$procmux$9534_CMP [25] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33c;
  assign \$procmux$9534_CMP [26] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33d;
  assign \$procmux$9534_CMP [27] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33e;
  assign \$procmux$9534_CMP [28] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h33f;
  assign \$procmux$9534_CMP [3] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h326;
  assign \$procmux$9534_CMP [4] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h327;
  assign \$procmux$9534_CMP [5] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h328;
  assign \$procmux$9534_CMP [6] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h329;
  assign \$procmux$9534_CMP [7] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32a;
  assign \$procmux$9534_CMP [8] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32b;
  assign \$procmux$9534_CMP [9] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:408.9-408.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h32c;
  assign \$procmux$9542_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:328.16-334.10|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h344;
  assign \$procmux$9549_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:297.17-297.44|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h301;
  assign \$procmux$9551_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:275.20-275.46|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf14;
  assign \$procmux$9552_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:271.20-271.54|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf12;
  assign \$procmux$9553_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:269.22-269.58|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf11;
  function [0:0] \$procmux$9555 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_cs_registers.sv:465.9-465.28|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9555  = b[0:0];
      2'b1?:
        \$procmux$9555  = b[1:1];
      default:
        \$procmux$9555  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\illegal_csr$1230  = \$procmux$9555 (1'h1, { \$auto$builder.cc:364:Unop$1192 , 1'h0 }, { \$auto$opt_reduce.cc:137:opt_pmux$10609 , \$auto$opt_reduce.cc:137:opt_pmux$10607  });
  assign \$procmux$9556_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:465.9-465.28|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 11'h7c1;
  assign \$procmux$9593_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:310.9-310.28|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h306;
  assign \$procmux$9596_CMP [0] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:294.34-294.53|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h30a;
  assign \$procmux$9596_CMP [1] = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:294.34-294.53|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h31a;
  assign \$procmux$9597_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:290.21-290.40|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 10'h310;
  assign \$procmux$9599_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:277.23-277.60|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf15;
  assign \$procmux$9601_CMP  = csr_addr_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_cs_registers.sv:273.19-273.52|../rtl/cve2/cve2_cs_registers.sv:267.5-471.12" *) 12'hf13;
  (* src = "../rtl/cve2/cve2_cs_registers.sv:1210.5" *)
  \cve2_counter$cve2_core.cs_registers_i.mcycle_counter_i  mcycle_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$auto$builder.cc:338:Biop$1565 ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(mhpmcounter[2047:1984]),
    .counter_we_i(mhpmcounter_we[0]),
    .counterh_we_i(mhpmcounterh_we[0]),
    .rst_ni(rst_ni)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:1226.5" *)
  \cve2_counter$cve2_core.cs_registers_i.minstret_counter_i  minstret_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(\$auto$builder.cc:338:Biop$1569 ),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(minstret_raw),
    .counter_we_i(mhpmcounter_we[2]),
    .counterh_we_i(mhpmcounterh_we[2]),
    .rst_ni(rst_ni)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:871.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_dcsr_csr  u_dcsr_csr (
    .clk_i(clk_i),
    .rd_data_o(dcsr_q),
    .rst_ni(rst_ni),
    .wr_data_i(dcsr_d),
    .wr_en_i(dcsr_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:885.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_depc_csr  u_depc_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_depc_o),
    .rst_ni(rst_ni),
    .wr_data_i(depc_d),
    .wr_en_i(depc_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:899.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_dscratch0_csr  u_dscratch0_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch0_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch0_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:913.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_dscratch1_csr  u_dscratch1_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch1_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch1_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:824.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mcause_csr  u_mcause_csr (
    .clk_i(clk_i),
    .rd_data_o(mcause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_d),
    .wr_en_i(mcause_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:778.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mepc_csr  u_mepc_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_mepc_o),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_d),
    .wr_en_i(mepc_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:796.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mie_csr  u_mie_csr (
    .clk_i(clk_i),
    .rd_data_o(mie_q),
    .rst_ni(rst_ni),
    .wr_data_i({ csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[31:16] }),
    .wr_en_i(mie_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:810.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mscratch_csr  u_mscratch_csr (
    .clk_i(clk_i),
    .rd_data_o(mscratch_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(mscratch_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:956.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mstack_cause_csr  u_mstack_cause_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_cause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_q),
    .wr_en_i(mstack_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:928.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mstack_csr  u_mstack_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_q[4:2]),
    .wr_en_i(mstack_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:942.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mstack_epc_csr  u_mstack_epc_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_epc_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_mepc_o),
    .wr_en_i(mstack_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:764.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mstatus_csr  u_mstatus_csr (
    .clk_i(clk_i),
    .rd_data_o(mstatus_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_d),
    .wr_en_i(mstatus_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:838.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mtval_csr  u_mtval_csr (
    .clk_i(clk_i),
    .rd_data_o(mtval_q),
    .rst_ni(rst_ni),
    .wr_data_i(mtval_d),
    .wr_en_i(mtval_en)
  );
  (* src = "../rtl/cve2/cve2_cs_registers.sv:851.5" *)
  \cve2_csr$cve2_core.cs_registers_i.u_mtvec_csr  u_mtvec_csr (
    .clk_i(clk_i),
    .rd_data_o(csr_mtvec_o),
    .rst_ni(rst_ni),
    .wr_data_i({ mtvec_d[31:8], 8'h01 }),
    .wr_en_i(mtvec_en)
  );
  assign { \$auto$rtlil.cc:2874:Mux$1206 [31:3], \$auto$rtlil.cc:2874:Mux$1206 [1] } = 30'h00000000;
  assign \$auto$slang_frontend.cc:694:finish$\dcsr_d$1338 [8:6] = dcsr_q[8:6];
  assign \$auto$slang_frontend.cc:694:finish$\dcsr_d$1354 [31:2] = { dcsr_d[31:9], dcsr_q[8:6], dcsr_d[5:2] };
  assign \$auto$slang_frontend.cc:694:finish$\mstatus_d$1346 [0] = mstatus_d[0];
  assign csr_mstatus_mie_o = mstatus_q[5];
  assign csr_mstatus_tw_o = mstatus_q[0];
  assign csr_pmp_addr_o = 136'h0000000000000000000000000000000000;
  assign csr_pmp_cfg_o = 24'h000000;
  assign csr_pmp_mseccfg_o = 3'h0;
  assign debug_ebreakm_o = dcsr_q[15];
  assign debug_ebreaku_o = dcsr_q[12];
  assign debug_single_step_o = dcsr_q[2];
  assign { mcountinhibit[31:3], mcountinhibit[1] } = 30'h3ffffffe;
  assign mhpmcounter[1983:0] = { 64'h0000000000000000, minstret_raw, 1856'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 };
  assign mtvec_d[7:0] = 8'h01;
  assign trigger_match_o = 1'h0;
  assign \$auto$rtlil.cc:2874:Mux$1216  = \$auto$bmuxmap.cc:84:execute$12618 ;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_dcsr_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd1073741827;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_depc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_dscratch0_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_dscratch1_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mcause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [6:0] rd_data_o;
  reg [6:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 7'h00;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mepc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mie_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [18:0] rd_data_o;
  reg [18:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [18:0] wr_data_i;
  wire [18:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 19'h00000;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mscratch_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mstack_cause_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [6:0] rd_data_o;
  reg [6:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 7'h00;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mstack_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [2:0] rd_data_o;
  reg [2:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [2:0] wr_data_i;
  wire [2:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 3'h4;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mstack_epc_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mstatus_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [5:0] rd_data_o;
  reg [5:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [5:0] wr_data_i;
  wire [5:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 6'h0c;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mtval_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd0;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_csr.sv:11.8" *)
module \cve2_csr$cve2_core.cs_registers_i.u_mtvec_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  (* src = "../rtl/cve2/cve2_csr.sv:16.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_csr.sv:21.28" *)
  output [31:0] rd_data_o;
  reg [31:0] rd_data_o;
  (* src = "../rtl/cve2/cve2_csr.sv:23.28" *)
  output rd_error_o;
  wire rd_error_o;
  (* src = "../rtl/cve2/cve2_csr.sv:17.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_csr.sv:19.28" *)
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  (* src = "../rtl/cve2/cve2_csr.sv:20.28" *)
  input wr_en_i;
  wire wr_en_i;
  (* src = "../rtl/cve2/cve2_csr.sv:28.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rd_data_o <= 32'd1;
    else if (wr_en_i) rd_data_o <= wr_data_i;
  assign rd_error_o = 1'h0;
endmodule

(* src = "../rtl/cve2/cve2_decoder.sv:16.8" *)
module \cve2_decoder$cve2_core.id_stage_i.decoder_i (clk_i, rst_ni, instr_rdata_i, data_req_o, data_we_o, illegal_insn_o, instr_rdata_alu_i, illegal_c_insn_i, csr_access_o, csr_op_o, rf_raddr_a_o, rf_raddr_b_o, rf_ren_a_o, rf_ren_b_o, ebrk_insn_o, mret_insn_o, dret_insn_o, ecall_insn_o, wfi_insn_o, jump_set_o, instr_first_cycle_i
, imm_a_mux_sel_o, imm_b_mux_sel_o, imm_i_type_o, imm_s_type_o, imm_b_type_o, imm_u_type_o, imm_j_type_o, zimm_rs1_type_o, rf_wdata_sel_o, rf_we_o, rf_waddr_o, alu_operator_o, alu_op_a_mux_sel_o, alu_op_b_mux_sel_o, alu_multicycle_o, mult_en_o, div_en_o, mult_sel_o, div_sel_o, multdiv_operator_o, multdiv_signed_mode_o
, data_type_o, data_sign_extension_o, jump_in_dec_o, branch_in_dec_o);
  wire \$auto$builder.cc:338:Biop$1784 ;
  wire \$auto$builder.cc:338:Biop$1786 ;
  wire \$auto$builder.cc:338:Biop$1788 ;
  wire \$auto$builder.cc:338:Biop$1790 ;
  wire \$auto$builder.cc:338:Biop$1792 ;
  wire \$auto$builder.cc:338:Biop$1806 ;
  wire \$auto$builder.cc:338:Biop$1824 ;
  wire \$auto$builder.cc:338:Biop$1867 ;
  wire \$auto$builder.cc:338:Biop$1884 ;
  wire \$auto$builder.cc:338:Biop$1894 ;
  wire \$auto$builder.cc:338:Biop$1896 ;
  wire \$auto$builder.cc:338:Biop$1898 ;
  wire \$auto$builder.cc:338:Biop$2025 ;
  wire \$auto$builder.cc:338:Biop$2029 ;
  wire \$auto$builder.cc:338:Biop$2112 ;
  wire \$auto$builder.cc:364:Unop$1817 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10611 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10613 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10615 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10617 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10619 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10621 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10623 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10625 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10627 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10629 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10631 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10633 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10635 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10637 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10639 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10641 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10643 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10645 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10647 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10649 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10653 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10655 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10657 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10689 ;
  wire \$auto$rtlil.cc:2874:Mux$1828 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:703.9-715.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2109 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:1132.9-1148.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2120 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:755.9-759.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\alu_op_b_mux_sel_o$1980 ;
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1968 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:732.9-743.12" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1972 ;
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2032 ;
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2033 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:795.9-915.16" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2037 ;
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2098 ;
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2102 ;
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2108 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\branch_in_dec_o$1939 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_access_o$1910 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:622.11-627.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_illegal$1908 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:622.11-627.18" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\csr_op$1907 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\csr_op$1909 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:300.9-305.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_type_o$1814 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\data_we_o$1922 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:922.9-1105.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\div_sel_o$2105 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\dret_insn_o$1889 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\dret_insn_o$1914 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\ebrk_insn_o$1887 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ebrk_insn_o$1912 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\ecall_insn_o$1890 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ecall_insn_o$1915 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:271.9-279.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1810 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:300.9-305.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1815 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:317.9-329.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1822 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:357.13-391.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1835 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:398.15-435.22" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1863 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:395.13-436.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1864 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:348.9-440.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1865 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1872 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:447.9-552.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1875 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:560.9-580.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1881 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1892 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:609.11-611.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1901 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1918 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\illegal_insn$1940 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:560.9-580.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1880 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1938 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:560.9-580.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\jump_set_o$1879 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\jump_set_o$1932 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\mret_insn_o$1888 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mret_insn_o$1913 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:922.9-1105.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\mult_sel_o$2104 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\multdiv_operator_o$1870 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:447.9-552.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\multdiv_operator_o$1873 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\multdiv_signed_mode_o$1871 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:447.9-552.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\multdiv_signed_mode_o$1874 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\rf_ren_a_o$1911 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\rf_we$1942 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:586.11-606.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\wfi_insn_o$1891 ;
  (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\wfi_insn_o$1916 ;
  wire \$procmux$5282_CMP ;
  wire \$procmux$5315_CMP ;
  wire \$procmux$5357_CMP ;
  wire \$procmux$6693_CMP ;
  wire \$procmux$6694_CMP ;
  wire \$procmux$6695_CMP ;
  wire \$procmux$6696_CMP ;
  wire \$procmux$6697_CMP ;
  wire \$procmux$6698_CMP ;
  wire \$procmux$6699_CMP ;
  wire \$procmux$6700_CMP ;
  wire \$procmux$6735_CMP ;
  wire \$procmux$6736_CMP ;
  wire \$procmux$6737_CMP ;
  wire \$procmux$6738_CMP ;
  wire \$procmux$6739_CMP ;
  wire \$procmux$6740_CMP ;
  wire \$procmux$6741_CMP ;
  wire \$procmux$6742_CMP ;
  wire \$procmux$6743_CMP ;
  wire \$procmux$6878_CMP ;
  wire \$procmux$6880_CMP ;
  wire \$procmux$6950_CMP ;
  wire \$procmux$6951_CMP ;
  wire \$procmux$6952_CMP ;
  wire \$procmux$6953_CMP ;
  wire \$procmux$6954_CMP ;
  wire \$procmux$6988_CMP ;
  wire \$procmux$7015_CMP ;
  wire \$procmux$7093_CMP ;
  wire \$procmux$7155_CMP ;
  wire \$procmux$7166_CMP ;
  wire \$procmux$7167_CMP ;
  wire \$procmux$7188_CMP ;
  wire \$procmux$7356_CMP ;
  wire \$procmux$7357_CMP ;
  wire \$procmux$7358_CMP ;
  wire \$procmux$7364_CMP ;
  wire \$procmux$7578_CMP ;
  wire \$procmux$7616_CMP ;
  wire \$procmux$7617_CMP ;
  wire \$procmux$7618_CMP ;
  wire \$procmux$7619_CMP ;
  wire \$procmux$7620_CMP ;
  wire \$procmux$7621_CMP ;
  wire \$procmux$7622_CMP ;
  wire \$procmux$7623_CMP ;
  wire [9:0] \$procmux$7624_CMP ;
  wire \$procmux$7629_CMP ;
  wire \$procmux$7702_CMP ;
  wire \$procmux$7704_CMP ;
  wire [1:0] \$procmux$7781_CMP ;
  wire \$procmux$7781_CTRL ;
  (* unused_bits = "1 2" *)
  wire [5:0] \$procmux$7856_CMP ;
  wire \$procmux$7872_CMP ;
  wire \$procmux$7885_CMP ;
  wire \$procmux$7958_CTRL ;
  wire \$procmux$7975_CMP ;
  wire \$procmux$8016_CMP ;
  wire \$procmux$8017_CMP ;
  wire \$procmux$8026_CMP ;
  (* src = "../rtl/cve2/cve2_decoder.sv:67.32" *)
  output alu_multicycle_o;
  wire alu_multicycle_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:63.32" *)
  output [1:0] alu_op_a_mux_sel_o;
  wire [1:0] alu_op_a_mux_sel_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:65.32" *)
  output alu_op_b_mux_sel_o;
  wire alu_op_b_mux_sel_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:62.32" *)
  output [6:0] alu_operator_o;
  wire [6:0] alu_operator_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:92.32" *)
  output branch_in_dec_o;
  wire branch_in_dec_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:21.32" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_decoder.sv:79.32" *)
  output csr_access_o;
  wire csr_access_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:114.16" *)
  wire [1:0] csr_op;
  (* src = "../rtl/cve2/cve2_decoder.sv:80.32" *)
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:83.32" *)
  output data_req_o;
  wire data_req_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:87.32" *)
  output data_sign_extension_o;
  wire data_sign_extension_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:85.32" *)
  output [1:0] data_type_o;
  wire [1:0] data_type_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:84.32" *)
  output data_we_o;
  wire data_we_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:71.32" *)
  output div_en_o;
  wire div_en_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:73.32" *)
  output div_sel_o;
  wire div_sel_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:29.32" *)
  output dret_insn_o;
  wire dret_insn_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:26.32" *)
  output ebrk_insn_o;
  wire ebrk_insn_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:30.32" *)
  output ecall_insn_o;
  wire ecall_insn_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:40.32" *)
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  (* src = "../rtl/cve2/cve2_decoder.sv:25.32" *)
  output illegal_insn_o;
  wire illegal_insn_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:43.33" *)
  output imm_a_mux_sel_o;
  wire imm_a_mux_sel_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:44.33" *)
  output [2:0] imm_b_mux_sel_o;
  wire [2:0] imm_b_mux_sel_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:47.33" *)
  output [31:0] imm_b_type_o;
  wire [31:0] imm_b_type_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:45.33" *)
  output [31:0] imm_i_type_o;
  wire [31:0] imm_i_type_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:49.33" *)
  output [31:0] imm_j_type_o;
  wire [31:0] imm_j_type_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:46.33" *)
  output [31:0] imm_s_type_o;
  wire [31:0] imm_s_type_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:48.33" *)
  output [31:0] imm_u_type_o;
  wire [31:0] imm_u_type_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:35.32" *)
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  (* src = "../rtl/cve2/cve2_decoder.sv:37.32" *)
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  (* src = "../rtl/cve2/cve2_decoder.sv:36.32" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "../rtl/cve2/cve2_decoder.sv:91.32" *)
  output jump_in_dec_o;
  wire jump_in_dec_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:32.32" *)
  output jump_set_o;
  wire jump_set_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:27.32" *)
  output mret_insn_o;
  wire mret_insn_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:70.32" *)
  output mult_en_o;
  wire mult_en_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:72.32" *)
  output mult_sel_o;
  wire mult_sel_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:75.32" *)
  output [1:0] multdiv_operator_o;
  wire [1:0] multdiv_operator_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:76.32" *)
  output [1:0] multdiv_signed_mode_o;
  wire [1:0] multdiv_signed_mode_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:55.32" *)
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:56.32" *)
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:58.32" *)
  output rf_ren_a_o;
  wire rf_ren_a_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:59.32" *)
  output rf_ren_b_o;
  wire rf_ren_b_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:57.32" *)
  output [4:0] rf_waddr_o;
  wire [4:0] rf_waddr_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:53.32" *)
  output rf_wdata_sel_o;
  wire rf_wdata_sel_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:54.32" *)
  output rf_we_o;
  wire rf_we_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:22.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_decoder.sv:31.32" *)
  output wfi_insn_o;
  wire wfi_insn_o;
  (* src = "../rtl/cve2/cve2_decoder.sv:50.33" *)
  output [31:0] zimm_rs1_type_o;
  wire [31:0] zimm_rs1_type_o;
  assign \$auto$builder.cc:338:Biop$1784  = csr_op == 2'h2;
  assign \$auto$builder.cc:338:Biop$1786  = csr_op == 2'h3;
  assign \$auto$builder.cc:338:Biop$1788  = \$auto$builder.cc:338:Biop$1784  || \$auto$builder.cc:338:Biop$1786 ;
  assign \$auto$builder.cc:338:Biop$1790  = ! instr_rdata_i[19:15];
  assign \$auto$builder.cc:338:Biop$1792  = \$auto$builder.cc:338:Biop$1788  && \$auto$builder.cc:338:Biop$1790 ;
  assign \$auto$builder.cc:338:Biop$1806  = | instr_rdata_i[14:12];
  assign \$auto$builder.cc:338:Biop$1824  = ! instr_rdata_i[26:25];
  assign \$auto$builder.cc:338:Biop$1867  = { instr_rdata_i[26], instr_rdata_i[13:12] } == 3'h5;
  assign \$auto$builder.cc:338:Biop$1884  = ! instr_rdata_i[14:12];
  assign \$auto$builder.cc:338:Biop$1894  = | instr_rdata_i[19:15];
  assign \$auto$builder.cc:338:Biop$1896  = | instr_rdata_i[11:7];
  assign \$auto$builder.cc:338:Biop$1898  = \$auto$builder.cc:338:Biop$1894  || \$auto$builder.cc:338:Biop$1896 ;
  assign \$auto$builder.cc:338:Biop$2025  = ! instr_rdata_alu_i[31:27];
  assign \$auto$builder.cc:338:Biop$2029  = instr_rdata_alu_i[31:27] == 4'h8;
  assign \$auto$builder.cc:338:Biop$2112  = ! instr_rdata_alu_i[14:12];
  assign \$auto$opt_reduce.cc:137:opt_pmux$10611  = | { \$procmux$7624_CMP , \$procmux$7623_CMP , \$procmux$7622_CMP , \$procmux$7621_CMP , \$procmux$7620_CMP , \$procmux$7619_CMP , \$procmux$7618_CMP , \$procmux$7617_CMP , \$procmux$7616_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10613  = | { \$procmux$7622_CMP , \$procmux$7619_CMP , \$procmux$7617_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10615  = | { \$procmux$7617_CMP , \$procmux$7616_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10617  = | { \$procmux$7619_CMP , \$procmux$7618_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10619  = | { \$procmux$7622_CMP , \$procmux$7621_CMP , \$procmux$7620_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10621  = | { \$procmux$7358_CMP , \$procmux$7357_CMP , \$procmux$7356_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10623  = | { \$procmux$7167_CMP , \$procmux$6988_CMP , \$procmux$6880_CMP , \$procmux$5357_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10625  = | { \$procmux$7166_CMP , \$procmux$7155_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10627  = | { \$procmux$6743_CMP , \$procmux$6700_CMP , \$procmux$6699_CMP , \$procmux$6698_CMP , \$procmux$6697_CMP , \$procmux$6696_CMP , \$procmux$6695_CMP , \$procmux$6694_CMP , \$procmux$6693_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10629  = | { \$auto$builder.cc:338:Biop$2112 , \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [2] };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10631  = | { \$auto$slang_frontend.cc:694:finish$\wfi_insn_o$1891 , \$auto$slang_frontend.cc:694:finish$\ecall_insn_o$1890 , \$auto$slang_frontend.cc:694:finish$\dret_insn_o$1889 , \$auto$slang_frontend.cc:694:finish$\mret_insn_o$1888 , \$auto$slang_frontend.cc:694:finish$\ebrk_insn_o$1887  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10633  = | { \$procmux$7188_CMP , \$procmux$7167_CMP , \$procmux$7166_CMP , \$procmux$7155_CMP , \$procmux$7093_CMP , \$procmux$6988_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10635  = | { \$procmux$7885_CMP , \$procmux$7358_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10637  = | { \$procmux$7885_CMP , \$procmux$7358_CMP , \$procmux$7357_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10639  = | { \$procmux$7188_CMP , \$procmux$7166_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10641  = | { \$procmux$8017_CMP , \$procmux$8016_CMP , \$procmux$7704_CMP , \$procmux$7629_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10645  = | { \$procmux$6696_CMP , \$procmux$6695_CMP , \$procmux$6694_CMP , \$procmux$6693_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10647  = | { \$procmux$8026_CMP , \$procmux$8017_CMP , \$procmux$8016_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10649  = | { \$procmux$6700_CMP , \$procmux$6699_CMP , \$procmux$6698_CMP , \$procmux$6697_CMP  };
  assign rf_ren_b_o = | { \$procmux$7629_CMP , \$auto$slang_frontend.cc:694:finish$\branch_in_dec_o$1939 , \$auto$slang_frontend.cc:694:finish$\data_we_o$1922  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10653  = | { \$procmux$7975_CMP , \$procmux$7872_CMP , \$procmux$7704_CMP , \$procmux$7629_CMP , \$auto$slang_frontend.cc:694:finish$\branch_in_dec_o$1939 , \$auto$slang_frontend.cc:694:finish$\data_we_o$1922  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10655  = | { \$auto$builder.cc:338:Biop$1884 , \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1880  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10689  = | { \$procmux$7093_CMP , \$procmux$7015_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10643  = | { \$procmux$8026_CMP , \$procmux$7975_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10657  = | { \$procmux$7872_CMP , \$auto$slang_frontend.cc:694:finish$\data_we_o$1922  };
  assign \$auto$rtlil.cc:2874:Mux$1828  = ~ \$auto$builder.cc:338:Biop$1824 ;
  assign mult_en_o = illegal_insn_o ? 1'h0 : mult_sel_o;
  assign div_en_o = illegal_insn_o ? 1'h0 : div_sel_o;
  assign \$procmux$5282_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1132.9-1148.12|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 7'h73;
  assign \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2120 [1] = \$auto$builder.cc:338:Biop$2112  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1132.41-1136.12|../rtl/cve2/cve2_decoder.sv:1132.9-1148.12" *) 1'h0 : instr_rdata_alu_i[14];
  assign \$procmux$5315_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1113.9-1128.16|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 4'hf;
  function [1:0] \$procmux$5319 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:1120.19-1126.14|../rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$5319  = b[1:0];
      2'b1?:
        \$procmux$5319  = b[3:2];
      default:
        \$procmux$5319  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2109  = \$procmux$5319 (2'h3, 4'h2, { \$auto$builder.cc:338:Biop$2112 , \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [2] });
  assign \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [2] = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1120.19-1126.14|../rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2108 [5] = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1120.19-1126.14|../rtl/cve2/cve2_decoder.sv:1113.9-1128.16" *) \$auto$opt_reduce.cc:137:opt_pmux$10629 ;
  assign \$procmux$5357_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:918.18-1106.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 6'h33;
  function [4:0] \$procmux$6692 ;
    input [4:0] a;
    input [44:0] b;
    input [8:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:1098.36-1101.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *)
    (* parallel_case *)
    casez (s)
      9'b????????1:
        \$procmux$6692  = b[4:0];
      9'b???????1?:
        \$procmux$6692  = b[9:5];
      9'b??????1??:
        \$procmux$6692  = b[14:10];
      9'b?????1???:
        \$procmux$6692  = b[19:15];
      9'b????1????:
        \$procmux$6692  = b[24:20];
      9'b???1?????:
        \$procmux$6692  = b[29:25];
      9'b??1??????:
        \$procmux$6692  = b[34:30];
      9'b?1???????:
        \$procmux$6692  = b[39:35];
      9'b1????????:
        \$procmux$6692  = b[44:40];
      default:
        \$procmux$6692  = a;
    endcase
  endfunction
  assign { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2098 [5], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2098 [3:0] } = \$procmux$6692 (5'h1c, 45'h01d886452500, { \$procmux$6742_CMP , \$procmux$6741_CMP , \$procmux$6740_CMP , \$procmux$6739_CMP , \$procmux$6738_CMP , \$procmux$6737_CMP , \$procmux$6736_CMP , \$procmux$6735_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10627  });
  assign \$procmux$6693_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1098.36-1101.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'hf;
  assign \$procmux$6694_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1094.36-1097.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'he;
  assign \$procmux$6695_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1090.36-1093.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'hd;
  assign \$procmux$6696_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1086.36-1089.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'hc;
  assign \$procmux$6697_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1082.36-1085.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'hb;
  assign \$procmux$6698_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1078.36-1081.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'ha;
  assign \$procmux$6699_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1074.36-1077.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'h9;
  assign \$procmux$6700_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1070.36-1073.16|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 4'h8;
  assign \$procmux$6735_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:976.36-976.61|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 9'h105;
  assign \$procmux$6736_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:975.36-975.61|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 3'h5;
  assign \$procmux$6737_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:974.36-974.61|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 1'h1;
  assign \$procmux$6738_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:973.36-973.61|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 3'h7;
  assign \$procmux$6739_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:972.36-972.60|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 3'h6;
  assign \$procmux$6740_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:971.36-971.61|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 3'h4;
  assign \$procmux$6741_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:969.36-969.61|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 2'h2;
  assign \$procmux$6742_CMP  = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:968.36-968.61|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) 9'h100;
  assign \$procmux$6743_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:967.36-967.61|../rtl/cve2/cve2_decoder.sv:965.11-1104.18" *) { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] };
  assign { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2102 [5], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2102 [3:0] } = instr_rdata_alu_i[26] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:923.11-963.14|../rtl/cve2/cve2_decoder.sv:922.9-1105.12" *) 5'h1c : { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2098 [5], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2098 [3:0] };
  assign \$auto$slang_frontend.cc:694:finish$\div_sel_o$2105  = instr_rdata_alu_i[26] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:923.11-963.14|../rtl/cve2/cve2_decoder.sv:922.9-1105.12" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$10645 ;
  assign \$auto$slang_frontend.cc:694:finish$\mult_sel_o$2104  = instr_rdata_alu_i[26] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:923.11-963.14|../rtl/cve2/cve2_decoder.sv:922.9-1105.12" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$10649 ;
  assign \$procmux$6878_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:871.13-911.16|../rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 3'h5;
  assign \$procmux$6880_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:790.22-916.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 5'h13;
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2032 [5] = ~ (* src = "../rtl/cve2/cve2_decoder.sv:909.17-909.42|../rtl/cve2/cve2_decoder.sv:908.24-910.18" *) \$auto$builder.cc:338:Biop$2029 ;
  assign { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2033 [5], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2033 [0] } = \$auto$builder.cc:338:Biop$2025  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:907.17-907.42|../rtl/cve2/cve2_decoder.sv:906.15-910.18" *) 2'h1 : { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2032 [5], 1'h0 };
  function [4:0] \$procmux$6947 ;
    input [4:0] a;
    input [34:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:871.13-911.16|../rtl/cve2/cve2_decoder.sv:795.9-915.16" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$6947  = b[4:0];
      7'b?????1?:
        \$procmux$6947  = b[9:5];
      7'b????1??:
        \$procmux$6947  = b[14:10];
      7'b???1???:
        \$procmux$6947  = b[19:15];
      7'b??1????:
        \$procmux$6947  = b[24:20];
      7'b?1?????:
        \$procmux$6947  = b[29:25];
      7'b1??????:
        \$procmux$6947  = b[34:30];
      default:
        \$procmux$6947  = a;
    endcase
  endfunction
  assign { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2037 [5], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2037 [3:0] } = \$procmux$6947 (5'h00, { 30'h37c10c8a, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2033 [5], 1'h1, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2033 [5], 1'h0, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2033 [0] }, { \$procmux$6954_CMP , \$procmux$6953_CMP , \$procmux$6952_CMP , \$procmux$6951_CMP , \$procmux$6950_CMP , \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [2], \$procmux$6878_CMP  });
  assign \$procmux$6950_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:801.19-801.44|../rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 3'h7;
  assign \$procmux$6951_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:800.19-800.43|../rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 3'h6;
  assign \$procmux$6952_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:799.19-799.44|../rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 3'h4;
  assign \$procmux$6953_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:798.19-798.45|../rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 2'h3;
  assign \$procmux$6954_CMP  = instr_rdata_alu_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:797.19-797.44|../rtl/cve2/cve2_decoder.sv:795.9-915.16" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\alu_op_b_mux_sel_o$1980  = ~ (* src = "../rtl/cve2/cve2_decoder.sv:755.29-759.12|../rtl/cve2/cve2_decoder.sv:755.9-759.12" *) instr_rdata_alu_i[14];
  assign \$procmux$6988_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:750.21-760.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 6'h23;
  assign \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [1] = ~ (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:732.34-736.12|../rtl/cve2/cve2_decoder.sv:732.9-743.12" *) instr_first_cycle_i;
  assign \$procmux$7015_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:718.22-744.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 7'h63;
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1972 [5:0] = instr_first_cycle_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:732.34-736.12|../rtl/cve2/cve2_decoder.sv:732.9-743.12" *) { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1968 [5:4], 1'h1, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1968 [2:0] } : 6'h00;
  function [4:0] \$procmux$7071 ;
    input [4:0] a;
    input [29:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:726.20-726.45|../rtl/cve2/cve2_decoder.sv:720.9-728.16" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$7071  = b[4:0];
      6'b????1?:
        \$procmux$7071  = b[9:5];
      6'b???1??:
        \$procmux$7071  = b[14:10];
      6'b??1???:
        \$procmux$7071  = b[19:15];
      6'b?1????:
        \$procmux$7071  = b[24:20];
      6'b1?????:
        \$procmux$7071  = b[29:25];
      default:
        \$procmux$7071  = a;
    endcase
  endfunction
  assign { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1968 [5:4], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1968 [2:0] } = \$procmux$7071 (5'h14, 30'h1ae4ad4c, { \$auto$builder.cc:338:Biop$2112 , \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [2], \$procmux$6952_CMP , \$procmux$6878_CMP , \$procmux$6951_CMP , \$procmux$6950_CMP  });
  assign \$procmux$7093_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:703.9-715.12|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 7'h67;
  function [0:0] \$procmux$7140 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:1132.9-1148.12|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7140  = b[0:0];
      3'b?1?:
        \$procmux$7140  = b[1:1];
      3'b1??:
        \$procmux$7140  = b[2:2];
      default:
        \$procmux$7140  = a;
    endcase
  endfunction
  assign alu_op_b_mux_sel_o = \$procmux$7140 (1'h1, { \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [1], \$auto$slang_frontend.cc:694:finish$\alu_op_b_mux_sel_o$1980 , 1'h0 }, { \$procmux$7015_CMP , \$procmux$6988_CMP , \$procmux$5357_CMP  });
  assign \$procmux$7155_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:686.9-698.12|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 7'h6f;
  function [1:0] \$procmux$7158 ;
    input [1:0] a;
    input [9:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:1132.9-1148.12|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$7158  = b[1:0];
      5'b???1?:
        \$procmux$7158  = b[3:2];
      5'b??1??:
        \$procmux$7158  = b[5:4];
      5'b?1???:
        \$procmux$7158  = b[7:6];
      5'b1????:
        \$procmux$7158  = b[9:8];
      default:
        \$procmux$7158  = a;
    endcase
  endfunction
  assign alu_op_a_mux_sel_o = \$procmux$7158 (2'h3, { \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [1], 5'h08, \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2109 , \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2120 [1], \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2120 [1] }, { \$auto$opt_reduce.cc:137:opt_pmux$10689 , \$auto$opt_reduce.cc:137:opt_pmux$10625 , \$auto$opt_reduce.cc:137:opt_pmux$10623 , \$procmux$5315_CMP , \$procmux$5282_CMP  });
  assign \$procmux$7166_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:783.21-788.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 5'h17;
  assign \$procmux$7167_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:762.20-769.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 2'h3;
  function [5:0] \$procmux$7181 ;
    input [5:0] a;
    input [29:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:1113.9-1128.16|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$7181  = b[5:0];
      5'b???1?:
        \$procmux$7181  = b[11:6];
      5'b??1??:
        \$procmux$7181  = b[17:12];
      5'b?1???:
        \$procmux$7181  = b[23:18];
      5'b1????:
        \$procmux$7181  = b[29:24];
      default:
        \$procmux$7181  = a;
    endcase
  endfunction
  assign alu_operator_o[5:0] = \$procmux$7181 (6'h2c, { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1972 [5:0], 6'h00, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2037 [5], 1'h0, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2037 [3:0], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2102 [5], 1'h0, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2102 [3:0], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2108 [5], 1'h0, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2108 [5], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2108 [5], 2'h0 }, { \$procmux$7015_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10633 , \$procmux$6880_CMP , \$procmux$5357_CMP , \$procmux$5315_CMP  });
  assign \$procmux$7188_CMP  = instr_rdata_alu_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:775.19-781.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) 6'h37;
  function [2:0] \$procmux$7201 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:1132.9-1148.12|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$7201  = b[2:0];
      6'b????1?:
        \$procmux$7201  = b[5:3];
      6'b???1??:
        \$procmux$7201  = b[8:6];
      6'b??1???:
        \$procmux$7201  = b[11:9];
      6'b?1????:
        \$procmux$7201  = b[14:12];
      6'b1?????:
        \$procmux$7201  = b[17:15];
      default:
        \$procmux$7201  = a;
    endcase
  endfunction
  assign imm_b_mux_sel_o = \$procmux$7201 (3'h0, { 2'h2, \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [1], \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [1], 1'h0, \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [1], 1'h0, \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [1], 3'h0, \$auto$slang_frontend.cc:694:finish$\alu_op_b_mux_sel_o$1980 , 3'h3, \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [2], 1'h0, \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [2] }, { \$procmux$7155_CMP , \$procmux$7093_CMP , \$procmux$7015_CMP , \$procmux$6988_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10639 , \$procmux$5315_CMP  });
  assign div_sel_o = \$procmux$5357_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:918.18-1106.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) \$auto$slang_frontend.cc:694:finish$\div_sel_o$2105 ;
  assign mult_sel_o = \$procmux$5357_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:918.18-1106.10|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) \$auto$slang_frontend.cc:694:finish$\mult_sel_o$2104 ;
  assign imm_a_mux_sel_o = \$procmux$5282_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:1132.9-1148.12|../rtl/cve2/cve2_decoder.sv:678.5-1152.12" *) \$auto$builder.cc:338:Biop$2112  : 1'h1;
  assign rf_we_o = illegal_insn_o ? (* src = "../rtl/cve2/cve2_decoder.sv:648.23-656.8|../rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\rf_we$1942 ;
  assign branch_in_dec_o = illegal_insn_o ? (* src = "../rtl/cve2/cve2_decoder.sv:648.23-656.8|../rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\branch_in_dec_o$1939 ;
  assign jump_in_dec_o = illegal_insn_o ? (* src = "../rtl/cve2/cve2_decoder.sv:648.23-656.8|../rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1938 ;
  assign jump_set_o = illegal_insn_o ? (* src = "../rtl/cve2/cve2_decoder.sv:648.23-656.8|../rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\jump_set_o$1932 ;
  assign csr_access_o = illegal_insn_o ? (* src = "../rtl/cve2/cve2_decoder.sv:648.23-656.8|../rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : rf_wdata_sel_o;
  assign data_we_o = illegal_insn_o ? (* src = "../rtl/cve2/cve2_decoder.sv:648.23-656.8|../rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\data_we_o$1922 ;
  assign data_req_o = illegal_insn_o ? (* src = "../rtl/cve2/cve2_decoder.sv:648.23-656.8|../rtl/cve2/cve2_decoder.sv:648.5-656.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$10657 ;
  assign illegal_insn_o = \$auto$slang_frontend.cc:694:finish$\illegal_insn$1940  | (* src = "../rtl/cve2/cve2_decoder.sv:640.7-640.27|../rtl/cve2/cve2_decoder.sv:639.5-641.8" *) illegal_c_insn_i;
  function [1:0] \$procmux$7355 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:625.22-625.44|../rtl/cve2/cve2_decoder.sv:622.11-627.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7355  = b[1:0];
      3'b?1?:
        \$procmux$7355  = b[3:2];
      3'b1??:
        \$procmux$7355  = b[5:4];
      default:
        \$procmux$7355  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\csr_op$1907  = \$procmux$7355 (2'h0, 6'h1b, { \$procmux$7358_CMP , \$procmux$7357_CMP , \$procmux$7356_CMP  });
  assign \$procmux$7356_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:625.22-625.44|../rtl/cve2/cve2_decoder.sv:622.11-627.18" *) 2'h3;
  assign \$procmux$7357_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:624.22-624.42|../rtl/cve2/cve2_decoder.sv:622.11-627.18" *) 2'h2;
  assign \$procmux$7358_CMP  = instr_rdata_i[13:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:623.22-623.44|../rtl/cve2/cve2_decoder.sv:622.11-627.18" *) 1'h1;
  assign \$procmux$7364_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 7'h73;
  assign \$auto$slang_frontend.cc:694:finish$\csr_illegal$1908  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:625.22-625.44|../rtl/cve2/cve2_decoder.sv:622.11-627.18" *) \$auto$opt_reduce.cc:137:opt_pmux$10621 ;
  assign \$auto$builder.cc:364:Unop$1817  = ~ (* src = "../rtl/cve2/cve2_decoder.sv:619.13-619.39|../rtl/cve2/cve2_decoder.sv:618.11-620.14" *) instr_rdata_i[14];
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1918  = \$auto$builder.cc:338:Biop$1884  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$auto$slang_frontend.cc:694:finish$\illegal_insn$1901  : \$auto$slang_frontend.cc:694:finish$\csr_illegal$1908 ;
  assign \$auto$slang_frontend.cc:694:finish$\wfi_insn_o$1916  = \$auto$builder.cc:338:Biop$1884  & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$auto$slang_frontend.cc:694:finish$\wfi_insn_o$1891 ;
  assign \$auto$slang_frontend.cc:694:finish$\ecall_insn_o$1915  = \$auto$builder.cc:338:Biop$1884  & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$auto$slang_frontend.cc:694:finish$\ecall_insn_o$1890 ;
  assign \$auto$slang_frontend.cc:694:finish$\dret_insn_o$1914  = \$auto$builder.cc:338:Biop$1884  & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$auto$slang_frontend.cc:694:finish$\dret_insn_o$1889 ;
  assign \$auto$slang_frontend.cc:694:finish$\mret_insn_o$1913  = \$auto$builder.cc:338:Biop$1884  & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$auto$slang_frontend.cc:694:finish$\mret_insn_o$1888 ;
  assign \$auto$slang_frontend.cc:694:finish$\ebrk_insn_o$1912  = \$auto$builder.cc:338:Biop$1884  & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$auto$slang_frontend.cc:694:finish$\ebrk_insn_o$1887 ;
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1901  = \$auto$slang_frontend.cc:694:finish$\illegal_insn$1892  | (* src = "../rtl/cve2/cve2_decoder.sv:610.13-610.33|../rtl/cve2/cve2_decoder.sv:609.11-611.14" *) \$auto$builder.cc:338:Biop$1898 ;
  assign \$auto$slang_frontend.cc:694:finish$\ecall_insn_o$1890  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:589.15-589.35|../rtl/cve2/cve2_decoder.sv:586.11-606.18" *) instr_rdata_i[31:20];
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1892  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:602.15-602.33|../rtl/cve2/cve2_decoder.sv:586.11-606.18" *) \$auto$opt_reduce.cc:137:opt_pmux$10631 ;
  assign \$auto$slang_frontend.cc:694:finish$\wfi_insn_o$1891  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:602.15-602.33|../rtl/cve2/cve2_decoder.sv:586.11-606.18" *) 9'h105;
  assign \$auto$slang_frontend.cc:694:finish$\dret_insn_o$1889  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:599.15-599.34|../rtl/cve2/cve2_decoder.sv:586.11-606.18" *) 11'h7b2;
  assign \$auto$slang_frontend.cc:694:finish$\mret_insn_o$1888  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:596.15-596.34|../rtl/cve2/cve2_decoder.sv:586.11-606.18" *) 10'h302;
  assign \$auto$slang_frontend.cc:694:finish$\ebrk_insn_o$1887  = instr_rdata_i[31:20] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:593.15-593.34|../rtl/cve2/cve2_decoder.sv:586.11-606.18" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\csr_access_o$1910  = ~ (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) \$auto$builder.cc:338:Biop$1884 ;
  assign \$auto$slang_frontend.cc:694:finish$\rf_ren_a_o$1911  = \$auto$builder.cc:338:Biop$1884  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) 1'h0 : \$auto$builder.cc:364:Unop$1817 ;
  assign \$auto$slang_frontend.cc:694:finish$\csr_op$1909  = \$auto$builder.cc:338:Biop$1884  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.37-612.12|../rtl/cve2/cve2_decoder.sv:584.9-630.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\csr_op$1907 ;
  assign \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1880  = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:565.19-576.14|../rtl/cve2/cve2_decoder.sv:560.9-580.16" *) 1'h1;
  assign \$procmux$7578_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:560.9-580.16|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 4'hf;
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1881  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:565.19-576.14|../rtl/cve2/cve2_decoder.sv:560.9-580.16" *) \$auto$opt_reduce.cc:137:opt_pmux$10655 ;
  assign \$auto$slang_frontend.cc:694:finish$\jump_set_o$1879  = \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1880  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:565.19-576.14|../rtl/cve2/cve2_decoder.sv:560.9-580.16" *) instr_first_cycle_i;
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1872  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:543.36-547.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) \$auto$opt_reduce.cc:137:opt_pmux$10611 ;
  assign \$procmux$7616_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:543.36-547.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'hf;
  assign \$procmux$7617_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:538.36-542.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'he;
  assign \$procmux$7618_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:533.36-537.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'hd;
  assign \$procmux$7619_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:528.36-532.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'hc;
  assign \$procmux$7620_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:523.36-527.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'hb;
  assign \$procmux$7621_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:518.36-522.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'ha;
  assign \$procmux$7622_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:513.36-517.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'h9;
  assign \$procmux$7623_CMP  = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:508.36-512.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 4'h8;
  assign \$procmux$7624_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) { instr_rdata_i[31:25], instr_rdata_i[14:12] };
  assign \$procmux$7624_CMP [1] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 9'h100;
  assign \$procmux$7624_CMP [2] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 2'h2;
  assign \$procmux$7624_CMP [3] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 2'h3;
  assign \$procmux$7624_CMP [4] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 3'h4;
  assign \$procmux$7624_CMP [5] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 3'h6;
  assign \$procmux$7624_CMP [6] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 3'h7;
  assign \$procmux$7624_CMP [7] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 1'h1;
  assign \$procmux$7624_CMP [8] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 3'h5;
  assign \$procmux$7624_CMP [9] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:461.36-461.56|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *) 9'h105;
  assign \$procmux$7629_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:443.18-553.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 6'h33;
  function [1:0] \$procmux$7635 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:538.36-542.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7635  = b[1:0];
      2'b1?:
        \$procmux$7635  = b[3:2];
      default:
        \$procmux$7635  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\multdiv_signed_mode_o$1871  = \$procmux$7635 (2'h0, 4'h7, { \$procmux$7621_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10613  });
  function [1:0] \$procmux$7649 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:543.36-547.16|../rtl/cve2/cve2_decoder.sv:450.11-551.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$7649  = b[1:0];
      3'b?1?:
        \$procmux$7649  = b[3:2];
      3'b1??:
        \$procmux$7649  = b[5:4];
      default:
        \$procmux$7649  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\multdiv_operator_o$1870  = \$procmux$7649 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$10619 , \$auto$opt_reduce.cc:137:opt_pmux$10617 , \$auto$opt_reduce.cc:137:opt_pmux$10615  });
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1875  = \$auto$slang_frontend.cc:694:finish$\illegal_insn$1872  | (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:448.11-448.61|../rtl/cve2/cve2_decoder.sv:447.9-552.12" *) \$auto$builder.cc:338:Biop$1867 ;
  assign \$auto$slang_frontend.cc:694:finish$\multdiv_signed_mode_o$1874  = \$auto$builder.cc:338:Biop$1867  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:448.11-448.61|../rtl/cve2/cve2_decoder.sv:447.9-552.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\multdiv_signed_mode_o$1871 ;
  assign \$auto$slang_frontend.cc:694:finish$\multdiv_operator_o$1873  = \$auto$builder.cc:338:Biop$1867  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:448.11-448.61|../rtl/cve2/cve2_decoder.sv:447.9-552.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\multdiv_operator_o$1870 ;
  assign \$procmux$7702_CMP  = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:395.13-436.16|../rtl/cve2/cve2_decoder.sv:348.9-440.16" *) 3'h5;
  assign \$procmux$7704_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:344.22-441.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 5'h13;
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1863  = \$procmux$7781_CTRL  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:427.19-431.22|../rtl/cve2/cve2_decoder.sv:398.15-435.22" *) \$auto$rtlil.cc:2874:Mux$1828  : 1'h1;
  assign \$procmux$7781_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:400.28-400.81|../rtl/cve2/cve2_decoder.sv:398.15-435.22" *) \$procmux$7781_CMP ;
  assign \$procmux$7781_CMP [0] = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:400.28-400.81|../rtl/cve2/cve2_decoder.sv:398.15-435.22" *) instr_rdata_i[31:27];
  assign \$procmux$7781_CMP [1] = instr_rdata_i[31:27] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:400.28-400.81|../rtl/cve2/cve2_decoder.sv:398.15-435.22" *) 4'h8;
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1864  = \$auto$slang_frontend.cc:694:finish$\illegal_insn$1863  | (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:396.15-396.65|../rtl/cve2/cve2_decoder.sv:395.13-436.16" *) instr_rdata_i[26];
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1835  = \$procmux$7781_CMP [0] ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:373.17-388.24|../rtl/cve2/cve2_decoder.sv:357.13-391.20" *) \$auto$rtlil.cc:2874:Mux$1828  : 1'h1;
  function [0:0] \$procmux$7852 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:395.13-436.16|../rtl/cve2/cve2_decoder.sv:348.9-440.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7852  = b[0:0];
      2'b1?:
        \$procmux$7852  = b[1:1];
      default:
        \$procmux$7852  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1865  = \$procmux$7852 (1'h0, { \$auto$slang_frontend.cc:694:finish$\illegal_insn$1835 , \$auto$slang_frontend.cc:694:finish$\illegal_insn$1864  }, { \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1880 , \$procmux$7702_CMP  });
  assign \$procmux$7856_CMP [3] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:354.19-354.39|../rtl/cve2/cve2_decoder.sv:348.9-440.16" *) 3'h4;
  assign \$procmux$7856_CMP [4] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:354.19-354.39|../rtl/cve2/cve2_decoder.sv:348.9-440.16" *) 3'h6;
  assign \$procmux$7856_CMP [5] = instr_rdata_i[14:12] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:354.19-354.39|../rtl/cve2/cve2_decoder.sv:348.9-440.16" *) 3'h7;
  assign \$procmux$7872_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:308.20-330.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 2'h3;
  function [1:0] \$procmux$7883 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:319.18-319.38|../rtl/cve2/cve2_decoder.sv:317.9-329.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7883  = b[1:0];
      2'b1?:
        \$procmux$7883  = b[3:2];
      default:
        \$procmux$7883  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\data_type_o$1814  = \$procmux$7883 (2'h0, 4'h9, { \$procmux$7885_CMP , \$procmux$7358_CMP  });
  assign \$procmux$7885_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:318.18-318.38|../rtl/cve2/cve2_decoder.sv:317.9-329.16" *) instr_rdata_i[13:12];
  function [0:0] \$procmux$7897 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:320.18-325.14|../rtl/cve2/cve2_decoder.sv:317.9-329.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$7897  = b[0:0];
      2'b1?:
        \$procmux$7897  = b[1:1];
      default:
        \$procmux$7897  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1822  = \$procmux$7897 (1'h1, { 1'h0, instr_rdata_i[14] }, { \$auto$opt_reduce.cc:137:opt_pmux$10635 , \$procmux$7357_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_we_o$1922  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:289.21-306.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 6'h23;
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1815  = \$auto$opt_reduce.cc:137:opt_pmux$10637  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:303.20-303.41|../rtl/cve2/cve2_decoder.sv:300.9-305.16" *) instr_rdata_i[14] : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1810  = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:277.20-277.40|../rtl/cve2/cve2_decoder.sv:271.9-279.16" *) \$procmux$7958_CTRL ;
  assign \$procmux$7958_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:277.20-277.40|../rtl/cve2/cve2_decoder.sv:271.9-279.16" *) { \$procmux$7856_CMP [5:3], \$procmux$7702_CMP , \$auto$builder.cc:338:Biop$1884 , \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1880  };
  assign \$auto$slang_frontend.cc:694:finish$\branch_in_dec_o$1939  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:268.22-283.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 7'h63;
  assign \$procmux$7975_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:250.20-266.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 7'h67;
  function [0:0] \$procmux$8008 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$8008  = b[0:0];
      3'b?1?:
        \$procmux$8008  = b[1:1];
      3'b1??:
        \$procmux$8008  = b[2:2];
      default:
        \$procmux$8008  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\rf_we$1942  = \$procmux$8008 (1'h0, { \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [1], 1'h1, \$auto$slang_frontend.cc:694:finish$\csr_access_o$1910  }, { \$auto$opt_reduce.cc:137:opt_pmux$10643 , \$auto$opt_reduce.cc:137:opt_pmux$10641 , \$procmux$7364_CMP  });
  assign \$procmux$8016_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:341.9-341.33|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 5'h17;
  assign \$procmux$8017_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:337.9-337.33|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 6'h37;
  assign \$procmux$8026_CMP  = instr_rdata_i[6:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:237.19-248.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) 7'h6f;
  function [0:0] \$procmux$8031 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:560.9-580.16|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8031  = b[0:0];
      2'b1?:
        \$procmux$8031  = b[1:1];
      default:
        \$procmux$8031  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1938  = \$procmux$8031 (1'h0, { 1'h1, \$auto$slang_frontend.cc:694:finish$\jump_in_dec_o$1880  }, { \$auto$opt_reduce.cc:137:opt_pmux$10643 , \$procmux$7578_CMP  });
  function [0:0] \$procmux$8048 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:560.9-580.16|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8048  = b[0:0];
      2'b1?:
        \$procmux$8048  = b[1:1];
      default:
        \$procmux$8048  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\jump_set_o$1932  = \$procmux$8048 (1'h0, { instr_first_cycle_i, \$auto$slang_frontend.cc:694:finish$\jump_set_o$1879  }, { \$auto$opt_reduce.cc:137:opt_pmux$10643 , \$procmux$7578_CMP  });
  function [0:0] \$procmux$8099 ;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      9'b????????1:
        \$procmux$8099  = b[0:0];
      9'b???????1?:
        \$procmux$8099  = b[1:1];
      9'b??????1??:
        \$procmux$8099  = b[2:2];
      9'b?????1???:
        \$procmux$8099  = b[3:3];
      9'b????1????:
        \$procmux$8099  = b[4:4];
      9'b???1?????:
        \$procmux$8099  = b[5:5];
      9'b??1??????:
        \$procmux$8099  = b[6:6];
      9'b?1???????:
        \$procmux$8099  = b[7:7];
      9'b1????????:
        \$procmux$8099  = b[8:8];
      default:
        \$procmux$8099  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\illegal_insn$1940  = \$procmux$8099 (1'h1, { \$auto$builder.cc:338:Biop$1806 , \$auto$slang_frontend.cc:694:finish$\illegal_insn$1810 , \$auto$slang_frontend.cc:694:finish$\illegal_insn$1815 , \$auto$slang_frontend.cc:694:finish$\illegal_insn$1822 , 1'h0, \$auto$slang_frontend.cc:694:finish$\illegal_insn$1865 , \$auto$slang_frontend.cc:694:finish$\illegal_insn$1875 , \$auto$slang_frontend.cc:694:finish$\illegal_insn$1881 , \$auto$slang_frontend.cc:694:finish$\illegal_insn$1918  }, { \$procmux$7975_CMP , \$auto$slang_frontend.cc:694:finish$\branch_in_dec_o$1939 , \$auto$slang_frontend.cc:694:finish$\data_we_o$1922 , \$procmux$7872_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10647 , \$procmux$7704_CMP , \$procmux$7629_CMP , \$procmux$7578_CMP , \$procmux$7364_CMP  });
  assign data_sign_extension_o = \$procmux$7872_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:308.20-330.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$builder.cc:364:Unop$1817 ;
  assign data_type_o = \$auto$opt_reduce.cc:137:opt_pmux$10657  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:308.20-330.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\data_type_o$1814  : 2'h0;
  assign multdiv_signed_mode_o = \$procmux$7629_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:443.18-553.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\multdiv_signed_mode_o$1874  : 2'h0;
  assign multdiv_operator_o = \$procmux$7629_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:443.18-553.10|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\multdiv_operator_o$1873  : 2'h0;
  assign rf_wdata_sel_o = \$procmux$7364_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\csr_access_o$1910 ;
  assign wfi_insn_o = \$procmux$7364_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\wfi_insn_o$1916 ;
  assign ecall_insn_o = \$procmux$7364_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\ecall_insn_o$1915 ;
  assign dret_insn_o = \$procmux$7364_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\dret_insn_o$1914 ;
  assign mret_insn_o = \$procmux$7364_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\mret_insn_o$1913 ;
  assign ebrk_insn_o = \$procmux$7364_CMP  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\ebrk_insn_o$1912 ;
  function [0:0] \$procmux$8227 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$8227  = b[0:0];
      2'b1?:
        \$procmux$8227  = b[1:1];
      default:
        \$procmux$8227  = a;
    endcase
  endfunction
  assign rf_ren_a_o = \$procmux$8227 (1'h0, { 1'h1, \$auto$slang_frontend.cc:694:finish$\rf_ren_a_o$1911  }, { \$auto$opt_reduce.cc:137:opt_pmux$10653 , \$procmux$7364_CMP  });
  assign csr_op = \$procmux$7364_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_decoder.sv:584.9-630.12|../rtl/cve2/cve2_decoder.sv:231.5-636.12" *) \$auto$slang_frontend.cc:694:finish$\csr_op$1909  : 2'h0;
  assign csr_op_o = \$auto$builder.cc:338:Biop$1792  ? (* src = "../rtl/cve2/cve2_decoder.sv:192.7-192.30|../rtl/cve2/cve2_decoder.sv:190.5-193.8" *) 2'h0 : csr_op;
  assign \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$1966 [0] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2120 [0] = \$auto$slang_frontend.cc:694:finish$\alu_op_a_mux_sel_o$2120 [1];
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1968 [3] = 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$1972 [6] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2032 [4:0] = { 2'h1, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2032 [5], 2'h0 };
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2033 [4:1] = { 2'h1, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2033 [5], 1'h0 };
  assign { \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2037 [6], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2037 [4] } = 2'h0;
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2098 [4] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2102 [4] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2108 [4:0] = { 1'h0, \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2108 [5], \$auto$slang_frontend.cc:694:finish$\alu_operator_o$2108 [5], 2'h0 };
  assign \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [1:0] = { 1'h0, \$auto$slang_frontend.cc:694:finish$\imm_b_mux_sel_o$2107 [2] };
  assign \$procmux$7856_CMP [0] = \$auto$builder.cc:338:Biop$1884 ;
  assign alu_multicycle_o = 1'h0;
  assign alu_operator_o[6] = 1'h0;
  assign imm_b_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[7], instr_rdata_i[30:25], instr_rdata_i[11:8], 1'h0 };
  assign imm_i_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:20] };
  assign imm_j_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[19:12], instr_rdata_i[20], instr_rdata_i[30:21], 1'h0 };
  assign imm_s_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:25], instr_rdata_i[11:7] };
  assign imm_u_type_o = { instr_rdata_i[31:12], 12'h000 };
  assign rf_raddr_a_o = instr_rdata_i[19:15];
  assign rf_raddr_b_o = instr_rdata_i[24:20];
  assign rf_waddr_o = instr_rdata_i[11:7];
  assign zimm_rs1_type_o = { 27'h0000000, instr_rdata_i[19:15] };
endmodule

(* src = "../rtl/cve2/cve2_ex_block.sv:11.8" *)
module \cve2_ex_block$cve2_core.ex_block_i (clk_i, rst_ni, alu_operator_i, alu_operand_a_i, alu_operand_b_i, alu_instr_first_cycle_i, multdiv_operator_i, mult_en_i, div_en_i, mult_sel_i, div_sel_i, multdiv_signed_mode_i, multdiv_operand_a_i, multdiv_operand_b_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, alu_adder_result_ex_o, result_ex_o, branch_target_o, branch_decision_o
, ex_valid_o);
  wire \$auto$builder.cc:364:Unop$423 ;
  wire \$auto$builder.cc:364:Unop$425 ;
  (* src = "../rtl/cve2/cve2_ex_block.sv:40.33" *)
  output [31:0] alu_adder_result_ex_o;
  wire [31:0] alu_adder_result_ex_o;
  (* src = "../rtl/cve2/cve2_ex_block.sv:53.16" *)
  wire [33:0] alu_adder_result_ext;
  (* src = "../rtl/cve2/cve2_ex_block.sv:58.16" *)
  wire [63:0] alu_imd_val_d;
  (* src = "../rtl/cve2/cve2_ex_block.sv:59.16" *)
  wire [1:0] alu_imd_val_we;
  (* src = "../rtl/cve2/cve2_ex_block.sv:22.33" *)
  input alu_instr_first_cycle_i;
  wire alu_instr_first_cycle_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:54.32" *)
  wire alu_is_equal_result;
  (* src = "../rtl/cve2/cve2_ex_block.sv:20.33" *)
  input [31:0] alu_operand_a_i;
  wire [31:0] alu_operand_a_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:21.33" *)
  input [31:0] alu_operand_b_i;
  wire [31:0] alu_operand_b_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:19.33" *)
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:50.16" *)
  wire [31:0] alu_result;
  (* src = "../rtl/cve2/cve2_ex_block.sv:43.33" *)
  output branch_decision_o;
  wire branch_decision_o;
  (* src = "../rtl/cve2/cve2_ex_block.sv:42.33" *)
  output [31:0] branch_target_o;
  wire [31:0] branch_target_o;
  (* src = "../rtl/cve2/cve2_ex_block.sv:15.33" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:27.33" *)
  input div_en_i;
  wire div_en_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:29.33" *)
  input div_sel_i;
  wire div_sel_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:45.33" *)
  output ex_valid_o;
  wire ex_valid_o;
  (* src = "../rtl/cve2/cve2_ex_block.sv:36.33" *)
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  (* src = "../rtl/cve2/cve2_ex_block.sv:37.33" *)
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:35.33" *)
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  (* src = "../rtl/cve2/cve2_ex_block.sv:26.33" *)
  input mult_en_i;
  wire mult_en_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:28.33" *)
  input mult_sel_i;
  wire mult_sel_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:52.39" *)
  wire [32:0] multdiv_alu_operand_a;
  (* src = "../rtl/cve2/cve2_ex_block.sv:52.16" *)
  wire [32:0] multdiv_alu_operand_b;
  (* src = "../rtl/cve2/cve2_ex_block.sv:60.16" *)
  wire [67:0] multdiv_imd_val_d;
  (* src = "../rtl/cve2/cve2_ex_block.sv:61.16" *)
  wire [1:0] multdiv_imd_val_we;
  (* src = "../rtl/cve2/cve2_ex_block.sv:31.33" *)
  input [31:0] multdiv_operand_a_i;
  wire [31:0] multdiv_operand_a_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:32.33" *)
  input [31:0] multdiv_operand_b_i;
  wire [31:0] multdiv_operand_b_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:25.33" *)
  input [1:0] multdiv_operator_i;
  wire [1:0] multdiv_operator_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:50.28" *)
  wire [31:0] multdiv_result;
  (* src = "../rtl/cve2/cve2_ex_block.sv:56.16" *)
  wire multdiv_sel;
  (* src = "../rtl/cve2/cve2_ex_block.sv:30.33" *)
  input [1:0] multdiv_signed_mode_i;
  wire [1:0] multdiv_signed_mode_i;
  (* src = "../rtl/cve2/cve2_ex_block.sv:55.16" *)
  wire multdiv_valid;
  (* src = "../rtl/cve2/cve2_ex_block.sv:41.33" *)
  output [31:0] result_ex_o;
  wire [31:0] result_ex_o;
  (* src = "../rtl/cve2/cve2_ex_block.sv:16.33" *)
  input rst_ni;
  wire rst_ni;
  assign multdiv_sel = mult_sel_i | div_sel_i;
  assign \$auto$builder.cc:364:Unop$423  = | alu_imd_val_we;
  assign \$auto$builder.cc:364:Unop$425  = ~ \$auto$builder.cc:364:Unop$423 ;
  assign imd_val_d_o[67:34] = multdiv_sel ? multdiv_imd_val_d[67:34] : { 2'h0, alu_imd_val_d[63:32] };
  assign imd_val_d_o[33:0] = multdiv_sel ? multdiv_imd_val_d[33:0] : { 2'h0, alu_imd_val_d[31:0] };
  assign imd_val_we_o = multdiv_sel ? multdiv_imd_val_we : alu_imd_val_we;
  assign result_ex_o = multdiv_sel ? multdiv_result : alu_result;
  assign ex_valid_o = multdiv_sel ? multdiv_valid : \$auto$builder.cc:364:Unop$425 ;
  (* src = "../rtl/cve2/cve2_ex_block.sv:97.5" *)
  \cve2_alu$cve2_core.ex_block_i.alu_i  alu_i (
    .adder_result_ext_o(alu_adder_result_ext),
    .adder_result_o(alu_adder_result_ex_o),
    .comparison_result_o(branch_decision_o),
    .imd_val_d_o(alu_imd_val_d),
    .imd_val_q_i({ imd_val_q_i[65:34], imd_val_q_i[31:0] }),
    .imd_val_we_o(alu_imd_val_we),
    .instr_first_cycle_i(alu_instr_first_cycle_i),
    .is_equal_result_o(alu_is_equal_result),
    .multdiv_operand_a_i(multdiv_alu_operand_a),
    .multdiv_operand_b_i(multdiv_alu_operand_b),
    .multdiv_sel_i(multdiv_sel),
    .operand_a_i(alu_operand_a_i),
    .operand_b_i(alu_operand_b_i),
    .operator_i(alu_operator_i),
    .result_o(alu_result)
  );
  (* src = "../rtl/cve2/cve2_ex_block.sv:146.7" *)
  \cve2_multdiv_fast$cve2_core.ex_block_i.gen_multdiv_fast.multdiv_i  \gen_multdiv_fast.multdiv_i  (
    .alu_adder_ext_i(alu_adder_result_ext),
    .alu_adder_i(alu_adder_result_ex_o),
    .alu_operand_a_o(multdiv_alu_operand_a),
    .alu_operand_b_o(multdiv_alu_operand_b),
    .clk_i(clk_i),
    .div_en_i(div_en_i),
    .div_sel_i(div_sel_i),
    .equal_to_zero_i(alu_is_equal_result),
    .imd_val_d_o(multdiv_imd_val_d),
    .imd_val_q_i(imd_val_q_i),
    .imd_val_we_o(multdiv_imd_val_we),
    .mult_en_i(mult_en_i),
    .mult_sel_i(mult_sel_i),
    .multdiv_result_o(multdiv_result),
    .op_a_i(multdiv_operand_a_i),
    .op_b_i(multdiv_operand_b_i),
    .operator_i(multdiv_operator_i),
    .rst_ni(rst_ni),
    .signed_mode_i(multdiv_signed_mode_i),
    .valid_o(multdiv_valid)
  );
  assign branch_target_o = alu_adder_result_ex_o;
endmodule

(* src = "../rtl/cve2/cve2_fetch_fifo.sv:15.8" *)
module \cve2_fetch_fifo$cve2_core.if_stage_i.prefetch_buffer_i.fifo_i (clk_i, rst_ni, busy_o, clear_i, in_valid_i, in_addr_i, in_rdata_i, in_err_i, out_valid_o, out_ready_i, out_addr_o, out_rdata_o, out_err_o, out_err_plus2_o);
  wire \$auto$builder.cc:338:Biop$3108 ;
  wire \$auto$builder.cc:338:Biop$3110 ;
  wire \$auto$builder.cc:338:Biop$3112 ;
  wire \$auto$builder.cc:338:Biop$3118 ;
  wire \$auto$builder.cc:338:Biop$3120 ;
  wire \$auto$builder.cc:338:Biop$3122 ;
  wire \$auto$builder.cc:338:Biop$3132 ;
  wire \$auto$builder.cc:338:Biop$3142 ;
  wire \$auto$builder.cc:338:Biop$3146 ;
  wire \$auto$builder.cc:338:Biop$3152 ;
  wire \$auto$builder.cc:338:Biop$3168 ;
  wire \$auto$builder.cc:338:Biop$3196 ;
  wire \$auto$builder.cc:338:Biop$3202 ;
  wire \$auto$builder.cc:338:Biop$3214 ;
  wire \$auto$builder.cc:338:Biop$3220 ;
  wire \$auto$builder.cc:338:Biop$3236 ;
  wire \$auto$builder.cc:338:Biop$3248 ;
  wire \$auto$builder.cc:338:Biop$3254 ;
  wire \$auto$builder.cc:364:Unop$3106 ;
  wire \$auto$builder.cc:364:Unop$3128 ;
  wire \$auto$builder.cc:364:Unop$3148 ;
  wire \$auto$builder.cc:364:Unop$3176 ;
  wire \$auto$builder.cc:364:Unop$3194 ;
  wire \$auto$builder.cc:364:Unop$3210 ;
  wire \$auto$builder.cc:364:Unop$3218 ;
  wire \$auto$builder.cc:364:Unop$3232 ;
  wire \$auto$builder.cc:364:Unop$3266 ;
  wire \$auto$rtlil.cc:2874:Mux$10754 ;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\out_valid_o$3162 ;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:57.29" *)
  wire addr_incr_two;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:55.29" *)
  wire aligned_is_compressed;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:23.31" *)
  output [1:0] busy_o;
  wire [1:0] busy_o;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:22.31" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:18.31" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:48.29" *)
  wire [2:0] entry_en;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:52.29" *)
  wire err;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:44.29" *)
  wire [2:0] err_d;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:52.51" *)
  wire err_plus2;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:44.40" *)
  reg [2:0] err_q;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:52.36" *)
  wire err_unaligned;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:27.31" *)
  input [31:0] in_addr_i;
  wire [31:0] in_addr_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:29.31" *)
  input in_err_i;
  wire in_err_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:28.31" *)
  input [31:0] in_rdata_i;
  wire [31:0] in_rdata_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:26.31" *)
  input in_valid_i;
  wire in_valid_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:59.29" *)
  wire [30:0] instr_addr_d;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:60.29" *)
  wire instr_addr_en;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:58.29" *)
  wire [30:0] instr_addr_next;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:59.43" *)
  reg [30:0] instr_addr_q;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:46.29" *)
  wire [2:0] lowest_free_entry;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:34.31" *)
  output [31:0] out_addr_o;
  wire [31:0] out_addr_o;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:36.31" *)
  output out_err_o;
  wire out_err_o;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:37.31" *)
  output out_err_plus2_o;
  wire out_err_plus2_o;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:35.31" *)
  output [31:0] out_rdata_o;
  wire [31:0] out_rdata_o;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:33.31" *)
  input out_ready_i;
  wire out_ready_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:32.31" *)
  output out_valid_o;
  wire out_valid_o;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:50.29" *)
  wire pop_fifo;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:51.29" *)
  wire [31:0] rdata;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:43.29" *)
  wire [95:0] rdata_d;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:43.40" *)
  reg [95:0] rdata_q;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:51.36" *)
  wire [31:0] rdata_unaligned;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:19.31" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:55.52" *)
  wire unaligned_is_compressed;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:53.29" *)
  wire valid;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:45.29" *)
  wire [2:0] valid_d;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:47.43" *)
  wire [2:0] valid_popped;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:47.29" *)
  wire [2:0] valid_pushed;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:45.40" *)
  reg [2:0] valid_q;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:53.36" *)
  wire valid_unaligned;
  assign valid = valid_q[0] | in_valid_i;
  assign \$auto$builder.cc:338:Biop$3108  = err_q[1] & \$auto$builder.cc:364:Unop$3106 ;
  assign \$auto$builder.cc:338:Biop$3110  = \$auto$builder.cc:338:Biop$3108  | err_q[0];
  assign \$auto$builder.cc:338:Biop$3112  = valid_q[0] & err_q[0];
  assign \$auto$builder.cc:338:Biop$3118  = lowest_free_entry[0] | \$auto$builder.cc:364:Unop$3106 ;
  assign \$auto$builder.cc:338:Biop$3120  = in_err_i & \$auto$builder.cc:338:Biop$3118 ;
  assign \$auto$builder.cc:338:Biop$3122  = \$auto$builder.cc:338:Biop$3112  | \$auto$builder.cc:338:Biop$3120 ;
  assign err_plus2 = \$auto$rtlil.cc:2874:Mux$10754  & \$auto$builder.cc:364:Unop$3128 ;
  assign \$auto$builder.cc:338:Biop$3132  = in_err_i & valid_q[0];
  assign \$auto$builder.cc:338:Biop$3142  = valid_q[0] & in_valid_i;
  assign \$auto$builder.cc:338:Biop$3146  = rdata[17:16] != 2'h3;
  assign unaligned_is_compressed = \$auto$builder.cc:338:Biop$3146  & \$auto$builder.cc:364:Unop$3148 ;
  assign \$auto$builder.cc:338:Biop$3152  = rdata[1:0] != 2'h3;
  assign aligned_is_compressed = \$auto$builder.cc:338:Biop$3152  & \$auto$builder.cc:364:Unop$3148 ;
  assign \$auto$builder.cc:338:Biop$3168  = out_ready_i & out_valid_o;
  assign instr_addr_en = clear_i | \$auto$builder.cc:338:Biop$3168 ;
  assign instr_addr_next = instr_addr_q + { \$auto$builder.cc:364:Unop$3176 , addr_incr_two };
  assign \$auto$builder.cc:338:Biop$3196  = \$auto$builder.cc:364:Unop$3194  | instr_addr_q[0];
  assign pop_fifo = \$auto$builder.cc:338:Biop$3168  & \$auto$builder.cc:338:Biop$3196 ;
  assign \$auto$builder.cc:338:Biop$3202  = in_valid_i & lowest_free_entry[0];
  assign valid_pushed[0] = \$auto$builder.cc:338:Biop$3202  | valid_q[0];
  assign valid_d[0] = valid_popped[0] & \$auto$builder.cc:364:Unop$3210 ;
  assign \$auto$builder.cc:338:Biop$3214  = valid_pushed[1] & pop_fifo;
  assign \$auto$builder.cc:338:Biop$3220  = \$auto$builder.cc:338:Biop$3202  & \$auto$builder.cc:364:Unop$3218 ;
  assign entry_en[0] = \$auto$builder.cc:338:Biop$3214  | \$auto$builder.cc:338:Biop$3220 ;
  assign lowest_free_entry[1] = \$auto$builder.cc:364:Unop$3232  & valid_q[0];
  assign \$auto$builder.cc:338:Biop$3236  = in_valid_i & lowest_free_entry[1];
  assign valid_pushed[1] = \$auto$builder.cc:338:Biop$3236  | valid_q[1];
  assign valid_d[1] = valid_popped[1] & \$auto$builder.cc:364:Unop$3210 ;
  assign \$auto$builder.cc:338:Biop$3248  = valid_pushed[2] & pop_fifo;
  assign \$auto$builder.cc:338:Biop$3254  = \$auto$builder.cc:338:Biop$3236  & \$auto$builder.cc:364:Unop$3218 ;
  assign entry_en[1] = \$auto$builder.cc:338:Biop$3248  | \$auto$builder.cc:338:Biop$3254 ;
  assign lowest_free_entry[2] = \$auto$builder.cc:364:Unop$3266  & valid_q[1];
  assign entry_en[2] = in_valid_i & lowest_free_entry[2];
  assign valid_pushed[2] = valid_q[2] | entry_en[2];
  assign valid_d[2] = valid_popped[2] & \$auto$builder.cc:364:Unop$3210 ;
  assign \$auto$builder.cc:364:Unop$3106  = ~ unaligned_is_compressed;
  assign lowest_free_entry[0] = ~ valid_q[0];
  assign \$auto$builder.cc:364:Unop$3128  = ~ err_q[0];
  assign \$auto$builder.cc:364:Unop$3148  = ~ err;
  assign \$auto$builder.cc:364:Unop$3176  = ~ addr_incr_two;
  assign \$auto$builder.cc:364:Unop$3194  = ~ aligned_is_compressed;
  assign \$auto$builder.cc:364:Unop$3210  = ~ clear_i;
  assign \$auto$builder.cc:364:Unop$3218  = ~ pop_fifo;
  assign \$auto$builder.cc:364:Unop$3232  = ~ valid_q[1];
  assign \$auto$builder.cc:364:Unop$3266  = ~ valid_q[2];
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[95:64] <= 32'd0;
    else if (entry_en[2]) rdata_q[95:64] <= in_rdata_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[63:32] <= 32'd0;
    else if (entry_en[1]) rdata_q[63:32] <= rdata_d[63:32];
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q[31:0] <= 32'd0;
    else if (entry_en[0]) rdata_q[31:0] <= rdata_d[31:0];
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_addr_q <= 31'h00000000;
    else if (instr_addr_en) instr_addr_q <= instr_addr_d;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[2] <= 1'h0;
    else if (entry_en[2]) err_q[2] <= in_err_i;
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[1] <= 1'h0;
    else if (entry_en[1]) err_q[1] <= err_d[1];
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:228.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) err_q[0] <= 1'h0;
    else if (entry_en[0]) err_q[0] <= err_d[0];
  assign \$auto$rtlil.cc:2874:Mux$10754  = valid_q[1] ? err_q[1] : \$auto$builder.cc:338:Biop$3132 ;
  assign rdata = valid_q[0] ? rdata_q[31:0] : in_rdata_i;
  assign err = valid_q[0] ? err_q[0] : in_err_i;
  assign rdata_unaligned[31:16] = valid_q[1] ? rdata_q[47:32] : in_rdata_i[15:0];
  assign err_unaligned = valid_q[1] ? \$auto$builder.cc:338:Biop$3110  : \$auto$builder.cc:338:Biop$3122 ;
  assign valid_unaligned = \$auto$builder.cc:338:Biop$3142  | valid_q[1];
  assign addr_incr_two = instr_addr_q[0] ? unaligned_is_compressed : aligned_is_compressed;
  assign instr_addr_d = clear_i ? in_addr_i[31:1] : instr_addr_next;
  assign valid_popped[0] = pop_fifo ? valid_pushed[1] : valid_pushed[0];
  assign rdata_d[31:0] = valid_q[1] ? rdata_q[63:32] : in_rdata_i;
  assign err_d[0] = valid_q[1] ? err_q[1] : in_err_i;
  assign valid_popped[1] = pop_fifo ? valid_pushed[2] : valid_pushed[1];
  assign rdata_d[63:32] = valid_q[2] ? rdata_q[95:64] : in_rdata_i;
  assign err_d[1] = valid_q[2] ? err_q[2] : in_err_i;
  assign valid_popped[2] = pop_fifo ? 1'h0 : valid_pushed[2];
  (* src = "../rtl/cve2/cve2_fetch_fifo.sv:219.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) valid_q <= 3'h0;
    else valid_q <= valid_d;
  assign out_err_plus2_o = instr_addr_q[0] & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|../rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) err_plus2;
  assign out_err_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|../rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) err_unaligned : err;
  assign out_rdata_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|../rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) { rdata_unaligned[31:16], rdata[31:16] } : rdata;
  assign out_valid_o = instr_addr_q[0] ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_fetch_fifo.sv:113.24-124.8|../rtl/cve2/cve2_fetch_fifo.sv:113.5-130.8" *) \$auto$slang_frontend.cc:694:finish$\out_valid_o$3162  : valid;
  assign \$auto$slang_frontend.cc:694:finish$\out_valid_o$3162  = unaligned_is_compressed ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_fetch_fifo.sv:120.9-120.29|../rtl/cve2/cve2_fetch_fifo.sv:119.7-123.10" *) valid : valid_unaligned;
  assign busy_o = valid_q[2:1];
  assign err_d[2] = in_err_i;
  assign out_addr_o = { instr_addr_q, 1'h0 };
  assign rdata_d[95:64] = in_rdata_i;
  assign rdata_unaligned[15:0] = rdata[31:16];
endmodule

(* src = "../rtl/cve2/cve2_id_stage.sv:19.8" *)
module \cve2_id_stage$cve2_core.id_stage_i (clk_i, rst_ni, instr_req_o, instr_rdata_i, irq_nm_i, debug_req_i, fetch_enable_i, ctrl_busy_o, illegal_insn_o, instr_valid_i, instr_rdata_alu_i, instr_rdata_c_i, instr_is_compressed_i, instr_first_cycle_id_o, instr_valid_clear_o, id_in_ready_o, branch_decision_i, pc_set_o, pc_mux_o, exc_pc_mux_o, exc_cause_o
, illegal_c_insn_i, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, ex_valid_i, lsu_resp_valid_i, alu_operator_ex_o, alu_operand_a_ex_o, alu_operand_b_ex_o, imd_val_we_ex_i, imd_val_d_ex_i, imd_val_q_ex_o, mult_en_ex_o, div_en_ex_o, mult_sel_ex_o, div_sel_ex_o, multdiv_operator_ex_o, multdiv_signed_mode_ex_o, multdiv_operand_a_ex_o, multdiv_operand_b_ex_o, csr_access_o
, csr_op_o, csr_op_en_o, csr_save_if_o, csr_save_id_o, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, illegal_csr_insn_i, lsu_req_o, lsu_we_o, lsu_type_o, lsu_sign_ext_o, lsu_wdata_o, lsu_addr_incr_req_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i, irqs_i
, nmi_mode_o, lsu_load_err_i, lsu_store_err_i, debug_mode_o, debug_cause_o, debug_csr_save_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, result_ex_i, csr_rdata_i, rf_raddr_a_o, rf_rdata_a_i, rf_raddr_b_o, rf_rdata_b_i, rf_ren_a_o, rf_ren_b_o, rf_waddr_id_o, rf_wdata_id_o, rf_we_id_o
, en_wb_o, instr_perf_count_id_o, perf_jump_o, perf_branch_o, perf_tbranch_o, perf_dside_wait_o, perf_wfi_wait_o, perf_div_wait_o, instr_id_done_o);
  wire \$auto$builder.cc:338:Biop$100 ;
  wire \$auto$builder.cc:338:Biop$104 ;
  wire \$auto$builder.cc:338:Biop$156 ;
  wire \$auto$builder.cc:338:Biop$167 ;
  wire \$auto$builder.cc:338:Biop$169 ;
  wire \$auto$builder.cc:338:Biop$171 ;
  wire \$auto$builder.cc:338:Biop$173 ;
  wire \$auto$builder.cc:338:Biop$177 ;
  wire \$auto$builder.cc:338:Biop$179 ;
  wire \$auto$builder.cc:338:Biop$181 ;
  wire \$auto$builder.cc:338:Biop$183 ;
  wire \$auto$builder.cc:338:Biop$185 ;
  wire \$auto$builder.cc:338:Biop$187 ;
  wire \$auto$builder.cc:338:Biop$189 ;
  wire \$auto$builder.cc:338:Biop$196 ;
  wire \$auto$builder.cc:338:Biop$198 ;
  wire \$auto$builder.cc:338:Biop$202 ;
  wire \$auto$builder.cc:338:Biop$204 ;
  wire \$auto$builder.cc:338:Biop$206 ;
  wire \$auto$builder.cc:338:Biop$208 ;
  wire \$auto$builder.cc:338:Biop$210 ;
  wire \$auto$builder.cc:338:Biop$212 ;
  wire \$auto$builder.cc:338:Biop$214 ;
  wire \$auto$builder.cc:338:Biop$221 ;
  wire \$auto$builder.cc:338:Biop$229 ;
  wire \$auto$builder.cc:338:Biop$241 ;
  wire \$auto$builder.cc:338:Biop$250 ;
  wire \$auto$builder.cc:338:Biop$252 ;
  wire \$auto$builder.cc:338:Biop$304 ;
  wire \$auto$builder.cc:338:Biop$331 ;
  wire \$auto$builder.cc:338:Biop$333 ;
  wire \$auto$builder.cc:338:Biop$335 ;
  wire \$auto$builder.cc:338:Biop$343 ;
  wire \$auto$builder.cc:338:Biop$347 ;
  wire \$auto$builder.cc:338:Biop$357 ;
  wire \$auto$builder.cc:338:Biop$359 ;
  wire \$auto$builder.cc:338:Biop$369 ;
  wire \$auto$builder.cc:338:Biop$379 ;
  wire \$auto$builder.cc:338:Biop$383 ;
  wire \$auto$builder.cc:338:Biop$387 ;
  wire \$auto$builder.cc:338:Biop$391 ;
  wire \$auto$builder.cc:338:Biop$395 ;
  wire \$auto$builder.cc:364:Unop$102 ;
  wire \$auto$builder.cc:364:Unop$158 ;
  wire \$auto$builder.cc:364:Unop$254 ;
  wire \$auto$builder.cc:364:Unop$263 ;
  wire \$auto$builder.cc:364:Unop$339 ;
  wire \$auto$builder.cc:364:Unop$341 ;
  wire \$auto$builder.cc:364:Unop$355 ;
  wire \$auto$builder.cc:364:Unop$363 ;
  wire \$auto$builder.cc:364:Unop$375 ;
  wire \$auto$builder.cc:364:Unop$377 ;
  wire \$auto$builder.cc:364:Unop$381 ;
  wire \$auto$builder.cc:364:Unop$385 ;
  wire \$auto$builder.cc:364:Unop$389 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10659 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$131 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\branch_set_raw_d$293 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\branch_set_raw_d$313 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:430.14-437.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\csr_pipe_flush$218 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:644.15-650.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\id_fsm_d$287 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\id_fsm_d$300 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:686.11-692.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\id_fsm_d$311 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\jump_set_raw$294 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\jump_set_raw$314 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\perf_branch_o$312 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\rf_we_raw$298 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:682.11-684.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\rf_we_raw$305 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\rf_we_raw$318 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\stall_alu$319 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:686.11-692.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\stall_branch$309 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\stall_branch$316 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:686.11-692.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\stall_jump$310 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\stall_jump$317 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\stall_multdiv$295 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:686.11-692.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\stall_multdiv$308 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\stall_multdiv$315 ;
  wire \$procmux$10540_CMP ;
  wire \$procmux$10541_CMP ;
  wire \$procmux$10542_CMP ;
  wire \$procmux$10543_CMP ;
  wire \$procmux$10544_CMP ;
  wire \$procmux$10545_CMP ;
  wire \$procmux$10547_CMP ;
  wire \$procmux$10548_CMP ;
  wire \$procmux$10549_CMP ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:217.16" *)
  wire alu_multicycle_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:215.16" *)
  wire [1:0] alu_op_a_mux_sel;
  (* src = "../rtl/cve2/cve2_id_stage.sv:215.34" *)
  wire [1:0] alu_op_a_mux_sel_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:216.16" *)
  wire alu_op_b_mux_sel;
  (* src = "../rtl/cve2/cve2_id_stage.sv:216.34" *)
  wire alu_op_b_mux_sel_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:62.37" *)
  output [31:0] alu_operand_a_ex_o;
  wire [31:0] alu_operand_a_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:63.37" *)
  output [31:0] alu_operand_b_ex_o;
  wire [31:0] alu_operand_b_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:61.37" *)
  output [6:0] alu_operator_ex_o;
  wire [6:0] alu_operator_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:43.37" *)
  input branch_decision_i;
  wire branch_decision_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:165.16" *)
  wire branch_in_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:167.40" *)
  wire branch_jump_set_done_d;
  (* src = "../rtl/cve2/cve2_id_stage.sv:167.16" *)
  reg branch_jump_set_done_q;
  (* src = "../rtl/cve2/cve2_id_stage.sv:166.16" *)
  wire branch_set;
  (* src = "../rtl/cve2/cve2_id_stage.sv:166.28" *)
  reg branch_set_raw;
  (* src = "../rtl/cve2/cve2_id_stage.sv:166.44" *)
  wire branch_set_raw_d;
  (* src = "../rtl/cve2/cve2_id_stage.sv:24.37" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:176.16" *)
  wire controller_run;
  (* src = "../rtl/cve2/cve2_id_stage.sv:81.37" *)
  output csr_access_o;
  wire csr_access_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:105.37" *)
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:91.37" *)
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:89.37" *)
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:83.37" *)
  output csr_op_en_o;
  wire csr_op_en_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:82.37" *)
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:240.16" *)
  wire csr_pipe_flush;
  (* src = "../rtl/cve2/cve2_id_stage.sv:126.37" *)
  input [31:0] csr_rdata_i;
  wire [31:0] csr_rdata_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:87.37" *)
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:86.37" *)
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:88.37" *)
  output csr_save_cause_o;
  wire csr_save_cause_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:85.37" *)
  output csr_save_id_o;
  wire csr_save_id_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:84.37" *)
  output csr_save_if_o;
  wire csr_save_if_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:28.37" *)
  output ctrl_busy_o;
  wire ctrl_busy_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:116.37" *)
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:117.37" *)
  output debug_csr_save_o;
  wire debug_csr_save_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:120.37" *)
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:121.37" *)
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:115.37" *)
  output debug_mode_o;
  wire debug_mode_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:118.37" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:119.37" *)
  input debug_single_step_i;
  wire debug_single_step_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:227.27" *)
  wire div_en_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:72.37" *)
  output div_en_ex_o;
  wire div_en_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:74.37" *)
  output div_sel_ex_o;
  wire div_sel_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:161.16" *)
  wire dret_insn_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:159.16" *)
  wire ebrk_insn;
  (* src = "../rtl/cve2/cve2_id_stage.sv:162.16" *)
  wire ecall_insn_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:141.37" *)
  output en_wb_o;
  wire en_wb_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:58.37" *)
  input ex_valid_i;
  wire ex_valid_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:49.37" *)
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:48.37" *)
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:27.37" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:182.16" *)
  wire flush_id;
  (* src = "../rtl/cve2/cve2_id_stage.sv:606.22" *)
  wire id_fsm_d;
  (* src = "../rtl/cve2/cve2_id_stage.sv:606.12" *)
  reg id_fsm_q;
  (* src = "../rtl/cve2/cve2_id_stage.sv:40.37" *)
  output id_in_ready_o;
  wire id_in_ready_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:51.37" *)
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:92.37" *)
  input illegal_csr_insn_i;
  wire illegal_csr_insn_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:158.16" *)
  wire illegal_insn_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:29.37" *)
  output illegal_insn_o;
  wire illegal_insn_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:67.37" *)
  input [67:0] imd_val_d_ex_i;
  wire [67:0] imd_val_d_ex_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:68.37" *)
  output [67:0] imd_val_q_ex_o;
  reg [67:0] imd_val_q_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:66.37" *)
  input [1:0] imd_val_we_ex_i;
  wire [1:0] imd_val_we_ex_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:193.16" *)
  wire [31:0] imm_a;
  (* src = "../rtl/cve2/cve2_id_stage.sv:222.16" *)
  wire imm_a_mux_sel;
  (* src = "../rtl/cve2/cve2_id_stage.sv:194.16" *)
  wire [31:0] imm_b;
  (* src = "../rtl/cve2/cve2_id_stage.sv:223.16" *)
  wire [2:0] imm_b_mux_sel;
  (* src = "../rtl/cve2/cve2_id_stage.sv:223.31" *)
  wire [2:0] imm_b_mux_sel_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:188.16" *)
  wire [31:0] imm_b_type;
  (* src = "../rtl/cve2/cve2_id_stage.sv:186.16" *)
  wire [31:0] imm_i_type;
  (* src = "../rtl/cve2/cve2_id_stage.sv:190.16" *)
  wire [31:0] imm_j_type;
  (* src = "../rtl/cve2/cve2_id_stage.sv:187.16" *)
  wire [31:0] imm_s_type;
  (* src = "../rtl/cve2/cve2_id_stage.sv:189.16" *)
  wire [31:0] imm_u_type;
  (* src = "../rtl/cve2/cve2_id_stage.sv:174.16" *)
  wire instr_executing;
  (* src = "../rtl/cve2/cve2_id_stage.sv:52.37" *)
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:53.37" *)
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:38.37" *)
  output instr_first_cycle_id_o;
  wire instr_first_cycle_id_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:152.37" *)
  output instr_id_done_o;
  wire instr_id_done_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:36.37" *)
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:142.37" *)
  output instr_perf_count_id_o;
  wire instr_perf_count_id_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:34.37" *)
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:35.37" *)
  input [15:0] instr_rdata_c_i;
  wire [15:0] instr_rdata_c_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:33.37" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:37.37" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:39.37" *)
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:32.37" *)
  input instr_valid_i;
  wire instr_valid_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:108.37" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:106.37" *)
  input irq_pending_i;
  wire irq_pending_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:107.37" *)
  input [18:0] irqs_i;
  wire [18:0] irqs_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:168.16" *)
  wire jump_in_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:170.16" *)
  wire jump_set;
  (* src = "../rtl/cve2/cve2_id_stage.sv:169.16" *)
  wire jump_set_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:170.26" *)
  wire jump_set_raw;
  (* src = "../rtl/cve2/cve2_id_stage.sv:101.37" *)
  input lsu_addr_incr_req_i;
  wire lsu_addr_incr_req_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:102.37" *)
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:111.37" *)
  input lsu_load_err_i;
  wire lsu_load_err_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:236.25" *)
  wire lsu_req_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:95.37" *)
  output lsu_req_o;
  wire lsu_req_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:59.37" *)
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:98.37" *)
  output lsu_sign_ext_o;
  wire lsu_sign_ext_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:112.37" *)
  input lsu_store_err_i;
  wire lsu_store_err_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:97.37" *)
  output [1:0] lsu_type_o;
  wire [1:0] lsu_type_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:99.37" *)
  output [31:0] lsu_wdata_o;
  wire [31:0] lsu_wdata_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:96.37" *)
  output lsu_we_o;
  wire lsu_we_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:160.16" *)
  wire mret_insn_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:226.28" *)
  wire mult_en_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:71.37" *)
  output mult_en_ex_o;
  wire mult_en_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:73.37" *)
  output mult_sel_ex_o;
  wire mult_sel_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:228.16" *)
  wire multdiv_en_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:77.37" *)
  output [31:0] multdiv_operand_a_ex_o;
  wire [31:0] multdiv_operand_a_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:78.37" *)
  output [31:0] multdiv_operand_b_ex_o;
  wire [31:0] multdiv_operand_b_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:75.37" *)
  output [1:0] multdiv_operator_ex_o;
  wire [1:0] multdiv_operator_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:76.37" *)
  output [1:0] multdiv_signed_mode_ex_o;
  wire [1:0] multdiv_signed_mode_ex_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:183.16" *)
  wire multicycle_done;
  (* src = "../rtl/cve2/cve2_id_stage.sv:109.37" *)
  output nmi_mode_o;
  wire nmi_mode_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:55.37" *)
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:47.37" *)
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:46.37" *)
  output pc_set_o;
  wire pc_set_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:146.37" *)
  output perf_branch_o;
  wire perf_branch_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:151.37" *)
  output perf_div_wait_o;
  wire perf_div_wait_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:148.37" *)
  output perf_dside_wait_o;
  wire perf_dside_wait_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:145.37" *)
  output perf_jump_o;
  wire perf_jump_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:147.37" *)
  output perf_tbranch_o;
  wire perf_tbranch_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:150.37" *)
  output perf_wfi_wait_o;
  wire perf_wfi_wait_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:90.37" *)
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:125.37" *)
  input [31:0] result_ex_i;
  wire [31:0] result_ex_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:129.37" *)
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:131.37" *)
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:130.37" *)
  input [31:0] rf_rdata_a_i;
  wire [31:0] rf_rdata_a_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:132.37" *)
  input [31:0] rf_rdata_b_i;
  wire [31:0] rf_rdata_b_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:201.16" *)
  wire rf_ren_a_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:133.37" *)
  output rf_ren_a_o;
  wire rf_ren_a_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:201.30" *)
  wire rf_ren_b_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:134.37" *)
  output rf_ren_b_o;
  wire rf_ren_b_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:137.37" *)
  output [4:0] rf_waddr_id_o;
  wire [4:0] rf_waddr_id_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:138.37" *)
  output [31:0] rf_wdata_id_o;
  wire [31:0] rf_wdata_id_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:198.16" *)
  wire rf_wdata_sel;
  (* src = "../rtl/cve2/cve2_id_stage.sv:199.16" *)
  wire rf_we_dec;
  (* src = "../rtl/cve2/cve2_id_stage.sv:139.37" *)
  output rf_we_id_o;
  wire rf_we_id_o;
  (* src = "../rtl/cve2/cve2_id_stage.sv:199.27" *)
  wire rf_we_raw;
  (* src = "../rtl/cve2/cve2_id_stage.sv:25.37" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_id_stage.sv:218.16" *)
  wire stall_alu;
  (* src = "../rtl/cve2/cve2_id_stage.sv:179.16" *)
  wire stall_branch;
  (* src = "../rtl/cve2/cve2_id_stage.sv:181.16" *)
  wire stall_id;
  (* src = "../rtl/cve2/cve2_id_stage.sv:180.16" *)
  wire stall_jump;
  (* src = "../rtl/cve2/cve2_id_stage.sv:177.16" *)
  wire stall_mem;
  (* src = "../rtl/cve2/cve2_id_stage.sv:178.16" *)
  wire stall_multdiv;
  (* src = "../rtl/cve2/cve2_id_stage.sv:122.37" *)
  input trigger_match_i;
  wire trigger_match_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:191.16" *)
  wire [31:0] zimm_rs1_type;
  assign rf_ren_b_o = \$auto$builder.cc:338:Biop$104  & rf_ren_b_dec;
  assign \$auto$builder.cc:338:Biop$156  = rf_we_raw & instr_executing;
  assign rf_we_id_o = \$auto$builder.cc:338:Biop$156  & \$auto$builder.cc:364:Unop$158 ;
  assign \$auto$builder.cc:338:Biop$167  = csr_op_o == 1'h1;
  assign \$auto$builder.cc:338:Biop$169  = csr_op_o == 2'h2;
  assign \$auto$builder.cc:338:Biop$171  = \$auto$builder.cc:338:Biop$167  || \$auto$builder.cc:338:Biop$169 ;
  assign \$auto$builder.cc:338:Biop$173  = csr_op_en_o && \$auto$builder.cc:338:Biop$171 ;
  assign \$auto$builder.cc:338:Biop$177  = instr_rdata_i[31:20] == 10'h300;
  assign \$auto$builder.cc:338:Biop$179  = instr_rdata_i[31:20] == 10'h304;
  assign \$auto$builder.cc:338:Biop$181  = \$auto$builder.cc:338:Biop$177  || \$auto$builder.cc:338:Biop$179 ;
  assign \$auto$builder.cc:338:Biop$183  = instr_rdata_i[31:20] == 11'h747;
  assign \$auto$builder.cc:338:Biop$185  = \$auto$builder.cc:338:Biop$181  || \$auto$builder.cc:338:Biop$183 ;
  assign \$auto$builder.cc:338:Biop$187  = instr_rdata_i[31:25] == 5'h1d;
  assign \$auto$builder.cc:338:Biop$189  = \$auto$builder.cc:338:Biop$185  || \$auto$builder.cc:338:Biop$187 ;
  assign \$auto$builder.cc:338:Biop$196  = | csr_op_o;
  assign \$auto$builder.cc:338:Biop$198  = csr_op_en_o && \$auto$builder.cc:338:Biop$196 ;
  assign \$auto$builder.cc:338:Biop$202  = instr_rdata_i[31:20] == 11'h7b0;
  assign \$auto$builder.cc:338:Biop$204  = instr_rdata_i[31:20] == 11'h7b1;
  assign \$auto$builder.cc:338:Biop$206  = \$auto$builder.cc:338:Biop$202  || \$auto$builder.cc:338:Biop$204 ;
  assign \$auto$builder.cc:338:Biop$208  = instr_rdata_i[31:20] == 11'h7b2;
  assign \$auto$builder.cc:338:Biop$210  = \$auto$builder.cc:338:Biop$206  || \$auto$builder.cc:338:Biop$208 ;
  assign \$auto$builder.cc:338:Biop$212  = instr_rdata_i[31:20] == 11'h7b3;
  assign \$auto$builder.cc:338:Biop$214  = \$auto$builder.cc:338:Biop$210  || \$auto$builder.cc:338:Biop$212 ;
  assign \$auto$builder.cc:338:Biop$221  = illegal_insn_dec | illegal_csr_insn_i;
  assign illegal_insn_o = instr_valid_i & \$auto$builder.cc:338:Biop$221 ;
  assign multdiv_en_dec = mult_en_dec | div_en_dec;
  assign \$auto$builder.cc:338:Biop$229  = instr_first_cycle_id_o & lsu_req_dec;
  assign \$auto$builder.cc:338:Biop$241  = csr_access_o & instr_executing;
  assign csr_op_en_o = \$auto$builder.cc:338:Biop$241  & en_wb_o;
  assign \$auto$builder.cc:338:Biop$250  = branch_set_raw | jump_set_raw;
  assign \$auto$builder.cc:338:Biop$252  = \$auto$builder.cc:338:Biop$250  | branch_jump_set_done_q;
  assign branch_jump_set_done_d = \$auto$builder.cc:338:Biop$252  & \$auto$builder.cc:364:Unop$254 ;
  assign jump_set = jump_set_raw & \$auto$builder.cc:364:Unop$263 ;
  assign branch_set = branch_set_raw & \$auto$builder.cc:364:Unop$263 ;
  assign \$auto$builder.cc:338:Biop$304  = rf_we_dec & ex_valid_i;
  assign \$auto$builder.cc:338:Biop$331  = stall_mem | stall_multdiv;
  assign \$auto$builder.cc:338:Biop$333  = \$auto$builder.cc:338:Biop$331  | stall_jump;
  assign \$auto$builder.cc:338:Biop$335  = \$auto$builder.cc:338:Biop$333  | stall_branch;
  assign stall_id = \$auto$builder.cc:338:Biop$335  | stall_alu;
  assign \$auto$builder.cc:338:Biop$343  = \$auto$builder.cc:364:Unop$339  & \$auto$builder.cc:364:Unop$341 ;
  assign en_wb_o = \$auto$builder.cc:338:Biop$343  & instr_executing;
  assign \$auto$builder.cc:338:Biop$347  = ~ id_fsm_q;
  assign instr_first_cycle_id_o = instr_valid_i & \$auto$builder.cc:338:Biop$347 ;
  assign \$auto$builder.cc:338:Biop$357  = \$auto$builder.cc:364:Unop$355  | instr_first_cycle_id_o;
  assign \$auto$builder.cc:338:Biop$359  = lsu_req_dec & \$auto$builder.cc:338:Biop$357 ;
  assign stall_mem = instr_valid_i & \$auto$builder.cc:338:Biop$359 ;
  assign \$auto$builder.cc:338:Biop$100  = instr_valid_i & \$auto$builder.cc:364:Unop$363 ;
  assign instr_executing = \$auto$builder.cc:338:Biop$100  & controller_run;
  assign \$auto$builder.cc:338:Biop$369  = instr_executing & lsu_req_dec;
  assign perf_dside_wait_o = \$auto$builder.cc:338:Biop$369  & \$auto$builder.cc:364:Unop$355 ;
  assign \$auto$builder.cc:338:Biop$379  = \$auto$builder.cc:364:Unop$375  & \$auto$builder.cc:364:Unop$377 ;
  assign \$auto$builder.cc:338:Biop$383  = \$auto$builder.cc:338:Biop$379  & \$auto$builder.cc:364:Unop$381 ;
  assign \$auto$builder.cc:338:Biop$387  = dret_insn_dec & \$auto$builder.cc:364:Unop$385 ;
  assign \$auto$builder.cc:338:Biop$391  = \$auto$builder.cc:338:Biop$383  & \$auto$builder.cc:364:Unop$389 ;
  assign \$auto$builder.cc:338:Biop$395  = \$auto$builder.cc:338:Biop$391  & \$auto$builder.cc:364:Unop$158 ;
  assign instr_perf_count_id_o = \$auto$builder.cc:338:Biop$395  & \$auto$builder.cc:364:Unop$363 ;
  assign perf_div_wait_o = stall_multdiv & div_en_dec;
  assign \$auto$builder.cc:338:Biop$104  = \$auto$builder.cc:338:Biop$100  & \$auto$builder.cc:364:Unop$102 ;
  assign rf_ren_a_o = \$auto$builder.cc:338:Biop$104  & rf_ren_a_dec;
  assign \$auto$builder.cc:364:Unop$102  = ~ illegal_insn_o;
  assign \$auto$builder.cc:364:Unop$158  = ~ illegal_csr_insn_i;
  assign \$auto$builder.cc:364:Unop$254  = ~ instr_valid_clear_o;
  assign \$auto$builder.cc:364:Unop$263  = ~ branch_jump_set_done_q;
  assign \$auto$builder.cc:364:Unop$339  = ~ stall_id;
  assign \$auto$builder.cc:364:Unop$341  = ~ flush_id;
  assign \$auto$builder.cc:364:Unop$355  = ~ lsu_resp_valid_i;
  assign \$auto$builder.cc:364:Unop$363  = ~ instr_fetch_err_i;
  assign \$auto$builder.cc:364:Unop$375  = ~ ebrk_insn;
  assign \$auto$builder.cc:364:Unop$377  = ~ ecall_insn_dec;
  assign \$auto$builder.cc:364:Unop$381  = ~ illegal_insn_dec;
  assign \$auto$builder.cc:364:Unop$385  = ~ debug_mode_o;
  assign \$auto$builder.cc:364:Unop$389  = ~ \$auto$builder.cc:338:Biop$387 ;
  (* src = "../rtl/cve2/cve2_id_stage.sv:305.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) imd_val_q_ex_o[33:0] <= 34'h000000000;
    else if (imd_val_we_ex_i[1]) imd_val_q_ex_o[33:0] <= imd_val_d_ex_i[33:0];
  (* src = "../rtl/cve2/cve2_id_stage.sv:305.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) imd_val_q_ex_o[67:34] <= 34'h000000000;
    else if (imd_val_we_ex_i[0]) imd_val_q_ex_o[67:34] <= imd_val_d_ex_i[67:34];
  (* src = "../rtl/cve2/cve2_id_stage.sv:608.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_fsm_q <= 1'h0;
    else if (instr_executing) id_fsm_q <= id_fsm_d;
  assign \$auto$opt_reduce.cc:137:opt_pmux$10659  = | { lsu_req_dec, alu_multicycle_dec, jump_in_dec };
  assign alu_op_a_mux_sel = lsu_addr_incr_req_i ? 2'h1 : alu_op_a_mux_sel_dec;
  assign alu_op_b_mux_sel = alu_op_b_mux_sel_dec | lsu_addr_incr_req_i;
  assign imm_b_mux_sel = lsu_addr_incr_req_i ? 3'h6 : imm_b_mux_sel_dec;
  assign imm_a = imm_a_mux_sel ? 32'd0 : zimm_rs1_type;
  assign \$auto$rtlil.cc:2874:Mux$131 [2:1] = instr_is_compressed_i ? 2'h1 : 2'h2;
  assign alu_operand_b_ex_o = alu_op_b_mux_sel ? imm_b : rf_rdata_b_i;
  assign lsu_req_o = instr_executing & \$auto$builder.cc:338:Biop$229 ;
  assign mult_en_ex_o = instr_executing & mult_en_dec;
  assign div_en_ex_o = instr_executing & div_en_dec;
  assign multicycle_done = lsu_req_dec ? lsu_resp_valid_i : ex_valid_i;
  (* src = "../rtl/cve2/cve2_id_stage.sv:583.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_jump_set_done_q <= 1'h0;
    else branch_jump_set_done_q <= branch_jump_set_done_d;
  (* src = "../rtl/cve2/cve2_id_stage.sv:565.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_set_raw <= 1'h0;
    else branch_set_raw <= branch_set_raw_d;
  assign \$auto$slang_frontend.cc:694:finish$\id_fsm_d$311  = ~ (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:687.13-687.43|../rtl/cve2/cve2_id_stage.sv:686.11-692.14" *) multicycle_done;
  assign \$auto$slang_frontend.cc:694:finish$\stall_jump$310  = multicycle_done ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:687.13-687.43|../rtl/cve2/cve2_id_stage.sv:686.11-692.14" *) 1'h0 : jump_in_dec;
  assign \$auto$slang_frontend.cc:694:finish$\stall_branch$309  = multicycle_done ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:687.13-687.43|../rtl/cve2/cve2_id_stage.sv:686.11-692.14" *) 1'h0 : branch_in_dec;
  assign \$auto$slang_frontend.cc:694:finish$\stall_multdiv$308  = multicycle_done ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:687.13-687.43|../rtl/cve2/cve2_id_stage.sv:686.11-692.14" *) 1'h0 : multdiv_en_dec;
  assign \$auto$slang_frontend.cc:694:finish$\rf_we_raw$305  = multdiv_en_dec ? (* src = "../rtl/cve2/cve2_id_stage.sv:683.13-683.54|../rtl/cve2/cve2_id_stage.sv:682.11-684.14" *) \$auto$builder.cc:338:Biop$304  : rf_we_dec;
  assign id_fsm_d = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$auto$slang_frontend.cc:694:finish$\id_fsm_d$311  : \$auto$slang_frontend.cc:694:finish$\id_fsm_d$300 ;
  assign \$auto$slang_frontend.cc:694:finish$\stall_alu$319  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) 1'h0 : alu_multicycle_dec;
  assign \$auto$slang_frontend.cc:694:finish$\rf_we_raw$318  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$auto$slang_frontend.cc:694:finish$\rf_we_raw$305  : \$auto$slang_frontend.cc:694:finish$\rf_we_raw$298 ;
  assign \$auto$slang_frontend.cc:694:finish$\stall_jump$317  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$auto$slang_frontend.cc:694:finish$\stall_jump$310  : jump_in_dec;
  assign \$auto$slang_frontend.cc:694:finish$\stall_branch$316  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$auto$slang_frontend.cc:694:finish$\stall_branch$309  : \$auto$slang_frontend.cc:694:finish$\branch_set_raw_d$293 ;
  assign \$auto$slang_frontend.cc:694:finish$\stall_multdiv$315  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) \$auto$slang_frontend.cc:694:finish$\stall_multdiv$308  : \$auto$slang_frontend.cc:694:finish$\stall_multdiv$295 ;
  assign \$auto$slang_frontend.cc:694:finish$\jump_set_raw$314  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\jump_set_raw$294 ;
  assign \$auto$slang_frontend.cc:694:finish$\branch_set_raw_d$313  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\branch_set_raw_d$293 ;
  assign \$auto$slang_frontend.cc:694:finish$\perf_branch_o$312  = id_fsm_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:681.22-693.12|../rtl/cve2/cve2_id_stage.sv:633.7-698.14" *) 1'h0 : branch_in_dec;
  assign \$auto$slang_frontend.cc:694:finish$\id_fsm_d$287  = ~ (* src = "../rtl/cve2/cve2_id_stage.sv:644.32-650.18|../rtl/cve2/cve2_id_stage.sv:644.15-650.18" *) ex_valid_i;
  function [0:0] \$procmux$10389 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_id_stage.sv:670.33-674.16|../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10389  = b[0:0];
      3'b?1?:
        \$procmux$10389  = b[1:1];
      3'b1??:
        \$procmux$10389  = b[2:2];
      default:
        \$procmux$10389  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\id_fsm_d$300  = \$procmux$10389 (1'h0, { \$auto$slang_frontend.cc:694:finish$\id_fsm_d$287 , branch_decision_i, 1'h1 }, { multdiv_en_dec, branch_in_dec, \$auto$opt_reduce.cc:137:opt_pmux$10659  });
  function [0:0] \$procmux$10410 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_id_stage.sv:670.33-674.16|../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10410  = b[0:0];
      2'b1?:
        \$procmux$10410  = b[1:1];
      default:
        \$procmux$10410  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\rf_we_raw$298  = \$procmux$10410 (rf_we_dec, { \$auto$builder.cc:338:Biop$304 , 1'h0 }, { multdiv_en_dec, alu_multicycle_dec });
  assign \$auto$slang_frontend.cc:694:finish$\branch_set_raw_d$293  = branch_in_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:652.28-663.16|../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *) branch_decision_i;
  assign \$auto$slang_frontend.cc:694:finish$\stall_multdiv$295  = multdiv_en_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:644.15-650.18|../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *) \$auto$slang_frontend.cc:694:finish$\id_fsm_d$287 ;
  assign \$auto$slang_frontend.cc:694:finish$\jump_set_raw$294  = jump_in_dec & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:664.26-669.16|../rtl/cve2/cve2_id_stage.sv:635.11-678.18" *) jump_set_dec;
  assign stall_alu = instr_executing & (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14|../rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$auto$slang_frontend.cc:694:finish$\stall_alu$319 ;
  assign rf_we_raw = instr_executing ? (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14|../rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$auto$slang_frontend.cc:694:finish$\rf_we_raw$318  : rf_we_dec;
  assign stall_jump = instr_executing & (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14|../rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$auto$slang_frontend.cc:694:finish$\stall_jump$317 ;
  assign stall_branch = instr_executing & (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14|../rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$auto$slang_frontend.cc:694:finish$\stall_branch$316 ;
  assign stall_multdiv = instr_executing & (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14|../rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$auto$slang_frontend.cc:694:finish$\stall_multdiv$315 ;
  assign jump_set_raw = instr_executing & (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14|../rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$auto$slang_frontend.cc:694:finish$\jump_set_raw$314 ;
  assign branch_set_raw_d = instr_executing & (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14|../rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$auto$slang_frontend.cc:694:finish$\branch_set_raw_d$313 ;
  assign perf_branch_o = instr_executing & (* src = "../rtl/cve2/cve2_id_stage.sv:633.7-698.14|../rtl/cve2/cve2_id_stage.sv:632.5-699.8" *) \$auto$slang_frontend.cc:694:finish$\perf_branch_o$312 ;
  assign \$auto$slang_frontend.cc:694:finish$\csr_pipe_flush$218  = \$auto$builder.cc:338:Biop$198  & (* src = "../rtl/cve2/cve2_id_stage.sv:431.7-436.10|../rtl/cve2/cve2_id_stage.sv:430.14-437.8" *) \$auto$builder.cc:338:Biop$214 ;
  assign csr_pipe_flush = \$auto$builder.cc:338:Biop$173  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:423.7-429.10|../rtl/cve2/cve2_id_stage.sv:422.5-437.8" *) \$auto$builder.cc:338:Biop$189  : \$auto$slang_frontend.cc:694:finish$\csr_pipe_flush$218 ;
  assign rf_wdata_id_o = rf_wdata_sel ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:327.18-327.46|../rtl/cve2/cve2_id_stage.sv:325.5-329.12" *) csr_rdata_i : result_ex_i;
  function [31:0] \$procmux$10539 ;
    input [31:0] a;
    input [191:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_id_stage.sv:283.24-283.70|../rtl/cve2/cve2_id_stage.sv:277.5-286.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$10539  = b[31:0];
      6'b????1?:
        \$procmux$10539  = b[63:32];
      6'b???1??:
        \$procmux$10539  = b[95:64];
      6'b??1???:
        \$procmux$10539  = b[127:96];
      6'b?1????:
        \$procmux$10539  = b[159:128];
      6'b1?????:
        \$procmux$10539  = b[191:160];
      default:
        \$procmux$10539  = a;
    endcase
  endfunction
  assign imm_b = \$procmux$10539 (32'd4, { imm_i_type, imm_s_type, imm_b_type, imm_u_type, imm_j_type, 29'h00000000, \$auto$rtlil.cc:2874:Mux$131 [2:1], 1'h0 }, { \$procmux$10545_CMP , \$procmux$10544_CMP , \$procmux$10543_CMP , \$procmux$10542_CMP , \$procmux$10541_CMP , \$procmux$10540_CMP  });
  assign \$procmux$10540_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:283.24-283.70|../rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 3'h5;
  assign \$procmux$10541_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:282.24-282.43|../rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 3'h4;
  assign \$procmux$10542_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:281.24-281.43|../rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 2'h3;
  assign \$procmux$10543_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:280.24-280.43|../rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 2'h2;
  assign \$procmux$10544_CMP  = imm_b_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:279.24-279.43|../rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) 1'h1;
  assign \$procmux$10545_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:278.24-278.43|../rtl/cve2/cve2_id_stage.sv:277.5-286.12" *) imm_b_mux_sel;
  function [31:0] \$procmux$10546 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_id_stage.sv:267.20-267.42|../rtl/cve2/cve2_id_stage.sv:263.5-269.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10546  = b[31:0];
      3'b?1?:
        \$procmux$10546  = b[63:32];
      3'b1??:
        \$procmux$10546  = b[95:64];
      default:
        \$procmux$10546  = a;
    endcase
  endfunction
  assign alu_operand_a_ex_o = \$procmux$10546 (rf_rdata_a_i, { lsu_addr_last_i, pc_id_i, imm_a }, { \$procmux$10549_CMP , \$procmux$10548_CMP , \$procmux$10547_CMP  });
  assign \$procmux$10547_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:267.20-267.42|../rtl/cve2/cve2_id_stage.sv:263.5-269.12" *) 2'h3;
  assign \$procmux$10548_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:266.20-266.44|../rtl/cve2/cve2_id_stage.sv:263.5-269.12" *) 2'h2;
  assign \$procmux$10549_CMP  = alu_op_a_mux_sel == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_id_stage.sv:265.20-265.52|../rtl/cve2/cve2_id_stage.sv:263.5-269.12" *) 1'h1;
  (* src = "../rtl/cve2/cve2_id_stage.sv:447.5" *)
  \cve2_controller$cve2_core.id_stage_i.controller_i  controller_i (
    .branch_set_i(branch_set),
    .clk_i(clk_i),
    .controller_run_o(controller_run),
    .csr_mstatus_mie_i(csr_mstatus_mie_i),
    .csr_mstatus_tw_i(csr_mstatus_tw_i),
    .csr_mtval_o(csr_mtval_o),
    .csr_pipe_flush_i(csr_pipe_flush),
    .csr_restore_dret_id_o(csr_restore_dret_id_o),
    .csr_restore_mret_id_o(csr_restore_mret_id_o),
    .csr_save_cause_o(csr_save_cause_o),
    .csr_save_id_o(csr_save_id_o),
    .csr_save_if_o(csr_save_if_o),
    .ctrl_busy_o(ctrl_busy_o),
    .debug_cause_o(debug_cause_o),
    .debug_csr_save_o(debug_csr_save_o),
    .debug_ebreakm_i(debug_ebreakm_i),
    .debug_ebreaku_i(debug_ebreaku_i),
    .debug_mode_o(debug_mode_o),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step_i),
    .dret_insn_i(dret_insn_dec),
    .ebrk_insn_i(ebrk_insn),
    .ecall_insn_i(ecall_insn_dec),
    .exc_cause_o(exc_cause_o),
    .exc_pc_mux_o(exc_pc_mux_o),
    .fetch_enable_i(fetch_enable_i),
    .flush_id_o(flush_id),
    .id_in_ready_o(id_in_ready_o),
    .illegal_insn_i(illegal_insn_o),
    .instr_compressed_i(instr_rdata_c_i),
    .instr_fetch_err_i(instr_fetch_err_i),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2_i),
    .instr_i(instr_rdata_i),
    .instr_is_compressed_i(instr_is_compressed_i),
    .instr_req_o(instr_req_o),
    .instr_valid_clear_o(instr_valid_clear_o),
    .instr_valid_i(instr_valid_i),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_i),
    .irqs_i(irqs_i),
    .jump_set_i(jump_set),
    .load_err_i(lsu_load_err_i),
    .lsu_addr_last_i(lsu_addr_last_i),
    .mret_insn_i(mret_insn_dec),
    .nmi_mode_o(nmi_mode_o),
    .pc_id_i(pc_id_i),
    .pc_mux_o(pc_mux_o),
    .pc_set_o(pc_set_o),
    .perf_jump_o(perf_jump_o),
    .perf_tbranch_o(perf_tbranch_o),
    .priv_mode_i(priv_mode_i),
    .rst_ni(rst_ni),
    .stall_id_i(stall_id),
    .store_err_i(lsu_store_err_i),
    .trigger_match_i(trigger_match_i),
    .wfi_insn_i(perf_wfi_wait_o)
  );
  (* src = "../rtl/cve2/cve2_id_stage.sv:340.5" *)
  \cve2_decoder$cve2_core.id_stage_i.decoder_i  decoder_i (
    .alu_multicycle_o(alu_multicycle_dec),
    .alu_op_a_mux_sel_o(alu_op_a_mux_sel_dec),
    .alu_op_b_mux_sel_o(alu_op_b_mux_sel_dec),
    .alu_operator_o(alu_operator_ex_o),
    .branch_in_dec_o(branch_in_dec),
    .clk_i(clk_i),
    .csr_access_o(csr_access_o),
    .csr_op_o(csr_op_o),
    .data_req_o(lsu_req_dec),
    .data_sign_extension_o(lsu_sign_ext_o),
    .data_type_o(lsu_type_o),
    .data_we_o(lsu_we_o),
    .div_en_o(div_en_dec),
    .div_sel_o(div_sel_ex_o),
    .dret_insn_o(dret_insn_dec),
    .ebrk_insn_o(ebrk_insn),
    .ecall_insn_o(ecall_insn_dec),
    .illegal_c_insn_i(illegal_c_insn_i),
    .illegal_insn_o(illegal_insn_dec),
    .imm_a_mux_sel_o(imm_a_mux_sel),
    .imm_b_mux_sel_o(imm_b_mux_sel_dec),
    .imm_b_type_o(imm_b_type),
    .imm_i_type_o(imm_i_type),
    .imm_j_type_o(imm_j_type),
    .imm_s_type_o(imm_s_type),
    .imm_u_type_o(imm_u_type),
    .instr_first_cycle_i(instr_first_cycle_id_o),
    .instr_rdata_alu_i(instr_rdata_alu_i),
    .instr_rdata_i(instr_rdata_i),
    .jump_in_dec_o(jump_in_dec),
    .jump_set_o(jump_set_dec),
    .mret_insn_o(mret_insn_dec),
    .mult_en_o(mult_en_dec),
    .mult_sel_o(mult_sel_ex_o),
    .multdiv_operator_o(multdiv_operator_ex_o),
    .multdiv_signed_mode_o(multdiv_signed_mode_ex_o),
    .rf_raddr_a_o(rf_raddr_a_o),
    .rf_raddr_b_o(rf_raddr_b_o),
    .rf_ren_a_o(rf_ren_a_dec),
    .rf_ren_b_o(rf_ren_b_dec),
    .rf_waddr_o(rf_waddr_id_o),
    .rf_wdata_sel_o(rf_wdata_sel),
    .rf_we_o(rf_we_dec),
    .rst_ni(rst_ni),
    .wfi_insn_o(perf_wfi_wait_o),
    .zimm_rs1_type_o(zimm_rs1_type)
  );
  assign \$auto$rtlil.cc:2874:Mux$131 [0] = 1'h0;
  assign instr_id_done_o = en_wb_o;
  assign lsu_wdata_o = rf_rdata_b_i;
  assign multdiv_operand_a_ex_o = rf_rdata_a_i;
  assign multdiv_operand_b_ex_o = rf_rdata_b_i;
endmodule

(* src = "../rtl/cve2/cve2_if_stage.sv:15.8" *)
module \cve2_if_stage$cve2_core.if_stage_i (clk_i, rst_ni, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, exc_cause, req_i, instr_valid_id_o, instr_new_id_o, instr_rdata_id_o, instr_rdata_alu_id_o, instr_rdata_c_id_o, instr_is_compressed_id_o, instr_fetch_err_o, instr_fetch_err_plus2_o, illegal_c_insn_id_o, pc_if_o
, pc_id_o, pmp_err_if_i, pmp_err_if_plus2_i, instr_valid_clear_i, pc_set_i, pc_mux_i, exc_pc_mux_i, branch_target_ex_i, csr_mepc_i, csr_depc_i, csr_mtvec_i, csr_mtvec_init_o, id_in_ready_i, if_busy_o);
  wire \$auto$builder.cc:338:Biop$24 ;
  wire \$auto$builder.cc:338:Biop$30 ;
  wire \$auto$builder.cc:338:Biop$32 ;
  wire \$auto$builder.cc:338:Biop$44 ;
  wire \$auto$builder.cc:338:Biop$52 ;
  wire \$auto$builder.cc:338:Biop$58 ;
  wire \$auto$builder.cc:338:Biop$62 ;
  wire \$auto$builder.cc:364:Unop$28 ;
  wire \$auto$builder.cc:364:Unop$46 ;
  wire \$auto$builder.cc:364:Unop$50 ;
  wire \$auto$builder.cc:364:Unop$56 ;
  wire \$auto$builder.cc:364:Unop$60 ;
  wire \$procmux$10569_CMP ;
  wire \$procmux$10570_CMP ;
  wire \$procmux$10571_CMP ;
  wire \$procmux$10572_CMP ;
  wire \$procmux$10574_CMP ;
  wire \$procmux$10575_CMP ;
  wire \$procmux$10576_CMP ;
  (* src = "../rtl/cve2/cve2_if_stage.sv:22.40" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:61.39" *)
  input [31:0] branch_target_ex_i;
  wire [31:0] branch_target_ex_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:19.40" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:66.39" *)
  input [31:0] csr_depc_i;
  wire [31:0] csr_depc_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:64.39" *)
  input [31:0] csr_mepc_i;
  wire [31:0] csr_mepc_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:68.39" *)
  input [31:0] csr_mtvec_i;
  wire [31:0] csr_mtvec_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:69.39" *)
  output csr_mtvec_init_o;
  wire csr_mtvec_init_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:58.39" *)
  input [6:0] exc_cause;
  wire [6:0] exc_cause;
  (* src = "../rtl/cve2/cve2_if_stage.sv:102.22" *)
  wire [31:0] exc_pc;
  (* src = "../rtl/cve2/cve2_if_stage.sv:57.39" *)
  input [1:0] exc_pc_mux_i;
  wire [1:0] exc_pc_mux_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:84.22" *)
  (* unused_bits = "0" *)
  wire [31:0] fetch_addr_n;
  (* src = "../rtl/cve2/cve2_if_stage.sv:91.22" *)
  wire fetch_err;
  (* src = "../rtl/cve2/cve2_if_stage.sv:92.22" *)
  wire fetch_err_plus2;
  (* src = "../rtl/cve2/cve2_if_stage.sv:89.22" *)
  wire [31:0] fetch_rdata;
  (* src = "../rtl/cve2/cve2_if_stage.sv:87.22" *)
  wire fetch_valid;
  (* src = "../rtl/cve2/cve2_if_stage.sv:72.39" *)
  input id_in_ready_i;
  wire id_in_ready_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:75.39" *)
  output if_busy_o;
  wire if_busy_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:107.22" *)
  wire if_id_pipe_reg_we;
  (* src = "../rtl/cve2/cve2_if_stage.sv:99.22" *)
  wire if_instr_err;
  (* src = "../rtl/cve2/cve2_if_stage.sv:100.22" *)
  wire if_instr_err_plus2;
  (* src = "../rtl/cve2/cve2_if_stage.sv:98.22" *)
  wire if_instr_pmp_err;
  (* src = "../rtl/cve2/cve2_if_stage.sv:95.22" *)
  wire illegal_c_insn;
  (* src = "../rtl/cve2/cve2_if_stage.sv:46.39" *)
  output illegal_c_insn_id_o;
  reg illegal_c_insn_id_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:27.39" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:94.22" *)
  wire [31:0] instr_decompressed;
  (* src = "../rtl/cve2/cve2_if_stage.sv:31.39" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:44.39" *)
  output instr_fetch_err_o;
  reg instr_fetch_err_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:45.39" *)
  output instr_fetch_err_plus2_o;
  reg instr_fetch_err_plus2_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:28.39" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:96.22" *)
  wire instr_is_compressed;
  (* src = "../rtl/cve2/cve2_if_stage.sv:42.39" *)
  output instr_is_compressed_id_o;
  reg instr_is_compressed_id_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:35.39" *)
  output instr_new_id_o;
  reg instr_new_id_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:37.39" *)
  output [31:0] instr_rdata_alu_id_o;
  reg [31:0] instr_rdata_alu_id_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:39.39" *)
  output [15:0] instr_rdata_c_id_o;
  reg [15:0] instr_rdata_c_id_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:30.39" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:36.39" *)
  output [31:0] instr_rdata_id_o;
  wire [31:0] instr_rdata_id_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:26.39" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:29.39" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:54.39" *)
  input instr_valid_clear_i;
  wire instr_valid_clear_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:78.22" *)
  wire instr_valid_id_d;
  (* src = "../rtl/cve2/cve2_if_stage.sv:34.39" *)
  output instr_valid_id_o;
  reg instr_valid_id_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:49.39" *)
  output [31:0] pc_id_o;
  reg [31:0] pc_id_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:48.39" *)
  output [31:0] pc_if_o;
  wire [31:0] pc_if_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:56.39" *)
  input [2:0] pc_mux_i;
  wire [2:0] pc_mux_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:55.39" *)
  input pc_set_i;
  wire pc_set_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:50.39" *)
  input pmp_err_if_i;
  wire pmp_err_if_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:51.39" *)
  input pmp_err_if_plus2_i;
  wire pmp_err_if_plus2_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:23.40" *)
  input req_i;
  wire req_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:20.40" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$24  = ! pc_mux_i;
  assign csr_mtvec_init_o = \$auto$builder.cc:338:Biop$24  & pc_set_i;
  assign \$auto$builder.cc:338:Biop$30  = pc_if_o[2] & \$auto$builder.cc:364:Unop$28 ;
  assign \$auto$builder.cc:338:Biop$32  = \$auto$builder.cc:338:Biop$30  & pmp_err_if_plus2_i;
  assign if_instr_pmp_err = pmp_err_if_i | \$auto$builder.cc:338:Biop$32 ;
  assign if_instr_err = fetch_err | if_instr_pmp_err;
  assign \$auto$builder.cc:338:Biop$44  = \$auto$builder.cc:338:Biop$32  | fetch_err_plus2;
  assign if_instr_err_plus2 = \$auto$builder.cc:338:Biop$44  & \$auto$builder.cc:364:Unop$46 ;
  assign \$auto$builder.cc:338:Biop$52  = fetch_valid & \$auto$builder.cc:364:Unop$50 ;
  assign if_id_pipe_reg_we = fetch_valid & id_in_ready_i;
  assign \$auto$builder.cc:338:Biop$58  = if_id_pipe_reg_we & \$auto$builder.cc:364:Unop$56 ;
  assign \$auto$builder.cc:338:Biop$62  = instr_valid_id_o & \$auto$builder.cc:364:Unop$60 ;
  assign instr_valid_id_d = \$auto$builder.cc:338:Biop$58  | \$auto$builder.cc:338:Biop$62 ;
  assign \$auto$builder.cc:364:Unop$28  = ~ instr_is_compressed;
  assign \$auto$builder.cc:364:Unop$46  = ~ pmp_err_if_i;
  assign \$auto$builder.cc:364:Unop$50  = ~ fetch_err;
  assign \$auto$builder.cc:364:Unop$56  = ~ pc_set_i;
  assign \$auto$builder.cc:364:Unop$60  = ~ instr_valid_clear_i;
  (* src = "../rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) pc_id_o <= 32'd0;
    else if (if_id_pipe_reg_we) pc_id_o <= pc_if_o;
  (* src = "../rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_rdata_alu_id_o <= 32'd0;
    else if (if_id_pipe_reg_we) instr_rdata_alu_id_o <= instr_decompressed;
  (* src = "../rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_rdata_c_id_o <= 16'h0000;
    else if (if_id_pipe_reg_we) instr_rdata_c_id_o <= fetch_rdata[15:0];
  (* src = "../rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_is_compressed_id_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_is_compressed_id_o <= instr_is_compressed;
  (* src = "../rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_fetch_err_plus2_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_fetch_err_plus2_o <= if_instr_err_plus2;
  (* src = "../rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_fetch_err_o <= 1'h0;
    else if (if_id_pipe_reg_we) instr_fetch_err_o <= if_instr_err;
  (* src = "../rtl/cve2/cve2_if_stage.sv:237.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) illegal_c_insn_id_o <= 1'h0;
    else if (if_id_pipe_reg_we) illegal_c_insn_id_o <= illegal_c_insn;
  (* src = "../rtl/cve2/cve2_if_stage.sv:220.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_new_id_o <= 1'h0;
    else instr_new_id_o <= if_id_pipe_reg_we;
  (* src = "../rtl/cve2/cve2_if_stage.sv:220.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_valid_id_o <= 1'h0;
    else instr_valid_id_o <= instr_valid_id_d;
  function [31:0] \$procmux$10568 ;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_if_stage.sv:142.16-142.42|../rtl/cve2/cve2_if_stage.sv:137.5-144.12" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \$procmux$10568  = b[31:0];
      4'b??1?:
        \$procmux$10568  = b[63:32];
      4'b?1??:
        \$procmux$10568  = b[95:64];
      4'b1???:
        \$procmux$10568  = b[127:96];
      default:
        \$procmux$10568  = a;
    endcase
  endfunction
  assign fetch_addr_n = \$procmux$10568 ({ boot_addr_i[31:8], 8'h00 }, { branch_target_ex_i, exc_pc[31:2], 2'h0, csr_mepc_i, csr_depc_i }, { \$procmux$10572_CMP , \$procmux$10571_CMP , \$procmux$10570_CMP , \$procmux$10569_CMP  });
  assign \$procmux$10569_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_if_stage.sv:142.16-142.42|../rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 3'h4;
  assign \$procmux$10570_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_if_stage.sv:141.16-141.42|../rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 2'h3;
  assign \$procmux$10571_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_if_stage.sv:140.16-140.38|../rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 2'h2;
  assign \$procmux$10572_CMP  = pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_if_stage.sv:139.16-139.50|../rtl/cve2/cve2_if_stage.sv:137.5-144.12" *) 1'h1;
  function [29:0] \$procmux$10573 ;
    input [29:0] a;
    input [89:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_if_stage.sv:127.23-127.48|../rtl/cve2/cve2_if_stage.sv:123.5-129.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10573  = b[29:0];
      3'b?1?:
        \$procmux$10573  = b[59:30];
      3'b1??:
        \$procmux$10573  = b[89:60];
      default:
        \$procmux$10573  = a;
    endcase
  endfunction
  assign exc_pc[31:2] = \$procmux$10573 ({ csr_mtvec_i[31:8], 6'h00 }, { csr_mtvec_i[31:8], exc_cause[5:0], 60'h1a1108006844202 }, { \$procmux$10576_CMP , \$procmux$10575_CMP , \$procmux$10574_CMP  });
  assign \$procmux$10574_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_if_stage.sv:127.23-127.48|../rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 2'h3;
  assign \$procmux$10575_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_if_stage.sv:126.23-126.43|../rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 2'h2;
  assign \$procmux$10576_CMP  = exc_pc_mux_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_if_stage.sv:125.23-125.74|../rtl/cve2/cve2_if_stage.sv:123.5-129.12" *) 1'h1;
  (* src = "../rtl/cve2/cve2_if_stage.sv:203.27" *)
  \cve2_compressed_decoder$cve2_core.if_stage_i.compressed_decoder_i  compressed_decoder_i (
    .clk_i(clk_i),
    .illegal_instr_o(illegal_c_insn),
    .instr_i(fetch_rdata),
    .instr_o(instr_decompressed),
    .is_compressed_o(instr_is_compressed),
    .rst_ni(rst_ni),
    .valid_i(\$auto$builder.cc:338:Biop$52 )
  );
  (* src = "../rtl/cve2/cve2_if_stage.sv:152.5" *)
  \cve2_prefetch_buffer$cve2_core.if_stage_i.prefetch_buffer_i  prefetch_buffer_i (
    .addr_i({ fetch_addr_n[31:1], 1'h0 }),
    .addr_o(pc_if_o),
    .branch_i(pc_set_i),
    .busy_o(if_busy_o),
    .clk_i(clk_i),
    .err_o(fetch_err),
    .err_plus2_o(fetch_err_plus2),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .rdata_o(fetch_rdata),
    .ready_i(id_in_ready_i),
    .req_i(req_i),
    .rst_ni(rst_ni),
    .valid_o(fetch_valid)
  );
  assign exc_pc[1:0] = 2'h0;
  assign instr_rdata_id_o = instr_rdata_alu_id_o;
endmodule

(* src = "../rtl/cve2/cve2_load_store_unit.sv:16.8" *)
module \cve2_load_store_unit$cve2_core.load_store_unit_i (clk_i, rst_ni, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, data_pmp_err_i, lsu_we_i, lsu_type_i, lsu_wdata_i, lsu_sign_ext_i, lsu_rdata_o, lsu_rdata_valid_o, lsu_req_i, adder_result_ex_i, addr_incr_req_o
, addr_last_o, lsu_resp_valid_o, load_err_o, store_err_o, busy_o, perf_load_o, perf_store_o);
  wire \$auto$builder.cc:338:Biop$526 ;
  wire \$auto$builder.cc:338:Biop$528 ;
  wire \$auto$builder.cc:338:Biop$530 ;
  wire \$auto$builder.cc:338:Biop$532 ;
  wire \$auto$builder.cc:338:Biop$534 ;
  wire \$auto$builder.cc:338:Biop$536 ;
  wire \$auto$builder.cc:338:Biop$568 ;
  wire \$auto$builder.cc:338:Biop$576 ;
  wire \$auto$builder.cc:338:Biop$580 ;
  wire \$auto$builder.cc:338:Biop$592 ;
  wire \$auto$builder.cc:338:Biop$643 ;
  wire \$auto$builder.cc:338:Biop$647 ;
  wire \$auto$builder.cc:338:Biop$649 ;
  wire \$auto$builder.cc:338:Biop$655 ;
  wire \$auto$builder.cc:338:Biop$659 ;
  wire \$auto$builder.cc:338:Biop$667 ;
  wire \$auto$builder.cc:338:Biop$671 ;
  wire \$auto$builder.cc:364:Unop$543 ;
  wire \$auto$builder.cc:364:Unop$582 ;
  wire \$auto$builder.cc:364:Unop$590 ;
  wire \$auto$builder.cc:364:Unop$594 ;
  wire \$auto$builder.cc:364:Unop$610 ;
  wire \$auto$builder.cc:364:Unop$618 ;
  wire \$auto$builder.cc:364:Unop$657 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10857 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10859 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10861 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10868 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10877 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10883 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10885 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10890 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10898 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10863 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10874 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10887 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10900 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10661 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10663 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10697 ;
  wire \$auto$opt_share.cc:222:merge_operators$10755 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$553 ;
  wire \$auto$rtlil.cc:2876:Pmux$10757 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\addr_update$561 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\addr_update$599 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\addr_update$611 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\addr_update$621 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\data_be$433 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\data_be$434 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\data_be$435 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\data_be$440 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\data_be$441 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\data_be$442 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\handle_misaligned_d$573 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\handle_misaligned_d$601 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$557 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$604 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\perf_load_o$559 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\perf_store_o$560 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\pmp_err_d$564 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:276.9-280.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:284.9-288.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:292.9-296.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:300.9-304.12" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 ;
  wire \$procmux$10065_CMP ;
  wire \$procmux$10068_CMP ;
  wire \$procmux$10074_CMP ;
  wire [1:0] \$procmux$10078_CMP ;
  wire \$procmux$10078_CTRL ;
  wire \$procmux$10079_CMP ;
  wire \$procmux$10085_CMP ;
  wire \$procmux$10091_CMP ;
  wire \$procmux$10098_CMP ;
  wire \$procmux$10170_CMP ;
  wire \$procmux$10171_CMP ;
  wire [1:0] \$procmux$10179_CMP ;
  wire \$procmux$10179_CTRL ;
  wire \$procmux$9796_CMP ;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:44.24" *)
  input [31:0] adder_result_ex_i;
  wire [31:0] adder_result_ex_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:46.24" *)
  output addr_incr_req_o;
  wire addr_incr_req_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:66.30" *)
  wire [31:0] addr_last_d;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:48.24" *)
  output [31:0] addr_last_o;
  reg [31:0] addr_last_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:68.17" *)
  wire addr_update;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:58.24" *)
  output busy_o;
  wire busy_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:18.24" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:69.17" *)
  wire ctrl_update;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:28.24" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:30.24" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:25.24" *)
  input data_err_i;
  wire data_err_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:23.24" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:93.17" *)
  wire data_or_pmp_err;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:26.24" *)
  input data_pmp_err_i;
  wire data_pmp_err_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:32.24" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:22.24" *)
  output data_req_o;
  wire data_req_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:24.24" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:74.17" *)
  reg data_sign_ext_q;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:73.17" *)
  reg [1:0] data_type_q;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:31.24" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:29.24" *)
  output data_we_o;
  wire data_we_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:75.17" *)
  reg data_we_q;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:89.38" *)
  wire handle_misaligned_d;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:89.17" *)
  reg handle_misaligned_q;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:55.24" *)
  output load_err_o;
  wire load_err_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:100.12" *)
  reg [2:0] ls_fsm_cs;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:100.23" *)
  wire [2:0] ls_fsm_ns;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:92.28" *)
  wire lsu_err_d;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:92.17" *)
  reg lsu_err_q;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:40.24" *)
  output [31:0] lsu_rdata_o;
  wire [31:0] lsu_rdata_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:41.24" *)
  output lsu_rdata_valid_o;
  wire lsu_rdata_valid_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:42.24" *)
  input lsu_req_i;
  wire lsu_req_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:52.24" *)
  output lsu_resp_valid_o;
  wire lsu_resp_valid_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:38.24" *)
  input lsu_sign_ext_i;
  wire lsu_sign_ext_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:36.24" *)
  input [1:0] lsu_type_i;
  wire [1:0] lsu_type_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:37.24" *)
  input [31:0] lsu_wdata_i;
  wire [31:0] lsu_wdata_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:35.24" *)
  input lsu_we_i;
  wire lsu_we_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:60.24" *)
  output perf_load_o;
  wire perf_load_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:61.24" *)
  output perf_store_o;
  wire perf_store_o;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:91.28" *)
  wire pmp_err_d;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:91.17" *)
  reg pmp_err_q;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:86.17" *)
  wire [31:0] rdata_b_ext;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:85.17" *)
  wire [31:0] rdata_h_ext;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:72.17" *)
  reg [1:0] rdata_offset_q;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:71.17" *)
  reg [23:0] rdata_q;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:70.17" *)
  wire rdata_update;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:84.17" *)
  wire [31:0] rdata_w_ext;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:19.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:88.17" *)
  wire split_misaligned_access;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:56.24" *)
  output store_err_o;
  wire store_err_o;
  assign \$auto$builder.cc:338:Biop$526  = ! lsu_type_i;
  assign \$auto$builder.cc:338:Biop$528  = | adder_result_ex_i[1:0];
  assign \$auto$builder.cc:338:Biop$530  = \$auto$builder.cc:338:Biop$526  && \$auto$builder.cc:338:Biop$528 ;
  assign \$auto$builder.cc:338:Biop$532  = lsu_type_i == 1'h1;
  assign \$auto$builder.cc:338:Biop$534  = adder_result_ex_i[1:0] == 2'h3;
  assign \$auto$builder.cc:338:Biop$536  = \$auto$builder.cc:338:Biop$532  && \$auto$builder.cc:338:Biop$534 ;
  assign split_misaligned_access = \$auto$builder.cc:338:Biop$530  || \$auto$builder.cc:338:Biop$536 ;
  assign \$auto$builder.cc:338:Biop$568  = data_gnt_i || pmp_err_q;
  assign \$auto$builder.cc:338:Biop$576  = data_rvalid_i || pmp_err_q;
  assign \$auto$builder.cc:338:Biop$580  = data_err_i | pmp_err_q;
  assign \$auto$builder.cc:338:Biop$592  = data_gnt_i & \$auto$builder.cc:364:Unop$590 ;
  assign \$auto$builder.cc:338:Biop$643  = lsu_err_q | data_err_i;
  assign data_or_pmp_err = \$auto$builder.cc:338:Biop$643  | pmp_err_q;
  assign \$auto$builder.cc:338:Biop$647  = data_rvalid_i | pmp_err_q;
  assign \$auto$builder.cc:338:Biop$649  = ! ls_fsm_cs;
  assign lsu_resp_valid_o = \$auto$builder.cc:338:Biop$647  & \$auto$builder.cc:338:Biop$649 ;
  assign \$auto$builder.cc:338:Biop$655  = \$auto$builder.cc:338:Biop$649  & data_rvalid_i;
  assign \$auto$builder.cc:338:Biop$659  = \$auto$builder.cc:338:Biop$655  & \$auto$builder.cc:364:Unop$657 ;
  assign lsu_rdata_valid_o = \$auto$builder.cc:338:Biop$659  & \$auto$builder.cc:364:Unop$582 ;
  assign \$auto$builder.cc:338:Biop$667  = data_or_pmp_err & \$auto$builder.cc:364:Unop$582 ;
  assign load_err_o = \$auto$builder.cc:338:Biop$667  & lsu_resp_valid_o;
  assign \$auto$builder.cc:338:Biop$671  = data_or_pmp_err & data_we_q;
  assign store_err_o = \$auto$builder.cc:338:Biop$671  & lsu_resp_valid_o;
  assign busy_o = | ls_fsm_cs;
  assign \$auto$builder.cc:364:Unop$543  = ~ lsu_we_i;
  assign \$auto$builder.cc:364:Unop$582  = ~ data_we_q;
  assign \$auto$builder.cc:364:Unop$590  = ~ \$auto$builder.cc:338:Biop$580 ;
  assign \$auto$builder.cc:364:Unop$594  = ~ data_gnt_i;
  assign \$auto$builder.cc:364:Unop$610  = ~ lsu_err_q;
  assign \$auto$builder.cc:364:Unop$618  = ~ data_err_i;
  assign \$auto$builder.cc:364:Unop$657  = ~ data_or_pmp_err;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 24'h000000;
    else if (rdata_update) rdata_q <= data_rdata_i[31:8];
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_offset_q <= 2'h0;
    else if (ctrl_update) rdata_offset_q <= adder_result_ex_i[1:0];
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) pmp_err_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10863 ) pmp_err_q <= pmp_err_d;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) lsu_err_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10874 ) lsu_err_q <= lsu_err_d;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ls_fsm_cs <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10887 ) ls_fsm_cs <= ls_fsm_ns;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:452.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) handle_misaligned_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10900 ) handle_misaligned_q <= handle_misaligned_d;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_we_q <= 1'h0;
    else if (ctrl_update) data_we_q <= lsu_we_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_type_q <= 2'h0;
    else if (ctrl_update) data_type_q <= lsu_type_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:190.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_sign_ext_q <= 1'h0;
    else if (ctrl_update) data_sign_ext_q <= lsu_sign_ext_i;
  (* src = "../rtl/cve2/cve2_load_store_unit.sv:210.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) addr_last_o <= 32'd0;
    else if (addr_update) addr_last_o <= { adder_result_ex_i[31:2], addr_last_d[1:0] };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10857  = { \$procmux$10065_CMP , data_rvalid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10859  = { \$procmux$10068_CMP , \$auto$builder.cc:338:Biop$576  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10861  = | { \$procmux$10068_CMP , \$procmux$10065_CMP , \$auto$builder.cc:338:Biop$649  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10868  = { \$auto$builder.cc:338:Biop$649 , lsu_req_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10877  = { \$procmux$10068_CMP , \$auto$builder.cc:338:Biop$576 , data_gnt_i } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10883  = { \$procmux$9796_CMP , \$auto$builder.cc:338:Biop$568  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10885  = { \$procmux$10074_CMP , \$auto$builder.cc:338:Biop$568  } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10890  = { \$auto$builder.cc:338:Biop$649 , lsu_req_i, data_gnt_i } != 3'h6;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10898  = | { \$procmux$10074_CMP , \$procmux$10068_CMP , \$procmux$9796_CMP , \$auto$builder.cc:338:Biop$649  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10863  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10859 , \$auto$opt_dff.cc:194:make_patterns_logic$10861 , \$auto$opt_dff.cc:194:make_patterns_logic$10857  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10874  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10859 , \$auto$opt_dff.cc:194:make_patterns_logic$10861 , \$auto$opt_dff.cc:194:make_patterns_logic$10857 , \$auto$opt_dff.cc:194:make_patterns_logic$10868  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10887  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10857 , \$auto$opt_dff.cc:194:make_patterns_logic$10868 , \$auto$opt_dff.cc:194:make_patterns_logic$10883 , \$auto$opt_dff.cc:194:make_patterns_logic$10885 , \$auto$opt_dff.cc:194:make_patterns_logic$10877  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10900  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10868 , \$auto$opt_dff.cc:194:make_patterns_logic$10898 , \$auto$opt_dff.cc:194:make_patterns_logic$10885 , \$auto$opt_dff.cc:194:make_patterns_logic$10890 , \$auto$opt_dff.cc:194:make_patterns_logic$10877  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10663  = | { \$procmux$10074_CMP , \$procmux$10068_CMP , \$procmux$9796_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10697  = | { \$procmux$10074_CMP , \$procmux$9796_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10661  = | { \$procmux$10068_CMP , \$procmux$10065_CMP  };
  assign \$auto$rtlil.cc:2876:Pmux$10757  = \$procmux$10065_CMP  ? data_rvalid_i : \$auto$builder.cc:338:Biop$576 ;
  assign addr_last_d[1:0] = addr_incr_req_o ? 2'h0 : adder_result_ex_i[1:0];
  assign \$auto$rtlil.cc:2874:Mux$553 [1] = ~ split_misaligned_access;
  assign \$auto$slang_frontend.cc:694:finish$\addr_update$561  = lsu_req_i & (* src = "../rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|../rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) data_gnt_i;
  assign \$auto$slang_frontend.cc:694:finish$\perf_store_o$560  = lsu_req_i & (* src = "../rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|../rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) lsu_we_i;
  assign \$auto$slang_frontend.cc:694:finish$\perf_load_o$559  = lsu_req_i & (* src = "../rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|../rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) \$auto$builder.cc:364:Unop$543 ;
  assign rdata_update = \$auto$opt_reduce.cc:137:opt_pmux$10661  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$auto$opt_share.cc:222:merge_operators$10755 ;
  assign \$procmux$10065_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 3'h4;
  assign \$procmux$10068_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:383.24-411.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 2'h2;
  function [0:0] \$procmux$10071 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10071  = b[0:0];
      2'b1?:
        \$procmux$10071  = b[1:1];
      default:
        \$procmux$10071  = a;
    endcase
  endfunction
  assign addr_incr_req_o = \$procmux$10071 (1'h0, { handle_misaligned_q, 1'h1 }, { \$procmux$10074_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10661  });
  assign \$procmux$10074_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 2'h3;
  function [31:0] \$procmux$10077 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|../rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10077  = b[31:0];
      2'b1?:
        \$procmux$10077  = b[63:32];
      default:
        \$procmux$10077  = a;
    endcase
  endfunction
  assign lsu_rdata_o = \$procmux$10077 (rdata_w_ext, { rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[15:0], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[7:0] }, { \$procmux$10079_CMP , \$procmux$10078_CTRL  });
  assign \$procmux$10078_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|../rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) \$procmux$10078_CMP ;
  assign \$procmux$10078_CMP [0] = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|../rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 2'h2;
  assign \$procmux$10078_CMP [1] = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:316.20-316.49|../rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 2'h3;
  assign \$procmux$10079_CMP  = data_type_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:315.20-315.49|../rtl/cve2/cve2_load_store_unit.sv:313.5-318.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:301.11-301.60|../rtl/cve2/cve2_load_store_unit.sv:300.9-304.12" *) data_rdata_i[31];
  assign \$procmux$10085_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|../rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 2'h3;
  assign \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:293.11-293.60|../rtl/cve2/cve2_load_store_unit.sv:292.9-296.12" *) data_rdata_i[23];
  assign \$procmux$10091_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:292.9-296.12|../rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:285.11-285.59|../rtl/cve2/cve2_load_store_unit.sv:284.9-288.12" *) data_rdata_i[15];
  assign \$procmux$10098_CMP  = rdata_offset_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:284.9-288.12|../rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *) 1'h1;
  function [8:0] \$procmux$10100 ;
    input [8:0] a;
    input [26:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:300.9-304.12|../rtl/cve2/cve2_load_store_unit.sv:274.5-308.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10100  = b[8:0];
      3'b?1?:
        \$procmux$10100  = b[17:9];
      3'b1??:
        \$procmux$10100  = b[26:18];
      default:
        \$procmux$10100  = a;
    endcase
  endfunction
  assign { rdata_b_ext[31], rdata_b_ext[7:0] } = \$procmux$10100 ({ \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], data_rdata_i[7:0] }, { \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], data_rdata_i[15:8], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], data_rdata_i[23:16], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], data_rdata_i[31:24] }, { \$procmux$10098_CMP , \$procmux$10091_CMP , \$procmux$10085_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31] = data_sign_ext_q & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:277.11-277.58|../rtl/cve2/cve2_load_store_unit.sv:276.9-280.12" *) data_rdata_i[7];
  function [16:0] \$procmux$10135 ;
    input [16:0] a;
    input [50:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:261.9-265.12|../rtl/cve2/cve2_load_store_unit.sv:235.5-269.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10135  = b[16:0];
      3'b?1?:
        \$procmux$10135  = b[33:17];
      3'b1??:
        \$procmux$10135  = b[50:34];
      default:
        \$procmux$10135  = a;
    endcase
  endfunction
  assign { rdata_h_ext[31], rdata_h_ext[15:0] } = \$procmux$10135 ({ \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], data_rdata_i[15:0] }, { \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], data_rdata_i[23:8], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], data_rdata_i[31:16], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], data_rdata_i[7:0], rdata_q[23:16] }, { \$procmux$10098_CMP , \$procmux$10091_CMP , \$procmux$10085_CMP  });
  function [31:0] \$procmux$10151 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:224.16-224.67|../rtl/cve2/cve2_load_store_unit.sv:220.5-226.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10151  = b[31:0];
      3'b?1?:
        \$procmux$10151  = b[63:32];
      3'b1??:
        \$procmux$10151  = b[95:64];
      default:
        \$procmux$10151  = a;
    endcase
  endfunction
  assign rdata_w_ext = \$procmux$10151 (data_rdata_i, { data_rdata_i[7:0], rdata_q, data_rdata_i[15:0], rdata_q[23:8], data_rdata_i[23:0], rdata_q[23:16] }, { \$procmux$10098_CMP , \$procmux$10091_CMP , \$procmux$10085_CMP  });
  function [31:0] \$procmux$10168 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:171.16-171.69|../rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10168  = b[31:0];
      3'b?1?:
        \$procmux$10168  = b[63:32];
      3'b1??:
        \$procmux$10168  = b[95:64];
      default:
        \$procmux$10168  = a;
    endcase
  endfunction
  assign data_wdata_o = \$procmux$10168 (lsu_wdata_i, { lsu_wdata_i[23:0], lsu_wdata_i[31:24], lsu_wdata_i[15:0], lsu_wdata_i[31:16], lsu_wdata_i[7:0], lsu_wdata_i[31:8] }, { \$procmux$10171_CMP , \$procmux$10170_CMP , \$auto$builder.cc:338:Biop$534  });
  assign \$procmux$10170_CMP  = adder_result_ex_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:170.16-170.69|../rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *) 2'h2;
  assign \$procmux$10171_CMP  = adder_result_ex_i[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:169.16-169.69|../rtl/cve2/cve2_load_store_unit.sv:167.5-173.12" *) 1'h1;
  function [3:0] \$procmux$10173 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:151.20-151.38|../rtl/cve2/cve2_load_store_unit.sv:147.9-153.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10173  = b[3:0];
      3'b?1?:
        \$procmux$10173  = b[7:4];
      3'b1??:
        \$procmux$10173  = b[11:8];
      default:
        \$procmux$10173  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\data_be$442  = \$procmux$10173 (4'h1, 12'h248, { \$procmux$10171_CMP , \$procmux$10170_CMP , \$auto$builder.cc:338:Biop$534  });
  assign \$procmux$10179_CTRL  = | (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|../rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) \$procmux$10179_CMP ;
  assign \$procmux$10179_CMP [0] = lsu_type_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|../rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) 2'h2;
  assign \$procmux$10179_CMP [1] = lsu_type_i == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|../rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *) 2'h3;
  assign \$auto$slang_frontend.cc:694:finish$\data_be$441  = handle_misaligned_q ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:133.11-139.18|../rtl/cve2/cve2_load_store_unit.sv:132.9-142.12" *) 4'h1 : \$auto$slang_frontend.cc:694:finish$\data_be$440 ;
  function [3:0] \$procmux$10189 ;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:137.22-137.40|../rtl/cve2/cve2_load_store_unit.sv:133.11-139.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10189  = b[3:0];
      3'b?1?:
        \$procmux$10189  = b[7:4];
      3'b1??:
        \$procmux$10189  = b[11:8];
      default:
        \$procmux$10189  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\data_be$440  = \$procmux$10189 (4'h3, 12'h6c8, { \$procmux$10171_CMP , \$procmux$10170_CMP , \$auto$builder.cc:338:Biop$534  });
  function [3:0] \$procmux$10199 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:147.9-153.16|../rtl/cve2/cve2_load_store_unit.sv:110.5-157.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10199  = b[3:0];
      2'b1?:
        \$procmux$10199  = b[7:4];
      default:
        \$procmux$10199  = a;
    endcase
  endfunction
  assign data_be_o = \$procmux$10199 (\$auto$slang_frontend.cc:694:finish$\data_be$435 , { \$auto$slang_frontend.cc:694:finish$\data_be$441 , \$auto$slang_frontend.cc:694:finish$\data_be$442  }, { \$auto$builder.cc:338:Biop$532 , \$procmux$10179_CTRL  });
  function [2:0] \$procmux$10207 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:125.22-125.40|../rtl/cve2/cve2_load_store_unit.sv:121.11-127.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10207  = b[2:0];
      3'b?1?:
        \$procmux$10207  = b[5:3];
      3'b1??:
        \$procmux$10207  = b[8:6];
      default:
        \$procmux$10207  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\data_be$434 [2:0] = \$procmux$10207 (3'h0, 9'h05f, { \$procmux$10171_CMP , \$procmux$10170_CMP , \$auto$builder.cc:338:Biop$534  });
  assign \$auto$slang_frontend.cc:694:finish$\data_be$435  = handle_misaligned_q ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:113.11-119.18|../rtl/cve2/cve2_load_store_unit.sv:112.9-128.12" *) { 1'h0, \$auto$slang_frontend.cc:694:finish$\data_be$434 [2:0] } : { 1'h1, \$auto$slang_frontend.cc:694:finish$\data_be$433 [2:0] };
  function [2:0] \$procmux$10229 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:117.22-117.40|../rtl/cve2/cve2_load_store_unit.sv:113.11-119.18" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$10229  = b[2:0];
      3'b?1?:
        \$procmux$10229  = b[5:3];
      3'b1??:
        \$procmux$10229  = b[8:6];
      default:
        \$procmux$10229  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\data_be$433 [2:0] = \$procmux$10229 (3'h7, 9'h1a0, { \$procmux$10171_CMP , \$procmux$10170_CMP , \$auto$builder.cc:338:Biop$534  });
  assign \$auto$opt_share.cc:222:merge_operators$10755  = \$auto$rtlil.cc:2876:Pmux$10757  & (* src = "../rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|../rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *) \$auto$builder.cc:364:Unop$582 ;
  assign \$auto$slang_frontend.cc:694:finish$\addr_update$621  = data_rvalid_i & (* src = "../rtl/cve2/cve2_load_store_unit.sv:431.28-442.12|../rtl/cve2/cve2_load_store_unit.sv:431.9-442.12" *) \$auto$builder.cc:364:Unop$618 ;
  assign \$auto$slang_frontend.cc:694:finish$\addr_update$611  = \$auto$builder.cc:338:Biop$568  & (* src = "../rtl/cve2/cve2_load_store_unit.sv:417.38-423.12|../rtl/cve2/cve2_load_store_unit.sv:417.9-423.12" *) \$auto$builder.cc:364:Unop$610 ;
  assign \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$604 [2:1] = \$auto$builder.cc:338:Biop$576  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|../rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) { 1'h0, \$auto$builder.cc:364:Unop$594  } : 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\handle_misaligned_d$601  = \$auto$builder.cc:338:Biop$576  & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|../rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) \$auto$builder.cc:364:Unop$594 ;
  assign \$auto$slang_frontend.cc:694:finish$\addr_update$599  = \$auto$builder.cc:338:Biop$576  & (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:390.41-403.12|../rtl/cve2/cve2_load_store_unit.sv:390.9-410.12" *) \$auto$builder.cc:338:Biop$592 ;
  assign \$procmux$9796_CMP  = ls_fsm_cs == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:369.21-381.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\handle_misaligned_d$573  = handle_misaligned_q | (* src = "../rtl/cve2/cve2_load_store_unit.sv:375.38-380.12|../rtl/cve2/cve2_load_store_unit.sv:375.9-380.12" *) \$auto$builder.cc:338:Biop$568 ;
  function [2:0] \$procmux$9823 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$9823  = b[2:0];
      3'b?1?:
        \$procmux$9823  = b[5:3];
      3'b1??:
        \$procmux$9823  = b[8:6];
      default:
        \$procmux$9823  = a;
    endcase
  endfunction
  assign ls_fsm_ns = \$procmux$9823 (3'h0, { 1'h0, \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$557 [1:0], 3'h2, \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$604 [2:1], \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$604 [1] }, { \$auto$builder.cc:338:Biop$649 , \$procmux$9796_CMP , \$procmux$10068_CMP  });
  function [0:0] \$procmux$9835 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9835  = b[0:0];
      2'b1?:
        \$procmux$9835  = b[1:1];
      default:
        \$procmux$9835  = a;
    endcase
  endfunction
  assign lsu_err_d = \$procmux$9835 (1'h0, { \$auto$builder.cc:338:Biop$580 , data_err_i }, { \$procmux$10068_CMP , \$procmux$10065_CMP  });
  assign pmp_err_d = \$auto$opt_reduce.cc:137:opt_pmux$10661  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) data_pmp_err_i : \$auto$slang_frontend.cc:694:finish$\pmp_err_d$564 ;
  function [0:0] \$procmux$9857 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$9857  = b[0:0];
      3'b?1?:
        \$procmux$9857  = b[1:1];
      3'b1??:
        \$procmux$9857  = b[2:2];
      default:
        \$procmux$9857  = a;
    endcase
  endfunction
  assign handle_misaligned_d = \$procmux$9857 (split_misaligned_access, { \$auto$slang_frontend.cc:694:finish$\handle_misaligned_d$573 , \$auto$slang_frontend.cc:694:finish$\handle_misaligned_d$601 , 1'h0 }, { \$procmux$9796_CMP , \$procmux$10068_CMP , \$procmux$10074_CMP  });
  function [0:0] \$procmux$9869 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9869  = b[0:0];
      2'b1?:
        \$procmux$9869  = b[1:1];
      default:
        \$procmux$9869  = a;
    endcase
  endfunction
  assign ctrl_update = \$procmux$9869 (1'h0, { \$auto$slang_frontend.cc:694:finish$\addr_update$561 , \$auto$builder.cc:338:Biop$568  }, { \$auto$builder.cc:338:Biop$649 , \$auto$opt_reduce.cc:137:opt_pmux$10697  });
  function [0:0] \$procmux$9878 ;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:426.34-443.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$9878  = b[0:0];
      5'b???1?:
        \$procmux$9878  = b[1:1];
      5'b??1??:
        \$procmux$9878  = b[2:2];
      5'b?1???:
        \$procmux$9878  = b[3:3];
      5'b1????:
        \$procmux$9878  = b[4:4];
      default:
        \$procmux$9878  = a;
    endcase
  endfunction
  assign addr_update = \$procmux$9878 (1'h0, { \$auto$slang_frontend.cc:694:finish$\addr_update$561 , \$auto$builder.cc:338:Biop$568 , \$auto$slang_frontend.cc:694:finish$\addr_update$599 , \$auto$slang_frontend.cc:694:finish$\addr_update$611 , \$auto$slang_frontend.cc:694:finish$\addr_update$621  }, { \$auto$builder.cc:338:Biop$649 , \$procmux$9796_CMP , \$procmux$10068_CMP , \$procmux$10074_CMP , \$procmux$10065_CMP  });
  assign perf_store_o = \$auto$builder.cc:338:Biop$649  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$auto$slang_frontend.cc:694:finish$\perf_store_o$560 ;
  assign perf_load_o = \$auto$builder.cc:338:Biop$649  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:349.13-367.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *) \$auto$slang_frontend.cc:694:finish$\perf_load_o$559 ;
  function [0:0] \$procmux$9916 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_load_store_unit.sv:413.17-424.10|../rtl/cve2/cve2_load_store_unit.sv:347.5-448.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$9916  = b[0:0];
      2'b1?:
        \$procmux$9916  = b[1:1];
      default:
        \$procmux$9916  = a;
    endcase
  endfunction
  assign data_req_o = \$procmux$9916 (1'h0, { lsu_req_i, 1'h1 }, { \$auto$builder.cc:338:Biop$649 , \$auto$opt_reduce.cc:137:opt_pmux$10663  });
  assign \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$557 [1:0] = data_gnt_i ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_load_store_unit.sv:358.27-363.14|../rtl/cve2/cve2_load_store_unit.sv:358.11-365.14" *) { split_misaligned_access, 1'h0 } : { \$auto$rtlil.cc:2874:Mux$553 [1], 1'h1 };
  assign \$auto$slang_frontend.cc:694:finish$\pmp_err_d$564  = lsu_req_i & (* src = "../rtl/cve2/cve2_load_store_unit.sv:351.24-366.12|../rtl/cve2/cve2_load_store_unit.sv:351.9-366.12" *) data_pmp_err_i;
  assign \$auto$rtlil.cc:2874:Mux$553 [0] = 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\data_be$433 [3] = 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\data_be$434 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$557 [2] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$604 [0] = \$auto$slang_frontend.cc:694:finish$\ls_fsm_ns$604 [1];
  assign \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [30:0] = { \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$506 [31], data_rdata_i[7:0] };
  assign \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [30:0] = { \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$511 [31], data_rdata_i[15:8] };
  assign \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [30:0] = { \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$516 [31], data_rdata_i[23:16] };
  assign \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [30:0] = { \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], \$auto$slang_frontend.cc:694:finish$\rdata_b_ext$521 [31], data_rdata_i[31:24] };
  assign addr_last_d[31:2] = adder_result_ex_i[31:2];
  assign data_addr_o = { adder_result_ex_i[31:2], 2'h0 };
  assign data_we_o = lsu_we_i;
  assign rdata_b_ext[30:8] = { rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31], rdata_b_ext[31] };
  assign rdata_h_ext[30:16] = { rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31], rdata_h_ext[31] };
endmodule

(* src = "../rtl/cve2/cve2_multdiv_fast.sv:17.8" *)
module \cve2_multdiv_fast$cve2_core.ex_block_i.gen_multdiv_fast.multdiv_i (clk_i, rst_ni, mult_en_i, div_en_i, mult_sel_i, div_sel_i, imd_val_we_o, imd_val_d_o, imd_val_q_i, valid_o, operator_i, signed_mode_i, op_a_i, op_b_i, alu_adder_ext_i, alu_adder_i, equal_to_zero_i, alu_operand_a_o, alu_operand_b_o, multdiv_result_o);
  wire [15:0] \$auto$bmuxmap.cc:84:execute$12620 ;
  wire [7:0] \$auto$bmuxmap.cc:84:execute$12637 ;
  wire [3:0] \$auto$bmuxmap.cc:84:execute$12646 ;
  wire [1:0] \$auto$bmuxmap.cc:84:execute$12651 ;
  wire \$auto$bmuxmap.cc:84:execute$12654 ;
  (* unused_bits = "34 35" *)
  wire [35:0] \$auto$booth.cc:292:run$10964 ;
  wire [35:0] \$auto$booth.cc:329:WallaceSum$12461 ;
  wire [35:0] \$auto$booth.cc:329:WallaceSum$12464 ;
  (* unused_bits = "35" *)
  wire [35:0] \$auto$booth.cc:329:WallaceSum$12467 ;
  wire [35:0] \$auto$booth.cc:329:WallaceSum$12470 ;
  (* unused_bits = "35" *)
  wire [35:0] \$auto$booth.cc:329:WallaceSum$12473 ;
  (* unused_bits = "35" *)
  wire [35:0] \$auto$booth.cc:329:WallaceSum$12476 ;
  (* unused_bits = "35" *)
  wire [35:0] \$auto$booth.cc:329:WallaceSum$12479 ;
  (* unused_bits = "35" *)
  wire [35:0] \$auto$booth.cc:329:WallaceSum$12482 ;
  wire [35:0] \$auto$booth.cc:330:WallaceSum$12462 ;
  wire [35:0] \$auto$booth.cc:330:WallaceSum$12465 ;
  wire [35:0] \$auto$booth.cc:330:WallaceSum$12468 ;
  wire [35:0] \$auto$booth.cc:330:WallaceSum$12471 ;
  wire [35:0] \$auto$booth.cc:330:WallaceSum$12474 ;
  wire [35:0] \$auto$booth.cc:330:WallaceSum$12477 ;
  wire [35:0] \$auto$booth.cc:330:WallaceSum$12480 ;
  wire [35:0] \$auto$booth.cc:330:WallaceSum$12483 ;
  wire \$auto$builder.cc:338:Biop$2786 ;
  wire \$auto$builder.cc:338:Biop$2806 ;
  wire [31:0] \$auto$builder.cc:338:Biop$2831 ;
  wire \$auto$builder.cc:338:Biop$2838 ;
  wire \$auto$builder.cc:338:Biop$2844 ;
  wire \$auto$builder.cc:338:Biop$2851 ;
  wire [4:0] \$auto$builder.cc:338:Biop$2858 ;
  wire \$auto$builder.cc:338:Biop$2862 ;
  wire \$auto$builder.cc:338:Biop$2897 ;
  wire \$auto$builder.cc:364:Unop$2853 ;
  wire [31:0] \$auto$builder.cc:364:Unop$2860 ;
  wire [31:0] \$auto$builder.cc:364:Unop$2883 ;
  wire [31:0] \$auto$builder.cc:364:Unop$2903 ;
  wire [31:0] \$auto$builder.cc:364:Unop$2925 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$10907 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10909 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10912 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10918 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10665 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10669 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10671 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10675 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$10679 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$2868 ;
  wire [31:0] \$auto$rtlil.cc:2874:Mux$2881 ;
  wire [31:0] \$auto$rtlil.cc:2874:Mux$2887 ;
  wire \$auto$rtlil.cc:2874:Mux$2895 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$2901 ;
  wire [33:0] \$auto$rtlil.cc:2874:Mux$2918 ;
  wire [33:0] \$auto$rtlil.cc:2874:Mux$2922 ;
  wire \$auto$rtlil.cc:2976:NotGate$10984 ;
  wire \$auto$rtlil.cc:2976:NotGate$10996 ;
  wire \$auto$rtlil.cc:2976:NotGate$11008 ;
  wire \$auto$rtlil.cc:2976:NotGate$11020 ;
  wire \$auto$rtlil.cc:2976:NotGate$11032 ;
  wire \$auto$rtlil.cc:2976:NotGate$11044 ;
  wire \$auto$rtlil.cc:2976:NotGate$11056 ;
  wire \$auto$rtlil.cc:2976:NotGate$11068 ;
  wire \$auto$rtlil.cc:2976:NotGate$11228 ;
  wire \$auto$rtlil.cc:2977:AndGate$11074 ;
  wire \$auto$rtlil.cc:2977:AndGate$11078 ;
  wire \$auto$rtlil.cc:2977:AndGate$11080 ;
  wire \$auto$rtlil.cc:2977:AndGate$11086 ;
  wire \$auto$rtlil.cc:2977:AndGate$11088 ;
  wire \$auto$rtlil.cc:2977:AndGate$11094 ;
  wire \$auto$rtlil.cc:2977:AndGate$11096 ;
  wire \$auto$rtlil.cc:2977:AndGate$11102 ;
  wire \$auto$rtlil.cc:2977:AndGate$11104 ;
  wire \$auto$rtlil.cc:2977:AndGate$11110 ;
  wire \$auto$rtlil.cc:2977:AndGate$11112 ;
  wire \$auto$rtlil.cc:2977:AndGate$11118 ;
  wire \$auto$rtlil.cc:2977:AndGate$11120 ;
  wire \$auto$rtlil.cc:2977:AndGate$11126 ;
  wire \$auto$rtlil.cc:2977:AndGate$11128 ;
  wire \$auto$rtlil.cc:2977:AndGate$11134 ;
  wire \$auto$rtlil.cc:2977:AndGate$11136 ;
  wire \$auto$rtlil.cc:2977:AndGate$11142 ;
  wire \$auto$rtlil.cc:2977:AndGate$11144 ;
  wire \$auto$rtlil.cc:2977:AndGate$11150 ;
  wire \$auto$rtlil.cc:2977:AndGate$11152 ;
  wire \$auto$rtlil.cc:2977:AndGate$11158 ;
  wire \$auto$rtlil.cc:2977:AndGate$11160 ;
  wire \$auto$rtlil.cc:2977:AndGate$11166 ;
  wire \$auto$rtlil.cc:2977:AndGate$11168 ;
  wire \$auto$rtlil.cc:2977:AndGate$11174 ;
  wire \$auto$rtlil.cc:2977:AndGate$11176 ;
  wire \$auto$rtlil.cc:2977:AndGate$11182 ;
  wire \$auto$rtlil.cc:2977:AndGate$11184 ;
  wire \$auto$rtlil.cc:2977:AndGate$11190 ;
  wire \$auto$rtlil.cc:2977:AndGate$11192 ;
  wire \$auto$rtlil.cc:2977:AndGate$11198 ;
  wire \$auto$rtlil.cc:2977:AndGate$11200 ;
  wire \$auto$rtlil.cc:2977:AndGate$11208 ;
  wire \$auto$rtlil.cc:2977:AndGate$11224 ;
  wire \$auto$rtlil.cc:2977:AndGate$11230 ;
  wire \$auto$rtlil.cc:2977:AndGate$11234 ;
  wire \$auto$rtlil.cc:2977:AndGate$11236 ;
  wire \$auto$rtlil.cc:2977:AndGate$11242 ;
  wire \$auto$rtlil.cc:2977:AndGate$11244 ;
  wire \$auto$rtlil.cc:2977:AndGate$11250 ;
  wire \$auto$rtlil.cc:2977:AndGate$11252 ;
  wire \$auto$rtlil.cc:2977:AndGate$11258 ;
  wire \$auto$rtlil.cc:2977:AndGate$11260 ;
  wire \$auto$rtlil.cc:2977:AndGate$11266 ;
  wire \$auto$rtlil.cc:2977:AndGate$11268 ;
  wire \$auto$rtlil.cc:2977:AndGate$11274 ;
  wire \$auto$rtlil.cc:2977:AndGate$11276 ;
  wire \$auto$rtlil.cc:2977:AndGate$11282 ;
  wire \$auto$rtlil.cc:2977:AndGate$11284 ;
  wire \$auto$rtlil.cc:2977:AndGate$11290 ;
  wire \$auto$rtlil.cc:2977:AndGate$11292 ;
  wire \$auto$rtlil.cc:2977:AndGate$11298 ;
  wire \$auto$rtlil.cc:2977:AndGate$11300 ;
  wire \$auto$rtlil.cc:2977:AndGate$11306 ;
  wire \$auto$rtlil.cc:2977:AndGate$11308 ;
  wire \$auto$rtlil.cc:2977:AndGate$11314 ;
  wire \$auto$rtlil.cc:2977:AndGate$11316 ;
  wire \$auto$rtlil.cc:2977:AndGate$11322 ;
  wire \$auto$rtlil.cc:2977:AndGate$11324 ;
  wire \$auto$rtlil.cc:2977:AndGate$11330 ;
  wire \$auto$rtlil.cc:2977:AndGate$11332 ;
  wire \$auto$rtlil.cc:2977:AndGate$11338 ;
  wire \$auto$rtlil.cc:2977:AndGate$11340 ;
  wire \$auto$rtlil.cc:2977:AndGate$11346 ;
  wire \$auto$rtlil.cc:2977:AndGate$11348 ;
  wire \$auto$rtlil.cc:2977:AndGate$11354 ;
  wire \$auto$rtlil.cc:2977:AndGate$11356 ;
  wire \$auto$rtlil.cc:2977:AndGate$11364 ;
  wire \$auto$rtlil.cc:2977:AndGate$11380 ;
  wire \$auto$rtlil.cc:2977:AndGate$11384 ;
  wire \$auto$rtlil.cc:2977:AndGate$11388 ;
  wire \$auto$rtlil.cc:2977:AndGate$11390 ;
  wire \$auto$rtlil.cc:2977:AndGate$11396 ;
  wire \$auto$rtlil.cc:2977:AndGate$11398 ;
  wire \$auto$rtlil.cc:2977:AndGate$11404 ;
  wire \$auto$rtlil.cc:2977:AndGate$11406 ;
  wire \$auto$rtlil.cc:2977:AndGate$11412 ;
  wire \$auto$rtlil.cc:2977:AndGate$11414 ;
  wire \$auto$rtlil.cc:2977:AndGate$11420 ;
  wire \$auto$rtlil.cc:2977:AndGate$11422 ;
  wire \$auto$rtlil.cc:2977:AndGate$11428 ;
  wire \$auto$rtlil.cc:2977:AndGate$11430 ;
  wire \$auto$rtlil.cc:2977:AndGate$11436 ;
  wire \$auto$rtlil.cc:2977:AndGate$11438 ;
  wire \$auto$rtlil.cc:2977:AndGate$11444 ;
  wire \$auto$rtlil.cc:2977:AndGate$11446 ;
  wire \$auto$rtlil.cc:2977:AndGate$11452 ;
  wire \$auto$rtlil.cc:2977:AndGate$11454 ;
  wire \$auto$rtlil.cc:2977:AndGate$11460 ;
  wire \$auto$rtlil.cc:2977:AndGate$11462 ;
  wire \$auto$rtlil.cc:2977:AndGate$11468 ;
  wire \$auto$rtlil.cc:2977:AndGate$11470 ;
  wire \$auto$rtlil.cc:2977:AndGate$11476 ;
  wire \$auto$rtlil.cc:2977:AndGate$11478 ;
  wire \$auto$rtlil.cc:2977:AndGate$11484 ;
  wire \$auto$rtlil.cc:2977:AndGate$11486 ;
  wire \$auto$rtlil.cc:2977:AndGate$11492 ;
  wire \$auto$rtlil.cc:2977:AndGate$11494 ;
  wire \$auto$rtlil.cc:2977:AndGate$11500 ;
  wire \$auto$rtlil.cc:2977:AndGate$11502 ;
  wire \$auto$rtlil.cc:2977:AndGate$11508 ;
  wire \$auto$rtlil.cc:2977:AndGate$11510 ;
  wire \$auto$rtlil.cc:2977:AndGate$11518 ;
  wire \$auto$rtlil.cc:2977:AndGate$11534 ;
  wire \$auto$rtlil.cc:2977:AndGate$11538 ;
  wire \$auto$rtlil.cc:2977:AndGate$11542 ;
  wire \$auto$rtlil.cc:2977:AndGate$11544 ;
  wire \$auto$rtlil.cc:2977:AndGate$11550 ;
  wire \$auto$rtlil.cc:2977:AndGate$11552 ;
  wire \$auto$rtlil.cc:2977:AndGate$11558 ;
  wire \$auto$rtlil.cc:2977:AndGate$11560 ;
  wire \$auto$rtlil.cc:2977:AndGate$11566 ;
  wire \$auto$rtlil.cc:2977:AndGate$11568 ;
  wire \$auto$rtlil.cc:2977:AndGate$11574 ;
  wire \$auto$rtlil.cc:2977:AndGate$11576 ;
  wire \$auto$rtlil.cc:2977:AndGate$11582 ;
  wire \$auto$rtlil.cc:2977:AndGate$11584 ;
  wire \$auto$rtlil.cc:2977:AndGate$11590 ;
  wire \$auto$rtlil.cc:2977:AndGate$11592 ;
  wire \$auto$rtlil.cc:2977:AndGate$11598 ;
  wire \$auto$rtlil.cc:2977:AndGate$11600 ;
  wire \$auto$rtlil.cc:2977:AndGate$11606 ;
  wire \$auto$rtlil.cc:2977:AndGate$11608 ;
  wire \$auto$rtlil.cc:2977:AndGate$11614 ;
  wire \$auto$rtlil.cc:2977:AndGate$11616 ;
  wire \$auto$rtlil.cc:2977:AndGate$11622 ;
  wire \$auto$rtlil.cc:2977:AndGate$11624 ;
  wire \$auto$rtlil.cc:2977:AndGate$11630 ;
  wire \$auto$rtlil.cc:2977:AndGate$11632 ;
  wire \$auto$rtlil.cc:2977:AndGate$11638 ;
  wire \$auto$rtlil.cc:2977:AndGate$11640 ;
  wire \$auto$rtlil.cc:2977:AndGate$11646 ;
  wire \$auto$rtlil.cc:2977:AndGate$11648 ;
  wire \$auto$rtlil.cc:2977:AndGate$11654 ;
  wire \$auto$rtlil.cc:2977:AndGate$11656 ;
  wire \$auto$rtlil.cc:2977:AndGate$11662 ;
  wire \$auto$rtlil.cc:2977:AndGate$11664 ;
  wire \$auto$rtlil.cc:2977:AndGate$11672 ;
  wire \$auto$rtlil.cc:2977:AndGate$11688 ;
  wire \$auto$rtlil.cc:2977:AndGate$11692 ;
  wire \$auto$rtlil.cc:2977:AndGate$11696 ;
  wire \$auto$rtlil.cc:2977:AndGate$11698 ;
  wire \$auto$rtlil.cc:2977:AndGate$11704 ;
  wire \$auto$rtlil.cc:2977:AndGate$11706 ;
  wire \$auto$rtlil.cc:2977:AndGate$11712 ;
  wire \$auto$rtlil.cc:2977:AndGate$11714 ;
  wire \$auto$rtlil.cc:2977:AndGate$11720 ;
  wire \$auto$rtlil.cc:2977:AndGate$11722 ;
  wire \$auto$rtlil.cc:2977:AndGate$11728 ;
  wire \$auto$rtlil.cc:2977:AndGate$11730 ;
  wire \$auto$rtlil.cc:2977:AndGate$11736 ;
  wire \$auto$rtlil.cc:2977:AndGate$11738 ;
  wire \$auto$rtlil.cc:2977:AndGate$11744 ;
  wire \$auto$rtlil.cc:2977:AndGate$11746 ;
  wire \$auto$rtlil.cc:2977:AndGate$11752 ;
  wire \$auto$rtlil.cc:2977:AndGate$11754 ;
  wire \$auto$rtlil.cc:2977:AndGate$11760 ;
  wire \$auto$rtlil.cc:2977:AndGate$11762 ;
  wire \$auto$rtlil.cc:2977:AndGate$11768 ;
  wire \$auto$rtlil.cc:2977:AndGate$11770 ;
  wire \$auto$rtlil.cc:2977:AndGate$11776 ;
  wire \$auto$rtlil.cc:2977:AndGate$11778 ;
  wire \$auto$rtlil.cc:2977:AndGate$11784 ;
  wire \$auto$rtlil.cc:2977:AndGate$11786 ;
  wire \$auto$rtlil.cc:2977:AndGate$11792 ;
  wire \$auto$rtlil.cc:2977:AndGate$11794 ;
  wire \$auto$rtlil.cc:2977:AndGate$11800 ;
  wire \$auto$rtlil.cc:2977:AndGate$11802 ;
  wire \$auto$rtlil.cc:2977:AndGate$11808 ;
  wire \$auto$rtlil.cc:2977:AndGate$11810 ;
  wire \$auto$rtlil.cc:2977:AndGate$11816 ;
  wire \$auto$rtlil.cc:2977:AndGate$11818 ;
  wire \$auto$rtlil.cc:2977:AndGate$11826 ;
  wire \$auto$rtlil.cc:2977:AndGate$11842 ;
  wire \$auto$rtlil.cc:2977:AndGate$11846 ;
  wire \$auto$rtlil.cc:2977:AndGate$11850 ;
  wire \$auto$rtlil.cc:2977:AndGate$11852 ;
  wire \$auto$rtlil.cc:2977:AndGate$11858 ;
  wire \$auto$rtlil.cc:2977:AndGate$11860 ;
  wire \$auto$rtlil.cc:2977:AndGate$11866 ;
  wire \$auto$rtlil.cc:2977:AndGate$11868 ;
  wire \$auto$rtlil.cc:2977:AndGate$11874 ;
  wire \$auto$rtlil.cc:2977:AndGate$11876 ;
  wire \$auto$rtlil.cc:2977:AndGate$11882 ;
  wire \$auto$rtlil.cc:2977:AndGate$11884 ;
  wire \$auto$rtlil.cc:2977:AndGate$11890 ;
  wire \$auto$rtlil.cc:2977:AndGate$11892 ;
  wire \$auto$rtlil.cc:2977:AndGate$11898 ;
  wire \$auto$rtlil.cc:2977:AndGate$11900 ;
  wire \$auto$rtlil.cc:2977:AndGate$11906 ;
  wire \$auto$rtlil.cc:2977:AndGate$11908 ;
  wire \$auto$rtlil.cc:2977:AndGate$11914 ;
  wire \$auto$rtlil.cc:2977:AndGate$11916 ;
  wire \$auto$rtlil.cc:2977:AndGate$11922 ;
  wire \$auto$rtlil.cc:2977:AndGate$11924 ;
  wire \$auto$rtlil.cc:2977:AndGate$11930 ;
  wire \$auto$rtlil.cc:2977:AndGate$11932 ;
  wire \$auto$rtlil.cc:2977:AndGate$11938 ;
  wire \$auto$rtlil.cc:2977:AndGate$11940 ;
  wire \$auto$rtlil.cc:2977:AndGate$11946 ;
  wire \$auto$rtlil.cc:2977:AndGate$11948 ;
  wire \$auto$rtlil.cc:2977:AndGate$11954 ;
  wire \$auto$rtlil.cc:2977:AndGate$11956 ;
  wire \$auto$rtlil.cc:2977:AndGate$11962 ;
  wire \$auto$rtlil.cc:2977:AndGate$11964 ;
  wire \$auto$rtlil.cc:2977:AndGate$11970 ;
  wire \$auto$rtlil.cc:2977:AndGate$11972 ;
  wire \$auto$rtlil.cc:2977:AndGate$11980 ;
  wire \$auto$rtlil.cc:2977:AndGate$11996 ;
  wire \$auto$rtlil.cc:2977:AndGate$12000 ;
  wire \$auto$rtlil.cc:2977:AndGate$12004 ;
  wire \$auto$rtlil.cc:2977:AndGate$12006 ;
  wire \$auto$rtlil.cc:2977:AndGate$12012 ;
  wire \$auto$rtlil.cc:2977:AndGate$12014 ;
  wire \$auto$rtlil.cc:2977:AndGate$12020 ;
  wire \$auto$rtlil.cc:2977:AndGate$12022 ;
  wire \$auto$rtlil.cc:2977:AndGate$12028 ;
  wire \$auto$rtlil.cc:2977:AndGate$12030 ;
  wire \$auto$rtlil.cc:2977:AndGate$12036 ;
  wire \$auto$rtlil.cc:2977:AndGate$12038 ;
  wire \$auto$rtlil.cc:2977:AndGate$12044 ;
  wire \$auto$rtlil.cc:2977:AndGate$12046 ;
  wire \$auto$rtlil.cc:2977:AndGate$12052 ;
  wire \$auto$rtlil.cc:2977:AndGate$12054 ;
  wire \$auto$rtlil.cc:2977:AndGate$12060 ;
  wire \$auto$rtlil.cc:2977:AndGate$12062 ;
  wire \$auto$rtlil.cc:2977:AndGate$12068 ;
  wire \$auto$rtlil.cc:2977:AndGate$12070 ;
  wire \$auto$rtlil.cc:2977:AndGate$12076 ;
  wire \$auto$rtlil.cc:2977:AndGate$12078 ;
  wire \$auto$rtlil.cc:2977:AndGate$12084 ;
  wire \$auto$rtlil.cc:2977:AndGate$12086 ;
  wire \$auto$rtlil.cc:2977:AndGate$12092 ;
  wire \$auto$rtlil.cc:2977:AndGate$12094 ;
  wire \$auto$rtlil.cc:2977:AndGate$12100 ;
  wire \$auto$rtlil.cc:2977:AndGate$12102 ;
  wire \$auto$rtlil.cc:2977:AndGate$12108 ;
  wire \$auto$rtlil.cc:2977:AndGate$12110 ;
  wire \$auto$rtlil.cc:2977:AndGate$12116 ;
  wire \$auto$rtlil.cc:2977:AndGate$12118 ;
  wire \$auto$rtlil.cc:2977:AndGate$12124 ;
  wire \$auto$rtlil.cc:2977:AndGate$12126 ;
  wire \$auto$rtlil.cc:2977:AndGate$12134 ;
  wire \$auto$rtlil.cc:2977:AndGate$12150 ;
  wire \$auto$rtlil.cc:2977:AndGate$12154 ;
  wire \$auto$rtlil.cc:2977:AndGate$12158 ;
  wire \$auto$rtlil.cc:2977:AndGate$12160 ;
  wire \$auto$rtlil.cc:2977:AndGate$12166 ;
  wire \$auto$rtlil.cc:2977:AndGate$12168 ;
  wire \$auto$rtlil.cc:2977:AndGate$12174 ;
  wire \$auto$rtlil.cc:2977:AndGate$12176 ;
  wire \$auto$rtlil.cc:2977:AndGate$12182 ;
  wire \$auto$rtlil.cc:2977:AndGate$12184 ;
  wire \$auto$rtlil.cc:2977:AndGate$12190 ;
  wire \$auto$rtlil.cc:2977:AndGate$12192 ;
  wire \$auto$rtlil.cc:2977:AndGate$12198 ;
  wire \$auto$rtlil.cc:2977:AndGate$12200 ;
  wire \$auto$rtlil.cc:2977:AndGate$12206 ;
  wire \$auto$rtlil.cc:2977:AndGate$12208 ;
  wire \$auto$rtlil.cc:2977:AndGate$12214 ;
  wire \$auto$rtlil.cc:2977:AndGate$12216 ;
  wire \$auto$rtlil.cc:2977:AndGate$12222 ;
  wire \$auto$rtlil.cc:2977:AndGate$12224 ;
  wire \$auto$rtlil.cc:2977:AndGate$12230 ;
  wire \$auto$rtlil.cc:2977:AndGate$12232 ;
  wire \$auto$rtlil.cc:2977:AndGate$12238 ;
  wire \$auto$rtlil.cc:2977:AndGate$12240 ;
  wire \$auto$rtlil.cc:2977:AndGate$12246 ;
  wire \$auto$rtlil.cc:2977:AndGate$12248 ;
  wire \$auto$rtlil.cc:2977:AndGate$12254 ;
  wire \$auto$rtlil.cc:2977:AndGate$12256 ;
  wire \$auto$rtlil.cc:2977:AndGate$12262 ;
  wire \$auto$rtlil.cc:2977:AndGate$12264 ;
  wire \$auto$rtlil.cc:2977:AndGate$12270 ;
  wire \$auto$rtlil.cc:2977:AndGate$12272 ;
  wire \$auto$rtlil.cc:2977:AndGate$12278 ;
  wire \$auto$rtlil.cc:2977:AndGate$12280 ;
  wire \$auto$rtlil.cc:2977:AndGate$12288 ;
  wire \$auto$rtlil.cc:2977:AndGate$12304 ;
  wire \$auto$rtlil.cc:2977:AndGate$12308 ;
  wire \$auto$rtlil.cc:2977:AndGate$12312 ;
  wire \$auto$rtlil.cc:2977:AndGate$12314 ;
  wire \$auto$rtlil.cc:2977:AndGate$12320 ;
  wire \$auto$rtlil.cc:2977:AndGate$12322 ;
  wire \$auto$rtlil.cc:2977:AndGate$12328 ;
  wire \$auto$rtlil.cc:2977:AndGate$12330 ;
  wire \$auto$rtlil.cc:2977:AndGate$12336 ;
  wire \$auto$rtlil.cc:2977:AndGate$12338 ;
  wire \$auto$rtlil.cc:2977:AndGate$12344 ;
  wire \$auto$rtlil.cc:2977:AndGate$12346 ;
  wire \$auto$rtlil.cc:2977:AndGate$12352 ;
  wire \$auto$rtlil.cc:2977:AndGate$12354 ;
  wire \$auto$rtlil.cc:2977:AndGate$12360 ;
  wire \$auto$rtlil.cc:2977:AndGate$12362 ;
  wire \$auto$rtlil.cc:2977:AndGate$12368 ;
  wire \$auto$rtlil.cc:2977:AndGate$12370 ;
  wire \$auto$rtlil.cc:2977:AndGate$12376 ;
  wire \$auto$rtlil.cc:2977:AndGate$12378 ;
  wire \$auto$rtlil.cc:2977:AndGate$12384 ;
  wire \$auto$rtlil.cc:2977:AndGate$12386 ;
  wire \$auto$rtlil.cc:2977:AndGate$12392 ;
  wire \$auto$rtlil.cc:2977:AndGate$12394 ;
  wire \$auto$rtlil.cc:2977:AndGate$12400 ;
  wire \$auto$rtlil.cc:2977:AndGate$12402 ;
  wire \$auto$rtlil.cc:2977:AndGate$12408 ;
  wire \$auto$rtlil.cc:2977:AndGate$12410 ;
  wire \$auto$rtlil.cc:2977:AndGate$12416 ;
  wire \$auto$rtlil.cc:2977:AndGate$12418 ;
  wire \$auto$rtlil.cc:2977:AndGate$12424 ;
  wire \$auto$rtlil.cc:2977:AndGate$12426 ;
  wire \$auto$rtlil.cc:2977:AndGate$12432 ;
  wire \$auto$rtlil.cc:2977:AndGate$12434 ;
  wire \$auto$rtlil.cc:2977:AndGate$12442 ;
  wire \$auto$rtlil.cc:2977:AndGate$12458 ;
  wire \$auto$rtlil.cc:2979:OrGate$11082 ;
  wire \$auto$rtlil.cc:2979:OrGate$11090 ;
  wire \$auto$rtlil.cc:2979:OrGate$11098 ;
  wire \$auto$rtlil.cc:2979:OrGate$11106 ;
  wire \$auto$rtlil.cc:2979:OrGate$11114 ;
  wire \$auto$rtlil.cc:2979:OrGate$11122 ;
  wire \$auto$rtlil.cc:2979:OrGate$11130 ;
  wire \$auto$rtlil.cc:2979:OrGate$11138 ;
  wire \$auto$rtlil.cc:2979:OrGate$11146 ;
  wire \$auto$rtlil.cc:2979:OrGate$11154 ;
  wire \$auto$rtlil.cc:2979:OrGate$11162 ;
  wire \$auto$rtlil.cc:2979:OrGate$11170 ;
  wire \$auto$rtlil.cc:2979:OrGate$11178 ;
  wire \$auto$rtlil.cc:2979:OrGate$11186 ;
  wire \$auto$rtlil.cc:2979:OrGate$11194 ;
  wire \$auto$rtlil.cc:2979:OrGate$11202 ;
  wire \$auto$rtlil.cc:2979:OrGate$11210 ;
  wire \$auto$rtlil.cc:2979:OrGate$11222 ;
  wire \$auto$rtlil.cc:2979:OrGate$11238 ;
  wire \$auto$rtlil.cc:2979:OrGate$11246 ;
  wire \$auto$rtlil.cc:2979:OrGate$11254 ;
  wire \$auto$rtlil.cc:2979:OrGate$11262 ;
  wire \$auto$rtlil.cc:2979:OrGate$11270 ;
  wire \$auto$rtlil.cc:2979:OrGate$11278 ;
  wire \$auto$rtlil.cc:2979:OrGate$11286 ;
  wire \$auto$rtlil.cc:2979:OrGate$11294 ;
  wire \$auto$rtlil.cc:2979:OrGate$11302 ;
  wire \$auto$rtlil.cc:2979:OrGate$11310 ;
  wire \$auto$rtlil.cc:2979:OrGate$11318 ;
  wire \$auto$rtlil.cc:2979:OrGate$11326 ;
  wire \$auto$rtlil.cc:2979:OrGate$11334 ;
  wire \$auto$rtlil.cc:2979:OrGate$11342 ;
  wire \$auto$rtlil.cc:2979:OrGate$11350 ;
  wire \$auto$rtlil.cc:2979:OrGate$11358 ;
  wire \$auto$rtlil.cc:2979:OrGate$11366 ;
  wire \$auto$rtlil.cc:2979:OrGate$11378 ;
  wire \$auto$rtlil.cc:2979:OrGate$11392 ;
  wire \$auto$rtlil.cc:2979:OrGate$11400 ;
  wire \$auto$rtlil.cc:2979:OrGate$11408 ;
  wire \$auto$rtlil.cc:2979:OrGate$11416 ;
  wire \$auto$rtlil.cc:2979:OrGate$11424 ;
  wire \$auto$rtlil.cc:2979:OrGate$11432 ;
  wire \$auto$rtlil.cc:2979:OrGate$11440 ;
  wire \$auto$rtlil.cc:2979:OrGate$11448 ;
  wire \$auto$rtlil.cc:2979:OrGate$11456 ;
  wire \$auto$rtlil.cc:2979:OrGate$11464 ;
  wire \$auto$rtlil.cc:2979:OrGate$11472 ;
  wire \$auto$rtlil.cc:2979:OrGate$11480 ;
  wire \$auto$rtlil.cc:2979:OrGate$11488 ;
  wire \$auto$rtlil.cc:2979:OrGate$11496 ;
  wire \$auto$rtlil.cc:2979:OrGate$11504 ;
  wire \$auto$rtlil.cc:2979:OrGate$11512 ;
  wire \$auto$rtlil.cc:2979:OrGate$11520 ;
  wire \$auto$rtlil.cc:2979:OrGate$11532 ;
  wire \$auto$rtlil.cc:2979:OrGate$11546 ;
  wire \$auto$rtlil.cc:2979:OrGate$11554 ;
  wire \$auto$rtlil.cc:2979:OrGate$11562 ;
  wire \$auto$rtlil.cc:2979:OrGate$11570 ;
  wire \$auto$rtlil.cc:2979:OrGate$11578 ;
  wire \$auto$rtlil.cc:2979:OrGate$11586 ;
  wire \$auto$rtlil.cc:2979:OrGate$11594 ;
  wire \$auto$rtlil.cc:2979:OrGate$11602 ;
  wire \$auto$rtlil.cc:2979:OrGate$11610 ;
  wire \$auto$rtlil.cc:2979:OrGate$11618 ;
  wire \$auto$rtlil.cc:2979:OrGate$11626 ;
  wire \$auto$rtlil.cc:2979:OrGate$11634 ;
  wire \$auto$rtlil.cc:2979:OrGate$11642 ;
  wire \$auto$rtlil.cc:2979:OrGate$11650 ;
  wire \$auto$rtlil.cc:2979:OrGate$11658 ;
  wire \$auto$rtlil.cc:2979:OrGate$11666 ;
  wire \$auto$rtlil.cc:2979:OrGate$11674 ;
  wire \$auto$rtlil.cc:2979:OrGate$11686 ;
  wire \$auto$rtlil.cc:2979:OrGate$11700 ;
  wire \$auto$rtlil.cc:2979:OrGate$11708 ;
  wire \$auto$rtlil.cc:2979:OrGate$11716 ;
  wire \$auto$rtlil.cc:2979:OrGate$11724 ;
  wire \$auto$rtlil.cc:2979:OrGate$11732 ;
  wire \$auto$rtlil.cc:2979:OrGate$11740 ;
  wire \$auto$rtlil.cc:2979:OrGate$11748 ;
  wire \$auto$rtlil.cc:2979:OrGate$11756 ;
  wire \$auto$rtlil.cc:2979:OrGate$11764 ;
  wire \$auto$rtlil.cc:2979:OrGate$11772 ;
  wire \$auto$rtlil.cc:2979:OrGate$11780 ;
  wire \$auto$rtlil.cc:2979:OrGate$11788 ;
  wire \$auto$rtlil.cc:2979:OrGate$11796 ;
  wire \$auto$rtlil.cc:2979:OrGate$11804 ;
  wire \$auto$rtlil.cc:2979:OrGate$11812 ;
  wire \$auto$rtlil.cc:2979:OrGate$11820 ;
  wire \$auto$rtlil.cc:2979:OrGate$11828 ;
  wire \$auto$rtlil.cc:2979:OrGate$11840 ;
  wire \$auto$rtlil.cc:2979:OrGate$11854 ;
  wire \$auto$rtlil.cc:2979:OrGate$11862 ;
  wire \$auto$rtlil.cc:2979:OrGate$11870 ;
  wire \$auto$rtlil.cc:2979:OrGate$11878 ;
  wire \$auto$rtlil.cc:2979:OrGate$11886 ;
  wire \$auto$rtlil.cc:2979:OrGate$11894 ;
  wire \$auto$rtlil.cc:2979:OrGate$11902 ;
  wire \$auto$rtlil.cc:2979:OrGate$11910 ;
  wire \$auto$rtlil.cc:2979:OrGate$11918 ;
  wire \$auto$rtlil.cc:2979:OrGate$11926 ;
  wire \$auto$rtlil.cc:2979:OrGate$11934 ;
  wire \$auto$rtlil.cc:2979:OrGate$11942 ;
  wire \$auto$rtlil.cc:2979:OrGate$11950 ;
  wire \$auto$rtlil.cc:2979:OrGate$11958 ;
  wire \$auto$rtlil.cc:2979:OrGate$11966 ;
  wire \$auto$rtlil.cc:2979:OrGate$11974 ;
  wire \$auto$rtlil.cc:2979:OrGate$11982 ;
  wire \$auto$rtlil.cc:2979:OrGate$11994 ;
  wire \$auto$rtlil.cc:2979:OrGate$12008 ;
  wire \$auto$rtlil.cc:2979:OrGate$12016 ;
  wire \$auto$rtlil.cc:2979:OrGate$12024 ;
  wire \$auto$rtlil.cc:2979:OrGate$12032 ;
  wire \$auto$rtlil.cc:2979:OrGate$12040 ;
  wire \$auto$rtlil.cc:2979:OrGate$12048 ;
  wire \$auto$rtlil.cc:2979:OrGate$12056 ;
  wire \$auto$rtlil.cc:2979:OrGate$12064 ;
  wire \$auto$rtlil.cc:2979:OrGate$12072 ;
  wire \$auto$rtlil.cc:2979:OrGate$12080 ;
  wire \$auto$rtlil.cc:2979:OrGate$12088 ;
  wire \$auto$rtlil.cc:2979:OrGate$12096 ;
  wire \$auto$rtlil.cc:2979:OrGate$12104 ;
  wire \$auto$rtlil.cc:2979:OrGate$12112 ;
  wire \$auto$rtlil.cc:2979:OrGate$12120 ;
  wire \$auto$rtlil.cc:2979:OrGate$12128 ;
  wire \$auto$rtlil.cc:2979:OrGate$12136 ;
  wire \$auto$rtlil.cc:2979:OrGate$12148 ;
  wire \$auto$rtlil.cc:2979:OrGate$12162 ;
  wire \$auto$rtlil.cc:2979:OrGate$12170 ;
  wire \$auto$rtlil.cc:2979:OrGate$12178 ;
  wire \$auto$rtlil.cc:2979:OrGate$12186 ;
  wire \$auto$rtlil.cc:2979:OrGate$12194 ;
  wire \$auto$rtlil.cc:2979:OrGate$12202 ;
  wire \$auto$rtlil.cc:2979:OrGate$12210 ;
  wire \$auto$rtlil.cc:2979:OrGate$12218 ;
  wire \$auto$rtlil.cc:2979:OrGate$12226 ;
  wire \$auto$rtlil.cc:2979:OrGate$12234 ;
  wire \$auto$rtlil.cc:2979:OrGate$12242 ;
  wire \$auto$rtlil.cc:2979:OrGate$12250 ;
  wire \$auto$rtlil.cc:2979:OrGate$12258 ;
  wire \$auto$rtlil.cc:2979:OrGate$12266 ;
  wire \$auto$rtlil.cc:2979:OrGate$12274 ;
  wire \$auto$rtlil.cc:2979:OrGate$12282 ;
  wire \$auto$rtlil.cc:2979:OrGate$12290 ;
  wire \$auto$rtlil.cc:2979:OrGate$12302 ;
  wire \$auto$rtlil.cc:2979:OrGate$12316 ;
  wire \$auto$rtlil.cc:2979:OrGate$12324 ;
  wire \$auto$rtlil.cc:2979:OrGate$12332 ;
  wire \$auto$rtlil.cc:2979:OrGate$12340 ;
  wire \$auto$rtlil.cc:2979:OrGate$12348 ;
  wire \$auto$rtlil.cc:2979:OrGate$12356 ;
  wire \$auto$rtlil.cc:2979:OrGate$12364 ;
  wire \$auto$rtlil.cc:2979:OrGate$12372 ;
  wire \$auto$rtlil.cc:2979:OrGate$12380 ;
  wire \$auto$rtlil.cc:2979:OrGate$12388 ;
  wire \$auto$rtlil.cc:2979:OrGate$12396 ;
  wire \$auto$rtlil.cc:2979:OrGate$12404 ;
  wire \$auto$rtlil.cc:2979:OrGate$12412 ;
  wire \$auto$rtlil.cc:2979:OrGate$12420 ;
  wire \$auto$rtlil.cc:2979:OrGate$12428 ;
  wire \$auto$rtlil.cc:2979:OrGate$12436 ;
  wire \$auto$rtlil.cc:2979:OrGate$12444 ;
  wire \$auto$rtlil.cc:2979:OrGate$12456 ;
  wire \$auto$rtlil.cc:2980:NorGate$10976 ;
  wire \$auto$rtlil.cc:2980:NorGate$10988 ;
  wire \$auto$rtlil.cc:2980:NorGate$11000 ;
  wire \$auto$rtlil.cc:2980:NorGate$11012 ;
  wire \$auto$rtlil.cc:2980:NorGate$11024 ;
  wire \$auto$rtlil.cc:2980:NorGate$11036 ;
  wire \$auto$rtlil.cc:2980:NorGate$11048 ;
  wire \$auto$rtlil.cc:2980:NorGate$11060 ;
  wire \$auto$rtlil.cc:2980:NorGate$11072 ;
  wire \$auto$rtlil.cc:2981:XorGate$10982 ;
  wire \$auto$rtlil.cc:2981:XorGate$10994 ;
  wire \$auto$rtlil.cc:2981:XorGate$11006 ;
  wire \$auto$rtlil.cc:2981:XorGate$11018 ;
  wire \$auto$rtlil.cc:2981:XorGate$11030 ;
  wire \$auto$rtlil.cc:2981:XorGate$11042 ;
  wire \$auto$rtlil.cc:2981:XorGate$11054 ;
  wire \$auto$rtlil.cc:2981:XorGate$11066 ;
  wire \$auto$rtlil.cc:2981:XorGate$11076 ;
  wire \$auto$rtlil.cc:2981:XorGate$11084 ;
  wire \$auto$rtlil.cc:2981:XorGate$11092 ;
  wire \$auto$rtlil.cc:2981:XorGate$11100 ;
  wire \$auto$rtlil.cc:2981:XorGate$11108 ;
  wire \$auto$rtlil.cc:2981:XorGate$11116 ;
  wire \$auto$rtlil.cc:2981:XorGate$11124 ;
  wire \$auto$rtlil.cc:2981:XorGate$11132 ;
  wire \$auto$rtlil.cc:2981:XorGate$11140 ;
  wire \$auto$rtlil.cc:2981:XorGate$11148 ;
  wire \$auto$rtlil.cc:2981:XorGate$11156 ;
  wire \$auto$rtlil.cc:2981:XorGate$11164 ;
  wire \$auto$rtlil.cc:2981:XorGate$11172 ;
  wire \$auto$rtlil.cc:2981:XorGate$11180 ;
  wire \$auto$rtlil.cc:2981:XorGate$11188 ;
  wire \$auto$rtlil.cc:2981:XorGate$11196 ;
  wire \$auto$rtlil.cc:2981:XorGate$11204 ;
  wire \$auto$rtlil.cc:2981:XorGate$11212 ;
  wire \$auto$rtlil.cc:2981:XorGate$11226 ;
  wire \$auto$rtlil.cc:2981:XorGate$11232 ;
  wire \$auto$rtlil.cc:2981:XorGate$11240 ;
  wire \$auto$rtlil.cc:2981:XorGate$11248 ;
  wire \$auto$rtlil.cc:2981:XorGate$11256 ;
  wire \$auto$rtlil.cc:2981:XorGate$11264 ;
  wire \$auto$rtlil.cc:2981:XorGate$11272 ;
  wire \$auto$rtlil.cc:2981:XorGate$11280 ;
  wire \$auto$rtlil.cc:2981:XorGate$11288 ;
  wire \$auto$rtlil.cc:2981:XorGate$11296 ;
  wire \$auto$rtlil.cc:2981:XorGate$11304 ;
  wire \$auto$rtlil.cc:2981:XorGate$11312 ;
  wire \$auto$rtlil.cc:2981:XorGate$11320 ;
  wire \$auto$rtlil.cc:2981:XorGate$11328 ;
  wire \$auto$rtlil.cc:2981:XorGate$11336 ;
  wire \$auto$rtlil.cc:2981:XorGate$11344 ;
  wire \$auto$rtlil.cc:2981:XorGate$11352 ;
  wire \$auto$rtlil.cc:2981:XorGate$11360 ;
  wire \$auto$rtlil.cc:2981:XorGate$11368 ;
  wire \$auto$rtlil.cc:2981:XorGate$11382 ;
  wire \$auto$rtlil.cc:2981:XorGate$11386 ;
  wire \$auto$rtlil.cc:2981:XorGate$11394 ;
  wire \$auto$rtlil.cc:2981:XorGate$11402 ;
  wire \$auto$rtlil.cc:2981:XorGate$11410 ;
  wire \$auto$rtlil.cc:2981:XorGate$11418 ;
  wire \$auto$rtlil.cc:2981:XorGate$11426 ;
  wire \$auto$rtlil.cc:2981:XorGate$11434 ;
  wire \$auto$rtlil.cc:2981:XorGate$11442 ;
  wire \$auto$rtlil.cc:2981:XorGate$11450 ;
  wire \$auto$rtlil.cc:2981:XorGate$11458 ;
  wire \$auto$rtlil.cc:2981:XorGate$11466 ;
  wire \$auto$rtlil.cc:2981:XorGate$11474 ;
  wire \$auto$rtlil.cc:2981:XorGate$11482 ;
  wire \$auto$rtlil.cc:2981:XorGate$11490 ;
  wire \$auto$rtlil.cc:2981:XorGate$11498 ;
  wire \$auto$rtlil.cc:2981:XorGate$11506 ;
  wire \$auto$rtlil.cc:2981:XorGate$11514 ;
  wire \$auto$rtlil.cc:2981:XorGate$11522 ;
  wire \$auto$rtlil.cc:2981:XorGate$11536 ;
  wire \$auto$rtlil.cc:2981:XorGate$11540 ;
  wire \$auto$rtlil.cc:2981:XorGate$11548 ;
  wire \$auto$rtlil.cc:2981:XorGate$11556 ;
  wire \$auto$rtlil.cc:2981:XorGate$11564 ;
  wire \$auto$rtlil.cc:2981:XorGate$11572 ;
  wire \$auto$rtlil.cc:2981:XorGate$11580 ;
  wire \$auto$rtlil.cc:2981:XorGate$11588 ;
  wire \$auto$rtlil.cc:2981:XorGate$11596 ;
  wire \$auto$rtlil.cc:2981:XorGate$11604 ;
  wire \$auto$rtlil.cc:2981:XorGate$11612 ;
  wire \$auto$rtlil.cc:2981:XorGate$11620 ;
  wire \$auto$rtlil.cc:2981:XorGate$11628 ;
  wire \$auto$rtlil.cc:2981:XorGate$11636 ;
  wire \$auto$rtlil.cc:2981:XorGate$11644 ;
  wire \$auto$rtlil.cc:2981:XorGate$11652 ;
  wire \$auto$rtlil.cc:2981:XorGate$11660 ;
  wire \$auto$rtlil.cc:2981:XorGate$11668 ;
  wire \$auto$rtlil.cc:2981:XorGate$11676 ;
  wire \$auto$rtlil.cc:2981:XorGate$11690 ;
  wire \$auto$rtlil.cc:2981:XorGate$11694 ;
  wire \$auto$rtlil.cc:2981:XorGate$11702 ;
  wire \$auto$rtlil.cc:2981:XorGate$11710 ;
  wire \$auto$rtlil.cc:2981:XorGate$11718 ;
  wire \$auto$rtlil.cc:2981:XorGate$11726 ;
  wire \$auto$rtlil.cc:2981:XorGate$11734 ;
  wire \$auto$rtlil.cc:2981:XorGate$11742 ;
  wire \$auto$rtlil.cc:2981:XorGate$11750 ;
  wire \$auto$rtlil.cc:2981:XorGate$11758 ;
  wire \$auto$rtlil.cc:2981:XorGate$11766 ;
  wire \$auto$rtlil.cc:2981:XorGate$11774 ;
  wire \$auto$rtlil.cc:2981:XorGate$11782 ;
  wire \$auto$rtlil.cc:2981:XorGate$11790 ;
  wire \$auto$rtlil.cc:2981:XorGate$11798 ;
  wire \$auto$rtlil.cc:2981:XorGate$11806 ;
  wire \$auto$rtlil.cc:2981:XorGate$11814 ;
  wire \$auto$rtlil.cc:2981:XorGate$11822 ;
  wire \$auto$rtlil.cc:2981:XorGate$11830 ;
  wire \$auto$rtlil.cc:2981:XorGate$11844 ;
  wire \$auto$rtlil.cc:2981:XorGate$11848 ;
  wire \$auto$rtlil.cc:2981:XorGate$11856 ;
  wire \$auto$rtlil.cc:2981:XorGate$11864 ;
  wire \$auto$rtlil.cc:2981:XorGate$11872 ;
  wire \$auto$rtlil.cc:2981:XorGate$11880 ;
  wire \$auto$rtlil.cc:2981:XorGate$11888 ;
  wire \$auto$rtlil.cc:2981:XorGate$11896 ;
  wire \$auto$rtlil.cc:2981:XorGate$11904 ;
  wire \$auto$rtlil.cc:2981:XorGate$11912 ;
  wire \$auto$rtlil.cc:2981:XorGate$11920 ;
  wire \$auto$rtlil.cc:2981:XorGate$11928 ;
  wire \$auto$rtlil.cc:2981:XorGate$11936 ;
  wire \$auto$rtlil.cc:2981:XorGate$11944 ;
  wire \$auto$rtlil.cc:2981:XorGate$11952 ;
  wire \$auto$rtlil.cc:2981:XorGate$11960 ;
  wire \$auto$rtlil.cc:2981:XorGate$11968 ;
  wire \$auto$rtlil.cc:2981:XorGate$11976 ;
  wire \$auto$rtlil.cc:2981:XorGate$11984 ;
  wire \$auto$rtlil.cc:2981:XorGate$11998 ;
  wire \$auto$rtlil.cc:2981:XorGate$12002 ;
  wire \$auto$rtlil.cc:2981:XorGate$12010 ;
  wire \$auto$rtlil.cc:2981:XorGate$12018 ;
  wire \$auto$rtlil.cc:2981:XorGate$12026 ;
  wire \$auto$rtlil.cc:2981:XorGate$12034 ;
  wire \$auto$rtlil.cc:2981:XorGate$12042 ;
  wire \$auto$rtlil.cc:2981:XorGate$12050 ;
  wire \$auto$rtlil.cc:2981:XorGate$12058 ;
  wire \$auto$rtlil.cc:2981:XorGate$12066 ;
  wire \$auto$rtlil.cc:2981:XorGate$12074 ;
  wire \$auto$rtlil.cc:2981:XorGate$12082 ;
  wire \$auto$rtlil.cc:2981:XorGate$12090 ;
  wire \$auto$rtlil.cc:2981:XorGate$12098 ;
  wire \$auto$rtlil.cc:2981:XorGate$12106 ;
  wire \$auto$rtlil.cc:2981:XorGate$12114 ;
  wire \$auto$rtlil.cc:2981:XorGate$12122 ;
  wire \$auto$rtlil.cc:2981:XorGate$12130 ;
  wire \$auto$rtlil.cc:2981:XorGate$12138 ;
  wire \$auto$rtlil.cc:2981:XorGate$12152 ;
  wire \$auto$rtlil.cc:2981:XorGate$12156 ;
  wire \$auto$rtlil.cc:2981:XorGate$12164 ;
  wire \$auto$rtlil.cc:2981:XorGate$12172 ;
  wire \$auto$rtlil.cc:2981:XorGate$12180 ;
  wire \$auto$rtlil.cc:2981:XorGate$12188 ;
  wire \$auto$rtlil.cc:2981:XorGate$12196 ;
  wire \$auto$rtlil.cc:2981:XorGate$12204 ;
  wire \$auto$rtlil.cc:2981:XorGate$12212 ;
  wire \$auto$rtlil.cc:2981:XorGate$12220 ;
  wire \$auto$rtlil.cc:2981:XorGate$12228 ;
  wire \$auto$rtlil.cc:2981:XorGate$12236 ;
  wire \$auto$rtlil.cc:2981:XorGate$12244 ;
  wire \$auto$rtlil.cc:2981:XorGate$12252 ;
  wire \$auto$rtlil.cc:2981:XorGate$12260 ;
  wire \$auto$rtlil.cc:2981:XorGate$12268 ;
  wire \$auto$rtlil.cc:2981:XorGate$12276 ;
  wire \$auto$rtlil.cc:2981:XorGate$12284 ;
  wire \$auto$rtlil.cc:2981:XorGate$12292 ;
  wire \$auto$rtlil.cc:2981:XorGate$12306 ;
  wire \$auto$rtlil.cc:2981:XorGate$12310 ;
  wire \$auto$rtlil.cc:2981:XorGate$12318 ;
  wire \$auto$rtlil.cc:2981:XorGate$12326 ;
  wire \$auto$rtlil.cc:2981:XorGate$12334 ;
  wire \$auto$rtlil.cc:2981:XorGate$12342 ;
  wire \$auto$rtlil.cc:2981:XorGate$12350 ;
  wire \$auto$rtlil.cc:2981:XorGate$12358 ;
  wire \$auto$rtlil.cc:2981:XorGate$12366 ;
  wire \$auto$rtlil.cc:2981:XorGate$12374 ;
  wire \$auto$rtlil.cc:2981:XorGate$12382 ;
  wire \$auto$rtlil.cc:2981:XorGate$12390 ;
  wire \$auto$rtlil.cc:2981:XorGate$12398 ;
  wire \$auto$rtlil.cc:2981:XorGate$12406 ;
  wire \$auto$rtlil.cc:2981:XorGate$12414 ;
  wire \$auto$rtlil.cc:2981:XorGate$12422 ;
  wire \$auto$rtlil.cc:2981:XorGate$12430 ;
  wire \$auto$rtlil.cc:2981:XorGate$12438 ;
  wire \$auto$rtlil.cc:2981:XorGate$12446 ;
  wire \$auto$rtlil.cc:2981:XorGate$12460 ;
  wire \$auto$rtlil.cc:2982:XnorGate$10974 ;
  wire \$auto$rtlil.cc:2982:XnorGate$10986 ;
  wire \$auto$rtlil.cc:2982:XnorGate$10998 ;
  wire \$auto$rtlil.cc:2982:XnorGate$11010 ;
  wire \$auto$rtlil.cc:2982:XnorGate$11022 ;
  wire \$auto$rtlil.cc:2982:XnorGate$11034 ;
  wire \$auto$rtlil.cc:2982:XnorGate$11046 ;
  wire \$auto$rtlil.cc:2982:XnorGate$11058 ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:321.11-333.14" *)
  wire [33:0] \$auto$slang_frontend.cc:694:finish$\accum$2796 ;
  wire \$auto$slang_frontend.cc:694:finish$\gen_mult_fast.mult_state_d$2800 ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:306.11-311.14" *)
  wire [33:0] \$auto$slang_frontend.cc:694:finish$\mac_res_d$2789 ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:417.9-436.12" *)
  wire [33:0] \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2873 ;
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2908 ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:494.9-498.12" *)
  wire [33:0] \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2923 ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:71.16" *)
  wire [31:0] \$auto$wreduce.cc:513:run$10742 ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:70.16" *)
  wire [31:0] \$auto$wreduce.cc:513:run$10743 ;
  wire \$procmux$3417_CMP ;
  wire \$procmux$3425_CMP ;
  wire \$procmux$3433_CMP ;
  wire \$procmux$3434_CMP ;
  wire \$procmux$3435_CMP ;
  wire \$procmux$3437_CMP ;
  wire \$procmux$3579_CMP ;
  wire \$procmux$3609_CMP ;
  wire \$procmux$3611_CMP ;
  wire \$procmux$3616_CMP ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:50.23" *)
  wire [33:0] accum;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:30.28" *)
  input [33:0] alu_adder_ext_i;
  wire [33:0] alu_adder_ext_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:31.28" *)
  input [31:0] alu_adder_i;
  wire [31:0] alu_adder_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:34.28" *)
  output [32:0] alu_operand_a_o;
  wire [32:0] alu_operand_a_o;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:35.28" *)
  output [32:0] alu_operand_b_o;
  wire [32:0] alu_operand_b_o;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:20.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:79.31" *)
  reg div_by_zero_q;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:63.16" *)
  wire div_change_sign;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:75.31" *)
  wire [4:0] div_counter_d;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:75.16" *)
  reg [4:0] div_counter_q;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:23.28" *)
  input div_en_i;
  wire div_en_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:25.28" *)
  input div_sel_i;
  wire div_sel_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:61.16" *)
  wire div_sign_a;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:61.28" *)
  wire div_sign_b;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:74.16" *)
  wire div_valid;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:32.28" *)
  input equal_to_zero_i;
  wire equal_to_zero_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:257.18" *)
  wire [15:0] \gen_mult_fast.mult_op_a ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:258.18" *)
  wire [15:0] \gen_mult_fast.mult_op_b ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:263.30" *)
  wire [1:0] \gen_mult_fast.mult_state_d ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:263.16" *)
  reg [1:0] \gen_mult_fast.mult_state_q ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:38.28" *)
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:37.28" *)
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:39.28" *)
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:62.16" *)
  wire is_greater_equal;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:58.16" *)
  wire [33:0] mac_res;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:56.16" *)
  wire [33:0] mac_res_d;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:87.24" *)
  wire [2:0] md_state_d;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:87.12" *)
  reg [2:0] md_state_q;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:22.28" *)
  input mult_en_i;
  wire mult_en_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:24.28" *)
  input mult_sel_i;
  wire mult_sel_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:52.16" *)
  wire mult_valid;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:76.16" *)
  wire multdiv_en;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:41.28" *)
  output [31:0] multdiv_result_o;
  wire [31:0] multdiv_result_o;
  wire [31:0] next_quotient;
  wire [19:0] next_remainder;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:64.16" *)
  wire [31:0] one_shift;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:28.28" *)
  input [31:0] op_a_i;
  wire [31:0] op_a_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:29.28" *)
  input [31:0] op_b_i;
  wire [31:0] op_b_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:68.16" *)
  wire [31:0] op_denominator_d;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:66.16" *)
  reg [31:0] op_numerator_q;
  wire [27:0] op_quotient_d;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:67.16" *)
  reg [31:0] op_quotient_q;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:56.27" *)
  wire [33:0] op_remainder_d;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:26.28" *)
  input [1:0] operator_i;
  wire [1:0] operator_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:21.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:51.16" *)
  wire sign_a;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:51.24" *)
  wire sign_b;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:27.28" *)
  input [1:0] signed_mode_i;
  wire [1:0] signed_mode_i;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:53.16" *)
  wire signed_mult;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:42.28" *)
  output valid_o;
  wire valid_o;
  assign \$auto$bmuxmap.cc:84:execute$12620 [0] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[1] : op_numerator_q[0];
  assign \$auto$bmuxmap.cc:84:execute$12620 [1] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[3] : op_numerator_q[2];
  assign \$auto$bmuxmap.cc:84:execute$12620 [2] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[5] : op_numerator_q[4];
  assign \$auto$bmuxmap.cc:84:execute$12620 [3] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[7] : op_numerator_q[6];
  assign \$auto$bmuxmap.cc:84:execute$12620 [4] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[9] : op_numerator_q[8];
  assign \$auto$bmuxmap.cc:84:execute$12620 [5] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[11] : op_numerator_q[10];
  assign \$auto$bmuxmap.cc:84:execute$12620 [6] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[13] : op_numerator_q[12];
  assign \$auto$bmuxmap.cc:84:execute$12620 [7] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[15] : op_numerator_q[14];
  assign \$auto$bmuxmap.cc:84:execute$12620 [8] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[17] : op_numerator_q[16];
  assign \$auto$bmuxmap.cc:84:execute$12620 [9] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[19] : op_numerator_q[18];
  assign \$auto$bmuxmap.cc:84:execute$12620 [10] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[21] : op_numerator_q[20];
  assign \$auto$bmuxmap.cc:84:execute$12620 [11] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[23] : op_numerator_q[22];
  assign \$auto$bmuxmap.cc:84:execute$12620 [12] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[25] : op_numerator_q[24];
  assign \$auto$bmuxmap.cc:84:execute$12620 [13] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[27] : op_numerator_q[26];
  assign \$auto$bmuxmap.cc:84:execute$12620 [14] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[29] : op_numerator_q[28];
  assign \$auto$bmuxmap.cc:84:execute$12620 [15] = \$auto$builder.cc:338:Biop$2858 [0] ? op_numerator_q[31] : op_numerator_q[30];
  assign \$auto$bmuxmap.cc:84:execute$12637 [0] = \$auto$builder.cc:338:Biop$2858 [1] ? \$auto$bmuxmap.cc:84:execute$12620 [1] : \$auto$bmuxmap.cc:84:execute$12620 [0];
  assign \$auto$bmuxmap.cc:84:execute$12637 [1] = \$auto$builder.cc:338:Biop$2858 [1] ? \$auto$bmuxmap.cc:84:execute$12620 [3] : \$auto$bmuxmap.cc:84:execute$12620 [2];
  assign \$auto$bmuxmap.cc:84:execute$12637 [2] = \$auto$builder.cc:338:Biop$2858 [1] ? \$auto$bmuxmap.cc:84:execute$12620 [5] : \$auto$bmuxmap.cc:84:execute$12620 [4];
  assign \$auto$bmuxmap.cc:84:execute$12637 [3] = \$auto$builder.cc:338:Biop$2858 [1] ? \$auto$bmuxmap.cc:84:execute$12620 [7] : \$auto$bmuxmap.cc:84:execute$12620 [6];
  assign \$auto$bmuxmap.cc:84:execute$12637 [4] = \$auto$builder.cc:338:Biop$2858 [1] ? \$auto$bmuxmap.cc:84:execute$12620 [9] : \$auto$bmuxmap.cc:84:execute$12620 [8];
  assign \$auto$bmuxmap.cc:84:execute$12637 [5] = \$auto$builder.cc:338:Biop$2858 [1] ? \$auto$bmuxmap.cc:84:execute$12620 [11] : \$auto$bmuxmap.cc:84:execute$12620 [10];
  assign \$auto$bmuxmap.cc:84:execute$12637 [6] = \$auto$builder.cc:338:Biop$2858 [1] ? \$auto$bmuxmap.cc:84:execute$12620 [13] : \$auto$bmuxmap.cc:84:execute$12620 [12];
  assign \$auto$bmuxmap.cc:84:execute$12637 [7] = \$auto$builder.cc:338:Biop$2858 [1] ? \$auto$bmuxmap.cc:84:execute$12620 [15] : \$auto$bmuxmap.cc:84:execute$12620 [14];
  assign \$auto$bmuxmap.cc:84:execute$12646 [0] = \$auto$builder.cc:338:Biop$2858 [2] ? \$auto$bmuxmap.cc:84:execute$12637 [1] : \$auto$bmuxmap.cc:84:execute$12637 [0];
  assign \$auto$bmuxmap.cc:84:execute$12646 [1] = \$auto$builder.cc:338:Biop$2858 [2] ? \$auto$bmuxmap.cc:84:execute$12637 [3] : \$auto$bmuxmap.cc:84:execute$12637 [2];
  assign \$auto$bmuxmap.cc:84:execute$12646 [2] = \$auto$builder.cc:338:Biop$2858 [2] ? \$auto$bmuxmap.cc:84:execute$12637 [5] : \$auto$bmuxmap.cc:84:execute$12637 [4];
  assign \$auto$bmuxmap.cc:84:execute$12646 [3] = \$auto$builder.cc:338:Biop$2858 [2] ? \$auto$bmuxmap.cc:84:execute$12637 [7] : \$auto$bmuxmap.cc:84:execute$12637 [6];
  assign \$auto$bmuxmap.cc:84:execute$12651 [0] = \$auto$builder.cc:338:Biop$2858 [3] ? \$auto$bmuxmap.cc:84:execute$12646 [1] : \$auto$bmuxmap.cc:84:execute$12646 [0];
  assign \$auto$bmuxmap.cc:84:execute$12651 [1] = \$auto$builder.cc:338:Biop$2858 [3] ? \$auto$bmuxmap.cc:84:execute$12646 [3] : \$auto$bmuxmap.cc:84:execute$12646 [2];
  assign \$auto$bmuxmap.cc:84:execute$12654  = \$auto$builder.cc:338:Biop$2858 [4] ? \$auto$bmuxmap.cc:84:execute$12651 [1] : \$auto$bmuxmap.cc:84:execute$12651 [0];
  assign \$auto$rtlil.cc:2981:XorGate$10982  = \gen_mult_fast.mult_op_b [1] ^ \gen_mult_fast.mult_op_b [2];
  assign \$auto$rtlil.cc:2981:XorGate$10994  = \gen_mult_fast.mult_op_b [3] ^ \gen_mult_fast.mult_op_b [4];
  assign \$auto$rtlil.cc:2981:XorGate$11006  = \gen_mult_fast.mult_op_b [5] ^ \gen_mult_fast.mult_op_b [6];
  assign \$auto$rtlil.cc:2981:XorGate$11018  = \gen_mult_fast.mult_op_b [7] ^ \gen_mult_fast.mult_op_b [8];
  assign \$auto$rtlil.cc:2981:XorGate$11030  = \gen_mult_fast.mult_op_b [9] ^ \gen_mult_fast.mult_op_b [10];
  assign \$auto$rtlil.cc:2981:XorGate$11042  = \gen_mult_fast.mult_op_b [11] ^ \gen_mult_fast.mult_op_b [12];
  assign \$auto$rtlil.cc:2981:XorGate$11054  = \gen_mult_fast.mult_op_b [13] ^ \gen_mult_fast.mult_op_b [14];
  assign \$auto$rtlil.cc:2981:XorGate$11066  = \gen_mult_fast.mult_op_b [15] ^ sign_b;
  assign \$auto$rtlil.cc:2976:NotGate$10984  = ~\gen_mult_fast.mult_op_b [3];
  assign \$auto$rtlil.cc:2976:NotGate$10996  = ~\gen_mult_fast.mult_op_b [5];
  assign \$auto$rtlil.cc:2976:NotGate$11008  = ~\gen_mult_fast.mult_op_b [7];
  assign \$auto$rtlil.cc:2976:NotGate$11020  = ~\gen_mult_fast.mult_op_b [9];
  assign \$auto$rtlil.cc:2976:NotGate$11032  = ~\gen_mult_fast.mult_op_b [11];
  assign \$auto$rtlil.cc:2976:NotGate$11044  = ~\gen_mult_fast.mult_op_b [13];
  assign \$auto$rtlil.cc:2976:NotGate$11056  = ~\gen_mult_fast.mult_op_b [15];
  assign \$auto$rtlil.cc:2976:NotGate$11068  = ~sign_b;
  assign \$auto$rtlil.cc:2982:XnorGate$10974  = ~(\gen_mult_fast.mult_op_b [0] ^ \gen_mult_fast.mult_op_b [1]);
  assign \$auto$rtlil.cc:2982:XnorGate$10986  = ~(\gen_mult_fast.mult_op_b [2] ^ \gen_mult_fast.mult_op_b [3]);
  assign \$auto$rtlil.cc:2982:XnorGate$10998  = ~(\gen_mult_fast.mult_op_b [4] ^ \gen_mult_fast.mult_op_b [5]);
  assign \$auto$rtlil.cc:2982:XnorGate$11010  = ~(\gen_mult_fast.mult_op_b [6] ^ \gen_mult_fast.mult_op_b [7]);
  assign \$auto$rtlil.cc:2982:XnorGate$11022  = ~(\gen_mult_fast.mult_op_b [8] ^ \gen_mult_fast.mult_op_b [9]);
  assign \$auto$rtlil.cc:2982:XnorGate$11034  = ~(\gen_mult_fast.mult_op_b [10] ^ \gen_mult_fast.mult_op_b [11]);
  assign \$auto$rtlil.cc:2982:XnorGate$11046  = ~(\gen_mult_fast.mult_op_b [12] ^ \gen_mult_fast.mult_op_b [13]);
  assign \$auto$rtlil.cc:2982:XnorGate$11058  = ~(\gen_mult_fast.mult_op_b [14] ^ \gen_mult_fast.mult_op_b [15]);
  assign \$auto$rtlil.cc:2980:NorGate$10976  = ~(\$auto$rtlil.cc:2982:XnorGate$10974  | \gen_mult_fast.mult_op_b [0]);
  assign \$auto$rtlil.cc:2980:NorGate$10988  = ~(\$auto$rtlil.cc:2982:XnorGate$10986  | \$auto$rtlil.cc:2981:XorGate$10982 );
  assign \$auto$rtlil.cc:2980:NorGate$11000  = ~(\$auto$rtlil.cc:2982:XnorGate$10998  | \$auto$rtlil.cc:2981:XorGate$10994 );
  assign \$auto$rtlil.cc:2980:NorGate$11012  = ~(\$auto$rtlil.cc:2982:XnorGate$11010  | \$auto$rtlil.cc:2981:XorGate$11006 );
  assign \$auto$rtlil.cc:2980:NorGate$11024  = ~(\$auto$rtlil.cc:2982:XnorGate$11022  | \$auto$rtlil.cc:2981:XorGate$11018 );
  assign \$auto$rtlil.cc:2980:NorGate$11036  = ~(\$auto$rtlil.cc:2982:XnorGate$11034  | \$auto$rtlil.cc:2981:XorGate$11030 );
  assign \$auto$rtlil.cc:2980:NorGate$11048  = ~(\$auto$rtlil.cc:2982:XnorGate$11046  | \$auto$rtlil.cc:2981:XorGate$11042 );
  assign \$auto$rtlil.cc:2980:NorGate$11060  = ~(\$auto$rtlil.cc:2982:XnorGate$11058  | \$auto$rtlil.cc:2981:XorGate$11054 );
  assign \$auto$rtlil.cc:2980:NorGate$11072  = ~(1'h1 | \$auto$rtlil.cc:2981:XorGate$11066 );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[0]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11076 ),
    .B(\gen_mult_fast.mult_op_b [1]),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [0]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [0])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[10]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11156 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11296 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11434 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [10]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [10])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[11]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11164 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11304 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11442 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [11]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [11])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[12]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11172 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11312 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11450 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [12]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [12])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[13]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11180 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11320 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11458 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [13]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [13])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[14]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11188 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11328 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11466 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [14]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [14])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[15]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11196 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11336 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11474 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [15]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [15])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[16]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11204 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11344 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11482 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [16]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [16])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[17]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11212 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11352 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11490 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [17]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [17])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[18]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11212 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11360 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11498 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [18]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [18])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[19]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11226 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11368 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11506 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [19]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [19])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[1]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11084 ),
    .B(1'h0),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [1]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [1])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[20]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11226 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11368 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11514 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [20]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [20])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[21]  (
    .A(\$auto$rtlil.cc:2976:NotGate$11228 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11382 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11522 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [21]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [21])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[22]  (
    .A(1'h0),
    .B(1'h1),
    .C(\$auto$rtlil.cc:2981:XorGate$11522 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [22]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [22])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[23]  (
    .A(1'h0),
    .B(1'h0),
    .C(\$auto$rtlil.cc:2981:XorGate$11536 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [23]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [23])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[2]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11092 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11232 ),
    .C(\gen_mult_fast.mult_op_b [3]),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [2]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [2])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[3]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11100 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11240 ),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [3]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [3])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[4]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11108 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11248 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11386 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [4]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [4])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[5]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11116 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11256 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11394 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [5]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [5])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[6]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11124 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11264 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11402 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [6]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [6])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[7]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11132 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11272 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11410 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [7]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [7])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[8]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11140 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11280 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11418 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [8]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [8])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12463[9]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11148 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11288 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11426 ),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [9]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [9])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[10]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11572 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11710 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11848 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [10]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [10])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[11]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11580 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11718 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11856 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [11]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [11])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[12]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11588 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11726 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11864 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [12]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [12])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[13]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11596 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11734 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11872 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [13]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [13])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[14]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11604 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11742 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11880 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [14]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [14])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[15]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11612 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11750 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11888 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [15]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [15])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[16]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11620 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11758 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11896 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [16]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [16])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[17]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11628 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11766 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11904 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [17]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [17])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[18]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11636 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11774 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11912 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [18]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [18])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[19]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11644 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11782 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11920 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [19]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [19])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[20]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11652 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11790 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11928 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [20]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [20])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[21]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11660 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11798 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11936 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [21]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [21])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[22]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11668 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11806 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11944 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [22]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [22])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[23]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11676 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11814 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11952 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [23]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [23])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[24]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11676 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11822 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11960 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [24]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [24])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[25]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11690 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11830 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11968 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [25]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [25])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[26]  (
    .A(1'h1),
    .B(\$auto$rtlil.cc:2981:XorGate$11830 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11976 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [26]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [26])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[27]  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:2981:XorGate$11844 ),
    .C(\$auto$rtlil.cc:2981:XorGate$11984 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [27]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [27])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[28]  (
    .A(1'h0),
    .B(1'h1),
    .C(\$auto$rtlil.cc:2981:XorGate$11984 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [28]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [28])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[29]  (
    .A(1'h0),
    .B(1'h0),
    .C(\$auto$rtlil.cc:2981:XorGate$11998 ),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [29]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [29])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[30]  (
    .A(1'h0),
    .B(1'h0),
    .C(1'h1),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [24]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [24])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[4]  (
    .A(\gen_mult_fast.mult_op_b [5]),
    .B(1'h0),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [4]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [4])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[6]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11540 ),
    .B(\gen_mult_fast.mult_op_b [7]),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [6]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [6])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[7]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11548 ),
    .B(1'h0),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [7]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [7])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[8]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11556 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11694 ),
    .C(\gen_mult_fast.mult_op_b [9]),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [8]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [8])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12466[9]  (
    .A(\$auto$rtlil.cc:2981:XorGate$11564 ),
    .B(\$auto$rtlil.cc:2981:XorGate$11702 ),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12464 [9]),
    .Y(\$auto$booth.cc:330:WallaceSum$12465 [9])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[10]  (
    .A(\gen_mult_fast.mult_op_b [11]),
    .B(1'h0),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [10]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [10])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[11]  (
    .A(1'h0),
    .B(1'h0),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .Y(\$auto$booth.cc:330:WallaceSum$12462 [35])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[12]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12002 ),
    .B(\gen_mult_fast.mult_op_b [13]),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [12]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [12])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[13]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12010 ),
    .B(1'h0),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [13]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [13])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[14]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12018 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12156 ),
    .C(\gen_mult_fast.mult_op_b [15]),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [14]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [14])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[15]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12026 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12164 ),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [15]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [15])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[16]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12034 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12172 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12310 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [16]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [16])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[17]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12042 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12180 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12318 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [17]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [17])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[18]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12050 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12188 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12326 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [18]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [18])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[19]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12058 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12196 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12334 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [19]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [19])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[20]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12066 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12204 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12342 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [20]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [20])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[21]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12074 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12212 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12350 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [21]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [21])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[22]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12082 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12220 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12358 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [22]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [22])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[23]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12090 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12228 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12366 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [23]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [23])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[24]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12098 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12236 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12374 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [24]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [24])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[25]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12106 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12244 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12382 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [25]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [25])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[26]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12114 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12252 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12390 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [26]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [26])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[27]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12122 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12260 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12398 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [27]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [27])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[28]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12130 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12268 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12406 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [28]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [28])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[29]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12138 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12276 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12414 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [29]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [29])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[30]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12138 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12284 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12422 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [30]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [30])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[31]  (
    .A(\$auto$rtlil.cc:2981:XorGate$12152 ),
    .B(\$auto$rtlil.cc:2981:XorGate$12292 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12430 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [31]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [31])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[32]  (
    .A(1'h1),
    .B(\$auto$rtlil.cc:2981:XorGate$12292 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12438 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [32]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [32])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[33]  (
    .A(1'h0),
    .B(\$auto$rtlil.cc:2981:XorGate$12306 ),
    .C(\$auto$rtlil.cc:2981:XorGate$12446 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [33]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [33])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[34]  (
    .A(1'h0),
    .B(1'h1),
    .C(\$auto$rtlil.cc:2981:XorGate$12446 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [34]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [34])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12469[35]  (
    .A(1'h0),
    .B(1'h0),
    .C(\$auto$rtlil.cc:2981:XorGate$12460 ),
    .X(\$auto$booth.cc:329:WallaceSum$12467 [35]),
    .Y(\$auto$booth.cc:330:WallaceSum$12468 [35])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[0]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [0]),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [0]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [0])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[10]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [10]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [9]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [10]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [10])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[11]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [11]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [10]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [11]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [11])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[12]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [12]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [11]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [12]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [12])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[13]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [13]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [12]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [13]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [13])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[14]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [14]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [13]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [14]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [14])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[15]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [15]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [14]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [15]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [15])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[16]  (
    .A(sign_b),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [16]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [15]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [16]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [16])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[17]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [17]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [16]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [17]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [17])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[18]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [18]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [17]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [18]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [18])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[19]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [19]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [18]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [19]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [19])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[1]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [1]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [0]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [1]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [1])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[20]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [20]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [19]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [20]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [20])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[21]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [21]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [20]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [21]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [21])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[22]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [22]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [21]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [22]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [22])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[23]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [23]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [22]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [23]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [23])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[24]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [24]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [23]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [24]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [24])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[25]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [24]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [25]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [25])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[2]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [2]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [1]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [2]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [2])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[35]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [35])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[3]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [3]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [2]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [3]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [3])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[4]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [4]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [3]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [4]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [4])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[5]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [5]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [4]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [5]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [5])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[6]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [6]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [5]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [6]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [6])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[7]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [7]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [6]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [7]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [7])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[8]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [8]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [7]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [8]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [8])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12472[9]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12462 [9]),
    .C(\$auto$booth.cc:329:WallaceSum$12461 [8]),
    .X(\$auto$booth.cc:329:WallaceSum$12470 [9]),
    .Y(\$auto$booth.cc:330:WallaceSum$12471 [9])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[0]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .B(1'h0),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [0]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [0])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[10]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [10]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [9]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [10]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [10]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [10])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[11]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [11]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [10]),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [11]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [11])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[12]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [12]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [11]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [12]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [12]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [12])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[13]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [13]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [12]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [13]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [13]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [13])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[14]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [14]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [13]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [14]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [14]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [14])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[15]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [15]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [14]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [15]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [15]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [15])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[16]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [16]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [15]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [16]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [16]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [16])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[17]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [17]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [16]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [17]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [17]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [17])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[18]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [18]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [17]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [18]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [18]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [18])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[19]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [19]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [18]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [19]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [19]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [19])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[20]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [20]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [19]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [20]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [20]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [20])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[21]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [21]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [20]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [21]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [21]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [21])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[22]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [22]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [21]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [22]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [22]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [22])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[23]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [23]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [22]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [23]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [23]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [23])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[24]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [24]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [23]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [24]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [24]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [24])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[25]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [25]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [24]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [25]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [25]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [25])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[26]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [26]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [25]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [26]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [26]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [26])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[27]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [27]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [26]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [27]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [27]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [27])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[28]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [28]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [27]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [28]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [28]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [28])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[29]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [29]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [28]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [29]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [29]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [29])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[30]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [24]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [29]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [30]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [30]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [30])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[31]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .B(\$auto$booth.cc:329:WallaceSum$12461 [24]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [31]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [31]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [31])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[32]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .B(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [32]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [32]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [32])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[33]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .B(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [33]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [33]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [33])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[34]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .B(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [34]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [34]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [34])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[35]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .B(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .C(\$auto$booth.cc:330:WallaceSum$12468 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [35]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [35])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[3]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .B(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [3]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [3])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[4]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [4]),
    .B(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [4]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [4])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[5]  (
    .A(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [4]),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [5]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [5])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[6]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [6]),
    .B(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [6]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [6])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[7]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [7]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [6]),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [7]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [7])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[8]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [8]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [7]),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [8]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [8])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12475[9]  (
    .A(\$auto$booth.cc:330:WallaceSum$12465 [9]),
    .B(\$auto$booth.cc:329:WallaceSum$12464 [8]),
    .C(\$auto$booth.cc:330:WallaceSum$12462 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12473 [9]),
    .Y(\$auto$booth.cc:330:WallaceSum$12474 [9])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[0]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [0]),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [0]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [0])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[10]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [10]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [9]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [10]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [10])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[11]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [10]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [11]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [10]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [11]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [11])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[12]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [12]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [11]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [12]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [12])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[13]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [12]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [13]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [12]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [13]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [13])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[14]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [13]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [14]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [13]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [14]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [14])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[15]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [14]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [15]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [14]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [15]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [15])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[16]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [15]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [16]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [15]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [16]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [16])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[17]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [16]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [17]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [16]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [17]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [17])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[18]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [17]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [18]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [17]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [18]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [18])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[19]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [18]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [19]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [18]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [19]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [19])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[1]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [1]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [0]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [1]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [1])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[20]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [19]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [20]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [19]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [20]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [20])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[21]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [20]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [21]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [20]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [21]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [21])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[22]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [21]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [22]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [21]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [22]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [22])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[23]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [22]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [23]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [22]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [23]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [23])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[24]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [23]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [24]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [23]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [24]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [24])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[25]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [24]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [25]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [24]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [25]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [25])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[26]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [25]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [25]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [26]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [26])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[27]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [26]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [27]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [27])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[28]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [27]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [28]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [28])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[29]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [28]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [29]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [29])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[2]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [2]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [1]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [2]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [2])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[30]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [29]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [30]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [30])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[31]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [30]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [31]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [31])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[32]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [31]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [32]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [32])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[33]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [32]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [33]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [33])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[34]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [33]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [34]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [34])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[35]  (
    .A(\$auto$booth.cc:329:WallaceSum$12467 [34]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [35]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [35])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[3]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [3]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [2]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [3]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [3])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[4]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [4]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [3]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [4]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [4])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[5]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [5]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [4]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [5]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [5])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[6]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [6]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [5]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [6]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [6])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[7]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [7]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [6]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [7]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [7])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[8]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [8]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [7]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [8]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [8])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12478[9]  (
    .A(\$auto$booth.cc:329:WallaceSum$12461 [35]),
    .B(\$auto$booth.cc:330:WallaceSum$12471 [9]),
    .C(\$auto$booth.cc:329:WallaceSum$12470 [8]),
    .X(\$auto$booth.cc:329:WallaceSum$12476 [9]),
    .Y(\$auto$booth.cc:330:WallaceSum$12477 [9])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[0]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [0]),
    .B(1'h0),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [0]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [0]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [0])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[10]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [10]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [9]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [10]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [10]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [10])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[11]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [11]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [10]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [11]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [11]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [11])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[12]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [12]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [11]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [12]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [12]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [12])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[13]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [13]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [12]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [13]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [13]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [13])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[14]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [14]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [13]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [14]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [14]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [14])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[15]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [15]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [14]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [15]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [15]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [15])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[16]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [16]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [15]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [16]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [16]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [16])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[17]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [17]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [16]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [17]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [17]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [17])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[18]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [18]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [17]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [18]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [18]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [18])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[19]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [19]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [18]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [19]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [19]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [19])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[1]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [3]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [0]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [1]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [1]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [1])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[20]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [20]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [19]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [20]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [20]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [20])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[21]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [21]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [20]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [21]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [21]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [21])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[22]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [22]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [21]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [22]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [22]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [22])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[23]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [23]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [22]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [23]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [23]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [23])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[24]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [24]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [23]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [24]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [24]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [24])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[25]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [25]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [24]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [25]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [25]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [25])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[26]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [26]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [25]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [26]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [26]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [26])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[27]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [27]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [26]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [27]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [27]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [27])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[28]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [28]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [27]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [28]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [28]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [28])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[29]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [29]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [28]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [29]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [29]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [29])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[2]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [3]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [3]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [2]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [2]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [2])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[30]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [30]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [29]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [30]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [30]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [30])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[31]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [31]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [30]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [31]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [31]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [31])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[32]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [32]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [31]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [32]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [32]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [32])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[33]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [33]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [32]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [33]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [33]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [33])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[34]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [34]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [33]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [34]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [34]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [34])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[35]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [35]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [34]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [35]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [35]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [35])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[3]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [3]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [3]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [3]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [3]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [3])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[4]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [4]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [3]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [4]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [4]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [4])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[5]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [5]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [4]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [5]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [5]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [5])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[6]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [6]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [5]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [6]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [6]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [6])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[7]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [7]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [6]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [7]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [7]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [7])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[8]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [8]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [7]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [8]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [8]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [8])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12481[9]  (
    .A(\$auto$booth.cc:330:WallaceSum$12474 [9]),
    .B(\$auto$booth.cc:329:WallaceSum$12473 [8]),
    .C(\$auto$booth.cc:330:WallaceSum$12477 [9]),
    .X(\$auto$booth.cc:329:WallaceSum$12479 [9]),
    .Y(\$auto$booth.cc:330:WallaceSum$12480 [9])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[0]  (
    .A(1'h0),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [0]),
    .C(1'h0),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [0]),
    .Y(\$auto$booth.cc:292:run$10964 [0])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[10]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [9]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [10]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [9]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [10]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [10])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[11]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [10]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [11]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [10]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [11]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [11])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[12]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [11]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [12]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [11]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [12]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [12])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[13]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [12]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [13]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [12]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [13]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [13])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[14]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [13]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [14]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [13]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [14]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [14])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[15]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [14]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [15]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [14]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [15]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [15])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[16]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [15]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [16]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [15]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [16]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [16])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[17]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [16]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [17]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [16]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [17]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [17])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[18]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [17]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [18]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [17]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [18]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [18])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[19]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [18]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [19]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [18]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [19]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [19])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[1]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [0]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [1]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [0]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [1]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [1])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[20]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [19]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [20]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [19]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [20]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [20])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[21]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [20]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [21]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [20]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [21]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [21])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[22]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [21]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [22]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [21]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [22]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [22])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[23]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [22]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [23]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [22]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [23]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [23])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[24]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [23]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [24]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [23]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [24]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [24])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[25]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [24]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [25]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [24]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [25]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [25])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[26]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [25]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [26]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [25]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [26]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [26])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[27]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [26]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [27]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [26]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [27]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [27])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[28]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [27]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [28]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [27]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [28]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [28])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[29]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [28]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [29]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [28]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [29]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [29])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[2]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [1]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [2]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [1]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [2]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [2])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[30]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [29]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [30]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [29]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [30]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [30])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[31]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [30]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [31]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [30]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [31]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [31])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[32]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [31]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [32]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [31]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [32]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [32])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[33]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [32]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [33]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [32]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [33]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [33])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[34]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [33]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [34]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [33]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [34]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [34])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[35]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [34]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [35]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [34]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [35]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [35])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[3]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [2]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [3]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [2]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [3]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [3])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[4]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [3]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [4]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [3]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [4]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [4])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[5]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [4]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [5]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [4]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [5]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [5])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[6]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [5]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [6]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [5]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [6]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [6])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[7]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [6]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [7]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [6]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [7]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [7])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[8]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [7]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [8]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [7]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [8]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [8])
  );
  \$fa  #(
    .WIDTH(32'd1)
  ) \$auto$booth.cc:331:WallaceSum$12484[9]  (
    .A(\$auto$booth.cc:329:WallaceSum$12476 [8]),
    .B(\$auto$booth.cc:330:WallaceSum$12480 [9]),
    .C(\$auto$booth.cc:329:WallaceSum$12479 [8]),
    .X(\$auto$booth.cc:329:WallaceSum$12482 [9]),
    .Y(\$auto$booth.cc:330:WallaceSum$12483 [9])
  );
  assign \$auto$booth.cc:292:run$10964 [35:1] = \$auto$booth.cc:330:WallaceSum$12483 [35:1] + \$auto$booth.cc:329:WallaceSum$12482 [34:0];
  assign \$auto$rtlil.cc:2979:OrGate$11222  = \$auto$rtlil.cc:2980:NorGate$10976  | \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11224  = sign_a & \$auto$rtlil.cc:2979:OrGate$11222 ;
  assign \$auto$rtlil.cc:2981:XorGate$11226  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2977:AndGate$11224 ;
  assign \$auto$rtlil.cc:2976:NotGate$11228  = ~\$auto$rtlil.cc:2981:XorGate$11226 ;
  assign \$auto$rtlil.cc:2979:OrGate$11378  = \$auto$rtlil.cc:2980:NorGate$10988  | \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11380  = sign_a & \$auto$rtlil.cc:2979:OrGate$11378 ;
  assign \$auto$rtlil.cc:2981:XorGate$11382  = \$auto$rtlil.cc:2976:NotGate$10984  ^ \$auto$rtlil.cc:2977:AndGate$11380 ;
  assign \$auto$rtlil.cc:2979:OrGate$11532  = \$auto$rtlil.cc:2980:NorGate$11000  | \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11534  = sign_a & \$auto$rtlil.cc:2979:OrGate$11532 ;
  assign \$auto$rtlil.cc:2981:XorGate$11536  = \$auto$rtlil.cc:2976:NotGate$10996  ^ \$auto$rtlil.cc:2977:AndGate$11534 ;
  assign \$auto$rtlil.cc:2979:OrGate$11686  = \$auto$rtlil.cc:2980:NorGate$11012  | \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11688  = sign_a & \$auto$rtlil.cc:2979:OrGate$11686 ;
  assign \$auto$rtlil.cc:2981:XorGate$11690  = \$auto$rtlil.cc:2976:NotGate$11008  ^ \$auto$rtlil.cc:2977:AndGate$11688 ;
  assign \$auto$rtlil.cc:2979:OrGate$11840  = \$auto$rtlil.cc:2980:NorGate$11024  | \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11842  = sign_a & \$auto$rtlil.cc:2979:OrGate$11840 ;
  assign \$auto$rtlil.cc:2981:XorGate$11844  = \$auto$rtlil.cc:2976:NotGate$11020  ^ \$auto$rtlil.cc:2977:AndGate$11842 ;
  assign \$auto$rtlil.cc:2979:OrGate$11994  = \$auto$rtlil.cc:2980:NorGate$11036  | \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11996  = sign_a & \$auto$rtlil.cc:2979:OrGate$11994 ;
  assign \$auto$rtlil.cc:2981:XorGate$11998  = \$auto$rtlil.cc:2976:NotGate$11032  ^ \$auto$rtlil.cc:2977:AndGate$11996 ;
  assign \$auto$rtlil.cc:2979:OrGate$12148  = \$auto$rtlil.cc:2980:NorGate$11048  | \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12150  = sign_a & \$auto$rtlil.cc:2979:OrGate$12148 ;
  assign \$auto$rtlil.cc:2981:XorGate$12152  = \$auto$rtlil.cc:2976:NotGate$11044  ^ \$auto$rtlil.cc:2977:AndGate$12150 ;
  assign \$auto$rtlil.cc:2979:OrGate$12302  = \$auto$rtlil.cc:2980:NorGate$11060  | \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12304  = sign_a & \$auto$rtlil.cc:2979:OrGate$12302 ;
  assign \$auto$rtlil.cc:2981:XorGate$12306  = \$auto$rtlil.cc:2976:NotGate$11056  ^ \$auto$rtlil.cc:2977:AndGate$12304 ;
  assign \$auto$rtlil.cc:2979:OrGate$12456  = \$auto$rtlil.cc:2980:NorGate$11072  | \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12458  = sign_a & \$auto$rtlil.cc:2979:OrGate$12456 ;
  assign \$auto$rtlil.cc:2981:XorGate$12460  = \$auto$rtlil.cc:2976:NotGate$11068  ^ \$auto$rtlil.cc:2977:AndGate$12458 ;
  assign \$auto$rtlil.cc:2977:AndGate$11074  = \gen_mult_fast.mult_op_a [0] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11230  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11384  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11538  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11692  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11846  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$12000  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12154  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12308  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2981:XorGate$11076  = \$auto$rtlil.cc:2977:AndGate$11074  ^ \gen_mult_fast.mult_op_b [1];
  assign \$auto$rtlil.cc:2981:XorGate$11232  = \$auto$rtlil.cc:2977:AndGate$11230  ^ \gen_mult_fast.mult_op_b [3];
  assign \$auto$rtlil.cc:2981:XorGate$11386  = \$auto$rtlil.cc:2977:AndGate$11384  ^ \gen_mult_fast.mult_op_b [5];
  assign \$auto$rtlil.cc:2981:XorGate$11540  = \$auto$rtlil.cc:2977:AndGate$11538  ^ \gen_mult_fast.mult_op_b [7];
  assign \$auto$rtlil.cc:2981:XorGate$11694  = \$auto$rtlil.cc:2977:AndGate$11692  ^ \gen_mult_fast.mult_op_b [9];
  assign \$auto$rtlil.cc:2981:XorGate$11848  = \$auto$rtlil.cc:2977:AndGate$11846  ^ \gen_mult_fast.mult_op_b [11];
  assign \$auto$rtlil.cc:2981:XorGate$12002  = \$auto$rtlil.cc:2977:AndGate$12000  ^ \gen_mult_fast.mult_op_b [13];
  assign \$auto$rtlil.cc:2981:XorGate$12156  = \$auto$rtlil.cc:2977:AndGate$12154  ^ \gen_mult_fast.mult_op_b [15];
  assign \$auto$rtlil.cc:2981:XorGate$12310  = \$auto$rtlil.cc:2977:AndGate$12308  ^ sign_b;
  assign \$auto$rtlil.cc:2977:AndGate$11078  = \gen_mult_fast.mult_op_a [1] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11150  = \gen_mult_fast.mult_op_a [10] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11158  = \gen_mult_fast.mult_op_a [11] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11166  = \gen_mult_fast.mult_op_a [12] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11174  = \gen_mult_fast.mult_op_a [13] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11182  = \gen_mult_fast.mult_op_a [14] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11190  = \gen_mult_fast.mult_op_a [15] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11086  = \gen_mult_fast.mult_op_a [2] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11094  = \gen_mult_fast.mult_op_a [3] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11102  = \gen_mult_fast.mult_op_a [4] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11110  = \gen_mult_fast.mult_op_a [5] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11118  = \gen_mult_fast.mult_op_a [6] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11126  = \gen_mult_fast.mult_op_a [7] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11134  = \gen_mult_fast.mult_op_a [8] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11142  = \gen_mult_fast.mult_op_a [9] & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11198  = sign_a & \gen_mult_fast.mult_op_b [0];
  assign \$auto$rtlil.cc:2977:AndGate$11234  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11306  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11314  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11322  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11330  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11338  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11346  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11242  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11250  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11258  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11266  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11274  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11282  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11290  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11298  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11354  = sign_a & \$auto$rtlil.cc:2981:XorGate$10982 ;
  assign \$auto$rtlil.cc:2977:AndGate$11388  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11460  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11468  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11476  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11484  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11492  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11500  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11396  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11404  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11412  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11420  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11428  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11436  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11444  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11452  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11508  = sign_a & \$auto$rtlil.cc:2981:XorGate$10994 ;
  assign \$auto$rtlil.cc:2977:AndGate$11542  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11614  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11622  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11630  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11638  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11646  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11654  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11550  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11558  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11566  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11574  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11582  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11590  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11598  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11606  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11662  = sign_a & \$auto$rtlil.cc:2981:XorGate$11006 ;
  assign \$auto$rtlil.cc:2977:AndGate$11696  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11768  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11776  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11784  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11792  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11800  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11808  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11704  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11712  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11720  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11728  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11736  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11744  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11752  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11760  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11816  = sign_a & \$auto$rtlil.cc:2981:XorGate$11018 ;
  assign \$auto$rtlil.cc:2977:AndGate$11850  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11922  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11930  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11938  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11946  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11954  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11962  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11858  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11866  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11874  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11882  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11890  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11898  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11906  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11914  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$11970  = sign_a & \$auto$rtlil.cc:2981:XorGate$11030 ;
  assign \$auto$rtlil.cc:2977:AndGate$12004  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12076  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12084  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12092  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12100  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12108  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12116  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12012  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12020  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12028  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12036  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12044  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12052  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12060  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12068  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12124  = sign_a & \$auto$rtlil.cc:2981:XorGate$11042 ;
  assign \$auto$rtlil.cc:2977:AndGate$12158  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12230  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12238  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12246  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12254  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12262  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12270  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12166  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12174  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12182  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12190  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12198  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12206  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12214  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12222  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12278  = sign_a & \$auto$rtlil.cc:2981:XorGate$11054 ;
  assign \$auto$rtlil.cc:2977:AndGate$12312  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12384  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12392  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12400  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12408  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12416  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12424  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12320  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12328  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12336  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12344  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12352  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12360  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12368  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12376  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$12432  = sign_a & \$auto$rtlil.cc:2981:XorGate$11066 ;
  assign \$auto$rtlil.cc:2977:AndGate$11080  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11152  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11160  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11168  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11176  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11184  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11192  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11200  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11088  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11096  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11104  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11112  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11120  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11128  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11136  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11144  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11208  = sign_a & \$auto$rtlil.cc:2980:NorGate$10976 ;
  assign \$auto$rtlil.cc:2977:AndGate$11236  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11308  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11316  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11324  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11332  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11340  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11348  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11356  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11244  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11252  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11260  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11268  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11276  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11284  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11292  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11300  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11364  = sign_a & \$auto$rtlil.cc:2980:NorGate$10988 ;
  assign \$auto$rtlil.cc:2977:AndGate$11390  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11462  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11470  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11478  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11486  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11494  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11502  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11510  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11398  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11406  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11414  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11422  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11430  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11438  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11446  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11454  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11518  = sign_a & \$auto$rtlil.cc:2980:NorGate$11000 ;
  assign \$auto$rtlil.cc:2977:AndGate$11544  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11616  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11624  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11632  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11640  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11648  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11656  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11664  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11552  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11560  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11568  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11576  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11584  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11592  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11600  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11608  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11672  = sign_a & \$auto$rtlil.cc:2980:NorGate$11012 ;
  assign \$auto$rtlil.cc:2977:AndGate$11698  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11770  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11778  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11786  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11794  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11802  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11810  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11818  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11706  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11714  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11722  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11730  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11738  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11746  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11754  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11762  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11826  = sign_a & \$auto$rtlil.cc:2980:NorGate$11024 ;
  assign \$auto$rtlil.cc:2977:AndGate$11852  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11924  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11932  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11940  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11948  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11956  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11964  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11972  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11860  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11868  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11876  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11884  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11892  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11900  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11908  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11916  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$11980  = sign_a & \$auto$rtlil.cc:2980:NorGate$11036 ;
  assign \$auto$rtlil.cc:2977:AndGate$12006  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12078  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12086  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12094  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12102  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12110  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12118  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12126  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12014  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12022  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12030  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12038  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12046  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12054  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12062  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12070  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12134  = sign_a & \$auto$rtlil.cc:2980:NorGate$11048 ;
  assign \$auto$rtlil.cc:2977:AndGate$12160  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12232  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12240  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12248  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12256  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12264  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12272  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12280  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12168  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12176  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12184  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12192  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12200  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12208  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12216  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12224  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12288  = sign_a & \$auto$rtlil.cc:2980:NorGate$11060 ;
  assign \$auto$rtlil.cc:2977:AndGate$12314  = \gen_mult_fast.mult_op_a [0] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12386  = \gen_mult_fast.mult_op_a [9] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12394  = \gen_mult_fast.mult_op_a [10] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12402  = \gen_mult_fast.mult_op_a [11] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12410  = \gen_mult_fast.mult_op_a [12] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12418  = \gen_mult_fast.mult_op_a [13] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12426  = \gen_mult_fast.mult_op_a [14] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12434  = \gen_mult_fast.mult_op_a [15] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12322  = \gen_mult_fast.mult_op_a [1] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12330  = \gen_mult_fast.mult_op_a [2] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12338  = \gen_mult_fast.mult_op_a [3] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12346  = \gen_mult_fast.mult_op_a [4] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12354  = \gen_mult_fast.mult_op_a [5] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12362  = \gen_mult_fast.mult_op_a [6] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12370  = \gen_mult_fast.mult_op_a [7] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12378  = \gen_mult_fast.mult_op_a [8] & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2977:AndGate$12442  = sign_a & \$auto$rtlil.cc:2980:NorGate$11072 ;
  assign \$auto$rtlil.cc:2979:OrGate$11082  = \$auto$rtlil.cc:2977:AndGate$11078  | \$auto$rtlil.cc:2977:AndGate$11080 ;
  assign \$auto$rtlil.cc:2979:OrGate$11154  = \$auto$rtlil.cc:2977:AndGate$11150  | \$auto$rtlil.cc:2977:AndGate$11152 ;
  assign \$auto$rtlil.cc:2979:OrGate$11162  = \$auto$rtlil.cc:2977:AndGate$11158  | \$auto$rtlil.cc:2977:AndGate$11160 ;
  assign \$auto$rtlil.cc:2979:OrGate$11170  = \$auto$rtlil.cc:2977:AndGate$11166  | \$auto$rtlil.cc:2977:AndGate$11168 ;
  assign \$auto$rtlil.cc:2979:OrGate$11178  = \$auto$rtlil.cc:2977:AndGate$11174  | \$auto$rtlil.cc:2977:AndGate$11176 ;
  assign \$auto$rtlil.cc:2979:OrGate$11186  = \$auto$rtlil.cc:2977:AndGate$11182  | \$auto$rtlil.cc:2977:AndGate$11184 ;
  assign \$auto$rtlil.cc:2979:OrGate$11194  = \$auto$rtlil.cc:2977:AndGate$11190  | \$auto$rtlil.cc:2977:AndGate$11192 ;
  assign \$auto$rtlil.cc:2979:OrGate$11202  = \$auto$rtlil.cc:2977:AndGate$11198  | \$auto$rtlil.cc:2977:AndGate$11200 ;
  assign \$auto$rtlil.cc:2979:OrGate$11090  = \$auto$rtlil.cc:2977:AndGate$11086  | \$auto$rtlil.cc:2977:AndGate$11088 ;
  assign \$auto$rtlil.cc:2979:OrGate$11098  = \$auto$rtlil.cc:2977:AndGate$11094  | \$auto$rtlil.cc:2977:AndGate$11096 ;
  assign \$auto$rtlil.cc:2979:OrGate$11106  = \$auto$rtlil.cc:2977:AndGate$11102  | \$auto$rtlil.cc:2977:AndGate$11104 ;
  assign \$auto$rtlil.cc:2979:OrGate$11114  = \$auto$rtlil.cc:2977:AndGate$11110  | \$auto$rtlil.cc:2977:AndGate$11112 ;
  assign \$auto$rtlil.cc:2979:OrGate$11122  = \$auto$rtlil.cc:2977:AndGate$11118  | \$auto$rtlil.cc:2977:AndGate$11120 ;
  assign \$auto$rtlil.cc:2979:OrGate$11130  = \$auto$rtlil.cc:2977:AndGate$11126  | \$auto$rtlil.cc:2977:AndGate$11128 ;
  assign \$auto$rtlil.cc:2979:OrGate$11138  = \$auto$rtlil.cc:2977:AndGate$11134  | \$auto$rtlil.cc:2977:AndGate$11136 ;
  assign \$auto$rtlil.cc:2979:OrGate$11146  = \$auto$rtlil.cc:2977:AndGate$11142  | \$auto$rtlil.cc:2977:AndGate$11144 ;
  assign \$auto$rtlil.cc:2979:OrGate$11210  = \$auto$rtlil.cc:2977:AndGate$11198  | \$auto$rtlil.cc:2977:AndGate$11208 ;
  assign \$auto$rtlil.cc:2979:OrGate$11238  = \$auto$rtlil.cc:2977:AndGate$11234  | \$auto$rtlil.cc:2977:AndGate$11236 ;
  assign \$auto$rtlil.cc:2979:OrGate$11310  = \$auto$rtlil.cc:2977:AndGate$11306  | \$auto$rtlil.cc:2977:AndGate$11308 ;
  assign \$auto$rtlil.cc:2979:OrGate$11318  = \$auto$rtlil.cc:2977:AndGate$11314  | \$auto$rtlil.cc:2977:AndGate$11316 ;
  assign \$auto$rtlil.cc:2979:OrGate$11326  = \$auto$rtlil.cc:2977:AndGate$11322  | \$auto$rtlil.cc:2977:AndGate$11324 ;
  assign \$auto$rtlil.cc:2979:OrGate$11334  = \$auto$rtlil.cc:2977:AndGate$11330  | \$auto$rtlil.cc:2977:AndGate$11332 ;
  assign \$auto$rtlil.cc:2979:OrGate$11342  = \$auto$rtlil.cc:2977:AndGate$11338  | \$auto$rtlil.cc:2977:AndGate$11340 ;
  assign \$auto$rtlil.cc:2979:OrGate$11350  = \$auto$rtlil.cc:2977:AndGate$11346  | \$auto$rtlil.cc:2977:AndGate$11348 ;
  assign \$auto$rtlil.cc:2979:OrGate$11358  = \$auto$rtlil.cc:2977:AndGate$11354  | \$auto$rtlil.cc:2977:AndGate$11356 ;
  assign \$auto$rtlil.cc:2979:OrGate$11246  = \$auto$rtlil.cc:2977:AndGate$11242  | \$auto$rtlil.cc:2977:AndGate$11244 ;
  assign \$auto$rtlil.cc:2979:OrGate$11254  = \$auto$rtlil.cc:2977:AndGate$11250  | \$auto$rtlil.cc:2977:AndGate$11252 ;
  assign \$auto$rtlil.cc:2979:OrGate$11262  = \$auto$rtlil.cc:2977:AndGate$11258  | \$auto$rtlil.cc:2977:AndGate$11260 ;
  assign \$auto$rtlil.cc:2979:OrGate$11270  = \$auto$rtlil.cc:2977:AndGate$11266  | \$auto$rtlil.cc:2977:AndGate$11268 ;
  assign \$auto$rtlil.cc:2979:OrGate$11278  = \$auto$rtlil.cc:2977:AndGate$11274  | \$auto$rtlil.cc:2977:AndGate$11276 ;
  assign \$auto$rtlil.cc:2979:OrGate$11286  = \$auto$rtlil.cc:2977:AndGate$11282  | \$auto$rtlil.cc:2977:AndGate$11284 ;
  assign \$auto$rtlil.cc:2979:OrGate$11294  = \$auto$rtlil.cc:2977:AndGate$11290  | \$auto$rtlil.cc:2977:AndGate$11292 ;
  assign \$auto$rtlil.cc:2979:OrGate$11302  = \$auto$rtlil.cc:2977:AndGate$11298  | \$auto$rtlil.cc:2977:AndGate$11300 ;
  assign \$auto$rtlil.cc:2979:OrGate$11366  = \$auto$rtlil.cc:2977:AndGate$11354  | \$auto$rtlil.cc:2977:AndGate$11364 ;
  assign \$auto$rtlil.cc:2979:OrGate$11392  = \$auto$rtlil.cc:2977:AndGate$11388  | \$auto$rtlil.cc:2977:AndGate$11390 ;
  assign \$auto$rtlil.cc:2979:OrGate$11464  = \$auto$rtlil.cc:2977:AndGate$11460  | \$auto$rtlil.cc:2977:AndGate$11462 ;
  assign \$auto$rtlil.cc:2979:OrGate$11472  = \$auto$rtlil.cc:2977:AndGate$11468  | \$auto$rtlil.cc:2977:AndGate$11470 ;
  assign \$auto$rtlil.cc:2979:OrGate$11480  = \$auto$rtlil.cc:2977:AndGate$11476  | \$auto$rtlil.cc:2977:AndGate$11478 ;
  assign \$auto$rtlil.cc:2979:OrGate$11488  = \$auto$rtlil.cc:2977:AndGate$11484  | \$auto$rtlil.cc:2977:AndGate$11486 ;
  assign \$auto$rtlil.cc:2979:OrGate$11496  = \$auto$rtlil.cc:2977:AndGate$11492  | \$auto$rtlil.cc:2977:AndGate$11494 ;
  assign \$auto$rtlil.cc:2979:OrGate$11504  = \$auto$rtlil.cc:2977:AndGate$11500  | \$auto$rtlil.cc:2977:AndGate$11502 ;
  assign \$auto$rtlil.cc:2979:OrGate$11512  = \$auto$rtlil.cc:2977:AndGate$11508  | \$auto$rtlil.cc:2977:AndGate$11510 ;
  assign \$auto$rtlil.cc:2979:OrGate$11400  = \$auto$rtlil.cc:2977:AndGate$11396  | \$auto$rtlil.cc:2977:AndGate$11398 ;
  assign \$auto$rtlil.cc:2979:OrGate$11408  = \$auto$rtlil.cc:2977:AndGate$11404  | \$auto$rtlil.cc:2977:AndGate$11406 ;
  assign \$auto$rtlil.cc:2979:OrGate$11416  = \$auto$rtlil.cc:2977:AndGate$11412  | \$auto$rtlil.cc:2977:AndGate$11414 ;
  assign \$auto$rtlil.cc:2979:OrGate$11424  = \$auto$rtlil.cc:2977:AndGate$11420  | \$auto$rtlil.cc:2977:AndGate$11422 ;
  assign \$auto$rtlil.cc:2979:OrGate$11432  = \$auto$rtlil.cc:2977:AndGate$11428  | \$auto$rtlil.cc:2977:AndGate$11430 ;
  assign \$auto$rtlil.cc:2979:OrGate$11440  = \$auto$rtlil.cc:2977:AndGate$11436  | \$auto$rtlil.cc:2977:AndGate$11438 ;
  assign \$auto$rtlil.cc:2979:OrGate$11448  = \$auto$rtlil.cc:2977:AndGate$11444  | \$auto$rtlil.cc:2977:AndGate$11446 ;
  assign \$auto$rtlil.cc:2979:OrGate$11456  = \$auto$rtlil.cc:2977:AndGate$11452  | \$auto$rtlil.cc:2977:AndGate$11454 ;
  assign \$auto$rtlil.cc:2979:OrGate$11520  = \$auto$rtlil.cc:2977:AndGate$11508  | \$auto$rtlil.cc:2977:AndGate$11518 ;
  assign \$auto$rtlil.cc:2979:OrGate$11546  = \$auto$rtlil.cc:2977:AndGate$11542  | \$auto$rtlil.cc:2977:AndGate$11544 ;
  assign \$auto$rtlil.cc:2979:OrGate$11618  = \$auto$rtlil.cc:2977:AndGate$11614  | \$auto$rtlil.cc:2977:AndGate$11616 ;
  assign \$auto$rtlil.cc:2979:OrGate$11626  = \$auto$rtlil.cc:2977:AndGate$11622  | \$auto$rtlil.cc:2977:AndGate$11624 ;
  assign \$auto$rtlil.cc:2979:OrGate$11634  = \$auto$rtlil.cc:2977:AndGate$11630  | \$auto$rtlil.cc:2977:AndGate$11632 ;
  assign \$auto$rtlil.cc:2979:OrGate$11642  = \$auto$rtlil.cc:2977:AndGate$11638  | \$auto$rtlil.cc:2977:AndGate$11640 ;
  assign \$auto$rtlil.cc:2979:OrGate$11650  = \$auto$rtlil.cc:2977:AndGate$11646  | \$auto$rtlil.cc:2977:AndGate$11648 ;
  assign \$auto$rtlil.cc:2979:OrGate$11658  = \$auto$rtlil.cc:2977:AndGate$11654  | \$auto$rtlil.cc:2977:AndGate$11656 ;
  assign \$auto$rtlil.cc:2979:OrGate$11666  = \$auto$rtlil.cc:2977:AndGate$11662  | \$auto$rtlil.cc:2977:AndGate$11664 ;
  assign \$auto$rtlil.cc:2979:OrGate$11554  = \$auto$rtlil.cc:2977:AndGate$11550  | \$auto$rtlil.cc:2977:AndGate$11552 ;
  assign \$auto$rtlil.cc:2979:OrGate$11562  = \$auto$rtlil.cc:2977:AndGate$11558  | \$auto$rtlil.cc:2977:AndGate$11560 ;
  assign \$auto$rtlil.cc:2979:OrGate$11570  = \$auto$rtlil.cc:2977:AndGate$11566  | \$auto$rtlil.cc:2977:AndGate$11568 ;
  assign \$auto$rtlil.cc:2979:OrGate$11578  = \$auto$rtlil.cc:2977:AndGate$11574  | \$auto$rtlil.cc:2977:AndGate$11576 ;
  assign \$auto$rtlil.cc:2979:OrGate$11586  = \$auto$rtlil.cc:2977:AndGate$11582  | \$auto$rtlil.cc:2977:AndGate$11584 ;
  assign \$auto$rtlil.cc:2979:OrGate$11594  = \$auto$rtlil.cc:2977:AndGate$11590  | \$auto$rtlil.cc:2977:AndGate$11592 ;
  assign \$auto$rtlil.cc:2979:OrGate$11602  = \$auto$rtlil.cc:2977:AndGate$11598  | \$auto$rtlil.cc:2977:AndGate$11600 ;
  assign \$auto$rtlil.cc:2979:OrGate$11610  = \$auto$rtlil.cc:2977:AndGate$11606  | \$auto$rtlil.cc:2977:AndGate$11608 ;
  assign \$auto$rtlil.cc:2979:OrGate$11674  = \$auto$rtlil.cc:2977:AndGate$11662  | \$auto$rtlil.cc:2977:AndGate$11672 ;
  assign \$auto$rtlil.cc:2979:OrGate$11700  = \$auto$rtlil.cc:2977:AndGate$11696  | \$auto$rtlil.cc:2977:AndGate$11698 ;
  assign \$auto$rtlil.cc:2979:OrGate$11772  = \$auto$rtlil.cc:2977:AndGate$11768  | \$auto$rtlil.cc:2977:AndGate$11770 ;
  assign \$auto$rtlil.cc:2979:OrGate$11780  = \$auto$rtlil.cc:2977:AndGate$11776  | \$auto$rtlil.cc:2977:AndGate$11778 ;
  assign \$auto$rtlil.cc:2979:OrGate$11788  = \$auto$rtlil.cc:2977:AndGate$11784  | \$auto$rtlil.cc:2977:AndGate$11786 ;
  assign \$auto$rtlil.cc:2979:OrGate$11796  = \$auto$rtlil.cc:2977:AndGate$11792  | \$auto$rtlil.cc:2977:AndGate$11794 ;
  assign \$auto$rtlil.cc:2979:OrGate$11804  = \$auto$rtlil.cc:2977:AndGate$11800  | \$auto$rtlil.cc:2977:AndGate$11802 ;
  assign \$auto$rtlil.cc:2979:OrGate$11812  = \$auto$rtlil.cc:2977:AndGate$11808  | \$auto$rtlil.cc:2977:AndGate$11810 ;
  assign \$auto$rtlil.cc:2979:OrGate$11820  = \$auto$rtlil.cc:2977:AndGate$11816  | \$auto$rtlil.cc:2977:AndGate$11818 ;
  assign \$auto$rtlil.cc:2979:OrGate$11708  = \$auto$rtlil.cc:2977:AndGate$11704  | \$auto$rtlil.cc:2977:AndGate$11706 ;
  assign \$auto$rtlil.cc:2979:OrGate$11716  = \$auto$rtlil.cc:2977:AndGate$11712  | \$auto$rtlil.cc:2977:AndGate$11714 ;
  assign \$auto$rtlil.cc:2979:OrGate$11724  = \$auto$rtlil.cc:2977:AndGate$11720  | \$auto$rtlil.cc:2977:AndGate$11722 ;
  assign \$auto$rtlil.cc:2979:OrGate$11732  = \$auto$rtlil.cc:2977:AndGate$11728  | \$auto$rtlil.cc:2977:AndGate$11730 ;
  assign \$auto$rtlil.cc:2979:OrGate$11740  = \$auto$rtlil.cc:2977:AndGate$11736  | \$auto$rtlil.cc:2977:AndGate$11738 ;
  assign \$auto$rtlil.cc:2979:OrGate$11748  = \$auto$rtlil.cc:2977:AndGate$11744  | \$auto$rtlil.cc:2977:AndGate$11746 ;
  assign \$auto$rtlil.cc:2979:OrGate$11756  = \$auto$rtlil.cc:2977:AndGate$11752  | \$auto$rtlil.cc:2977:AndGate$11754 ;
  assign \$auto$rtlil.cc:2979:OrGate$11764  = \$auto$rtlil.cc:2977:AndGate$11760  | \$auto$rtlil.cc:2977:AndGate$11762 ;
  assign \$auto$rtlil.cc:2979:OrGate$11828  = \$auto$rtlil.cc:2977:AndGate$11816  | \$auto$rtlil.cc:2977:AndGate$11826 ;
  assign \$auto$rtlil.cc:2979:OrGate$11854  = \$auto$rtlil.cc:2977:AndGate$11850  | \$auto$rtlil.cc:2977:AndGate$11852 ;
  assign \$auto$rtlil.cc:2979:OrGate$11926  = \$auto$rtlil.cc:2977:AndGate$11922  | \$auto$rtlil.cc:2977:AndGate$11924 ;
  assign \$auto$rtlil.cc:2979:OrGate$11934  = \$auto$rtlil.cc:2977:AndGate$11930  | \$auto$rtlil.cc:2977:AndGate$11932 ;
  assign \$auto$rtlil.cc:2979:OrGate$11942  = \$auto$rtlil.cc:2977:AndGate$11938  | \$auto$rtlil.cc:2977:AndGate$11940 ;
  assign \$auto$rtlil.cc:2979:OrGate$11950  = \$auto$rtlil.cc:2977:AndGate$11946  | \$auto$rtlil.cc:2977:AndGate$11948 ;
  assign \$auto$rtlil.cc:2979:OrGate$11958  = \$auto$rtlil.cc:2977:AndGate$11954  | \$auto$rtlil.cc:2977:AndGate$11956 ;
  assign \$auto$rtlil.cc:2979:OrGate$11966  = \$auto$rtlil.cc:2977:AndGate$11962  | \$auto$rtlil.cc:2977:AndGate$11964 ;
  assign \$auto$rtlil.cc:2979:OrGate$11974  = \$auto$rtlil.cc:2977:AndGate$11970  | \$auto$rtlil.cc:2977:AndGate$11972 ;
  assign \$auto$rtlil.cc:2979:OrGate$11862  = \$auto$rtlil.cc:2977:AndGate$11858  | \$auto$rtlil.cc:2977:AndGate$11860 ;
  assign \$auto$rtlil.cc:2979:OrGate$11870  = \$auto$rtlil.cc:2977:AndGate$11866  | \$auto$rtlil.cc:2977:AndGate$11868 ;
  assign \$auto$rtlil.cc:2979:OrGate$11878  = \$auto$rtlil.cc:2977:AndGate$11874  | \$auto$rtlil.cc:2977:AndGate$11876 ;
  assign \$auto$rtlil.cc:2979:OrGate$11886  = \$auto$rtlil.cc:2977:AndGate$11882  | \$auto$rtlil.cc:2977:AndGate$11884 ;
  assign \$auto$rtlil.cc:2979:OrGate$11894  = \$auto$rtlil.cc:2977:AndGate$11890  | \$auto$rtlil.cc:2977:AndGate$11892 ;
  assign \$auto$rtlil.cc:2979:OrGate$11902  = \$auto$rtlil.cc:2977:AndGate$11898  | \$auto$rtlil.cc:2977:AndGate$11900 ;
  assign \$auto$rtlil.cc:2979:OrGate$11910  = \$auto$rtlil.cc:2977:AndGate$11906  | \$auto$rtlil.cc:2977:AndGate$11908 ;
  assign \$auto$rtlil.cc:2979:OrGate$11918  = \$auto$rtlil.cc:2977:AndGate$11914  | \$auto$rtlil.cc:2977:AndGate$11916 ;
  assign \$auto$rtlil.cc:2979:OrGate$11982  = \$auto$rtlil.cc:2977:AndGate$11970  | \$auto$rtlil.cc:2977:AndGate$11980 ;
  assign \$auto$rtlil.cc:2979:OrGate$12008  = \$auto$rtlil.cc:2977:AndGate$12004  | \$auto$rtlil.cc:2977:AndGate$12006 ;
  assign \$auto$rtlil.cc:2979:OrGate$12080  = \$auto$rtlil.cc:2977:AndGate$12076  | \$auto$rtlil.cc:2977:AndGate$12078 ;
  assign \$auto$rtlil.cc:2979:OrGate$12088  = \$auto$rtlil.cc:2977:AndGate$12084  | \$auto$rtlil.cc:2977:AndGate$12086 ;
  assign \$auto$rtlil.cc:2979:OrGate$12096  = \$auto$rtlil.cc:2977:AndGate$12092  | \$auto$rtlil.cc:2977:AndGate$12094 ;
  assign \$auto$rtlil.cc:2979:OrGate$12104  = \$auto$rtlil.cc:2977:AndGate$12100  | \$auto$rtlil.cc:2977:AndGate$12102 ;
  assign \$auto$rtlil.cc:2979:OrGate$12112  = \$auto$rtlil.cc:2977:AndGate$12108  | \$auto$rtlil.cc:2977:AndGate$12110 ;
  assign \$auto$rtlil.cc:2979:OrGate$12120  = \$auto$rtlil.cc:2977:AndGate$12116  | \$auto$rtlil.cc:2977:AndGate$12118 ;
  assign \$auto$rtlil.cc:2979:OrGate$12128  = \$auto$rtlil.cc:2977:AndGate$12124  | \$auto$rtlil.cc:2977:AndGate$12126 ;
  assign \$auto$rtlil.cc:2979:OrGate$12016  = \$auto$rtlil.cc:2977:AndGate$12012  | \$auto$rtlil.cc:2977:AndGate$12014 ;
  assign \$auto$rtlil.cc:2979:OrGate$12024  = \$auto$rtlil.cc:2977:AndGate$12020  | \$auto$rtlil.cc:2977:AndGate$12022 ;
  assign \$auto$rtlil.cc:2979:OrGate$12032  = \$auto$rtlil.cc:2977:AndGate$12028  | \$auto$rtlil.cc:2977:AndGate$12030 ;
  assign \$auto$rtlil.cc:2979:OrGate$12040  = \$auto$rtlil.cc:2977:AndGate$12036  | \$auto$rtlil.cc:2977:AndGate$12038 ;
  assign \$auto$rtlil.cc:2979:OrGate$12048  = \$auto$rtlil.cc:2977:AndGate$12044  | \$auto$rtlil.cc:2977:AndGate$12046 ;
  assign \$auto$rtlil.cc:2979:OrGate$12056  = \$auto$rtlil.cc:2977:AndGate$12052  | \$auto$rtlil.cc:2977:AndGate$12054 ;
  assign \$auto$rtlil.cc:2979:OrGate$12064  = \$auto$rtlil.cc:2977:AndGate$12060  | \$auto$rtlil.cc:2977:AndGate$12062 ;
  assign \$auto$rtlil.cc:2979:OrGate$12072  = \$auto$rtlil.cc:2977:AndGate$12068  | \$auto$rtlil.cc:2977:AndGate$12070 ;
  assign \$auto$rtlil.cc:2979:OrGate$12136  = \$auto$rtlil.cc:2977:AndGate$12124  | \$auto$rtlil.cc:2977:AndGate$12134 ;
  assign \$auto$rtlil.cc:2979:OrGate$12162  = \$auto$rtlil.cc:2977:AndGate$12158  | \$auto$rtlil.cc:2977:AndGate$12160 ;
  assign \$auto$rtlil.cc:2979:OrGate$12234  = \$auto$rtlil.cc:2977:AndGate$12230  | \$auto$rtlil.cc:2977:AndGate$12232 ;
  assign \$auto$rtlil.cc:2979:OrGate$12242  = \$auto$rtlil.cc:2977:AndGate$12238  | \$auto$rtlil.cc:2977:AndGate$12240 ;
  assign \$auto$rtlil.cc:2979:OrGate$12250  = \$auto$rtlil.cc:2977:AndGate$12246  | \$auto$rtlil.cc:2977:AndGate$12248 ;
  assign \$auto$rtlil.cc:2979:OrGate$12258  = \$auto$rtlil.cc:2977:AndGate$12254  | \$auto$rtlil.cc:2977:AndGate$12256 ;
  assign \$auto$rtlil.cc:2979:OrGate$12266  = \$auto$rtlil.cc:2977:AndGate$12262  | \$auto$rtlil.cc:2977:AndGate$12264 ;
  assign \$auto$rtlil.cc:2979:OrGate$12274  = \$auto$rtlil.cc:2977:AndGate$12270  | \$auto$rtlil.cc:2977:AndGate$12272 ;
  assign \$auto$rtlil.cc:2979:OrGate$12282  = \$auto$rtlil.cc:2977:AndGate$12278  | \$auto$rtlil.cc:2977:AndGate$12280 ;
  assign \$auto$rtlil.cc:2979:OrGate$12170  = \$auto$rtlil.cc:2977:AndGate$12166  | \$auto$rtlil.cc:2977:AndGate$12168 ;
  assign \$auto$rtlil.cc:2979:OrGate$12178  = \$auto$rtlil.cc:2977:AndGate$12174  | \$auto$rtlil.cc:2977:AndGate$12176 ;
  assign \$auto$rtlil.cc:2979:OrGate$12186  = \$auto$rtlil.cc:2977:AndGate$12182  | \$auto$rtlil.cc:2977:AndGate$12184 ;
  assign \$auto$rtlil.cc:2979:OrGate$12194  = \$auto$rtlil.cc:2977:AndGate$12190  | \$auto$rtlil.cc:2977:AndGate$12192 ;
  assign \$auto$rtlil.cc:2979:OrGate$12202  = \$auto$rtlil.cc:2977:AndGate$12198  | \$auto$rtlil.cc:2977:AndGate$12200 ;
  assign \$auto$rtlil.cc:2979:OrGate$12210  = \$auto$rtlil.cc:2977:AndGate$12206  | \$auto$rtlil.cc:2977:AndGate$12208 ;
  assign \$auto$rtlil.cc:2979:OrGate$12218  = \$auto$rtlil.cc:2977:AndGate$12214  | \$auto$rtlil.cc:2977:AndGate$12216 ;
  assign \$auto$rtlil.cc:2979:OrGate$12226  = \$auto$rtlil.cc:2977:AndGate$12222  | \$auto$rtlil.cc:2977:AndGate$12224 ;
  assign \$auto$rtlil.cc:2979:OrGate$12290  = \$auto$rtlil.cc:2977:AndGate$12278  | \$auto$rtlil.cc:2977:AndGate$12288 ;
  assign \$auto$rtlil.cc:2979:OrGate$12316  = \$auto$rtlil.cc:2977:AndGate$12312  | \$auto$rtlil.cc:2977:AndGate$12314 ;
  assign \$auto$rtlil.cc:2979:OrGate$12388  = \$auto$rtlil.cc:2977:AndGate$12384  | \$auto$rtlil.cc:2977:AndGate$12386 ;
  assign \$auto$rtlil.cc:2979:OrGate$12396  = \$auto$rtlil.cc:2977:AndGate$12392  | \$auto$rtlil.cc:2977:AndGate$12394 ;
  assign \$auto$rtlil.cc:2979:OrGate$12404  = \$auto$rtlil.cc:2977:AndGate$12400  | \$auto$rtlil.cc:2977:AndGate$12402 ;
  assign \$auto$rtlil.cc:2979:OrGate$12412  = \$auto$rtlil.cc:2977:AndGate$12408  | \$auto$rtlil.cc:2977:AndGate$12410 ;
  assign \$auto$rtlil.cc:2979:OrGate$12420  = \$auto$rtlil.cc:2977:AndGate$12416  | \$auto$rtlil.cc:2977:AndGate$12418 ;
  assign \$auto$rtlil.cc:2979:OrGate$12428  = \$auto$rtlil.cc:2977:AndGate$12424  | \$auto$rtlil.cc:2977:AndGate$12426 ;
  assign \$auto$rtlil.cc:2979:OrGate$12436  = \$auto$rtlil.cc:2977:AndGate$12432  | \$auto$rtlil.cc:2977:AndGate$12434 ;
  assign \$auto$rtlil.cc:2979:OrGate$12324  = \$auto$rtlil.cc:2977:AndGate$12320  | \$auto$rtlil.cc:2977:AndGate$12322 ;
  assign \$auto$rtlil.cc:2979:OrGate$12332  = \$auto$rtlil.cc:2977:AndGate$12328  | \$auto$rtlil.cc:2977:AndGate$12330 ;
  assign \$auto$rtlil.cc:2979:OrGate$12340  = \$auto$rtlil.cc:2977:AndGate$12336  | \$auto$rtlil.cc:2977:AndGate$12338 ;
  assign \$auto$rtlil.cc:2979:OrGate$12348  = \$auto$rtlil.cc:2977:AndGate$12344  | \$auto$rtlil.cc:2977:AndGate$12346 ;
  assign \$auto$rtlil.cc:2979:OrGate$12356  = \$auto$rtlil.cc:2977:AndGate$12352  | \$auto$rtlil.cc:2977:AndGate$12354 ;
  assign \$auto$rtlil.cc:2979:OrGate$12364  = \$auto$rtlil.cc:2977:AndGate$12360  | \$auto$rtlil.cc:2977:AndGate$12362 ;
  assign \$auto$rtlil.cc:2979:OrGate$12372  = \$auto$rtlil.cc:2977:AndGate$12368  | \$auto$rtlil.cc:2977:AndGate$12370 ;
  assign \$auto$rtlil.cc:2979:OrGate$12380  = \$auto$rtlil.cc:2977:AndGate$12376  | \$auto$rtlil.cc:2977:AndGate$12378 ;
  assign \$auto$rtlil.cc:2979:OrGate$12444  = \$auto$rtlil.cc:2977:AndGate$12432  | \$auto$rtlil.cc:2977:AndGate$12442 ;
  assign \$auto$rtlil.cc:2981:XorGate$11084  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11082 ;
  assign \$auto$rtlil.cc:2981:XorGate$11156  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11154 ;
  assign \$auto$rtlil.cc:2981:XorGate$11164  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11162 ;
  assign \$auto$rtlil.cc:2981:XorGate$11172  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11170 ;
  assign \$auto$rtlil.cc:2981:XorGate$11180  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11178 ;
  assign \$auto$rtlil.cc:2981:XorGate$11188  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11186 ;
  assign \$auto$rtlil.cc:2981:XorGate$11196  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11194 ;
  assign \$auto$rtlil.cc:2981:XorGate$11204  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11202 ;
  assign \$auto$rtlil.cc:2981:XorGate$11092  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11090 ;
  assign \$auto$rtlil.cc:2981:XorGate$11100  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11098 ;
  assign \$auto$rtlil.cc:2981:XorGate$11108  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11106 ;
  assign \$auto$rtlil.cc:2981:XorGate$11116  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11114 ;
  assign \$auto$rtlil.cc:2981:XorGate$11124  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11122 ;
  assign \$auto$rtlil.cc:2981:XorGate$11132  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11130 ;
  assign \$auto$rtlil.cc:2981:XorGate$11140  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11138 ;
  assign \$auto$rtlil.cc:2981:XorGate$11148  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11146 ;
  assign \$auto$rtlil.cc:2981:XorGate$11212  = \gen_mult_fast.mult_op_b [1] ^ \$auto$rtlil.cc:2979:OrGate$11210 ;
  assign \$auto$rtlil.cc:2981:XorGate$11240  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11238 ;
  assign \$auto$rtlil.cc:2981:XorGate$11312  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11310 ;
  assign \$auto$rtlil.cc:2981:XorGate$11320  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11318 ;
  assign \$auto$rtlil.cc:2981:XorGate$11328  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11326 ;
  assign \$auto$rtlil.cc:2981:XorGate$11336  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11334 ;
  assign \$auto$rtlil.cc:2981:XorGate$11344  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11342 ;
  assign \$auto$rtlil.cc:2981:XorGate$11352  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11350 ;
  assign \$auto$rtlil.cc:2981:XorGate$11360  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11358 ;
  assign \$auto$rtlil.cc:2981:XorGate$11248  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11246 ;
  assign \$auto$rtlil.cc:2981:XorGate$11256  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11254 ;
  assign \$auto$rtlil.cc:2981:XorGate$11264  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11262 ;
  assign \$auto$rtlil.cc:2981:XorGate$11272  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11270 ;
  assign \$auto$rtlil.cc:2981:XorGate$11280  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11278 ;
  assign \$auto$rtlil.cc:2981:XorGate$11288  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11286 ;
  assign \$auto$rtlil.cc:2981:XorGate$11296  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11294 ;
  assign \$auto$rtlil.cc:2981:XorGate$11304  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11302 ;
  assign \$auto$rtlil.cc:2981:XorGate$11368  = \gen_mult_fast.mult_op_b [3] ^ \$auto$rtlil.cc:2979:OrGate$11366 ;
  assign \$auto$rtlil.cc:2981:XorGate$11394  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11392 ;
  assign \$auto$rtlil.cc:2981:XorGate$11466  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11464 ;
  assign \$auto$rtlil.cc:2981:XorGate$11474  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11472 ;
  assign \$auto$rtlil.cc:2981:XorGate$11482  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11480 ;
  assign \$auto$rtlil.cc:2981:XorGate$11490  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11488 ;
  assign \$auto$rtlil.cc:2981:XorGate$11498  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11496 ;
  assign \$auto$rtlil.cc:2981:XorGate$11506  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11504 ;
  assign \$auto$rtlil.cc:2981:XorGate$11514  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11512 ;
  assign \$auto$rtlil.cc:2981:XorGate$11402  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11400 ;
  assign \$auto$rtlil.cc:2981:XorGate$11410  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11408 ;
  assign \$auto$rtlil.cc:2981:XorGate$11418  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11416 ;
  assign \$auto$rtlil.cc:2981:XorGate$11426  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11424 ;
  assign \$auto$rtlil.cc:2981:XorGate$11434  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11432 ;
  assign \$auto$rtlil.cc:2981:XorGate$11442  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11440 ;
  assign \$auto$rtlil.cc:2981:XorGate$11450  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11448 ;
  assign \$auto$rtlil.cc:2981:XorGate$11458  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11456 ;
  assign \$auto$rtlil.cc:2981:XorGate$11522  = \gen_mult_fast.mult_op_b [5] ^ \$auto$rtlil.cc:2979:OrGate$11520 ;
  assign \$auto$rtlil.cc:2981:XorGate$11548  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11546 ;
  assign \$auto$rtlil.cc:2981:XorGate$11620  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11618 ;
  assign \$auto$rtlil.cc:2981:XorGate$11628  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11626 ;
  assign \$auto$rtlil.cc:2981:XorGate$11636  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11634 ;
  assign \$auto$rtlil.cc:2981:XorGate$11644  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11642 ;
  assign \$auto$rtlil.cc:2981:XorGate$11652  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11650 ;
  assign \$auto$rtlil.cc:2981:XorGate$11660  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11658 ;
  assign \$auto$rtlil.cc:2981:XorGate$11668  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11666 ;
  assign \$auto$rtlil.cc:2981:XorGate$11556  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11554 ;
  assign \$auto$rtlil.cc:2981:XorGate$11564  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11562 ;
  assign \$auto$rtlil.cc:2981:XorGate$11572  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11570 ;
  assign \$auto$rtlil.cc:2981:XorGate$11580  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11578 ;
  assign \$auto$rtlil.cc:2981:XorGate$11588  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11586 ;
  assign \$auto$rtlil.cc:2981:XorGate$11596  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11594 ;
  assign \$auto$rtlil.cc:2981:XorGate$11604  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11602 ;
  assign \$auto$rtlil.cc:2981:XorGate$11612  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11610 ;
  assign \$auto$rtlil.cc:2981:XorGate$11676  = \gen_mult_fast.mult_op_b [7] ^ \$auto$rtlil.cc:2979:OrGate$11674 ;
  assign \$auto$rtlil.cc:2981:XorGate$11702  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11700 ;
  assign \$auto$rtlil.cc:2981:XorGate$11774  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11772 ;
  assign \$auto$rtlil.cc:2981:XorGate$11782  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11780 ;
  assign \$auto$rtlil.cc:2981:XorGate$11790  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11788 ;
  assign \$auto$rtlil.cc:2981:XorGate$11798  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11796 ;
  assign \$auto$rtlil.cc:2981:XorGate$11806  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11804 ;
  assign \$auto$rtlil.cc:2981:XorGate$11814  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11812 ;
  assign \$auto$rtlil.cc:2981:XorGate$11822  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11820 ;
  assign \$auto$rtlil.cc:2981:XorGate$11710  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11708 ;
  assign \$auto$rtlil.cc:2981:XorGate$11718  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11716 ;
  assign \$auto$rtlil.cc:2981:XorGate$11726  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11724 ;
  assign \$auto$rtlil.cc:2981:XorGate$11734  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11732 ;
  assign \$auto$rtlil.cc:2981:XorGate$11742  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11740 ;
  assign \$auto$rtlil.cc:2981:XorGate$11750  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11748 ;
  assign \$auto$rtlil.cc:2981:XorGate$11758  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11756 ;
  assign \$auto$rtlil.cc:2981:XorGate$11766  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11764 ;
  assign \$auto$rtlil.cc:2981:XorGate$11830  = \gen_mult_fast.mult_op_b [9] ^ \$auto$rtlil.cc:2979:OrGate$11828 ;
  assign \$auto$rtlil.cc:2981:XorGate$11856  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11854 ;
  assign \$auto$rtlil.cc:2981:XorGate$11928  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11926 ;
  assign \$auto$rtlil.cc:2981:XorGate$11936  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11934 ;
  assign \$auto$rtlil.cc:2981:XorGate$11944  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11942 ;
  assign \$auto$rtlil.cc:2981:XorGate$11952  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11950 ;
  assign \$auto$rtlil.cc:2981:XorGate$11960  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11958 ;
  assign \$auto$rtlil.cc:2981:XorGate$11968  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11966 ;
  assign \$auto$rtlil.cc:2981:XorGate$11976  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11974 ;
  assign \$auto$rtlil.cc:2981:XorGate$11864  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11862 ;
  assign \$auto$rtlil.cc:2981:XorGate$11872  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11870 ;
  assign \$auto$rtlil.cc:2981:XorGate$11880  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11878 ;
  assign \$auto$rtlil.cc:2981:XorGate$11888  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11886 ;
  assign \$auto$rtlil.cc:2981:XorGate$11896  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11894 ;
  assign \$auto$rtlil.cc:2981:XorGate$11904  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11902 ;
  assign \$auto$rtlil.cc:2981:XorGate$11912  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11910 ;
  assign \$auto$rtlil.cc:2981:XorGate$11920  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11918 ;
  assign \$auto$rtlil.cc:2981:XorGate$11984  = \gen_mult_fast.mult_op_b [11] ^ \$auto$rtlil.cc:2979:OrGate$11982 ;
  assign \$auto$rtlil.cc:2981:XorGate$12010  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12008 ;
  assign \$auto$rtlil.cc:2981:XorGate$12082  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12080 ;
  assign \$auto$rtlil.cc:2981:XorGate$12090  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12088 ;
  assign \$auto$rtlil.cc:2981:XorGate$12098  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12096 ;
  assign \$auto$rtlil.cc:2981:XorGate$12106  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12104 ;
  assign \$auto$rtlil.cc:2981:XorGate$12114  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12112 ;
  assign \$auto$rtlil.cc:2981:XorGate$12122  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12120 ;
  assign \$auto$rtlil.cc:2981:XorGate$12130  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12128 ;
  assign \$auto$rtlil.cc:2981:XorGate$12018  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12016 ;
  assign \$auto$rtlil.cc:2981:XorGate$12026  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12024 ;
  assign \$auto$rtlil.cc:2981:XorGate$12034  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12032 ;
  assign \$auto$rtlil.cc:2981:XorGate$12042  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12040 ;
  assign \$auto$rtlil.cc:2981:XorGate$12050  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12048 ;
  assign \$auto$rtlil.cc:2981:XorGate$12058  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12056 ;
  assign \$auto$rtlil.cc:2981:XorGate$12066  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12064 ;
  assign \$auto$rtlil.cc:2981:XorGate$12074  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12072 ;
  assign \$auto$rtlil.cc:2981:XorGate$12138  = \gen_mult_fast.mult_op_b [13] ^ \$auto$rtlil.cc:2979:OrGate$12136 ;
  assign \$auto$rtlil.cc:2981:XorGate$12164  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12162 ;
  assign \$auto$rtlil.cc:2981:XorGate$12236  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12234 ;
  assign \$auto$rtlil.cc:2981:XorGate$12244  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12242 ;
  assign \$auto$rtlil.cc:2981:XorGate$12252  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12250 ;
  assign \$auto$rtlil.cc:2981:XorGate$12260  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12258 ;
  assign \$auto$rtlil.cc:2981:XorGate$12268  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12266 ;
  assign \$auto$rtlil.cc:2981:XorGate$12276  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12274 ;
  assign \$auto$rtlil.cc:2981:XorGate$12284  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12282 ;
  assign \$auto$rtlil.cc:2981:XorGate$12172  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12170 ;
  assign \$auto$rtlil.cc:2981:XorGate$12180  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12178 ;
  assign \$auto$rtlil.cc:2981:XorGate$12188  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12186 ;
  assign \$auto$rtlil.cc:2981:XorGate$12196  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12194 ;
  assign \$auto$rtlil.cc:2981:XorGate$12204  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12202 ;
  assign \$auto$rtlil.cc:2981:XorGate$12212  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12210 ;
  assign \$auto$rtlil.cc:2981:XorGate$12220  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12218 ;
  assign \$auto$rtlil.cc:2981:XorGate$12228  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12226 ;
  assign \$auto$rtlil.cc:2981:XorGate$12292  = \gen_mult_fast.mult_op_b [15] ^ \$auto$rtlil.cc:2979:OrGate$12290 ;
  assign \$auto$rtlil.cc:2981:XorGate$12318  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12316 ;
  assign \$auto$rtlil.cc:2981:XorGate$12390  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12388 ;
  assign \$auto$rtlil.cc:2981:XorGate$12398  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12396 ;
  assign \$auto$rtlil.cc:2981:XorGate$12406  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12404 ;
  assign \$auto$rtlil.cc:2981:XorGate$12414  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12412 ;
  assign \$auto$rtlil.cc:2981:XorGate$12422  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12420 ;
  assign \$auto$rtlil.cc:2981:XorGate$12430  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12428 ;
  assign \$auto$rtlil.cc:2981:XorGate$12438  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12436 ;
  assign \$auto$rtlil.cc:2981:XorGate$12326  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12324 ;
  assign \$auto$rtlil.cc:2981:XorGate$12334  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12332 ;
  assign \$auto$rtlil.cc:2981:XorGate$12342  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12340 ;
  assign \$auto$rtlil.cc:2981:XorGate$12350  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12348 ;
  assign \$auto$rtlil.cc:2981:XorGate$12358  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12356 ;
  assign \$auto$rtlil.cc:2981:XorGate$12366  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12364 ;
  assign \$auto$rtlil.cc:2981:XorGate$12374  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12372 ;
  assign \$auto$rtlil.cc:2981:XorGate$12382  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12380 ;
  assign \$auto$rtlil.cc:2981:XorGate$12446  = sign_b ^ \$auto$rtlil.cc:2979:OrGate$12444 ;
  assign multdiv_en = mult_en_i | div_en_i;
  assign signed_mult = | signed_mode_i;
  assign mac_res = $signed(\$auto$booth.cc:292:run$10964 [33:0]) + $signed(accum);
  assign div_sign_b = signed_mode_i[1] & op_b_i[31];
  assign \$auto$builder.cc:338:Biop$2786  = ! operator_i;
  assign div_sign_a = signed_mode_i[0] & op_a_i[31];
  assign \$auto$builder.cc:338:Biop$2806  = signed_mult & imd_val_q_i[67];
  assign \$auto$builder.cc:338:Biop$2831  = op_quotient_q | one_shift;
  assign one_shift = 1'h1 << div_counter_q;
  assign \$auto$builder.cc:338:Biop$2838  = imd_val_q_i[65] ^ imd_val_q_i[31];
  assign \$auto$builder.cc:338:Biop$2844  = ~ alu_adder_ext_i[32];
  assign \$auto$builder.cc:338:Biop$2851  = div_sign_a ^ div_sign_b;
  assign div_change_sign = \$auto$builder.cc:338:Biop$2851  & \$auto$builder.cc:364:Unop$2853 ;
  assign \$auto$builder.cc:338:Biop$2858  = div_counter_q - 1'h1;
  assign \$auto$builder.cc:338:Biop$2862  = operator_i == 2'h2;
  assign \$auto$builder.cc:338:Biop$2897  = div_counter_q == 1'h1;
  assign valid_o = mult_valid | div_valid;
  assign \$auto$builder.cc:364:Unop$2853  = ~ div_by_zero_q;
  assign \$auto$builder.cc:364:Unop$2860  = ~ op_b_i;
  assign \$auto$builder.cc:364:Unop$2883  = ~ op_a_i;
  assign \$auto$builder.cc:364:Unop$2903  = ~ imd_val_q_i[31:0];
  assign \$auto$builder.cc:364:Unop$2925  = ~ imd_val_q_i[65:34];
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:95.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) op_quotient_q <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10909 ) op_quotient_q <= { \$auto$wreduce.cc:513:run$10743 [31:28], op_quotient_d };
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:95.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) op_numerator_q <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10912 ) op_numerator_q <= \$auto$rtlil.cc:2874:Mux$2881 ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:95.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) md_state_q <= 3'h0;
    else if (div_en_i) md_state_q <= md_state_d;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:359.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_mult_fast.mult_state_q  <= 2'h0;
    else if (mult_en_i) \gen_mult_fast.mult_state_q  <= \gen_mult_fast.mult_state_d ;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:95.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) div_counter_q <= 5'h00;
    else if (div_en_i) div_counter_q <= div_counter_d;
  (* src = "../rtl/cve2/cve2_multdiv_fast.sv:95.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) div_by_zero_q <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10918 ) div_by_zero_q <= equal_to_zero_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$10907  = | { \$procmux$3435_CMP , \$procmux$3433_CMP  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10909  = & { \$auto$opt_dff.cc:194:make_patterns_logic$10907 , div_en_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10912  = & { \$procmux$3435_CMP , div_en_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10918  = & { \$procmux$3437_CMP , \$auto$builder.cc:338:Biop$2862 , div_en_i };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10665  = | { \$procmux$3433_CMP , \$procmux$3425_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10669  = | { \$procmux$3437_CMP , \$procmux$3435_CMP , \$procmux$3434_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10679  = | { \$procmux$3616_CMP , \$procmux$3611_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10671  = | { \$procmux$3611_CMP , \$procmux$3609_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$10675  = | { \$procmux$3611_CMP , \$procmux$3579_CMP  };
  assign imd_val_d_o[67:34] = div_sel_i ? op_remainder_d : mac_res_d;
  assign multdiv_result_o = div_sel_i ? imd_val_q_i[65:34] : mac_res_d[31:0];
  assign { \$auto$wreduce.cc:513:run$10742 [31:20], next_remainder } = is_greater_equal ? alu_adder_ext_i[32:1] : imd_val_q_i[65:34];
  assign next_quotient = is_greater_equal ? \$auto$builder.cc:338:Biop$2831  : op_quotient_q;
  assign { \$auto$rtlil.cc:2874:Mux$2868 [2], \$auto$rtlil.cc:2874:Mux$2868 [0] } = equal_to_zero_i ? 2'h2 : 2'h1;
  assign \$auto$rtlil.cc:2874:Mux$2881  = div_sign_a ? alu_adder_i : op_a_i;
  assign \$auto$rtlil.cc:2874:Mux$2887  = div_sign_b ? alu_adder_i : op_b_i;
  assign \$auto$rtlil.cc:2874:Mux$2901 [2:1] = \$auto$builder.cc:338:Biop$2897  ? 2'h2 : 2'h1;
  assign \$auto$rtlil.cc:2874:Mux$2918  = div_change_sign ? { 2'h0, alu_adder_i } : imd_val_q_i[67:34];
  assign \$auto$rtlil.cc:2874:Mux$2922  = div_sign_a ? { 2'h0, alu_adder_i } : imd_val_q_i[67:34];
  assign \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2923  = \$auto$builder.cc:338:Biop$2862  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:495.11-495.85|../rtl/cve2/cve2_multdiv_fast.sv:494.9-498.12" *) \$auto$rtlil.cc:2874:Mux$2918  : \$auto$rtlil.cc:2874:Mux$2922 ;
  assign \$procmux$3417_CMP  = md_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:492.23-502.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) 3'h5;
  assign \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2908  = \$auto$builder.cc:338:Biop$2862  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:480.11-480.50|../rtl/cve2/cve2_multdiv_fast.sv:477.9-484.12" *) next_quotient : { \$auto$wreduce.cc:513:run$10742 [31:20], next_remainder };
  assign \$procmux$3425_CMP  = md_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:476.16-490.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) 3'h4;
  function [2:0] \$procmux$3429 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_multdiv_fast.sv:492.23-502.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$3429  = b[2:0];
      6'b????1?:
        \$procmux$3429  = b[5:3];
      6'b???1??:
        \$procmux$3429  = b[8:6];
      6'b??1???:
        \$procmux$3429  = b[11:9];
      6'b?1????:
        \$procmux$3429  = b[14:12];
      6'b1?????:
        \$procmux$3429  = b[17:15];
      default:
        \$procmux$3429  = a;
    endcase
  endfunction
  assign md_state_d = \$procmux$3429 (3'h0, { \$auto$rtlil.cc:2874:Mux$2868 [2], \$auto$rtlil.cc:2874:Mux$2868 [2], \$auto$rtlil.cc:2874:Mux$2868 [0], 6'h13, \$auto$rtlil.cc:2874:Mux$2901 [2:1], \$auto$rtlil.cc:2874:Mux$2901 [1], 6'h2e }, { \$procmux$3437_CMP , \$procmux$3435_CMP , \$procmux$3434_CMP , \$procmux$3433_CMP , \$procmux$3425_CMP , \$procmux$3417_CMP  });
  assign \$procmux$3433_CMP  = md_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:467.16-474.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) 2'h3;
  assign \$procmux$3434_CMP  = md_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:455.17-465.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) 2'h2;
  assign \$procmux$3435_CMP  = md_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:443.17-453.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) 1'h1;
  assign \$procmux$3437_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:416.16-441.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) md_state_q;
  assign div_counter_d = \$auto$opt_reduce.cc:137:opt_pmux$10669  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:455.17-465.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) 5'h1f : \$auto$builder.cc:338:Biop$2858 ;
  function [33:0] \$procmux$3465 ;
    input [33:0] a;
    input [169:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_multdiv_fast.sv:492.23-502.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$3465  = b[33:0];
      5'b???1?:
        \$procmux$3465  = b[67:34];
      5'b??1??:
        \$procmux$3465  = b[101:68];
      5'b?1???:
        \$procmux$3465  = b[135:102];
      5'b1????:
        \$procmux$3465  = b[169:136];
      default:
        \$procmux$3465  = a;
    endcase
  endfunction
  assign op_remainder_d = \$procmux$3465 (imd_val_q_i[67:34], { \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2873 [33], \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2873 [33], \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2873 [31:0], 33'h000000000, op_numerator_q[31], 1'h0, \$auto$wreduce.cc:513:run$10742 [31:20], next_remainder, \$auto$rtlil.cc:2874:Mux$2895 , 2'h0, \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2908 , \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2923  }, { \$procmux$3437_CMP , \$procmux$3434_CMP , \$procmux$3433_CMP , \$procmux$3425_CMP , \$procmux$3417_CMP  });
  function [31:0] \$procmux$3476 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_multdiv_fast.sv:492.23-502.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3476  = b[31:0];
      3'b?1?:
        \$procmux$3476  = b[63:32];
      3'b1??:
        \$procmux$3476  = b[95:64];
      default:
        \$procmux$3476  = a;
    endcase
  endfunction
  assign alu_operand_b_o[32:1] = \$procmux$3476 (\$auto$builder.cc:364:Unop$2860 , { \$auto$builder.cc:364:Unop$2883 , \$auto$builder.cc:364:Unop$2903 , \$auto$builder.cc:364:Unop$2925  }, { \$procmux$3435_CMP , \$auto$opt_reduce.cc:137:opt_pmux$10665 , \$procmux$3417_CMP  });
  assign alu_operand_a_o[32:1] = \$auto$opt_reduce.cc:137:opt_pmux$10665  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:476.16-490.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) imd_val_q_i[65:34] : 32'd0;
  assign { \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2873 [33], \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2873 [31:0] } = \$auto$builder.cc:338:Biop$2862  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:417.38-428.12|../rtl/cve2/cve2_multdiv_fast.sv:417.9-436.12" *) 33'h1ffffffff : { 1'h0, op_a_i };
  assign div_valid = md_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:504.18-510.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) 3'h6;
  assign { \$auto$wreduce.cc:513:run$10743 [31:28], op_quotient_d } = \$procmux$3433_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:467.16-474.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) next_quotient : 32'd0;
  assign op_denominator_d = \$procmux$3434_CMP  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:455.17-465.10|../rtl/cve2/cve2_multdiv_fast.sv:415.5-515.12" *) \$auto$rtlil.cc:2874:Mux$2887  : imd_val_q_i[31:0];
  assign is_greater_equal = \$auto$builder.cc:338:Biop$2838  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:390.7-390.52|../rtl/cve2/cve2_multdiv_fast.sv:389.5-393.8" *) imd_val_q_i[65] : \$auto$builder.cc:338:Biop$2844 ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_mult_fast.mult_state_d$2800  = ~ (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:321.41-329.14|../rtl/cve2/cve2_multdiv_fast.sv:321.11-333.14" *) \$auto$builder.cc:338:Biop$2786 ;
  assign \$procmux$3579_CMP  = \gen_mult_fast.mult_state_q  == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:315.15-334.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\mac_res_d$2789  = \$auto$builder.cc:338:Biop$2786  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:321.41-329.14|../rtl/cve2/cve2_multdiv_fast.sv:321.11-333.14" *) { 2'h0, mac_res[15:0], imd_val_q_i[49:34] } : mac_res;
  assign \$auto$slang_frontend.cc:694:finish$\accum$2796  = \$auto$builder.cc:338:Biop$2786  ? (* full_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:321.41-329.14|../rtl/cve2/cve2_multdiv_fast.sv:321.11-333.14" *) { 18'h00000, imd_val_q_i[65:50] } : imd_val_q_i[67:34];
  assign \$procmux$3609_CMP  = \gen_mult_fast.mult_state_q  == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:298.15-313.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) 1'h1;
  function [1:0] \$procmux$3610 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3610  = b[1:0];
      3'b?1?:
        \$procmux$3610  = b[3:2];
      3'b1??:
        \$procmux$3610  = b[5:4];
      default:
        \$procmux$3610  = a;
    endcase
  endfunction
  assign \gen_mult_fast.mult_state_d  = \$procmux$3610 (2'h1, { 2'h2, \$auto$slang_frontend.cc:694:finish$\gen_mult_fast.mult_state_d$2800 , \$auto$slang_frontend.cc:694:finish$\gen_mult_fast.mult_state_d$2800 , 2'h0 }, { \$procmux$3609_CMP , \$procmux$3579_CMP , \$procmux$3611_CMP  });
  assign \$procmux$3611_CMP  = \gen_mult_fast.mult_state_q  == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) 2'h3;
  assign \$procmux$3616_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:287.15-296.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) \gen_mult_fast.mult_state_q ;
  assign \gen_mult_fast.mult_op_b  = \$auto$opt_reduce.cc:137:opt_pmux$10671  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) op_b_i[31:16] : op_b_i[15:0];
  assign \gen_mult_fast.mult_op_a  = \$auto$opt_reduce.cc:137:opt_pmux$10675  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) op_a_i[31:16] : op_a_i[15:0];
  assign mac_res_d = \$auto$opt_reduce.cc:137:opt_pmux$10679  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) mac_res : \$auto$slang_frontend.cc:694:finish$\mac_res_d$2789 ;
  assign sign_b = \$auto$opt_reduce.cc:137:opt_pmux$10671  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) div_sign_b;
  assign sign_a = \$auto$opt_reduce.cc:137:opt_pmux$10675  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *) div_sign_a;
  function [33:0] \$procmux$3652 ;
    input [33:0] a;
    input [101:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3652  = b[33:0];
      3'b?1?:
        \$procmux$3652  = b[67:34];
      3'b1??:
        \$procmux$3652  = b[101:68];
      default:
        \$procmux$3652  = a;
    endcase
  endfunction
  assign accum = \$procmux$3652 (34'h000000000, { 18'h00000, imd_val_q_i[65:50], \$auto$slang_frontend.cc:694:finish$\accum$2796 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , \$auto$builder.cc:338:Biop$2806 , imd_val_q_i[67:50] }, { \$procmux$3609_CMP , \$procmux$3579_CMP , \$procmux$3611_CMP  });
  function [0:0] \$procmux$3663 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/cve2/cve2_multdiv_fast.sv:336.15-352.12|../rtl/cve2/cve2_multdiv_fast.sv:285.7-356.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$3663  = b[0:0];
      2'b1?:
        \$procmux$3663  = b[1:1];
      default:
        \$procmux$3663  = a;
    endcase
  endfunction
  assign mult_valid = \$procmux$3663 (1'h0, { \$auto$builder.cc:338:Biop$2786 , 1'h1 }, { \$procmux$3579_CMP , \$procmux$3611_CMP  });
  assign \$auto$booth.cc:330:WallaceSum$12474 [2:1] = { \$auto$booth.cc:330:WallaceSum$12474 [3], \$auto$booth.cc:330:WallaceSum$12474 [3] };
  assign \$auto$booth.cc:330:WallaceSum$12483 [0] = \$auto$booth.cc:292:run$10964 [0];
  assign \$auto$rtlil.cc:2874:Mux$2868 [1] = \$auto$rtlil.cc:2874:Mux$2868 [2];
  assign \$auto$rtlil.cc:2874:Mux$2901 [0] = \$auto$rtlil.cc:2874:Mux$2901 [1];
  assign \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2873 [32] = \$auto$slang_frontend.cc:694:finish$\op_remainder_d$2873 [33];
  assign \$auto$wreduce.cc:513:run$10742 [19:0] = next_remainder;
  assign \$auto$wreduce.cc:513:run$10743 [27:0] = op_quotient_d;
  assign alu_operand_a_o[0] = 1'h1;
  assign alu_operand_b_o[0] = 1'h1;
  assign \$auto$booth.cc:330:WallaceSum$12471 [34:26] = { \$auto$booth.cc:330:WallaceSum$12471 [35], \$auto$booth.cc:330:WallaceSum$12471 [35], \$auto$booth.cc:330:WallaceSum$12471 [35], \$auto$booth.cc:330:WallaceSum$12471 [35], \$auto$booth.cc:330:WallaceSum$12471 [35], \$auto$booth.cc:330:WallaceSum$12471 [35], \$auto$booth.cc:330:WallaceSum$12471 [35], \$auto$booth.cc:330:WallaceSum$12471 [35], \$auto$booth.cc:330:WallaceSum$12471 [35] };
  assign { \$auto$booth.cc:330:WallaceSum$12468 [11], \$auto$booth.cc:330:WallaceSum$12468 [9:0] } = { \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35] };
  assign imd_val_d_o[33:0] = { 2'h0, op_denominator_d };
  assign imd_val_we_o = { div_en_i, multdiv_en };
  assign { \$auto$booth.cc:330:WallaceSum$12465 [35:30], \$auto$booth.cc:330:WallaceSum$12465 [5], \$auto$booth.cc:330:WallaceSum$12465 [3:0] } = { \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [24], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35] };
  assign \$auto$booth.cc:330:WallaceSum$12462 [34:25] = { \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35], \$auto$booth.cc:330:WallaceSum$12462 [35] };
  assign \$auto$booth.cc:329:WallaceSum$12473 [2:1] = { \$auto$booth.cc:329:WallaceSum$12473 [3], \$auto$booth.cc:329:WallaceSum$12473 [3] };
  assign \$auto$booth.cc:329:WallaceSum$12470 [34:26] = { \$auto$booth.cc:329:WallaceSum$12470 [35], \$auto$booth.cc:329:WallaceSum$12470 [35], \$auto$booth.cc:329:WallaceSum$12470 [35], \$auto$booth.cc:329:WallaceSum$12470 [35], \$auto$booth.cc:329:WallaceSum$12470 [35], \$auto$booth.cc:329:WallaceSum$12470 [35], \$auto$booth.cc:329:WallaceSum$12470 [35], \$auto$booth.cc:329:WallaceSum$12470 [35], \$auto$booth.cc:329:WallaceSum$12470 [35] };
  assign { \$auto$booth.cc:329:WallaceSum$12467 [11], \$auto$booth.cc:329:WallaceSum$12467 [9:0] } = { \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35] };
  assign { \$auto$booth.cc:329:WallaceSum$12464 [35:30], \$auto$booth.cc:329:WallaceSum$12464 [5], \$auto$booth.cc:329:WallaceSum$12464 [3:0] } = { \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [24], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35] };
  assign \$auto$booth.cc:329:WallaceSum$12461 [34:25] = { \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35], \$auto$booth.cc:329:WallaceSum$12461 [35] };
  assign \$auto$rtlil.cc:2874:Mux$2895  = \$auto$bmuxmap.cc:84:execute$12654 ;
endmodule

(* src = "../rtl/cve2/cve2_prefetch_buffer.sv:12.8" *)
module \cve2_prefetch_buffer$cve2_core.if_stage_i.prefetch_buffer_i (clk_i, rst_ni, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, req_i, busy_o, branch_i, addr_i, ready_i, valid_o, rdata_o, addr_o, err_o, err_plus2_o);
  wire [1:0] \$auto$builder.cc:338:Biop$1580 ;
  wire \$auto$builder.cc:338:Biop$1586 ;
  wire \$auto$builder.cc:338:Biop$1588 ;
  wire \$auto$builder.cc:338:Biop$1600 ;
  wire \$auto$builder.cc:338:Biop$1606 ;
  wire \$auto$builder.cc:338:Biop$1652 ;
  wire \$auto$builder.cc:338:Biop$1658 ;
  wire \$auto$builder.cc:338:Biop$1660 ;
  wire \$auto$builder.cc:338:Biop$1662 ;
  wire \$auto$builder.cc:338:Biop$1668 ;
  wire \$auto$builder.cc:338:Biop$1676 ;
  wire \$auto$builder.cc:338:Biop$1678 ;
  wire \$auto$builder.cc:338:Biop$1680 ;
  wire \$auto$builder.cc:364:Unop$1576 ;
  wire \$auto$builder.cc:364:Unop$1582 ;
  wire \$auto$builder.cc:364:Unop$1590 ;
  wire \$auto$builder.cc:364:Unop$1596 ;
  wire \$auto$builder.cc:364:Unop$1604 ;
  wire \$auto$builder.cc:364:Unop$1692 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$10923 ;
  wire [31:0] \$auto$rtlil.cc:2874:Mux$1628 ;
  wire [31:0] \$auto$rtlil.cc:2874:Mux$1648 ;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:20.23" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:26.23" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:48.24" *)
  wire [1:0] branch_discard_n;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:48.60" *)
  reg [1:0] branch_discard_q;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:48.42" *)
  wire [1:0] branch_discard_s;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:19.23" *)
  input branch_i;
  wire branch_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:39.23" *)
  output busy_o;
  wire busy_o;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:14.23" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:46.24" *)
  wire discard_req_d;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:46.39" *)
  reg discard_req_q;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:27.23" *)
  output err_o;
  wire err_o;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:28.23" *)
  output err_plus2_o;
  wire err_plus2_o;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:53.24" *)
  wire [31:0] fetch_addr_d;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:54.24" *)
  wire fetch_addr_en;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:53.38" *)
  reg [31:0] fetch_addr_q;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:61.24" *)
  wire [1:0] fifo_busy;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:59.24" *)
  wire fifo_ready;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:57.24" *)
  wire fifo_valid;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:55.24" *)
  (* unused_bits = "0 1" *)
  wire [31:0] instr_addr;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:33.23" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:35.23" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:32.23" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:34.23" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:31.23" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:36.23" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:25.23" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:47.24" *)
  wire [1:0] rdata_outstanding_n;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:47.66" *)
  reg [1:0] rdata_outstanding_q;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:47.45" *)
  wire [1:0] rdata_outstanding_s;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:23.23" *)
  input ready_i;
  wire ready_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:17.23" *)
  input req_i;
  wire req_i;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:15.23" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:52.24" *)
  wire stored_addr_en;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:51.39" *)
  reg [31:0] stored_addr_q;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:44.24" *)
  wire valid_new_req;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:24.23" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:45.24" *)
  wire valid_req_d;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:45.37" *)
  reg valid_req_q;
  assign fifo_ready = ! \$auto$builder.cc:364:Unop$1582 ;
  assign busy_o = \$auto$builder.cc:364:Unop$1576  | instr_req_o;
  assign \$auto$builder.cc:338:Biop$1580  = fifo_busy | { rdata_outstanding_q[0], rdata_outstanding_q[1] };
  assign \$auto$builder.cc:338:Biop$1586  = fifo_ready | branch_i;
  assign \$auto$builder.cc:338:Biop$1588  = req_i & \$auto$builder.cc:338:Biop$1586 ;
  assign valid_new_req = \$auto$builder.cc:338:Biop$1588  & \$auto$builder.cc:364:Unop$1590 ;
  assign instr_req_o = valid_req_q | valid_new_req;
  assign valid_req_d = instr_req_o & \$auto$builder.cc:364:Unop$1596 ;
  assign \$auto$builder.cc:338:Biop$1600  = branch_i | discard_req_q;
  assign discard_req_d = valid_req_q & \$auto$builder.cc:338:Biop$1600 ;
  assign \$auto$builder.cc:338:Biop$1606  = valid_new_req & \$auto$builder.cc:364:Unop$1604 ;
  assign stored_addr_en = \$auto$builder.cc:338:Biop$1606  & \$auto$builder.cc:364:Unop$1596 ;
  assign fetch_addr_en = branch_i | \$auto$builder.cc:338:Biop$1606 ;
  assign fetch_addr_d[31:2] = \$auto$rtlil.cc:2874:Mux$1628 [31:2] + \$auto$builder.cc:338:Biop$1606 ;
  assign \$auto$builder.cc:338:Biop$1652  = instr_req_o & instr_gnt_i;
  assign rdata_outstanding_n[0] = \$auto$builder.cc:338:Biop$1652  | rdata_outstanding_q[0];
  assign \$auto$builder.cc:338:Biop$1658  = \$auto$builder.cc:338:Biop$1652  & discard_req_d;
  assign \$auto$builder.cc:338:Biop$1660  = branch_i & rdata_outstanding_q[0];
  assign \$auto$builder.cc:338:Biop$1662  = \$auto$builder.cc:338:Biop$1658  | \$auto$builder.cc:338:Biop$1660 ;
  assign branch_discard_n[0] = \$auto$builder.cc:338:Biop$1662  | branch_discard_q[0];
  assign \$auto$builder.cc:338:Biop$1668  = \$auto$builder.cc:338:Biop$1652  & rdata_outstanding_q[0];
  assign rdata_outstanding_n[1] = \$auto$builder.cc:338:Biop$1668  | rdata_outstanding_q[1];
  assign \$auto$builder.cc:338:Biop$1676  = \$auto$builder.cc:338:Biop$1658  & rdata_outstanding_q[0];
  assign \$auto$builder.cc:338:Biop$1678  = branch_i & rdata_outstanding_q[1];
  assign \$auto$builder.cc:338:Biop$1680  = \$auto$builder.cc:338:Biop$1676  | \$auto$builder.cc:338:Biop$1678 ;
  assign branch_discard_n[1] = \$auto$builder.cc:338:Biop$1680  | branch_discard_q[1];
  assign fifo_valid = instr_rvalid_i & \$auto$builder.cc:364:Unop$1692 ;
  assign \$auto$builder.cc:364:Unop$1576  = | rdata_outstanding_q;
  assign \$auto$builder.cc:364:Unop$1582  = & \$auto$builder.cc:338:Biop$1580 ;
  assign \$auto$builder.cc:364:Unop$1590  = ~ rdata_outstanding_q[1];
  assign \$auto$builder.cc:364:Unop$1596  = ~ instr_gnt_i;
  assign \$auto$builder.cc:364:Unop$1604  = ~ valid_req_q;
  assign \$auto$builder.cc:364:Unop$1692  = ~ branch_discard_q[0];
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) stored_addr_q[1:0] <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$10923 ) stored_addr_q[1:0] <= \$auto$rtlil.cc:2874:Mux$1648 [1:0];
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:151.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) stored_addr_q[31:2] <= 30'h00000000;
    else if (stored_addr_en) stored_addr_q[31:2] <= instr_addr[31:2];
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:168.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) fetch_addr_q <= 32'd0;
    else if (fetch_addr_en) fetch_addr_q <= fetch_addr_d;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$10923  = & { \$auto$builder.cc:364:Unop$1604 , stored_addr_en };
  assign { \$auto$rtlil.cc:2874:Mux$1628 [31:2], fetch_addr_d[1:0] } = branch_i ? addr_i : { fetch_addr_q[31:2], 2'h0 };
  assign \$auto$rtlil.cc:2874:Mux$1648  = branch_i ? addr_i : fetch_addr_q;
  assign instr_addr = valid_req_q ? stored_addr_q : \$auto$rtlil.cc:2874:Mux$1648 ;
  assign rdata_outstanding_s = instr_rvalid_i ? { 1'h0, rdata_outstanding_n[1] } : rdata_outstanding_n;
  assign branch_discard_s = instr_rvalid_i ? { 1'h0, branch_discard_n[1] } : branch_discard_n;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_discard_q <= 2'h0;
    else branch_discard_q <= branch_discard_s;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) discard_req_q <= 1'h0;
    else discard_req_q <= discard_req_d;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_outstanding_q <= 2'h0;
    else rdata_outstanding_q <= rdata_outstanding_s;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:229.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) valid_req_q <= 1'h0;
    else valid_req_q <= valid_req_d;
  (* src = "../rtl/cve2/cve2_prefetch_buffer.sv:92.5" *)
  \cve2_fetch_fifo$cve2_core.if_stage_i.prefetch_buffer_i.fifo_i  fifo_i (
    .busy_o(fifo_busy),
    .clear_i(branch_i),
    .clk_i(clk_i),
    .in_addr_i(addr_i),
    .in_err_i(instr_err_i),
    .in_rdata_i(instr_rdata_i),
    .in_valid_i(fifo_valid),
    .out_addr_o(addr_o),
    .out_err_o(err_o),
    .out_err_plus2_o(err_plus2_o),
    .out_rdata_o(rdata_o),
    .out_ready_i(ready_i),
    .out_valid_o(valid_o),
    .rst_ni(rst_ni)
  );
  assign \$auto$rtlil.cc:2874:Mux$1628 [1:0] = fetch_addr_d[1:0];
  assign instr_addr_o = { instr_addr[31:2], 2'h0 };
endmodule

(* src = "../rtl/cve2/cve2_register_file_ff.sv:13.8" *)
module \cve2_register_file_ff$cve2_core.register_file_i (clk_i, rst_ni, test_en_i, raddr_a_i, rdata_a_o, raddr_b_i, rdata_b_o, waddr_a_i, wdata_a_i, we_a_i);
  wire [511:0] \$auto$bmuxmap.cc:84:execute$12656 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$12673 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$12682 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$12687 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$12690 ;
  wire [511:0] \$auto$bmuxmap.cc:84:execute$12692 ;
  wire [255:0] \$auto$bmuxmap.cc:84:execute$12709 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$12718 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$12723 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$12726 ;
  wire \$auto$builder.cc:338:Biop$699 ;
  wire \$auto$builder.cc:338:Biop$706 ;
  wire \$auto$builder.cc:338:Biop$713 ;
  wire \$auto$builder.cc:338:Biop$720 ;
  wire \$auto$builder.cc:338:Biop$727 ;
  wire \$auto$builder.cc:338:Biop$734 ;
  wire \$auto$builder.cc:338:Biop$741 ;
  wire \$auto$builder.cc:338:Biop$748 ;
  wire \$auto$builder.cc:338:Biop$755 ;
  wire \$auto$builder.cc:338:Biop$762 ;
  wire \$auto$builder.cc:338:Biop$769 ;
  wire \$auto$builder.cc:338:Biop$776 ;
  wire \$auto$builder.cc:338:Biop$783 ;
  wire \$auto$builder.cc:338:Biop$790 ;
  wire \$auto$builder.cc:338:Biop$797 ;
  wire \$auto$builder.cc:338:Biop$804 ;
  wire \$auto$builder.cc:338:Biop$811 ;
  wire \$auto$builder.cc:338:Biop$818 ;
  wire \$auto$builder.cc:338:Biop$825 ;
  wire \$auto$builder.cc:338:Biop$832 ;
  wire \$auto$builder.cc:338:Biop$839 ;
  wire \$auto$builder.cc:338:Biop$846 ;
  wire \$auto$builder.cc:338:Biop$853 ;
  wire \$auto$builder.cc:338:Biop$860 ;
  wire \$auto$builder.cc:338:Biop$867 ;
  wire \$auto$builder.cc:338:Biop$874 ;
  wire \$auto$builder.cc:338:Biop$881 ;
  wire \$auto$builder.cc:338:Biop$888 ;
  wire \$auto$builder.cc:338:Biop$895 ;
  wire \$auto$builder.cc:338:Biop$902 ;
  wire \$auto$builder.cc:338:Biop$909 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:19.32" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:25.32" *)
  input [4:0] raddr_a_i;
  wire [4:0] raddr_a_i;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:29.32" *)
  input [4:0] raddr_b_i;
  wire [4:0] raddr_b_i;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:26.32" *)
  output [31:0] rdata_a_o;
  wire [31:0] rdata_a_o;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:30.32" *)
  output [31:0] rdata_b_o;
  wire [31:0] rdata_b_o;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:43.40" *)
  wire [1023:0] rf_reg;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:20.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:22.32" *)
  input test_en_i;
  wire test_en_i;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:34.32" *)
  input [4:0] waddr_a_i;
  wire [4:0] waddr_a_i;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:35.32" *)
  input [31:0] wdata_a_i;
  wire [31:0] wdata_a_i;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:45.40" *)
  wire [30:0] we_a_dec;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:36.32" *)
  input we_a_i;
  wire we_a_i;
  assign \$auto$bmuxmap.cc:84:execute$12656 [31:0] = raddr_a_i[0] ? rf_reg[63:32] : 32'd0;
  assign \$auto$bmuxmap.cc:84:execute$12656 [63:32] = raddr_a_i[0] ? rf_reg[127:96] : rf_reg[95:64];
  assign \$auto$bmuxmap.cc:84:execute$12656 [95:64] = raddr_a_i[0] ? rf_reg[191:160] : rf_reg[159:128];
  assign \$auto$bmuxmap.cc:84:execute$12656 [127:96] = raddr_a_i[0] ? rf_reg[255:224] : rf_reg[223:192];
  assign \$auto$bmuxmap.cc:84:execute$12656 [159:128] = raddr_a_i[0] ? rf_reg[319:288] : rf_reg[287:256];
  assign \$auto$bmuxmap.cc:84:execute$12656 [191:160] = raddr_a_i[0] ? rf_reg[383:352] : rf_reg[351:320];
  assign \$auto$bmuxmap.cc:84:execute$12656 [223:192] = raddr_a_i[0] ? rf_reg[447:416] : rf_reg[415:384];
  assign \$auto$bmuxmap.cc:84:execute$12656 [255:224] = raddr_a_i[0] ? rf_reg[511:480] : rf_reg[479:448];
  assign \$auto$bmuxmap.cc:84:execute$12656 [287:256] = raddr_a_i[0] ? rf_reg[575:544] : rf_reg[543:512];
  assign \$auto$bmuxmap.cc:84:execute$12656 [319:288] = raddr_a_i[0] ? rf_reg[639:608] : rf_reg[607:576];
  assign \$auto$bmuxmap.cc:84:execute$12656 [351:320] = raddr_a_i[0] ? rf_reg[703:672] : rf_reg[671:640];
  assign \$auto$bmuxmap.cc:84:execute$12656 [383:352] = raddr_a_i[0] ? rf_reg[767:736] : rf_reg[735:704];
  assign \$auto$bmuxmap.cc:84:execute$12656 [415:384] = raddr_a_i[0] ? rf_reg[831:800] : rf_reg[799:768];
  assign \$auto$bmuxmap.cc:84:execute$12656 [447:416] = raddr_a_i[0] ? rf_reg[895:864] : rf_reg[863:832];
  assign \$auto$bmuxmap.cc:84:execute$12656 [479:448] = raddr_a_i[0] ? rf_reg[959:928] : rf_reg[927:896];
  assign \$auto$bmuxmap.cc:84:execute$12656 [511:480] = raddr_a_i[0] ? rf_reg[1023:992] : rf_reg[991:960];
  assign \$auto$bmuxmap.cc:84:execute$12673 [31:0] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$12656 [63:32] : \$auto$bmuxmap.cc:84:execute$12656 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$12673 [63:32] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$12656 [127:96] : \$auto$bmuxmap.cc:84:execute$12656 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$12673 [95:64] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$12656 [191:160] : \$auto$bmuxmap.cc:84:execute$12656 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$12673 [127:96] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$12656 [255:224] : \$auto$bmuxmap.cc:84:execute$12656 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$12673 [159:128] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$12656 [319:288] : \$auto$bmuxmap.cc:84:execute$12656 [287:256];
  assign \$auto$bmuxmap.cc:84:execute$12673 [191:160] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$12656 [383:352] : \$auto$bmuxmap.cc:84:execute$12656 [351:320];
  assign \$auto$bmuxmap.cc:84:execute$12673 [223:192] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$12656 [447:416] : \$auto$bmuxmap.cc:84:execute$12656 [415:384];
  assign \$auto$bmuxmap.cc:84:execute$12673 [255:224] = raddr_a_i[1] ? \$auto$bmuxmap.cc:84:execute$12656 [511:480] : \$auto$bmuxmap.cc:84:execute$12656 [479:448];
  assign \$auto$bmuxmap.cc:84:execute$12682 [31:0] = raddr_a_i[2] ? \$auto$bmuxmap.cc:84:execute$12673 [63:32] : \$auto$bmuxmap.cc:84:execute$12673 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$12682 [63:32] = raddr_a_i[2] ? \$auto$bmuxmap.cc:84:execute$12673 [127:96] : \$auto$bmuxmap.cc:84:execute$12673 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$12682 [95:64] = raddr_a_i[2] ? \$auto$bmuxmap.cc:84:execute$12673 [191:160] : \$auto$bmuxmap.cc:84:execute$12673 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$12682 [127:96] = raddr_a_i[2] ? \$auto$bmuxmap.cc:84:execute$12673 [255:224] : \$auto$bmuxmap.cc:84:execute$12673 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$12687 [31:0] = raddr_a_i[3] ? \$auto$bmuxmap.cc:84:execute$12682 [63:32] : \$auto$bmuxmap.cc:84:execute$12682 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$12687 [63:32] = raddr_a_i[3] ? \$auto$bmuxmap.cc:84:execute$12682 [127:96] : \$auto$bmuxmap.cc:84:execute$12682 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$12690  = raddr_a_i[4] ? \$auto$bmuxmap.cc:84:execute$12687 [63:32] : \$auto$bmuxmap.cc:84:execute$12687 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$12692 [31:0] = raddr_b_i[0] ? rf_reg[63:32] : 32'd0;
  assign \$auto$bmuxmap.cc:84:execute$12692 [63:32] = raddr_b_i[0] ? rf_reg[127:96] : rf_reg[95:64];
  assign \$auto$bmuxmap.cc:84:execute$12692 [95:64] = raddr_b_i[0] ? rf_reg[191:160] : rf_reg[159:128];
  assign \$auto$bmuxmap.cc:84:execute$12692 [127:96] = raddr_b_i[0] ? rf_reg[255:224] : rf_reg[223:192];
  assign \$auto$bmuxmap.cc:84:execute$12692 [159:128] = raddr_b_i[0] ? rf_reg[319:288] : rf_reg[287:256];
  assign \$auto$bmuxmap.cc:84:execute$12692 [191:160] = raddr_b_i[0] ? rf_reg[383:352] : rf_reg[351:320];
  assign \$auto$bmuxmap.cc:84:execute$12692 [223:192] = raddr_b_i[0] ? rf_reg[447:416] : rf_reg[415:384];
  assign \$auto$bmuxmap.cc:84:execute$12692 [255:224] = raddr_b_i[0] ? rf_reg[511:480] : rf_reg[479:448];
  assign \$auto$bmuxmap.cc:84:execute$12692 [287:256] = raddr_b_i[0] ? rf_reg[575:544] : rf_reg[543:512];
  assign \$auto$bmuxmap.cc:84:execute$12692 [319:288] = raddr_b_i[0] ? rf_reg[639:608] : rf_reg[607:576];
  assign \$auto$bmuxmap.cc:84:execute$12692 [351:320] = raddr_b_i[0] ? rf_reg[703:672] : rf_reg[671:640];
  assign \$auto$bmuxmap.cc:84:execute$12692 [383:352] = raddr_b_i[0] ? rf_reg[767:736] : rf_reg[735:704];
  assign \$auto$bmuxmap.cc:84:execute$12692 [415:384] = raddr_b_i[0] ? rf_reg[831:800] : rf_reg[799:768];
  assign \$auto$bmuxmap.cc:84:execute$12692 [447:416] = raddr_b_i[0] ? rf_reg[895:864] : rf_reg[863:832];
  assign \$auto$bmuxmap.cc:84:execute$12692 [479:448] = raddr_b_i[0] ? rf_reg[959:928] : rf_reg[927:896];
  assign \$auto$bmuxmap.cc:84:execute$12692 [511:480] = raddr_b_i[0] ? rf_reg[1023:992] : rf_reg[991:960];
  assign \$auto$bmuxmap.cc:84:execute$12709 [31:0] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$12692 [63:32] : \$auto$bmuxmap.cc:84:execute$12692 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$12709 [63:32] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$12692 [127:96] : \$auto$bmuxmap.cc:84:execute$12692 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$12709 [95:64] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$12692 [191:160] : \$auto$bmuxmap.cc:84:execute$12692 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$12709 [127:96] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$12692 [255:224] : \$auto$bmuxmap.cc:84:execute$12692 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$12709 [159:128] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$12692 [319:288] : \$auto$bmuxmap.cc:84:execute$12692 [287:256];
  assign \$auto$bmuxmap.cc:84:execute$12709 [191:160] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$12692 [383:352] : \$auto$bmuxmap.cc:84:execute$12692 [351:320];
  assign \$auto$bmuxmap.cc:84:execute$12709 [223:192] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$12692 [447:416] : \$auto$bmuxmap.cc:84:execute$12692 [415:384];
  assign \$auto$bmuxmap.cc:84:execute$12709 [255:224] = raddr_b_i[1] ? \$auto$bmuxmap.cc:84:execute$12692 [511:480] : \$auto$bmuxmap.cc:84:execute$12692 [479:448];
  assign \$auto$bmuxmap.cc:84:execute$12718 [31:0] = raddr_b_i[2] ? \$auto$bmuxmap.cc:84:execute$12709 [63:32] : \$auto$bmuxmap.cc:84:execute$12709 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$12718 [63:32] = raddr_b_i[2] ? \$auto$bmuxmap.cc:84:execute$12709 [127:96] : \$auto$bmuxmap.cc:84:execute$12709 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$12718 [95:64] = raddr_b_i[2] ? \$auto$bmuxmap.cc:84:execute$12709 [191:160] : \$auto$bmuxmap.cc:84:execute$12709 [159:128];
  assign \$auto$bmuxmap.cc:84:execute$12718 [127:96] = raddr_b_i[2] ? \$auto$bmuxmap.cc:84:execute$12709 [255:224] : \$auto$bmuxmap.cc:84:execute$12709 [223:192];
  assign \$auto$bmuxmap.cc:84:execute$12723 [31:0] = raddr_b_i[3] ? \$auto$bmuxmap.cc:84:execute$12718 [63:32] : \$auto$bmuxmap.cc:84:execute$12718 [31:0];
  assign \$auto$bmuxmap.cc:84:execute$12723 [63:32] = raddr_b_i[3] ? \$auto$bmuxmap.cc:84:execute$12718 [127:96] : \$auto$bmuxmap.cc:84:execute$12718 [95:64];
  assign \$auto$bmuxmap.cc:84:execute$12726  = raddr_b_i[4] ? \$auto$bmuxmap.cc:84:execute$12723 [63:32] : \$auto$bmuxmap.cc:84:execute$12723 [31:0];
  assign \$auto$builder.cc:338:Biop$699  = waddr_a_i == 1'h1;
  assign \$auto$builder.cc:338:Biop$706  = waddr_a_i == 2'h2;
  assign \$auto$builder.cc:338:Biop$713  = waddr_a_i == 2'h3;
  assign \$auto$builder.cc:338:Biop$720  = waddr_a_i == 3'h4;
  assign \$auto$builder.cc:338:Biop$727  = waddr_a_i == 3'h5;
  assign \$auto$builder.cc:338:Biop$734  = waddr_a_i == 3'h6;
  assign \$auto$builder.cc:338:Biop$741  = waddr_a_i == 3'h7;
  assign \$auto$builder.cc:338:Biop$748  = waddr_a_i == 4'h8;
  assign \$auto$builder.cc:338:Biop$755  = waddr_a_i == 4'h9;
  assign \$auto$builder.cc:338:Biop$762  = waddr_a_i == 4'ha;
  assign \$auto$builder.cc:338:Biop$769  = waddr_a_i == 4'hb;
  assign \$auto$builder.cc:338:Biop$776  = waddr_a_i == 4'hc;
  assign \$auto$builder.cc:338:Biop$783  = waddr_a_i == 4'hd;
  assign \$auto$builder.cc:338:Biop$790  = waddr_a_i == 4'he;
  assign \$auto$builder.cc:338:Biop$797  = waddr_a_i == 4'hf;
  assign \$auto$builder.cc:338:Biop$804  = waddr_a_i == 5'h10;
  assign \$auto$builder.cc:338:Biop$811  = waddr_a_i == 5'h11;
  assign \$auto$builder.cc:338:Biop$818  = waddr_a_i == 5'h12;
  assign \$auto$builder.cc:338:Biop$825  = waddr_a_i == 5'h13;
  assign \$auto$builder.cc:338:Biop$832  = waddr_a_i == 5'h14;
  assign \$auto$builder.cc:338:Biop$839  = waddr_a_i == 5'h15;
  assign \$auto$builder.cc:338:Biop$846  = waddr_a_i == 5'h16;
  assign \$auto$builder.cc:338:Biop$853  = waddr_a_i == 5'h17;
  assign \$auto$builder.cc:338:Biop$860  = waddr_a_i == 5'h18;
  assign \$auto$builder.cc:338:Biop$867  = waddr_a_i == 5'h19;
  assign \$auto$builder.cc:338:Biop$874  = waddr_a_i == 5'h1a;
  assign \$auto$builder.cc:338:Biop$881  = waddr_a_i == 5'h1b;
  assign \$auto$builder.cc:338:Biop$888  = waddr_a_i == 5'h1c;
  assign \$auto$builder.cc:338:Biop$895  = waddr_a_i == 5'h1d;
  assign \$auto$builder.cc:338:Biop$902  = waddr_a_i == 5'h1e;
  assign \$auto$builder.cc:338:Biop$909  = waddr_a_i == 5'h1f;
  reg [31:0] \$auto$ff.cc:266:slice$10927 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10927  <= 32'd0;
    else if (we_a_dec[8]) \$auto$ff.cc:266:slice$10927  <= wdata_a_i;
  assign rf_reg[319:288] = \$auto$ff.cc:266:slice$10927 ;
  reg [31:0] \$auto$ff.cc:266:slice$10928 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10928  <= 32'd0;
    else if (we_a_dec[7]) \$auto$ff.cc:266:slice$10928  <= wdata_a_i;
  assign rf_reg[287:256] = \$auto$ff.cc:266:slice$10928 ;
  reg [31:0] \$auto$ff.cc:266:slice$10929 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10929  <= 32'd0;
    else if (we_a_dec[6]) \$auto$ff.cc:266:slice$10929  <= wdata_a_i;
  assign rf_reg[255:224] = \$auto$ff.cc:266:slice$10929 ;
  reg [31:0] \$auto$ff.cc:266:slice$10930 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10930  <= 32'd0;
    else if (we_a_dec[5]) \$auto$ff.cc:266:slice$10930  <= wdata_a_i;
  assign rf_reg[223:192] = \$auto$ff.cc:266:slice$10930 ;
  reg [31:0] \$auto$ff.cc:266:slice$10931 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10931  <= 32'd0;
    else if (we_a_dec[4]) \$auto$ff.cc:266:slice$10931  <= wdata_a_i;
  assign rf_reg[191:160] = \$auto$ff.cc:266:slice$10931 ;
  reg [31:0] \$auto$ff.cc:266:slice$10932 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10932  <= 32'd0;
    else if (we_a_dec[3]) \$auto$ff.cc:266:slice$10932  <= wdata_a_i;
  assign rf_reg[159:128] = \$auto$ff.cc:266:slice$10932 ;
  reg [31:0] \$auto$ff.cc:266:slice$10933 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10933  <= 32'd0;
    else if (we_a_dec[2]) \$auto$ff.cc:266:slice$10933  <= wdata_a_i;
  assign rf_reg[127:96] = \$auto$ff.cc:266:slice$10933 ;
  reg [31:0] \$auto$ff.cc:266:slice$10934 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10934  <= 32'd0;
    else if (we_a_dec[30]) \$auto$ff.cc:266:slice$10934  <= wdata_a_i;
  assign rf_reg[1023:992] = \$auto$ff.cc:266:slice$10934 ;
  reg [31:0] \$auto$ff.cc:266:slice$10935 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10935  <= 32'd0;
    else if (we_a_dec[29]) \$auto$ff.cc:266:slice$10935  <= wdata_a_i;
  assign rf_reg[991:960] = \$auto$ff.cc:266:slice$10935 ;
  reg [31:0] \$auto$ff.cc:266:slice$10936 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10936  <= 32'd0;
    else if (we_a_dec[1]) \$auto$ff.cc:266:slice$10936  <= wdata_a_i;
  assign rf_reg[95:64] = \$auto$ff.cc:266:slice$10936 ;
  reg [31:0] \$auto$ff.cc:266:slice$10937 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10937  <= 32'd0;
    else if (we_a_dec[28]) \$auto$ff.cc:266:slice$10937  <= wdata_a_i;
  assign rf_reg[959:928] = \$auto$ff.cc:266:slice$10937 ;
  reg [31:0] \$auto$ff.cc:266:slice$10938 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10938  <= 32'd0;
    else if (we_a_dec[27]) \$auto$ff.cc:266:slice$10938  <= wdata_a_i;
  assign rf_reg[927:896] = \$auto$ff.cc:266:slice$10938 ;
  reg [31:0] \$auto$ff.cc:266:slice$10939 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10939  <= 32'd0;
    else if (we_a_dec[26]) \$auto$ff.cc:266:slice$10939  <= wdata_a_i;
  assign rf_reg[895:864] = \$auto$ff.cc:266:slice$10939 ;
  reg [31:0] \$auto$ff.cc:266:slice$10940 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10940  <= 32'd0;
    else if (we_a_dec[25]) \$auto$ff.cc:266:slice$10940  <= wdata_a_i;
  assign rf_reg[863:832] = \$auto$ff.cc:266:slice$10940 ;
  reg [31:0] \$auto$ff.cc:266:slice$10941 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10941  <= 32'd0;
    else if (we_a_dec[24]) \$auto$ff.cc:266:slice$10941  <= wdata_a_i;
  assign rf_reg[831:800] = \$auto$ff.cc:266:slice$10941 ;
  reg [31:0] \$auto$ff.cc:266:slice$10942 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10942  <= 32'd0;
    else if (we_a_dec[23]) \$auto$ff.cc:266:slice$10942  <= wdata_a_i;
  assign rf_reg[799:768] = \$auto$ff.cc:266:slice$10942 ;
  reg [31:0] \$auto$ff.cc:266:slice$10943 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10943  <= 32'd0;
    else if (we_a_dec[22]) \$auto$ff.cc:266:slice$10943  <= wdata_a_i;
  assign rf_reg[767:736] = \$auto$ff.cc:266:slice$10943 ;
  reg [31:0] \$auto$ff.cc:266:slice$10944 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10944  <= 32'd0;
    else if (we_a_dec[21]) \$auto$ff.cc:266:slice$10944  <= wdata_a_i;
  assign rf_reg[735:704] = \$auto$ff.cc:266:slice$10944 ;
  reg [31:0] \$auto$ff.cc:266:slice$10945 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10945  <= 32'd0;
    else if (we_a_dec[20]) \$auto$ff.cc:266:slice$10945  <= wdata_a_i;
  assign rf_reg[703:672] = \$auto$ff.cc:266:slice$10945 ;
  reg [31:0] \$auto$ff.cc:266:slice$10946 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10946  <= 32'd0;
    else if (we_a_dec[19]) \$auto$ff.cc:266:slice$10946  <= wdata_a_i;
  assign rf_reg[671:640] = \$auto$ff.cc:266:slice$10946 ;
  reg [31:0] \$auto$ff.cc:266:slice$10947 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10947  <= 32'd0;
    else if (we_a_dec[0]) \$auto$ff.cc:266:slice$10947  <= wdata_a_i;
  assign rf_reg[63:32] = \$auto$ff.cc:266:slice$10947 ;
  reg [31:0] \$auto$ff.cc:266:slice$10948 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10948  <= 32'd0;
    else if (we_a_dec[18]) \$auto$ff.cc:266:slice$10948  <= wdata_a_i;
  assign rf_reg[639:608] = \$auto$ff.cc:266:slice$10948 ;
  reg [31:0] \$auto$ff.cc:266:slice$10949 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10949  <= 32'd0;
    else if (we_a_dec[17]) \$auto$ff.cc:266:slice$10949  <= wdata_a_i;
  assign rf_reg[607:576] = \$auto$ff.cc:266:slice$10949 ;
  reg [31:0] \$auto$ff.cc:266:slice$10950 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10950  <= 32'd0;
    else if (we_a_dec[16]) \$auto$ff.cc:266:slice$10950  <= wdata_a_i;
  assign rf_reg[575:544] = \$auto$ff.cc:266:slice$10950 ;
  reg [31:0] \$auto$ff.cc:266:slice$10951 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10951  <= 32'd0;
    else if (we_a_dec[15]) \$auto$ff.cc:266:slice$10951  <= wdata_a_i;
  assign rf_reg[543:512] = \$auto$ff.cc:266:slice$10951 ;
  reg [31:0] \$auto$ff.cc:266:slice$10952 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10952  <= 32'd0;
    else if (we_a_dec[14]) \$auto$ff.cc:266:slice$10952  <= wdata_a_i;
  assign rf_reg[511:480] = \$auto$ff.cc:266:slice$10952 ;
  reg [31:0] \$auto$ff.cc:266:slice$10953 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10953  <= 32'd0;
    else if (we_a_dec[13]) \$auto$ff.cc:266:slice$10953  <= wdata_a_i;
  assign rf_reg[479:448] = \$auto$ff.cc:266:slice$10953 ;
  reg [31:0] \$auto$ff.cc:266:slice$10954 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10954  <= 32'd0;
    else if (we_a_dec[12]) \$auto$ff.cc:266:slice$10954  <= wdata_a_i;
  assign rf_reg[447:416] = \$auto$ff.cc:266:slice$10954 ;
  reg [31:0] \$auto$ff.cc:266:slice$10955 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10955  <= 32'd0;
    else if (we_a_dec[11]) \$auto$ff.cc:266:slice$10955  <= wdata_a_i;
  assign rf_reg[415:384] = \$auto$ff.cc:266:slice$10955 ;
  reg [31:0] \$auto$ff.cc:266:slice$10956 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10956  <= 32'd0;
    else if (we_a_dec[10]) \$auto$ff.cc:266:slice$10956  <= wdata_a_i;
  assign rf_reg[383:352] = \$auto$ff.cc:266:slice$10956 ;
  reg [31:0] \$auto$ff.cc:266:slice$10957 ;
  (* src = "../rtl/cve2/cve2_register_file_ff.sv:55.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$10957  <= 32'd0;
    else if (we_a_dec[9]) \$auto$ff.cc:266:slice$10957  <= wdata_a_i;
  assign rf_reg[351:320] = \$auto$ff.cc:266:slice$10957 ;
  assign we_a_dec[0] = \$auto$builder.cc:338:Biop$699  & we_a_i;
  assign we_a_dec[1] = \$auto$builder.cc:338:Biop$706  & we_a_i;
  assign we_a_dec[2] = \$auto$builder.cc:338:Biop$713  & we_a_i;
  assign we_a_dec[3] = \$auto$builder.cc:338:Biop$720  & we_a_i;
  assign we_a_dec[4] = \$auto$builder.cc:338:Biop$727  & we_a_i;
  assign we_a_dec[5] = \$auto$builder.cc:338:Biop$734  & we_a_i;
  assign we_a_dec[6] = \$auto$builder.cc:338:Biop$741  & we_a_i;
  assign we_a_dec[7] = \$auto$builder.cc:338:Biop$748  & we_a_i;
  assign we_a_dec[8] = \$auto$builder.cc:338:Biop$755  & we_a_i;
  assign we_a_dec[9] = \$auto$builder.cc:338:Biop$762  & we_a_i;
  assign we_a_dec[10] = \$auto$builder.cc:338:Biop$769  & we_a_i;
  assign we_a_dec[11] = \$auto$builder.cc:338:Biop$776  & we_a_i;
  assign we_a_dec[12] = \$auto$builder.cc:338:Biop$783  & we_a_i;
  assign we_a_dec[13] = \$auto$builder.cc:338:Biop$790  & we_a_i;
  assign we_a_dec[14] = \$auto$builder.cc:338:Biop$797  & we_a_i;
  assign we_a_dec[15] = \$auto$builder.cc:338:Biop$804  & we_a_i;
  assign we_a_dec[16] = \$auto$builder.cc:338:Biop$811  & we_a_i;
  assign we_a_dec[17] = \$auto$builder.cc:338:Biop$818  & we_a_i;
  assign we_a_dec[18] = \$auto$builder.cc:338:Biop$825  & we_a_i;
  assign we_a_dec[19] = \$auto$builder.cc:338:Biop$832  & we_a_i;
  assign we_a_dec[20] = \$auto$builder.cc:338:Biop$839  & we_a_i;
  assign we_a_dec[21] = \$auto$builder.cc:338:Biop$846  & we_a_i;
  assign we_a_dec[22] = \$auto$builder.cc:338:Biop$853  & we_a_i;
  assign we_a_dec[23] = \$auto$builder.cc:338:Biop$860  & we_a_i;
  assign we_a_dec[24] = \$auto$builder.cc:338:Biop$867  & we_a_i;
  assign we_a_dec[25] = \$auto$builder.cc:338:Biop$874  & we_a_i;
  assign we_a_dec[26] = \$auto$builder.cc:338:Biop$881  & we_a_i;
  assign we_a_dec[27] = \$auto$builder.cc:338:Biop$888  & we_a_i;
  assign we_a_dec[28] = \$auto$builder.cc:338:Biop$895  & we_a_i;
  assign we_a_dec[29] = \$auto$builder.cc:338:Biop$902  & we_a_i;
  assign we_a_dec[30] = \$auto$builder.cc:338:Biop$909  & we_a_i;
  assign rf_reg[31:0] = 32'd0;
  assign rdata_a_o = \$auto$bmuxmap.cc:84:execute$12690 ;
  assign rdata_b_o = \$auto$bmuxmap.cc:84:execute$12726 ;
endmodule

(* src = "../rtl/cve2/cve2_wb.sv:14.8" *)
module \cve2_wb$cve2_core.wb_i (clk_i, rst_ni, lsu_resp_valid_i, en_wb_i, instr_is_compressed_id_i, instr_perf_count_id_i, perf_instr_ret_wb_o, perf_instr_ret_compressed_wb_o, rf_waddr_id_i, rf_wdata_id_i, rf_we_id_i, rf_wdata_lsu_i, rf_we_lsu_i, rf_waddr_wb_o, rf_wdata_wb_o, rf_we_wb_o, lsu_resp_err_i);
  wire \$auto$builder.cc:338:Biop$677 ;
  wire \$auto$builder.cc:338:Biop$679 ;
  wire [31:0] \$auto$builder.cc:338:Biop$687 ;
  wire [31:0] \$auto$builder.cc:338:Biop$689 ;
  wire \$auto$builder.cc:364:Unop$681 ;
  (* src = "../rtl/cve2/cve2_wb.sv:16.36" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_wb.sv:18.36" *)
  input en_wb_i;
  wire en_wb_i;
  (* src = "../rtl/cve2/cve2_wb.sv:20.36" *)
  input instr_is_compressed_id_i;
  wire instr_is_compressed_id_i;
  (* src = "../rtl/cve2/cve2_wb.sv:21.36" *)
  input instr_perf_count_id_i;
  wire instr_perf_count_id_i;
  (* src = "../rtl/cve2/cve2_wb.sv:38.36" *)
  input lsu_resp_err_i;
  wire lsu_resp_err_i;
  (* src = "../rtl/cve2/cve2_wb.sv:37.36" *)
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  (* src = "../rtl/cve2/cve2_wb.sv:24.36" *)
  output perf_instr_ret_compressed_wb_o;
  wire perf_instr_ret_compressed_wb_o;
  (* src = "../rtl/cve2/cve2_wb.sv:23.36" *)
  output perf_instr_ret_wb_o;
  wire perf_instr_ret_wb_o;
  (* src = "../rtl/cve2/cve2_wb.sv:26.36" *)
  input [4:0] rf_waddr_id_i;
  wire [4:0] rf_waddr_id_i;
  (* src = "../rtl/cve2/cve2_wb.sv:33.36" *)
  output [4:0] rf_waddr_wb_o;
  wire [4:0] rf_waddr_wb_o;
  (* src = "../rtl/cve2/cve2_wb.sv:27.36" *)
  input [31:0] rf_wdata_id_i;
  wire [31:0] rf_wdata_id_i;
  (* src = "../rtl/cve2/cve2_wb.sv:30.36" *)
  input [31:0] rf_wdata_lsu_i;
  wire [31:0] rf_wdata_lsu_i;
  (* src = "../rtl/cve2/cve2_wb.sv:34.36" *)
  output [31:0] rf_wdata_wb_o;
  wire [31:0] rf_wdata_wb_o;
  (* src = "../rtl/cve2/cve2_wb.sv:28.36" *)
  input rf_we_id_i;
  wire rf_we_id_i;
  (* src = "../rtl/cve2/cve2_wb.sv:31.36" *)
  input rf_we_lsu_i;
  wire rf_we_lsu_i;
  (* src = "../rtl/cve2/cve2_wb.sv:35.36" *)
  output rf_we_wb_o;
  wire rf_we_wb_o;
  (* src = "../rtl/cve2/cve2_wb.sv:17.36" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$677  = instr_perf_count_id_i & en_wb_i;
  assign \$auto$builder.cc:338:Biop$679  = lsu_resp_valid_i & lsu_resp_err_i;
  assign perf_instr_ret_wb_o = \$auto$builder.cc:338:Biop$677  & \$auto$builder.cc:364:Unop$681 ;
  assign perf_instr_ret_compressed_wb_o = perf_instr_ret_wb_o & instr_is_compressed_id_i;
  assign \$auto$builder.cc:338:Biop$687  = { rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i } & rf_wdata_id_i;
  assign \$auto$builder.cc:338:Biop$689  = { rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i } & rf_wdata_lsu_i;
  assign rf_wdata_wb_o = \$auto$builder.cc:338:Biop$687  | \$auto$builder.cc:338:Biop$689 ;
  assign \$auto$builder.cc:364:Unop$681  = ~ \$auto$builder.cc:338:Biop$679 ;
  assign rf_we_wb_o = | { rf_we_lsu_i, rf_we_id_i };
  assign rf_waddr_wb_o = rf_waddr_id_i;
endmodule
