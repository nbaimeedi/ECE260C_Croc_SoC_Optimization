/* Generated by Yosys 0.51 (git sha1 c4b519022, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

/* src = "../rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "../rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode.sv:74.31" */
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "../rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "../rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "../rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "../rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "../rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "../rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "../rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "../rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "../rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "../rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "../rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "../rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode.sv:74.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode.sv:90.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:76.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  /* src = "../rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "../rtl/common_cells/addr_decode.sv:35.8" */
module \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  /* src = "../rtl/common_cells/addr_decode.sv:72.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode.sv:74.31" */
  input [191:0] addr_map_i;
  wire [191:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode.sv:80.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode.sv:78.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode.sv:90.31" */
  input default_idx_i;
  wire default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:84.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode.sv:76.31" */
  output idx_o;
  wire idx_o;
  /* src = "../rtl/common_cells/addr_decode.sv:100.5" */
  \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

/* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$3870 ;
  wire \$auto$builder.cc:338:Biop$3874 ;
  wire \$auto$builder.cc:338:Biop$3876 ;
  wire \$auto$builder.cc:338:Biop$3878 ;
  wire \$auto$builder.cc:338:Biop$3880 ;
  wire \$auto$builder.cc:338:Biop$3899 ;
  wire \$auto$builder.cc:338:Biop$3903 ;
  wire \$auto$builder.cc:338:Biop$3905 ;
  wire \$auto$builder.cc:338:Biop$3907 ;
  wire \$auto$builder.cc:338:Biop$3909 ;
  wire \$auto$builder.cc:338:Biop$3928 ;
  wire \$auto$builder.cc:338:Biop$3932 ;
  wire \$auto$builder.cc:338:Biop$3934 ;
  wire \$auto$builder.cc:338:Biop$3936 ;
  wire \$auto$builder.cc:338:Biop$3938 ;
  wire \$auto$builder.cc:338:Biop$3957 ;
  wire \$auto$builder.cc:338:Biop$3961 ;
  wire \$auto$builder.cc:338:Biop$3963 ;
  wire \$auto$builder.cc:338:Biop$3965 ;
  wire \$auto$builder.cc:338:Biop$3967 ;
  wire \$auto$builder.cc:338:Biop$3986 ;
  wire \$auto$builder.cc:338:Biop$3990 ;
  wire \$auto$builder.cc:338:Biop$3992 ;
  wire \$auto$builder.cc:338:Biop$3994 ;
  wire \$auto$builder.cc:338:Biop$3996 ;
  wire \$auto$builder.cc:364:Unop$3886 ;
  wire \$auto$rtlil.cc:2874:Mux$3861 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3865 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3892 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3921 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3950 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3979 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$4008 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$3895 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$3924 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$3953 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$3982 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3894 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3923 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3952 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3981 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$3893 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$3922 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$3951 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$3980 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3869  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$auto$builder.cc:338:Biop$3870 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3873  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$3874 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3875  (
    .A(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$3876 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3877  (
    .A(\$auto$builder.cc:338:Biop$3874 ),
    .B(\$auto$builder.cc:338:Biop$3876 ),
    .Y(\$auto$builder.cc:338:Biop$3878 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3879  (
    .A(\$auto$builder.cc:338:Biop$3870 ),
    .B(\$auto$builder.cc:338:Biop$3878 ),
    .Y(\$auto$builder.cc:338:Biop$3880 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3898  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$auto$builder.cc:338:Biop$3899 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3902  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$3903 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3904  (
    .A(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$3905 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3906  (
    .A(\$auto$builder.cc:338:Biop$3903 ),
    .B(\$auto$builder.cc:338:Biop$3905 ),
    .Y(\$auto$builder.cc:338:Biop$3907 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3908  (
    .A(\$auto$builder.cc:338:Biop$3899 ),
    .B(\$auto$builder.cc:338:Biop$3907 ),
    .Y(\$auto$builder.cc:338:Biop$3909 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3927  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$auto$builder.cc:338:Biop$3928 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3931  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$3932 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3933  (
    .A(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$3934 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3935  (
    .A(\$auto$builder.cc:338:Biop$3932 ),
    .B(\$auto$builder.cc:338:Biop$3934 ),
    .Y(\$auto$builder.cc:338:Biop$3936 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3937  (
    .A(\$auto$builder.cc:338:Biop$3928 ),
    .B(\$auto$builder.cc:338:Biop$3936 ),
    .Y(\$auto$builder.cc:338:Biop$3938 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3956  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$auto$builder.cc:338:Biop$3957 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3960  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$3961 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3962  (
    .A(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$3963 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3964  (
    .A(\$auto$builder.cc:338:Biop$3961 ),
    .B(\$auto$builder.cc:338:Biop$3963 ),
    .Y(\$auto$builder.cc:338:Biop$3965 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3966  (
    .A(\$auto$builder.cc:338:Biop$3957 ),
    .B(\$auto$builder.cc:338:Biop$3965 ),
    .Y(\$auto$builder.cc:338:Biop$3967 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3985  (
    .A(addr_i),
    .B(addr_map_i[447:416]),
    .Y(\$auto$builder.cc:338:Biop$3986 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3989  (
    .A(addr_i),
    .B(addr_map_i[415:384]),
    .Y(\$auto$builder.cc:338:Biop$3990 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3991  (
    .A(addr_map_i[415:384]),
    .Y(\$auto$builder.cc:338:Biop$3992 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3993  (
    .A(\$auto$builder.cc:338:Biop$3990 ),
    .B(\$auto$builder.cc:338:Biop$3992 ),
    .Y(\$auto$builder.cc:338:Biop$3994 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3995  (
    .A(\$auto$builder.cc:338:Biop$3986 ),
    .B(\$auto$builder.cc:338:Biop$3994 ),
    .Y(\$auto$builder.cc:338:Biop$3996 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$3885  (
    .A(config_ongoing_i),
    .Y(\$auto$builder.cc:364:Unop$3886 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$3860  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$3861 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$3864  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$3865 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$3891  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$3892 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$3920  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$3921 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$3949  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$3950 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$3978  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$3979 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$4007  (
    .A(addr_map_i[450:448]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$4008 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14884  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$3982 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$3996 ),
    .Y(dec_error_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14890  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$3981 ),
    .B(\$auto$builder.cc:364:Unop$3886 ),
    .S(\$auto$builder.cc:338:Biop$3996 ),
    .Y(dec_valid_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14896  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$3980 ),
    .B(\$auto$rtlil.cc:2874:Mux$4008 ),
    .S(\$auto$builder.cc:338:Biop$3996 ),
    .Y(idx_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14907  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$3953 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$3967 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$3982 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14912  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$3952 ),
    .B(\$auto$builder.cc:364:Unop$3886 ),
    .S(\$auto$builder.cc:338:Biop$3967 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$3981 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14917  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$3951 ),
    .B(\$auto$rtlil.cc:2874:Mux$3979 ),
    .S(\$auto$builder.cc:338:Biop$3967 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$3980 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14926  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$3924 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$3938 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$3953 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14930  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$3923 ),
    .B(\$auto$builder.cc:364:Unop$3886 ),
    .S(\$auto$builder.cc:338:Biop$3938 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$3952 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14934  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$3922 ),
    .B(\$auto$rtlil.cc:2874:Mux$3950 ),
    .S(\$auto$builder.cc:338:Biop$3938 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$3951 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14941  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$3895 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$3909 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$3924 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14944  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$3894 ),
    .B(\$auto$builder.cc:364:Unop$3886 ),
    .S(\$auto$builder.cc:338:Biop$3909 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$3923 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14947  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$3893 ),
    .B(\$auto$rtlil.cc:2874:Mux$3921 ),
    .S(\$auto$builder.cc:338:Biop$3909 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$3922 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14952  (
    .A(\$auto$rtlil.cc:2874:Mux$3861 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$3880 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$3895 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14954  (
    .A(\$auto$builder.cc:338:Biop$3880 ),
    .B(\$auto$builder.cc:364:Unop$3886 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$3894 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14956  (
    .A(\$auto$rtlil.cc:2874:Mux$3865 ),
    .B(\$auto$rtlil.cc:2874:Mux$3892 ),
    .S(\$auto$builder.cc:338:Biop$3880 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$3893 )
  );
endmodule

/* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$6111 ;
  wire \$auto$builder.cc:338:Biop$6115 ;
  wire \$auto$builder.cc:338:Biop$6117 ;
  wire \$auto$builder.cc:338:Biop$6119 ;
  wire \$auto$builder.cc:338:Biop$6121 ;
  wire \$auto$builder.cc:338:Biop$6140 ;
  wire \$auto$builder.cc:338:Biop$6144 ;
  wire \$auto$builder.cc:338:Biop$6146 ;
  wire \$auto$builder.cc:338:Biop$6148 ;
  wire \$auto$builder.cc:338:Biop$6150 ;
  wire \$auto$builder.cc:338:Biop$6169 ;
  wire \$auto$builder.cc:338:Biop$6173 ;
  wire \$auto$builder.cc:338:Biop$6175 ;
  wire \$auto$builder.cc:338:Biop$6177 ;
  wire \$auto$builder.cc:338:Biop$6179 ;
  wire \$auto$builder.cc:338:Biop$6198 ;
  wire \$auto$builder.cc:338:Biop$6202 ;
  wire \$auto$builder.cc:338:Biop$6204 ;
  wire \$auto$builder.cc:338:Biop$6206 ;
  wire \$auto$builder.cc:338:Biop$6208 ;
  wire \$auto$builder.cc:364:Unop$6127 ;
  wire \$auto$rtlil.cc:2874:Mux$6102 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6106 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6133 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6162 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6191 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6220 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6136 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6165 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6194 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6135 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6164 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6193 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6134 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6163 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6192 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6110  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$auto$builder.cc:338:Biop$6111 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6114  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$6115 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6116  (
    .A(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$6117 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6118  (
    .A(\$auto$builder.cc:338:Biop$6115 ),
    .B(\$auto$builder.cc:338:Biop$6117 ),
    .Y(\$auto$builder.cc:338:Biop$6119 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6120  (
    .A(\$auto$builder.cc:338:Biop$6111 ),
    .B(\$auto$builder.cc:338:Biop$6119 ),
    .Y(\$auto$builder.cc:338:Biop$6121 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6139  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$auto$builder.cc:338:Biop$6140 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6143  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$6144 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6145  (
    .A(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$6146 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6147  (
    .A(\$auto$builder.cc:338:Biop$6144 ),
    .B(\$auto$builder.cc:338:Biop$6146 ),
    .Y(\$auto$builder.cc:338:Biop$6148 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6149  (
    .A(\$auto$builder.cc:338:Biop$6140 ),
    .B(\$auto$builder.cc:338:Biop$6148 ),
    .Y(\$auto$builder.cc:338:Biop$6150 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6168  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$auto$builder.cc:338:Biop$6169 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6172  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$6173 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6174  (
    .A(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$6175 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6176  (
    .A(\$auto$builder.cc:338:Biop$6173 ),
    .B(\$auto$builder.cc:338:Biop$6175 ),
    .Y(\$auto$builder.cc:338:Biop$6177 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6178  (
    .A(\$auto$builder.cc:338:Biop$6169 ),
    .B(\$auto$builder.cc:338:Biop$6177 ),
    .Y(\$auto$builder.cc:338:Biop$6179 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6197  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$auto$builder.cc:338:Biop$6198 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6201  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$6202 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6203  (
    .A(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$6204 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6205  (
    .A(\$auto$builder.cc:338:Biop$6202 ),
    .B(\$auto$builder.cc:338:Biop$6204 ),
    .Y(\$auto$builder.cc:338:Biop$6206 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6207  (
    .A(\$auto$builder.cc:338:Biop$6198 ),
    .B(\$auto$builder.cc:338:Biop$6206 ),
    .Y(\$auto$builder.cc:338:Biop$6208 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6126  (
    .A(config_ongoing_i),
    .Y(\$auto$builder.cc:364:Unop$6127 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6101  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6102 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6105  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6106 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6132  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6133 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6161  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6162 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6190  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6191 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6219  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6220 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14073  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6194 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6208 ),
    .Y(dec_error_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14078  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6193 ),
    .B(\$auto$builder.cc:364:Unop$6127 ),
    .S(\$auto$builder.cc:338:Biop$6208 ),
    .Y(dec_valid_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14083  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6192 ),
    .B(\$auto$rtlil.cc:2874:Mux$6220 ),
    .S(\$auto$builder.cc:338:Biop$6208 ),
    .Y(idx_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14092  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6165 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6179 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6194 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14096  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6164 ),
    .B(\$auto$builder.cc:364:Unop$6127 ),
    .S(\$auto$builder.cc:338:Biop$6179 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6193 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14100  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6163 ),
    .B(\$auto$rtlil.cc:2874:Mux$6191 ),
    .S(\$auto$builder.cc:338:Biop$6179 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6192 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14107  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6136 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6150 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6165 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14110  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6135 ),
    .B(\$auto$builder.cc:364:Unop$6127 ),
    .S(\$auto$builder.cc:338:Biop$6150 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6164 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14113  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6134 ),
    .B(\$auto$rtlil.cc:2874:Mux$6162 ),
    .S(\$auto$builder.cc:338:Biop$6150 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6163 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14118  (
    .A(\$auto$rtlil.cc:2874:Mux$6102 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6121 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6136 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14120  (
    .A(\$auto$builder.cc:338:Biop$6121 ),
    .B(\$auto$builder.cc:364:Unop$6127 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6135 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14122  (
    .A(\$auto$rtlil.cc:2874:Mux$6106 ),
    .B(\$auto$rtlil.cc:2874:Mux$6133 ),
    .S(\$auto$builder.cc:338:Biop$6121 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6134 )
  );
endmodule

/* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$6260 ;
  wire \$auto$builder.cc:338:Biop$6264 ;
  wire \$auto$builder.cc:338:Biop$6266 ;
  wire \$auto$builder.cc:338:Biop$6268 ;
  wire \$auto$builder.cc:338:Biop$6270 ;
  wire \$auto$builder.cc:338:Biop$6289 ;
  wire \$auto$builder.cc:338:Biop$6293 ;
  wire \$auto$builder.cc:338:Biop$6295 ;
  wire \$auto$builder.cc:338:Biop$6297 ;
  wire \$auto$builder.cc:338:Biop$6299 ;
  wire \$auto$builder.cc:338:Biop$6318 ;
  wire \$auto$builder.cc:338:Biop$6322 ;
  wire \$auto$builder.cc:338:Biop$6324 ;
  wire \$auto$builder.cc:338:Biop$6326 ;
  wire \$auto$builder.cc:338:Biop$6328 ;
  wire \$auto$builder.cc:338:Biop$6347 ;
  wire \$auto$builder.cc:338:Biop$6351 ;
  wire \$auto$builder.cc:338:Biop$6353 ;
  wire \$auto$builder.cc:338:Biop$6355 ;
  wire \$auto$builder.cc:338:Biop$6357 ;
  wire \$auto$builder.cc:364:Unop$6276 ;
  wire \$auto$rtlil.cc:2874:Mux$6251 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6255 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6282 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6311 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6340 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6369 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6285 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6314 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6343 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6284 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6313 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6342 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6283 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6312 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6341 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6259  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$auto$builder.cc:338:Biop$6260 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6263  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$6264 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6265  (
    .A(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$6266 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6267  (
    .A(\$auto$builder.cc:338:Biop$6264 ),
    .B(\$auto$builder.cc:338:Biop$6266 ),
    .Y(\$auto$builder.cc:338:Biop$6268 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6269  (
    .A(\$auto$builder.cc:338:Biop$6260 ),
    .B(\$auto$builder.cc:338:Biop$6268 ),
    .Y(\$auto$builder.cc:338:Biop$6270 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6288  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$auto$builder.cc:338:Biop$6289 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6292  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$6293 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6294  (
    .A(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$6295 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6296  (
    .A(\$auto$builder.cc:338:Biop$6293 ),
    .B(\$auto$builder.cc:338:Biop$6295 ),
    .Y(\$auto$builder.cc:338:Biop$6297 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6298  (
    .A(\$auto$builder.cc:338:Biop$6289 ),
    .B(\$auto$builder.cc:338:Biop$6297 ),
    .Y(\$auto$builder.cc:338:Biop$6299 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6317  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$auto$builder.cc:338:Biop$6318 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6321  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$6322 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6323  (
    .A(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$6324 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6325  (
    .A(\$auto$builder.cc:338:Biop$6322 ),
    .B(\$auto$builder.cc:338:Biop$6324 ),
    .Y(\$auto$builder.cc:338:Biop$6326 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6327  (
    .A(\$auto$builder.cc:338:Biop$6318 ),
    .B(\$auto$builder.cc:338:Biop$6326 ),
    .Y(\$auto$builder.cc:338:Biop$6328 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6346  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$auto$builder.cc:338:Biop$6347 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6350  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$6351 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6352  (
    .A(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$6353 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6354  (
    .A(\$auto$builder.cc:338:Biop$6351 ),
    .B(\$auto$builder.cc:338:Biop$6353 ),
    .Y(\$auto$builder.cc:338:Biop$6355 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6356  (
    .A(\$auto$builder.cc:338:Biop$6347 ),
    .B(\$auto$builder.cc:338:Biop$6355 ),
    .Y(\$auto$builder.cc:338:Biop$6357 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6275  (
    .A(config_ongoing_i),
    .Y(\$auto$builder.cc:364:Unop$6276 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6250  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6251 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6254  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6255 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6281  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6282 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6310  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6311 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6339  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6340 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6368  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6369 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13986  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6343 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6357 ),
    .Y(dec_error_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13991  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6342 ),
    .B(\$auto$builder.cc:364:Unop$6276 ),
    .S(\$auto$builder.cc:338:Biop$6357 ),
    .Y(dec_valid_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13996  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6341 ),
    .B(\$auto$rtlil.cc:2874:Mux$6369 ),
    .S(\$auto$builder.cc:338:Biop$6357 ),
    .Y(idx_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14005  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6314 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6328 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6343 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14009  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6313 ),
    .B(\$auto$builder.cc:364:Unop$6276 ),
    .S(\$auto$builder.cc:338:Biop$6328 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6342 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14013  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6312 ),
    .B(\$auto$rtlil.cc:2874:Mux$6340 ),
    .S(\$auto$builder.cc:338:Biop$6328 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6341 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14020  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6285 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6299 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6314 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14023  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6284 ),
    .B(\$auto$builder.cc:364:Unop$6276 ),
    .S(\$auto$builder.cc:338:Biop$6299 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6313 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14026  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6283 ),
    .B(\$auto$rtlil.cc:2874:Mux$6311 ),
    .S(\$auto$builder.cc:338:Biop$6299 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6312 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14031  (
    .A(\$auto$rtlil.cc:2874:Mux$6251 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6270 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6285 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14033  (
    .A(\$auto$builder.cc:338:Biop$6270 ),
    .B(\$auto$builder.cc:364:Unop$6276 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6284 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$14035  (
    .A(\$auto$rtlil.cc:2874:Mux$6255 ),
    .B(\$auto$rtlil.cc:2874:Mux$6282 ),
    .S(\$auto$builder.cc:338:Biop$6270 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6283 )
  );
endmodule

/* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$6409 ;
  wire \$auto$builder.cc:338:Biop$6413 ;
  wire \$auto$builder.cc:338:Biop$6415 ;
  wire \$auto$builder.cc:338:Biop$6417 ;
  wire \$auto$builder.cc:338:Biop$6419 ;
  wire \$auto$builder.cc:338:Biop$6438 ;
  wire \$auto$builder.cc:338:Biop$6442 ;
  wire \$auto$builder.cc:338:Biop$6444 ;
  wire \$auto$builder.cc:338:Biop$6446 ;
  wire \$auto$builder.cc:338:Biop$6448 ;
  wire \$auto$builder.cc:338:Biop$6467 ;
  wire \$auto$builder.cc:338:Biop$6471 ;
  wire \$auto$builder.cc:338:Biop$6473 ;
  wire \$auto$builder.cc:338:Biop$6475 ;
  wire \$auto$builder.cc:338:Biop$6477 ;
  wire \$auto$builder.cc:338:Biop$6496 ;
  wire \$auto$builder.cc:338:Biop$6500 ;
  wire \$auto$builder.cc:338:Biop$6502 ;
  wire \$auto$builder.cc:338:Biop$6504 ;
  wire \$auto$builder.cc:338:Biop$6506 ;
  wire \$auto$builder.cc:364:Unop$6425 ;
  wire \$auto$rtlil.cc:2874:Mux$6400 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6404 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6431 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6460 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6489 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6518 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6434 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6463 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6492 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6433 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6462 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6491 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6432 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6461 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6490 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6408  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$auto$builder.cc:338:Biop$6409 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6412  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$6413 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6414  (
    .A(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$6415 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6416  (
    .A(\$auto$builder.cc:338:Biop$6413 ),
    .B(\$auto$builder.cc:338:Biop$6415 ),
    .Y(\$auto$builder.cc:338:Biop$6417 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6418  (
    .A(\$auto$builder.cc:338:Biop$6409 ),
    .B(\$auto$builder.cc:338:Biop$6417 ),
    .Y(\$auto$builder.cc:338:Biop$6419 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6437  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$auto$builder.cc:338:Biop$6438 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6441  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$6442 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6443  (
    .A(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$6444 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6445  (
    .A(\$auto$builder.cc:338:Biop$6442 ),
    .B(\$auto$builder.cc:338:Biop$6444 ),
    .Y(\$auto$builder.cc:338:Biop$6446 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6447  (
    .A(\$auto$builder.cc:338:Biop$6438 ),
    .B(\$auto$builder.cc:338:Biop$6446 ),
    .Y(\$auto$builder.cc:338:Biop$6448 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6466  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$auto$builder.cc:338:Biop$6467 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6470  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$6471 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6472  (
    .A(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$6473 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6474  (
    .A(\$auto$builder.cc:338:Biop$6471 ),
    .B(\$auto$builder.cc:338:Biop$6473 ),
    .Y(\$auto$builder.cc:338:Biop$6475 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6476  (
    .A(\$auto$builder.cc:338:Biop$6467 ),
    .B(\$auto$builder.cc:338:Biop$6475 ),
    .Y(\$auto$builder.cc:338:Biop$6477 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6495  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$auto$builder.cc:338:Biop$6496 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6499  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$6500 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6501  (
    .A(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$6502 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6503  (
    .A(\$auto$builder.cc:338:Biop$6500 ),
    .B(\$auto$builder.cc:338:Biop$6502 ),
    .Y(\$auto$builder.cc:338:Biop$6504 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6505  (
    .A(\$auto$builder.cc:338:Biop$6496 ),
    .B(\$auto$builder.cc:338:Biop$6504 ),
    .Y(\$auto$builder.cc:338:Biop$6506 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6424  (
    .A(config_ongoing_i),
    .Y(\$auto$builder.cc:364:Unop$6425 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6399  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6400 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6403  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6404 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6430  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6431 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6459  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6460 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6488  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6489 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6517  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6518 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13899  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6492 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6506 ),
    .Y(dec_error_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13904  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6491 ),
    .B(\$auto$builder.cc:364:Unop$6425 ),
    .S(\$auto$builder.cc:338:Biop$6506 ),
    .Y(dec_valid_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13909  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6490 ),
    .B(\$auto$rtlil.cc:2874:Mux$6518 ),
    .S(\$auto$builder.cc:338:Biop$6506 ),
    .Y(idx_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13918  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6463 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6477 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6492 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13922  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6462 ),
    .B(\$auto$builder.cc:364:Unop$6425 ),
    .S(\$auto$builder.cc:338:Biop$6477 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6491 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13926  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6461 ),
    .B(\$auto$rtlil.cc:2874:Mux$6489 ),
    .S(\$auto$builder.cc:338:Biop$6477 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6490 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13933  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6434 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6448 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6463 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13936  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6433 ),
    .B(\$auto$builder.cc:364:Unop$6425 ),
    .S(\$auto$builder.cc:338:Biop$6448 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6462 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13939  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6432 ),
    .B(\$auto$rtlil.cc:2874:Mux$6460 ),
    .S(\$auto$builder.cc:338:Biop$6448 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6461 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13944  (
    .A(\$auto$rtlil.cc:2874:Mux$6400 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6419 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6434 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13946  (
    .A(\$auto$builder.cc:338:Biop$6419 ),
    .B(\$auto$builder.cc:364:Unop$6425 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6433 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13948  (
    .A(\$auto$rtlil.cc:2874:Mux$6404 ),
    .B(\$auto$rtlil.cc:2874:Mux$6431 ),
    .S(\$auto$builder.cc:338:Biop$6419 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6432 )
  );
endmodule

/* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$6558 ;
  wire \$auto$builder.cc:338:Biop$6562 ;
  wire \$auto$builder.cc:338:Biop$6564 ;
  wire \$auto$builder.cc:338:Biop$6566 ;
  wire \$auto$builder.cc:338:Biop$6568 ;
  wire \$auto$builder.cc:338:Biop$6587 ;
  wire \$auto$builder.cc:338:Biop$6591 ;
  wire \$auto$builder.cc:338:Biop$6593 ;
  wire \$auto$builder.cc:338:Biop$6595 ;
  wire \$auto$builder.cc:338:Biop$6597 ;
  wire \$auto$builder.cc:338:Biop$6616 ;
  wire \$auto$builder.cc:338:Biop$6620 ;
  wire \$auto$builder.cc:338:Biop$6622 ;
  wire \$auto$builder.cc:338:Biop$6624 ;
  wire \$auto$builder.cc:338:Biop$6626 ;
  wire \$auto$builder.cc:338:Biop$6645 ;
  wire \$auto$builder.cc:338:Biop$6649 ;
  wire \$auto$builder.cc:338:Biop$6651 ;
  wire \$auto$builder.cc:338:Biop$6653 ;
  wire \$auto$builder.cc:338:Biop$6655 ;
  wire \$auto$builder.cc:364:Unop$6574 ;
  wire \$auto$rtlil.cc:2874:Mux$6549 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6553 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6580 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6609 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6638 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6667 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6583 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6612 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6641 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6582 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6611 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6640 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6581 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6610 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6639 ;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" */
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" */
  output [2:0] idx_o;
  wire [2:0] idx_o;
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6557  (
    .A(addr_i),
    .B(addr_map_i[63:32]),
    .Y(\$auto$builder.cc:338:Biop$6558 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6561  (
    .A(addr_i),
    .B(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$6562 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6563  (
    .A(addr_map_i[31:0]),
    .Y(\$auto$builder.cc:338:Biop$6564 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6565  (
    .A(\$auto$builder.cc:338:Biop$6562 ),
    .B(\$auto$builder.cc:338:Biop$6564 ),
    .Y(\$auto$builder.cc:338:Biop$6566 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6567  (
    .A(\$auto$builder.cc:338:Biop$6558 ),
    .B(\$auto$builder.cc:338:Biop$6566 ),
    .Y(\$auto$builder.cc:338:Biop$6568 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6586  (
    .A(addr_i),
    .B(addr_map_i[159:128]),
    .Y(\$auto$builder.cc:338:Biop$6587 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6590  (
    .A(addr_i),
    .B(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$6591 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6592  (
    .A(addr_map_i[127:96]),
    .Y(\$auto$builder.cc:338:Biop$6593 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6594  (
    .A(\$auto$builder.cc:338:Biop$6591 ),
    .B(\$auto$builder.cc:338:Biop$6593 ),
    .Y(\$auto$builder.cc:338:Biop$6595 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6596  (
    .A(\$auto$builder.cc:338:Biop$6587 ),
    .B(\$auto$builder.cc:338:Biop$6595 ),
    .Y(\$auto$builder.cc:338:Biop$6597 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6615  (
    .A(addr_i),
    .B(addr_map_i[255:224]),
    .Y(\$auto$builder.cc:338:Biop$6616 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6619  (
    .A(addr_i),
    .B(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$6620 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6621  (
    .A(addr_map_i[223:192]),
    .Y(\$auto$builder.cc:338:Biop$6622 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6623  (
    .A(\$auto$builder.cc:338:Biop$6620 ),
    .B(\$auto$builder.cc:338:Biop$6622 ),
    .Y(\$auto$builder.cc:338:Biop$6624 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6625  (
    .A(\$auto$builder.cc:338:Biop$6616 ),
    .B(\$auto$builder.cc:338:Biop$6624 ),
    .Y(\$auto$builder.cc:338:Biop$6626 )
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6644  (
    .A(addr_i),
    .B(addr_map_i[351:320]),
    .Y(\$auto$builder.cc:338:Biop$6645 )
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6648  (
    .A(addr_i),
    .B(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$6649 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6650  (
    .A(addr_map_i[319:288]),
    .Y(\$auto$builder.cc:338:Biop$6651 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6652  (
    .A(\$auto$builder.cc:338:Biop$6649 ),
    .B(\$auto$builder.cc:338:Biop$6651 ),
    .Y(\$auto$builder.cc:338:Biop$6653 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6654  (
    .A(\$auto$builder.cc:338:Biop$6645 ),
    .B(\$auto$builder.cc:338:Biop$6653 ),
    .Y(\$auto$builder.cc:338:Biop$6655 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6573  (
    .A(config_ongoing_i),
    .Y(\$auto$builder.cc:364:Unop$6574 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6548  (
    .A(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6549 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6552  (
    .A(3'h0),
    .B(default_idx_i),
    .S(en_default_idx_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6553 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6579  (
    .A(addr_map_i[66:64]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6580 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6608  (
    .A(addr_map_i[162:160]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6609 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6637  (
    .A(addr_map_i[258:256]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6638 )
  );
  \$mux  #(
    .WIDTH(32'd3)
  ) \$auto$slang_frontend.cc:2041:operator()$6666  (
    .A(addr_map_i[354:352]),
    .B(default_idx_i),
    .S(config_ongoing_i),
    .Y(\$auto$rtlil.cc:2874:Mux$6667 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13812  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6641 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6655 ),
    .Y(dec_error_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13817  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6640 ),
    .B(\$auto$builder.cc:364:Unop$6574 ),
    .S(\$auto$builder.cc:338:Biop$6655 ),
    .Y(dec_valid_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13822  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6639 ),
    .B(\$auto$rtlil.cc:2874:Mux$6667 ),
    .S(\$auto$builder.cc:338:Biop$6655 ),
    .Y(idx_o)
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13831  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6612 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6626 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6641 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13835  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6611 ),
    .B(\$auto$builder.cc:364:Unop$6574 ),
    .S(\$auto$builder.cc:338:Biop$6626 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6640 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13839  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6610 ),
    .B(\$auto$rtlil.cc:2874:Mux$6638 ),
    .S(\$auto$builder.cc:338:Biop$6626 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6639 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13846  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6583 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6597 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6612 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13849  (
    .A(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6582 ),
    .B(\$auto$builder.cc:364:Unop$6574 ),
    .S(\$auto$builder.cc:338:Biop$6597 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6611 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13852  (
    .A(\$auto$slang_frontend.cc:694:finish$\idx_o$6581 ),
    .B(\$auto$rtlil.cc:2874:Mux$6609 ),
    .S(\$auto$builder.cc:338:Biop$6597 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6610 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13857  (
    .A(\$auto$rtlil.cc:2874:Mux$6549 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$6568 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_error_o$6583 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13859  (
    .A(\$auto$builder.cc:338:Biop$6568 ),
    .B(\$auto$builder.cc:364:Unop$6574 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dec_valid_o$6582 )
  );
  /* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13861  (
    .A(\$auto$rtlil.cc:2874:Mux$6553 ),
    .B(\$auto$rtlil.cc:2874:Mux$6580 ),
    .S(\$auto$builder.cc:338:Biop$6568 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\idx_o$6581 )
  );
endmodule

/* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" */
module \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  /* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" */
  input [191:0] addr_map_i;
  wire [191:0] addr_map_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" */
  input config_ongoing_i;
  wire config_ongoing_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" */
  output dec_error_o;
  wire dec_error_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" */
  output dec_valid_o;
  wire dec_valid_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" */
  input default_idx_i;
  wire default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" */
  input en_default_idx_i;
  wire en_default_idx_i;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" */
  output idx_o;
  wire idx_o;
  /* src = "../rtl/common_cells/addr_decode_dync.sv:101.23" */
  wire [1:0] matched_rules;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5909  (
    .A(en_default_idx_i),
    .Y(dec_error_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5913  (
    .A(en_default_idx_i),
    .B(default_idx_i),
    .Y(idx_o)
  );
  assign dec_valid_o = 1'h0;
  assign matched_rules = 2'h0;
endmodule

/* src = "../rtl/apb_uart/apb_uart.sv:35.8" */
module \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart (CLK, RSTN, PSEL, PENABLE, PWRITE, PADDR, PWDATA, PRDATA, PREADY, PSLVERR, INT, OUT1N, OUT2N, RTSN, DTRN, CTSN, DSRN, DCDN, RIN, SIN, SOUT
);
  wire \$auto$builder.cc:338:Biop$4227 ;
  wire \$auto$builder.cc:338:Biop$4243 ;
  wire \$auto$builder.cc:338:Biop$4259 ;
  wire \$auto$builder.cc:338:Biop$4261 ;
  wire \$auto$builder.cc:338:Biop$4263 ;
  wire \$auto$builder.cc:338:Biop$4275 ;
  wire \$auto$builder.cc:338:Biop$4301 ;
  wire \$auto$builder.cc:338:Biop$4303 ;
  wire \$auto$builder.cc:338:Biop$4329 ;
  wire \$auto$builder.cc:338:Biop$4349 ;
  wire \$auto$builder.cc:338:Biop$4359 ;
  wire \$auto$builder.cc:338:Biop$4369 ;
  wire \$auto$builder.cc:338:Biop$4379 ;
  wire \$auto$builder.cc:338:Biop$4389 ;
  wire \$auto$builder.cc:338:Biop$4425 ;
  wire \$auto$builder.cc:338:Biop$4431 ;
  wire \$auto$builder.cc:338:Biop$4435 ;
  wire \$auto$builder.cc:338:Biop$4437 ;
  wire \$auto$builder.cc:338:Biop$4443 ;
  wire \$auto$builder.cc:338:Biop$4445 ;
  wire \$auto$builder.cc:338:Biop$4449 ;
  wire \$auto$builder.cc:338:Biop$4455 ;
  wire \$auto$builder.cc:338:Biop$4459 ;
  wire \$auto$builder.cc:338:Biop$4465 ;
  wire \$auto$builder.cc:338:Biop$4484 ;
  wire \$auto$builder.cc:338:Biop$4488 ;
  wire \$auto$builder.cc:338:Biop$4492 ;
  wire \$auto$builder.cc:338:Biop$4496 ;
  wire \$auto$builder.cc:338:Biop$4498 ;
  wire \$auto$builder.cc:338:Biop$4500 ;
  wire [5:0] \$auto$builder.cc:338:Biop$4504 ;
  wire \$auto$builder.cc:338:Biop$4541 ;
  wire \$auto$builder.cc:338:Biop$4543 ;
  wire \$auto$builder.cc:338:Biop$4547 ;
  wire \$auto$builder.cc:338:Biop$4549 ;
  wire \$auto$builder.cc:338:Biop$4551 ;
  wire \$auto$builder.cc:338:Biop$4564 ;
  wire \$auto$builder.cc:338:Biop$4572 ;
  wire \$auto$builder.cc:338:Biop$4610 ;
  wire \$auto$builder.cc:338:Biop$4616 ;
  wire \$auto$builder.cc:338:Biop$4620 ;
  wire \$auto$builder.cc:338:Biop$4622 ;
  wire \$auto$builder.cc:338:Biop$4662 ;
  wire \$auto$builder.cc:338:Biop$4668 ;
  wire \$auto$builder.cc:338:Biop$4670 ;
  wire \$auto$builder.cc:338:Biop$4682 ;
  wire \$auto$builder.cc:338:Biop$4684 ;
  wire \$auto$builder.cc:338:Biop$4690 ;
  wire \$auto$builder.cc:338:Biop$4694 ;
  wire \$auto$builder.cc:338:Biop$4735 ;
  wire \$auto$builder.cc:338:Biop$4747 ;
  wire \$auto$builder.cc:338:Biop$4753 ;
  wire \$auto$builder.cc:338:Biop$4757 ;
  wire \$auto$builder.cc:338:Biop$4783 ;
  wire \$auto$builder.cc:338:Biop$4797 ;
  wire \$auto$builder.cc:338:Biop$4799 ;
  wire \$auto$builder.cc:338:Biop$4801 ;
  wire \$auto$builder.cc:338:Biop$4803 ;
  wire \$auto$builder.cc:338:Biop$4815 ;
  wire \$auto$builder.cc:338:Biop$4819 ;
  wire \$auto$builder.cc:338:Biop$4821 ;
  wire \$auto$builder.cc:338:Biop$4833 ;
  wire \$auto$builder.cc:338:Biop$4837 ;
  wire \$auto$builder.cc:338:Biop$4839 ;
  wire \$auto$builder.cc:338:Biop$4851 ;
  wire \$auto$builder.cc:338:Biop$4855 ;
  wire \$auto$builder.cc:338:Biop$4857 ;
  wire \$auto$builder.cc:338:Biop$4872 ;
  wire \$auto$builder.cc:338:Biop$4886 ;
  wire \$auto$builder.cc:338:Biop$4910 ;
  wire \$auto$builder.cc:338:Biop$4938 ;
  wire \$auto$builder.cc:338:Biop$4942 ;
  wire \$auto$builder.cc:338:Biop$4944 ;
  wire \$auto$builder.cc:338:Biop$4946 ;
  wire \$auto$builder.cc:338:Biop$4974 ;
  wire \$auto$builder.cc:338:Biop$4978 ;
  wire \$auto$builder.cc:338:Biop$4980 ;
  wire \$auto$builder.cc:338:Biop$4986 ;
  wire \$auto$builder.cc:338:Biop$4988 ;
  wire \$auto$builder.cc:338:Biop$4990 ;
  wire \$auto$builder.cc:338:Biop$4992 ;
  wire \$auto$builder.cc:338:Biop$4996 ;
  wire \$auto$builder.cc:338:Biop$4998 ;
  wire \$auto$builder.cc:338:Biop$5000 ;
  wire \$auto$builder.cc:338:Biop$5004 ;
  wire \$auto$builder.cc:338:Biop$5008 ;
  wire \$auto$builder.cc:338:Biop$5012 ;
  wire \$auto$builder.cc:338:Biop$5014 ;
  wire \$auto$builder.cc:338:Biop$5036 ;
  wire \$auto$builder.cc:338:Biop$5038 ;
  wire \$auto$builder.cc:338:Biop$5040 ;
  wire \$auto$builder.cc:338:Biop$5046 ;
  wire \$auto$builder.cc:338:Biop$5048 ;
  wire \$auto$builder.cc:338:Biop$5054 ;
  wire \$auto$builder.cc:338:Biop$5058 ;
  wire \$auto$builder.cc:338:Biop$5062 ;
  wire \$auto$builder.cc:338:Biop$5064 ;
  wire \$auto$builder.cc:338:Biop$5086 ;
  wire \$auto$builder.cc:338:Biop$5088 ;
  wire \$auto$builder.cc:338:Biop$5094 ;
  wire \$auto$builder.cc:338:Biop$5096 ;
  wire \$auto$builder.cc:338:Biop$5155 ;
  wire \$auto$builder.cc:338:Biop$5161 ;
  wire \$auto$builder.cc:338:Biop$5163 ;
  wire \$auto$builder.cc:338:Biop$5175 ;
  wire \$auto$builder.cc:338:Biop$5177 ;
  wire \$auto$builder.cc:338:Biop$5179 ;
  wire \$auto$builder.cc:338:Biop$5195 ;
  wire \$auto$builder.cc:338:Biop$5197 ;
  wire \$auto$builder.cc:338:Biop$5204 ;
  wire \$auto$builder.cc:338:Biop$5206 ;
  wire \$auto$builder.cc:338:Biop$5213 ;
  wire \$auto$builder.cc:338:Biop$5215 ;
  wire \$auto$builder.cc:338:Biop$5222 ;
  wire \$auto$builder.cc:338:Biop$5224 ;
  wire \$auto$builder.cc:338:Biop$5233 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17443 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17458 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17450 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17463 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17115 ;
  wire [6:0] \$auto$opt_share.cc:222:merge_operators$18114 ;
  wire \$auto$rtlil.cc:2739:Not$17449 ;
  wire [6:0] \$auto$rtlil.cc:2874:Mux$18116 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:883.13-890.18" */
  wire [7:0] \$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5242 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:895.13-902.18" */
  wire [7:0] \$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5247 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:847.8-850.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iBAUDOUTN$5191 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:344.18-347.18" */
  wire \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4519 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  wire \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4520 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4521 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iFCR_RXFIFOReset$4577 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iFCR_TXFIFOReset$4578 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iFECounter$4701 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:483.13-486.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_BI$4659 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_BI$4660 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:475.13-478.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_FE$4649 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_FE$4650 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:491.13-494.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4673 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4674 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:459.13-462.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_OE$4629 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_OE$4630 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:467.13-470.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_PE$4639 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_PE$4640 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:591.13-594.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4903 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4904 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:575.13-578.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4879 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4880 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:599.13-602.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4917 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4918 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:583.13-586.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4893 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4894 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:823.13-826.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iRTS$5182 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iRTS$5183 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:793.27-794.50" */
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5133 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5134 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5147 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:804.27-805.45" */
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5145 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5146 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5148 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:303.13-306.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4452 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4453 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire \$auto$slang_frontend.cc:694:finish$\iTXStart$5119 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\iTimeoutCount$4506 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  wire \$auto$slang_frontend.cc:694:finish$\rx_State$5150 ;
  /* src = "../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\tx_State$5121 ;
  wire \$procmux$14471_CMP ;
  /* src = "../rtl/apb_uart/apb_uart.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/apb_uart.sv:51.14" */
  input CTSN;
  wire CTSN;
  /* src = "../rtl/apb_uart/apb_uart.sv:53.14" */
  input DCDN;
  wire DCDN;
  /* src = "../rtl/apb_uart/apb_uart.sv:52.14" */
  input DSRN;
  wire DSRN;
  /* src = "../rtl/apb_uart/apb_uart.sv:50.16" */
  output DTRN;
  wire DTRN;
  /* src = "../rtl/apb_uart/apb_uart.sv:46.16" */
  output INT;
  wire INT;
  /* src = "../rtl/apb_uart/apb_uart.sv:47.16" */
  output OUT1N;
  wire OUT1N;
  /* src = "../rtl/apb_uart/apb_uart.sv:48.16" */
  output OUT2N;
  wire OUT2N;
  /* src = "../rtl/apb_uart/apb_uart.sv:41.20" */
  input [2:0] PADDR;
  wire [2:0] PADDR;
  /* src = "../rtl/apb_uart/apb_uart.sv:39.14" */
  input PENABLE;
  wire PENABLE;
  /* src = "../rtl/apb_uart/apb_uart.sv:43.23" */
  output [31:0] PRDATA;
  wire [31:0] PRDATA;
  /* src = "../rtl/apb_uart/apb_uart.sv:44.16" */
  output PREADY;
  wire PREADY;
  /* src = "../rtl/apb_uart/apb_uart.sv:38.14" */
  input PSEL;
  wire PSEL;
  /* src = "../rtl/apb_uart/apb_uart.sv:45.16" */
  output PSLVERR;
  wire PSLVERR;
  /* src = "../rtl/apb_uart/apb_uart.sv:42.21" */
  input [31:0] PWDATA;
  wire [31:0] PWDATA;
  /* src = "../rtl/apb_uart/apb_uart.sv:40.14" */
  input PWRITE;
  wire PWRITE;
  /* src = "../rtl/apb_uart/apb_uart.sv:54.14" */
  input RIN;
  wire RIN;
  /* src = "../rtl/apb_uart/apb_uart.sv:37.14" */
  input RSTN;
  wire RSTN;
  /* src = "../rtl/apb_uart/apb_uart.sv:49.16" */
  output RTSN;
  wire RTSN;
  /* src = "../rtl/apb_uart/apb_uart.sv:55.14" */
  input SIN;
  wire SIN;
  /* src = "../rtl/apb_uart/apb_uart.sv:56.16" */
  output SOUT;
  wire SOUT;
  /* src = "../rtl/apb_uart/apb_uart.sv:157.5" */
  wire iBAUDOUTN;
  /* src = "../rtl/apb_uart/apb_uart.sv:198.5" */
  wire iBIRE;
  /* src = "../rtl/apb_uart/apb_uart.sv:153.12" */
  wire [15:0] iBaudgenDiv;
  /* src = "../rtl/apb_uart/apb_uart.sv:154.5" */
  wire iBaudtick16x;
  /* src = "../rtl/apb_uart/apb_uart.sv:155.5" */
  wire iBaudtick2x;
  /* src = "../rtl/apb_uart/apb_uart.sv:137.5" */
  wire iCTSNs;
  /* src = "../rtl/apb_uart/apb_uart.sv:141.5" */
  wire iCTSn;
  /* src = "../rtl/apb_uart/apb_uart.sv:146.5" */
  wire iCTSnFE;
  /* src = "../rtl/apb_uart/apb_uart.sv:145.5" */
  wire iCTSnRE;
  /* src = "../rtl/apb_uart/apb_uart.sv:204.5" */
  wire iCharTimeout;
  /* src = "../rtl/apb_uart/apb_uart.sv:139.5" */
  wire iDCDNs;
  /* src = "../rtl/apb_uart/apb_uart.sv:143.5" */
  wire iDCDn;
  /* src = "../rtl/apb_uart/apb_uart.sv:150.5" */
  wire iDCDnFE;
  /* src = "../rtl/apb_uart/apb_uart.sv:149.5" */
  wire iDCDnRE;
  /* src = "../rtl/apb_uart/apb_uart.sv:83.11" */
  wire [7:0] iDLL;
  /* src = "../rtl/apb_uart/apb_uart.sv:71.5" */
  wire iDLLWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:84.11" */
  wire [7:0] iDLM;
  /* src = "../rtl/apb_uart/apb_uart.sv:72.5" */
  wire iDLMWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:138.5" */
  wire iDSRNs;
  /* src = "../rtl/apb_uart/apb_uart.sv:142.5" */
  wire iDSRn;
  /* src = "../rtl/apb_uart/apb_uart.sv:148.5" */
  wire iDSRnFE;
  /* src = "../rtl/apb_uart/apb_uart.sv:147.5" */
  wire iDSRnRE;
  /* src = "../rtl/apb_uart/apb_uart.sv:87.11" */
  wire [7:0] iFCR;
  /* src = "../rtl/apb_uart/apb_uart.sv:75.5" */
  wire iFCRWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:105.5" */
  wire iFCR_DMAMode;
  /* src = "../rtl/apb_uart/apb_uart.sv:106.5" */
  wire iFCR_FIFO64E;
  /* src = "../rtl/apb_uart/apb_uart.sv:102.5" */
  wire iFCR_FIFOEnable;
  /* src = "../rtl/apb_uart/apb_uart.sv:103.5" */
  wire iFCR_RXFIFOReset;
  /* src = "../rtl/apb_uart/apb_uart.sv:107.11" */
  wire [1:0] iFCR_RXTrigger;
  /* src = "../rtl/apb_uart/apb_uart.sv:104.5" */
  wire iFCR_TXFIFOReset;
  /* src = "../rtl/apb_uart/apb_uart.sv:199.11" */
  wire [6:0] iFECounter;
  /* src = "../rtl/apb_uart/apb_uart.sv:201.5" */
  wire iFEDecrement;
  /* src = "../rtl/apb_uart/apb_uart.sv:200.5" */
  wire iFEIncrement;
  /* src = "../rtl/apb_uart/apb_uart.sv:196.5" */
  wire iFERE;
  /* src = "../rtl/apb_uart/apb_uart.sv:85.11" */
  wire [7:0] iIER;
  /* src = "../rtl/apb_uart/apb_uart.sv:73.5" */
  wire iIERWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:96.5" */
  wire iIER_EDSSI;
  /* src = "../rtl/apb_uart/apb_uart.sv:95.5" */
  wire iIER_ELSI;
  /* src = "../rtl/apb_uart/apb_uart.sv:93.5" */
  wire iIER_ERBI;
  /* src = "../rtl/apb_uart/apb_uart.sv:94.5" */
  wire iIER_ETBEI;
  /* src = "../rtl/apb_uart/apb_uart.sv:86.11" */
  wire [7:0] iIIR;
  /* src = "../rtl/apb_uart/apb_uart.sv:74.5" */
  wire iIIRRead;
  /* src = "../rtl/apb_uart/apb_uart.sv:101.5" */
  wire iIIR_FIFO64;
  /* src = "../rtl/apb_uart/apb_uart.sv:98.5" */
  wire iIIR_ID0;
  /* src = "../rtl/apb_uart/apb_uart.sv:99.5" */
  wire iIIR_ID1;
  /* src = "../rtl/apb_uart/apb_uart.sv:100.5" */
  wire iIIR_ID2;
  /* src = "../rtl/apb_uart/apb_uart.sv:97.5" */
  wire iIIR_PI;
  /* src = "../rtl/apb_uart/apb_uart.sv:88.11" */
  wire [7:0] iLCR;
  /* src = "../rtl/apb_uart/apb_uart.sv:76.5" */
  wire iLCRWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:113.5" */
  wire iLCR_BC;
  /* src = "../rtl/apb_uart/apb_uart.sv:114.5" */
  wire iLCR_DLAB;
  /* src = "../rtl/apb_uart/apb_uart.sv:111.5" */
  wire iLCR_EPS;
  /* src = "../rtl/apb_uart/apb_uart.sv:110.5" */
  wire iLCR_PEN;
  /* src = "../rtl/apb_uart/apb_uart.sv:112.5" */
  wire iLCR_SP;
  /* src = "../rtl/apb_uart/apb_uart.sv:109.5" */
  wire iLCR_STB;
  /* src = "../rtl/apb_uart/apb_uart.sv:108.11" */
  wire [1:0] iLCR_WLS;
  /* src = "../rtl/apb_uart/apb_uart.sv:90.11" */
  wire [7:0] iLSR;
  /* src = "../rtl/apb_uart/apb_uart.sv:78.5" */
  wire iLSRRead;
  /* src = "../rtl/apb_uart/apb_uart.sv:125.5" */
  wire iLSR_BI;
  /* src = "../rtl/apb_uart/apb_uart.sv:121.5" */
  wire iLSR_DR;
  /* src = "../rtl/apb_uart/apb_uart.sv:124.5" */
  wire iLSR_FE;
  /* src = "../rtl/apb_uart/apb_uart.sv:128.5" */
  wire iLSR_FIFOERR;
  /* src = "../rtl/apb_uart/apb_uart.sv:122.5" */
  wire iLSR_OE;
  /* src = "../rtl/apb_uart/apb_uart.sv:123.5" */
  wire iLSR_PE;
  /* src = "../rtl/apb_uart/apb_uart.sv:127.5" */
  wire iLSR_TEMT;
  /* src = "../rtl/apb_uart/apb_uart.sv:126.5" */
  wire iLSR_THRE;
  /* src = "../rtl/apb_uart/apb_uart.sv:205.5" */
  wire iLSR_THRERE;
  /* src = "../rtl/apb_uart/apb_uart.sv:89.11" */
  wire [7:0] iMCR;
  /* src = "../rtl/apb_uart/apb_uart.sv:77.5" */
  wire iMCRWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:120.5" */
  wire iMCR_AFE;
  /* src = "../rtl/apb_uart/apb_uart.sv:115.5" */
  wire iMCR_DTR;
  /* src = "../rtl/apb_uart/apb_uart.sv:119.5" */
  wire iMCR_LOOP;
  /* src = "../rtl/apb_uart/apb_uart.sv:117.5" */
  wire iMCR_OUT1;
  /* src = "../rtl/apb_uart/apb_uart.sv:118.5" */
  wire iMCR_OUT2;
  /* src = "../rtl/apb_uart/apb_uart.sv:116.5" */
  wire iMCR_RTS;
  /* src = "../rtl/apb_uart/apb_uart.sv:91.11" */
  wire [7:0] iMSR;
  /* src = "../rtl/apb_uart/apb_uart.sv:79.5" */
  wire iMSRRead;
  /* src = "../rtl/apb_uart/apb_uart.sv:133.5" */
  wire iMSR_CTS;
  /* src = "../rtl/apb_uart/apb_uart.sv:136.5" */
  wire iMSR_DCD;
  /* src = "../rtl/apb_uart/apb_uart.sv:134.5" */
  wire iMSR_DSR;
  /* src = "../rtl/apb_uart/apb_uart.sv:135.5" */
  wire iMSR_RI;
  /* src = "../rtl/apb_uart/apb_uart.sv:131.5" */
  wire iMSR_TERI;
  /* src = "../rtl/apb_uart/apb_uart.sv:129.5" */
  wire iMSR_dCTS;
  /* src = "../rtl/apb_uart/apb_uart.sv:132.5" */
  wire iMSR_dDCD;
  /* src = "../rtl/apb_uart/apb_uart.sv:130.5" */
  wire iMSR_dDSR;
  /* src = "../rtl/apb_uart/apb_uart.sv:197.5" */
  wire iPERE;
  /* src = "../rtl/apb_uart/apb_uart.sv:82.11" */
  wire [7:0] iRBR;
  /* src = "../rtl/apb_uart/apb_uart.sv:69.5" */
  wire iRBRRead;
  /* src = "../rtl/apb_uart/apb_uart.sv:156.5" */
  wire iRCLK;
  /* src = "../rtl/apb_uart/apb_uart.sv:202.5" */
  wire iRDAInterrupt;
  /* src = "../rtl/apb_uart/apb_uart.sv:140.5" */
  wire iRINs;
  /* src = "../rtl/apb_uart/apb_uart.sv:144.5" */
  wire iRIn;
  /* src = "../rtl/apb_uart/apb_uart.sv:152.5" */
  wire iRInFE;
  /* src = "../rtl/apb_uart/apb_uart.sv:151.5" */
  /* unused_bits = "0" */
  wire iRInRE;
  /* src = "../rtl/apb_uart/apb_uart.sv:68.5" */
  wire iRST;
  /* src = "../rtl/apb_uart/apb_uart.sv:208.5" */
  wire iRTS;
  /* src = "../rtl/apb_uart/apb_uart.sv:195.5" */
  wire iRXBI;
  /* src = "../rtl/apb_uart/apb_uart.sv:191.5" */
  wire iRXClear;
  /* src = "../rtl/apb_uart/apb_uart.sv:192.11" */
  wire [7:0] iRXData;
  /* src = "../rtl/apb_uart/apb_uart.sv:194.5" */
  wire iRXFE;
  /* src = "../rtl/apb_uart/apb_uart.sv:172.5" */
  wire iRXFIFO16Full;
  /* src = "../rtl/apb_uart/apb_uart.sv:178.5" */
  wire iRXFIFO16Trigger;
  /* src = "../rtl/apb_uart/apb_uart.sv:173.5" */
  wire iRXFIFO64Full;
  /* src = "../rtl/apb_uart/apb_uart.sv:179.5" */
  wire iRXFIFO64Trigger;
  /* src = "../rtl/apb_uart/apb_uart.sv:182.5" */
  wire iRXFIFOBI;
  /* src = "../rtl/apb_uart/apb_uart.sv:167.5" */
  wire iRXFIFOClear;
  /* src = "../rtl/apb_uart/apb_uart.sv:174.12" */
  wire [10:0] iRXFIFOD;
  /* src = "../rtl/apb_uart/apb_uart.sv:170.5" */
  wire iRXFIFOEmpty;
  /* src = "../rtl/apb_uart/apb_uart.sv:181.5" */
  wire iRXFIFOFE;
  /* src = "../rtl/apb_uart/apb_uart.sv:171.5" */
  wire iRXFIFOFull;
  /* src = "../rtl/apb_uart/apb_uart.sv:180.5" */
  wire iRXFIFOPE;
  /* src = "../rtl/apb_uart/apb_uart.sv:175.12" */
  wire [10:0] iRXFIFOQ;
  /* src = "../rtl/apb_uart/apb_uart.sv:169.5" */
  wire iRXFIFORead;
  /* src = "../rtl/apb_uart/apb_uart.sv:177.5" */
  wire iRXFIFOTrigger;
  /* src = "../rtl/apb_uart/apb_uart.sv:176.11" */
  /* unused_bits = "0" */
  wire [5:0] iRXFIFOUsage;
  /* src = "../rtl/apb_uart/apb_uart.sv:168.5" */
  wire iRXFIFOWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:190.5" */
  wire iRXFinished;
  /* src = "../rtl/apb_uart/apb_uart.sv:193.5" */
  wire iRXPE;
  /* src = "../rtl/apb_uart/apb_uart.sv:67.5" */
  wire iRead;
  /* src = "../rtl/apb_uart/apb_uart.sv:92.11" */
  wire [7:0] iSCR;
  /* src = "../rtl/apb_uart/apb_uart.sv:80.5" */
  wire iSCRWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:189.5" */
  wire iSIN;
  /* src = "../rtl/apb_uart/apb_uart.sv:188.5" */
  wire iSINr;
  /* src = "../rtl/apb_uart/apb_uart.sv:183.5" */
  wire iSOUT;
  /* src = "../rtl/apb_uart/apb_uart.sv:206.5" */
  wire iTHRInterrupt;
  /* src = "../rtl/apb_uart/apb_uart.sv:70.5" */
  wire iTHRWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:81.11" */
  wire [7:0] iTSR;
  /* src = "../rtl/apb_uart/apb_uart.sv:185.5" */
  wire iTXClear;
  /* src = "../rtl/apb_uart/apb_uart.sv:207.5" */
  wire iTXEnable;
  /* src = "../rtl/apb_uart/apb_uart.sv:163.5" */
  wire iTXFIFO16Full;
  /* src = "../rtl/apb_uart/apb_uart.sv:164.5" */
  wire iTXFIFO64Full;
  /* src = "../rtl/apb_uart/apb_uart.sv:158.5" */
  wire iTXFIFOClear;
  /* src = "../rtl/apb_uart/apb_uart.sv:161.5" */
  wire iTXFIFOEmpty;
  /* src = "../rtl/apb_uart/apb_uart.sv:162.5" */
  wire iTXFIFOFull;
  /* src = "../rtl/apb_uart/apb_uart.sv:166.11" */
  wire [7:0] iTXFIFOQ;
  /* src = "../rtl/apb_uart/apb_uart.sv:160.5" */
  wire iTXFIFORead;
  /* src = "../rtl/apb_uart/apb_uart.sv:165.11" */
  /* unused_bits = "0 1 2 3 5" */
  wire [5:0] iTXFIFOUsage;
  /* src = "../rtl/apb_uart/apb_uart.sv:159.5" */
  wire iTXFIFOWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:186.5" */
  wire iTXFinished;
  /* src = "../rtl/apb_uart/apb_uart.sv:187.5" */
  wire iTXRunning;
  /* src = "../rtl/apb_uart/apb_uart.sv:184.5" */
  wire iTXStart;
  /* src = "../rtl/apb_uart/apb_uart.sv:203.11" */
  wire [5:0] iTimeoutCount;
  /* src = "../rtl/apb_uart/apb_uart.sv:66.5" */
  wire iWrite;
  /* src = "../rtl/apb_uart/apb_uart.sv:720.18" */
  wire rx_State;
  /* src = "../rtl/apb_uart/apb_uart.sv:721.18" */
  wire [1:0] tx_State;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4226  (
    .A(PSEL),
    .B(PENABLE),
    .Y(\$auto$builder.cc:338:Biop$4227 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4230  (
    .A(\$auto$builder.cc:338:Biop$4227 ),
    .B(PWRITE),
    .Y(iWrite)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4242  (
    .A(PWRITE),
    .Y(\$auto$builder.cc:338:Biop$4243 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4244  (
    .A(\$auto$builder.cc:338:Biop$4227 ),
    .B(\$auto$builder.cc:338:Biop$4243 ),
    .Y(iRead)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4258  (
    .A(PADDR),
    .Y(\$auto$builder.cc:338:Biop$4259 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4260  (
    .A(iRead),
    .B(\$auto$builder.cc:338:Biop$4259 ),
    .Y(\$auto$builder.cc:338:Biop$4261 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4262  (
    .A(iLCR[7]),
    .Y(\$auto$builder.cc:338:Biop$4263 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4264  (
    .A(\$auto$builder.cc:338:Biop$4261 ),
    .B(\$auto$builder.cc:338:Biop$4263 ),
    .Y(iRBRRead)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4274  (
    .A(iWrite),
    .B(\$auto$builder.cc:338:Biop$4259 ),
    .Y(\$auto$builder.cc:338:Biop$4275 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4278  (
    .A(\$auto$builder.cc:338:Biop$4275 ),
    .B(\$auto$builder.cc:338:Biop$4263 ),
    .Y(iTHRWrite)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4292  (
    .A(\$auto$builder.cc:338:Biop$4275 ),
    .B(iLCR[7]),
    .Y(iDLLWrite)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4300  (
    .A(PADDR),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$4301 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4302  (
    .A(iWrite),
    .B(\$auto$builder.cc:338:Biop$4301 ),
    .Y(\$auto$builder.cc:338:Biop$4303 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4306  (
    .A(\$auto$builder.cc:338:Biop$4303 ),
    .B(iLCR[7]),
    .Y(iDLMWrite)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4320  (
    .A(\$auto$builder.cc:338:Biop$4303 ),
    .B(\$auto$builder.cc:338:Biop$4263 ),
    .Y(iIERWrite)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4328  (
    .A(PADDR),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$4329 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4330  (
    .A(iRead),
    .B(\$auto$builder.cc:338:Biop$4329 ),
    .Y(iIIRRead)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4340  (
    .A(iWrite),
    .B(\$auto$builder.cc:338:Biop$4329 ),
    .Y(iFCRWrite)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4348  (
    .A(PADDR),
    .B(2'h3),
    .Y(\$auto$builder.cc:338:Biop$4349 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4350  (
    .A(iWrite),
    .B(\$auto$builder.cc:338:Biop$4349 ),
    .Y(iLCRWrite)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4358  (
    .A(PADDR),
    .B(3'h4),
    .Y(\$auto$builder.cc:338:Biop$4359 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4360  (
    .A(iWrite),
    .B(\$auto$builder.cc:338:Biop$4359 ),
    .Y(iMCRWrite)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4368  (
    .A(PADDR),
    .B(3'h5),
    .Y(\$auto$builder.cc:338:Biop$4369 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4370  (
    .A(iRead),
    .B(\$auto$builder.cc:338:Biop$4369 ),
    .Y(iLSRRead)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4378  (
    .A(PADDR),
    .B(3'h6),
    .Y(\$auto$builder.cc:338:Biop$4379 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4380  (
    .A(iRead),
    .B(\$auto$builder.cc:338:Biop$4379 ),
    .Y(iMSRRead)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4388  (
    .A(PADDR),
    .B(3'h7),
    .Y(\$auto$builder.cc:338:Biop$4389 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4390  (
    .A(iWrite),
    .B(\$auto$builder.cc:338:Biop$4389 ),
    .Y(iSCRWrite)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4424  (
    .A(iLSR_THRERE),
    .B(iFCR_TXFIFOReset),
    .Y(\$auto$builder.cc:338:Biop$4425 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4430  (
    .A(iIERWrite),
    .B(PWDATA[1]),
    .Y(\$auto$builder.cc:338:Biop$4431 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4434  (
    .A(\$auto$builder.cc:338:Biop$4431 ),
    .B(iLSR_THRE),
    .Y(\$auto$builder.cc:338:Biop$4435 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4436  (
    .A(\$auto$builder.cc:338:Biop$4425 ),
    .B(\$auto$builder.cc:338:Biop$4435 ),
    .Y(\$auto$builder.cc:338:Biop$4437 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4442  (
    .A(iIIR[3:1]),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$4443 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4444  (
    .A(iIIRRead),
    .B(\$auto$builder.cc:338:Biop$4443 ),
    .Y(\$auto$builder.cc:338:Biop$4445 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4448  (
    .A(\$auto$builder.cc:338:Biop$4445 ),
    .B(iTHRWrite),
    .Y(\$auto$builder.cc:338:Biop$4449 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4454  (
    .A(iFCR_FIFOEnable),
    .Y(\$auto$builder.cc:338:Biop$4455 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4458  (
    .A(\$auto$builder.cc:338:Biop$4455 ),
    .B(iLSR_DR),
    .Y(\$auto$builder.cc:338:Biop$4459 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4464  (
    .A(iFCR_FIFOEnable),
    .B(iRXFIFOTrigger),
    .Y(\$auto$builder.cc:338:Biop$4465 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4466  (
    .A(\$auto$builder.cc:338:Biop$4459 ),
    .B(\$auto$builder.cc:338:Biop$4465 ),
    .Y(iRDAInterrupt)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4483  (
    .A(iRXFIFOEmpty),
    .B(iRBRRead),
    .Y(\$auto$builder.cc:338:Biop$4484 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4487  (
    .A(\$auto$builder.cc:338:Biop$4484 ),
    .B(iRXFIFOWrite),
    .Y(\$auto$builder.cc:338:Biop$4488 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4491  (
    .A(iRXFIFOEmpty),
    .Y(\$auto$builder.cc:338:Biop$4492 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4495  (
    .A(\$auto$builder.cc:338:Biop$4492 ),
    .B(iBaudtick2x),
    .Y(\$auto$builder.cc:338:Biop$4496 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4497  (
    .A(iTimeoutCount[5]),
    .Y(\$auto$builder.cc:338:Biop$4498 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4499  (
    .A(\$auto$builder.cc:338:Biop$4496 ),
    .B(\$auto$builder.cc:338:Biop$4498 ),
    .Y(\$auto$builder.cc:338:Biop$4500 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd6)
  ) \$auto$builder.cc:330:Biop$4503  (
    .A(iTimeoutCount),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$4504 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4540  (
    .A(\$auto$builder.cc:338:Biop$4455 ),
    .B(PWDATA[0]),
    .Y(\$auto$builder.cc:338:Biop$4541 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4542  (
    .A(PWDATA[1]),
    .B(\$auto$builder.cc:338:Biop$4541 ),
    .Y(\$auto$builder.cc:338:Biop$4543 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4546  (
    .A(PWDATA[0]),
    .Y(\$auto$builder.cc:338:Biop$4547 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4548  (
    .A(iFCR_FIFOEnable),
    .B(\$auto$builder.cc:338:Biop$4547 ),
    .Y(\$auto$builder.cc:338:Biop$4549 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4550  (
    .A(\$auto$builder.cc:338:Biop$4543 ),
    .B(\$auto$builder.cc:338:Biop$4549 ),
    .Y(\$auto$builder.cc:338:Biop$4551 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4563  (
    .A(PWDATA[2]),
    .B(\$auto$builder.cc:338:Biop$4541 ),
    .Y(\$auto$builder.cc:338:Biop$4564 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4571  (
    .A(\$auto$builder.cc:338:Biop$4564 ),
    .B(\$auto$builder.cc:338:Biop$4549 ),
    .Y(\$auto$builder.cc:338:Biop$4572 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4609  (
    .A(\$auto$builder.cc:338:Biop$4459 ),
    .B(iRXFinished),
    .Y(\$auto$builder.cc:338:Biop$4610 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4615  (
    .A(iFCR_FIFOEnable),
    .B(iRXFIFOFull),
    .Y(\$auto$builder.cc:338:Biop$4616 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4619  (
    .A(\$auto$builder.cc:338:Biop$4616 ),
    .B(iRXFinished),
    .Y(\$auto$builder.cc:338:Biop$4620 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4621  (
    .A(\$auto$builder.cc:338:Biop$4610 ),
    .B(\$auto$builder.cc:338:Biop$4620 ),
    .Y(\$auto$builder.cc:338:Biop$4622 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4661  (
    .A(iFECounter),
    .Y(\$auto$builder.cc:338:Biop$4662 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4667  (
    .A(iRXFIFOQ[10:8]),
    .Y(\$auto$builder.cc:338:Biop$4668 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4669  (
    .A(iRXFIFOEmpty),
    .B(\$auto$builder.cc:338:Biop$4668 ),
    .Y(\$auto$builder.cc:338:Biop$4670 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4681  (
    .A(iFEDecrement),
    .Y(\$auto$builder.cc:338:Biop$4682 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4683  (
    .A(iFEIncrement),
    .B(\$auto$builder.cc:338:Biop$4682 ),
    .Y(\$auto$builder.cc:338:Biop$4684 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd7)
  ) \$auto$builder.cc:330:Biop$4687  (
    .A(iFECounter),
    .B({ \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18114 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4689  (
    .A(iFEIncrement),
    .Y(\$auto$builder.cc:338:Biop$4690 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4693  (
    .A(\$auto$builder.cc:338:Biop$4690 ),
    .B(iFEDecrement),
    .Y(\$auto$builder.cc:338:Biop$4694 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4706  (
    .A(\$auto$builder.cc:338:Biop$4492 ),
    .B(iRXFIFOQ[8]),
    .Y(iRXFIFOPE)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4716  (
    .A(\$auto$builder.cc:338:Biop$4492 ),
    .B(iRXFIFOQ[9]),
    .Y(iRXFIFOFE)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4726  (
    .A(\$auto$builder.cc:338:Biop$4492 ),
    .B(iRXFIFOQ[10]),
    .Y(iRXFIFOBI)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4734  (
    .A(iRXFIFOD[10:8]),
    .Y(\$auto$builder.cc:338:Biop$4735 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4736  (
    .A(iRXFIFOWrite),
    .B(\$auto$builder.cc:338:Biop$4735 ),
    .Y(iFEIncrement)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4746  (
    .A(\$auto$builder.cc:338:Biop$4662 ),
    .B(\$auto$builder.cc:338:Biop$4492 ),
    .Y(\$auto$builder.cc:338:Biop$4747 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4752  (
    .A(iPERE),
    .B(iFERE),
    .Y(\$auto$builder.cc:338:Biop$4753 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4756  (
    .A(\$auto$builder.cc:338:Biop$4753 ),
    .B(iBIRE),
    .Y(\$auto$builder.cc:338:Biop$4757 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4758  (
    .A(\$auto$builder.cc:338:Biop$4747 ),
    .B(\$auto$builder.cc:338:Biop$4757 ),
    .Y(iFEDecrement)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4764  (
    .A(iFCR_FIFOEnable),
    .B(iLSR_FIFOERR),
    .Y(iLSR[7])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4770  (
    .A(\$auto$builder.cc:338:Biop$4492 ),
    .B(iRXFIFOWrite),
    .Y(iLSR_DR)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4782  (
    .A(iTXRunning),
    .Y(\$auto$builder.cc:338:Biop$4783 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4786  (
    .A(\$auto$builder.cc:338:Biop$4783 ),
    .B(iLSR_THRE),
    .Y(iLSR_TEMT)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4796  (
    .A(iMCR[4]),
    .B(iRTS),
    .Y(\$auto$builder.cc:338:Biop$4797 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4798  (
    .A(iMCR[4]),
    .Y(\$auto$builder.cc:338:Biop$4799 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4800  (
    .A(iCTSn),
    .Y(\$auto$builder.cc:338:Biop$4801 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4802  (
    .A(\$auto$builder.cc:338:Biop$4799 ),
    .B(\$auto$builder.cc:338:Biop$4801 ),
    .Y(\$auto$builder.cc:338:Biop$4803 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4804  (
    .A(\$auto$builder.cc:338:Biop$4797 ),
    .B(\$auto$builder.cc:338:Biop$4803 ),
    .Y(iMSR_CTS)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4814  (
    .A(iMCR[4]),
    .B(iMCR[0]),
    .Y(\$auto$builder.cc:338:Biop$4815 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4818  (
    .A(iDSRn),
    .Y(\$auto$builder.cc:338:Biop$4819 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4820  (
    .A(\$auto$builder.cc:338:Biop$4799 ),
    .B(\$auto$builder.cc:338:Biop$4819 ),
    .Y(\$auto$builder.cc:338:Biop$4821 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4822  (
    .A(\$auto$builder.cc:338:Biop$4815 ),
    .B(\$auto$builder.cc:338:Biop$4821 ),
    .Y(iMSR_DSR)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4832  (
    .A(iMCR[4]),
    .B(iMCR[2]),
    .Y(\$auto$builder.cc:338:Biop$4833 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4836  (
    .A(iRIn),
    .Y(\$auto$builder.cc:338:Biop$4837 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4838  (
    .A(\$auto$builder.cc:338:Biop$4799 ),
    .B(\$auto$builder.cc:338:Biop$4837 ),
    .Y(\$auto$builder.cc:338:Biop$4839 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4840  (
    .A(\$auto$builder.cc:338:Biop$4833 ),
    .B(\$auto$builder.cc:338:Biop$4839 ),
    .Y(iMSR_RI)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4850  (
    .A(iMCR[4]),
    .B(iMCR[3]),
    .Y(\$auto$builder.cc:338:Biop$4851 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4854  (
    .A(iDCDn),
    .Y(\$auto$builder.cc:338:Biop$4855 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4856  (
    .A(\$auto$builder.cc:338:Biop$4799 ),
    .B(\$auto$builder.cc:338:Biop$4855 ),
    .Y(\$auto$builder.cc:338:Biop$4857 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4858  (
    .A(\$auto$builder.cc:338:Biop$4851 ),
    .B(\$auto$builder.cc:338:Biop$4857 ),
    .Y(iMSR_DCD)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4871  (
    .A(iCTSnRE),
    .B(iCTSnFE),
    .Y(\$auto$builder.cc:338:Biop$4872 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4885  (
    .A(iDSRnRE),
    .B(iDSRnFE),
    .Y(\$auto$builder.cc:338:Biop$4886 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4909  (
    .A(iDCDnRE),
    .B(iDCDnFE),
    .Y(\$auto$builder.cc:338:Biop$4910 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4937  (
    .A(\$auto$builder.cc:338:Biop$4455 ),
    .B(iLSR_THRE),
    .Y(\$auto$builder.cc:338:Biop$4938 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4941  (
    .A(iTXFIFOFull),
    .Y(\$auto$builder.cc:338:Biop$4942 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4943  (
    .A(iFCR_FIFOEnable),
    .B(\$auto$builder.cc:338:Biop$4942 ),
    .Y(\$auto$builder.cc:338:Biop$4944 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4945  (
    .A(\$auto$builder.cc:338:Biop$4938 ),
    .B(\$auto$builder.cc:338:Biop$4944 ),
    .Y(\$auto$builder.cc:338:Biop$4946 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4949  (
    .A(\$auto$builder.cc:338:Biop$4946 ),
    .B(iTHRWrite),
    .Y(iTXFIFOWrite)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4973  (
    .A(iFCR_RXTrigger),
    .Y(\$auto$builder.cc:338:Biop$4974 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4977  (
    .A(\$auto$builder.cc:338:Biop$4974 ),
    .B(\$auto$builder.cc:338:Biop$4492 ),
    .Y(\$auto$builder.cc:338:Biop$4978 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4979  (
    .A(iFCR_RXTrigger),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$4980 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4985  (
    .A(iRXFIFOUsage[2]),
    .B(iRXFIFOUsage[3]),
    .Y(\$auto$builder.cc:338:Biop$4986 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4987  (
    .A(\$auto$builder.cc:338:Biop$4980 ),
    .B(\$auto$builder.cc:338:Biop$4986 ),
    .Y(\$auto$builder.cc:338:Biop$4988 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4989  (
    .A(\$auto$builder.cc:338:Biop$4978 ),
    .B(\$auto$builder.cc:338:Biop$4988 ),
    .Y(\$auto$builder.cc:338:Biop$4990 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4991  (
    .A(iFCR_RXTrigger),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$4992 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4995  (
    .A(\$auto$builder.cc:338:Biop$4992 ),
    .B(iRXFIFOUsage[3]),
    .Y(\$auto$builder.cc:338:Biop$4996 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4997  (
    .A(\$auto$builder.cc:338:Biop$4990 ),
    .B(\$auto$builder.cc:338:Biop$4996 ),
    .Y(\$auto$builder.cc:338:Biop$4998 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4999  (
    .A(iFCR_RXTrigger),
    .B(2'h3),
    .Y(\$auto$builder.cc:338:Biop$5000 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5003  (
    .A(\$auto$builder.cc:338:Biop$5000 ),
    .B(iRXFIFOUsage[3]),
    .Y(\$auto$builder.cc:338:Biop$5004 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5007  (
    .A(\$auto$builder.cc:338:Biop$5004 ),
    .B(iRXFIFOUsage[2]),
    .Y(\$auto$builder.cc:338:Biop$5008 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5011  (
    .A(\$auto$builder.cc:338:Biop$5008 ),
    .B(iRXFIFOUsage[1]),
    .Y(\$auto$builder.cc:338:Biop$5012 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5013  (
    .A(\$auto$builder.cc:338:Biop$4998 ),
    .B(\$auto$builder.cc:338:Biop$5012 ),
    .Y(\$auto$builder.cc:338:Biop$5014 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5017  (
    .A(\$auto$builder.cc:338:Biop$5014 ),
    .B(iRXFIFOUsage[4]),
    .Y(iRXFIFO16Trigger)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5035  (
    .A(iRXFIFOUsage[4]),
    .B(iRXFIFOUsage[5]),
    .Y(\$auto$builder.cc:338:Biop$5036 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5037  (
    .A(\$auto$builder.cc:338:Biop$4980 ),
    .B(\$auto$builder.cc:338:Biop$5036 ),
    .Y(\$auto$builder.cc:338:Biop$5038 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5039  (
    .A(\$auto$builder.cc:338:Biop$4978 ),
    .B(\$auto$builder.cc:338:Biop$5038 ),
    .Y(\$auto$builder.cc:338:Biop$5040 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5045  (
    .A(\$auto$builder.cc:338:Biop$4992 ),
    .B(iRXFIFOUsage[5]),
    .Y(\$auto$builder.cc:338:Biop$5046 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5047  (
    .A(\$auto$builder.cc:338:Biop$5040 ),
    .B(\$auto$builder.cc:338:Biop$5046 ),
    .Y(\$auto$builder.cc:338:Biop$5048 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5053  (
    .A(\$auto$builder.cc:338:Biop$5000 ),
    .B(iRXFIFOUsage[5]),
    .Y(\$auto$builder.cc:338:Biop$5054 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5057  (
    .A(\$auto$builder.cc:338:Biop$5054 ),
    .B(iRXFIFOUsage[4]),
    .Y(\$auto$builder.cc:338:Biop$5058 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5061  (
    .A(\$auto$builder.cc:338:Biop$5058 ),
    .B(iRXFIFOUsage[3]),
    .Y(\$auto$builder.cc:338:Biop$5062 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5063  (
    .A(\$auto$builder.cc:338:Biop$5048 ),
    .B(\$auto$builder.cc:338:Biop$5062 ),
    .Y(\$auto$builder.cc:338:Biop$5064 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5067  (
    .A(\$auto$builder.cc:338:Biop$5064 ),
    .B(iRXFIFO64Full),
    .Y(iRXFIFO64Trigger)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5085  (
    .A(iLSR_THRE),
    .Y(\$auto$builder.cc:338:Biop$5086 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5087  (
    .A(iMCR[5]),
    .Y(\$auto$builder.cc:338:Biop$5088 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5093  (
    .A(iMCR[5]),
    .B(iMSR_CTS),
    .Y(\$auto$builder.cc:338:Biop$5094 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5095  (
    .A(\$auto$builder.cc:338:Biop$5088 ),
    .B(\$auto$builder.cc:338:Biop$5094 ),
    .Y(\$auto$builder.cc:338:Biop$5096 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5097  (
    .A(\$auto$builder.cc:338:Biop$5086 ),
    .B(\$auto$builder.cc:338:Biop$5096 ),
    .Y(iTXEnable)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5154  (
    .A(iMCR[1]),
    .Y(\$auto$builder.cc:338:Biop$5155 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5160  (
    .A(iMCR[5]),
    .B(iRXFIFOTrigger),
    .Y(\$auto$builder.cc:338:Biop$5161 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5162  (
    .A(\$auto$builder.cc:338:Biop$5155 ),
    .B(\$auto$builder.cc:338:Biop$5161 ),
    .Y(\$auto$builder.cc:338:Biop$5163 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5174  (
    .A(iMCR[5]),
    .B(iRXFIFOEmpty),
    .Y(\$auto$builder.cc:338:Biop$5175 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5176  (
    .A(\$auto$builder.cc:338:Biop$5088 ),
    .B(\$auto$builder.cc:338:Biop$5175 ),
    .Y(\$auto$builder.cc:338:Biop$5177 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5178  (
    .A(iMCR[1]),
    .B(\$auto$builder.cc:338:Biop$5177 ),
    .Y(\$auto$builder.cc:338:Biop$5179 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5194  (
    .A(iMCR[2]),
    .Y(\$auto$builder.cc:338:Biop$5195 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5196  (
    .A(iMCR[4]),
    .B(\$auto$builder.cc:338:Biop$5195 ),
    .Y(\$auto$builder.cc:338:Biop$5197 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5203  (
    .A(iMCR[3]),
    .Y(\$auto$builder.cc:338:Biop$5204 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5205  (
    .A(iMCR[4]),
    .B(\$auto$builder.cc:338:Biop$5204 ),
    .Y(\$auto$builder.cc:338:Biop$5206 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5212  (
    .A(iRTS),
    .Y(\$auto$builder.cc:338:Biop$5213 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5214  (
    .A(iMCR[4]),
    .B(\$auto$builder.cc:338:Biop$5213 ),
    .Y(\$auto$builder.cc:338:Biop$5215 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5221  (
    .A(iMCR[0]),
    .Y(\$auto$builder.cc:338:Biop$5222 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5223  (
    .A(iMCR[4]),
    .B(\$auto$builder.cc:338:Biop$5222 ),
    .Y(\$auto$builder.cc:338:Biop$5224 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5232  (
    .A(iMCR[4]),
    .B(iSOUT),
    .Y(\$auto$builder.cc:338:Biop$5233 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:320.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$17442  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iTimeoutCount$4506 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17443 ),
    .Q(iTimeoutCount)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:724.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17445  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(iTXFIFOQ),
    .EN(\$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 ),
    .Q(iTSR)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:614.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17446  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iSCRWrite),
    .Q(iSCR)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:773.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17447  (
    .ARST(RSTN),
    .CLK(CLK),
    .D({ iRXBI, iRXFE, iRXPE, iRXData }),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17450 ),
    .Q(iRXFIFOD)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:422.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$17452  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[5:0]),
    .EN(iMCRWrite),
    .Q(iMCR[5:0])
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:400.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17454  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iLCRWrite),
    .Q(iLCR)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:254.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17455  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[3:0]),
    .EN(iIERWrite),
    .Q(iIER[3:0])
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:443.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17457  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iFECounter$4701 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17458 ),
    .Q(iFECounter)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17460  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:6]),
    .EN(iFCRWrite),
    .Q(iFCR_RXTrigger)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17461  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[0]),
    .EN(iFCRWrite),
    .Q(iFCR_FIFOEnable)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:355.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17462  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[5]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17463 ),
    .Q(iFCR_FIFO64E)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:234.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17465  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iDLMWrite),
    .Q(iDLM)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:234.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(8'h01),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17466  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EN(iDLLWrite),
    .Q(iDLL)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17444  (
    .A({ \$auto$builder.cc:338:Biop$4500 , \$auto$builder.cc:338:Biop$4488  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17443 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17459  (
    .A({ \$auto$builder.cc:338:Biop$4694 , \$auto$builder.cc:338:Biop$4684 , iRXFIFOClear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17458 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$17448  (
    .A(rx_State),
    .Y(\$auto$rtlil.cc:2739:Not$17449 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17451  (
    .A({ \$auto$rtlil.cc:2739:Not$17449 , iRXFinished }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17450 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17464  (
    .A({ iLCR[7], iFCRWrite }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17463 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17114  (
    .A({ \$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 , \$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17115 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18115  (
    .A(\$auto$builder.cc:338:Biop$4684 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18116 [6])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$4254  (
    .A(RSTN),
    .Y(iRST)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$4474  (
    .A(iFCR_FIFOEnable),
    .B(iFCR_FIFO64E),
    .Y(iIIR_FIFO64)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$4931  (
    .A(iTXFIFOUsage[4]),
    .B(iTXFIFO64Full),
    .S(iFCR_FIFO64E),
    .Y(iTXFIFOFull)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$4971  (
    .A(iRXFIFOUsage[4]),
    .B(iRXFIFO64Full),
    .S(iFCR_FIFO64E),
    .Y(iRXFIFOFull)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5077  (
    .A(iRXFIFO16Trigger),
    .B(iRXFIFO64Trigger),
    .S(iFCR_FIFO64E),
    .Y(iRXFIFOTrigger)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5083  (
    .A(iSINr),
    .B(iSOUT),
    .S(iMCR[4]),
    .Y(iSIN)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$DTRN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$5224 ),
    .Q(DTRN)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$OUT1N  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$5197 ),
    .Q(OUT1N)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$OUT2N  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$5206 ),
    .Q(OUT2N)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$RTSN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$5215 ),
    .Q(RTSN)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$SOUT  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$5233 ),
    .Q(SOUT)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:829.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iBAUDOUTN  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iBAUDOUTN$5191 ),
    .Q(iBAUDOUTN)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:320.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iCharTimeout  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iCharTimeout$4521 ),
    .Q(iCharTimeout)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:355.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_RXFIFOReset  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iFCR_RXFIFOReset$4577 ),
    .Q(iFCR_RXFIFOReset)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:355.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFCR_TXFIFOReset  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iFCR_TXFIFOReset$4578 ),
    .Q(iFCR_TXFIFOReset)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_BI  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iLSR_BI$4660 ),
    .Q(iLSR_BI)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_FE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iLSR_FE$4650 ),
    .Q(iLSR_FE)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_FIFOERR  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4674 ),
    .Q(iLSR_FIFOERR)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_OE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iLSR_OE$4630 ),
    .Q(iLSR_OE)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:443.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLSR_PE  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iLSR_PE$4640 ),
    .Q(iLSR_PE)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_TERI  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4904 ),
    .Q(iMSR_TERI)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dCTS  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4880 ),
    .Q(iMSR_dCTS)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dDCD  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4918 ),
    .Q(iMSR_dDCD)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:561.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iMSR_dDSR  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4894 ),
    .Q(iMSR_dDSR)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:812.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRTS  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iRTS$5183 ),
    .Q(iRTS)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRXFIFOClear  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5147 ),
    .Q(iRXFIFOClear)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iRXFIFOWrite  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5148 ),
    .Q(iRXFIFOWrite)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:292.1" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTHRInterrupt  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4453 ),
    .Q(iTHRInterrupt)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXFIFORead  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 ),
    .Q(iTXFIFORead)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXRunning  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 ),
    .Q(iTXRunning)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iTXStart  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iTXStart$5119 ),
    .Q(iTXStart)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:773.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rx_State  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\rx_State$5150 ),
    .Q(rx_State)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:724.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$tx_State  (
    .ARST(RSTN),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\tx_State$5121 ),
    .Q(tx_State)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:897.18-897.38|../rtl/apb_uart/apb_uart.sv:895.13-902.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$14341  (
    .A({ 4'h0, iIER[3:0] }),
    .B(iDLM),
    .S(iLCR[7]),
    .Y(\$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5247 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:932.13-932.33|../rtl/apb_uart/apb_uart.sv:880.7-940.14" */
  \$pmux  #(
    .S_WIDTH(32'd7),
    .WIDTH(32'd8)
  ) \$procmux$14345  (
    .A(\$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5242 ),
    .B({ \$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5247 , iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0, iIIR[3:0], iLCR, 2'h0, iMCR[5:0], iLSR[7], iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR, iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS, iSCR }),
    .S({ \$auto$builder.cc:338:Biop$4301 , \$auto$builder.cc:338:Biop$4329 , \$auto$builder.cc:338:Biop$4349 , \$auto$builder.cc:338:Biop$4359 , \$auto$builder.cc:338:Biop$4369 , \$auto$builder.cc:338:Biop$4379 , \$auto$builder.cc:338:Biop$4389  }),
    .Y(PRDATA[7:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:885.18-885.38|../rtl/apb_uart/apb_uart.sv:883.13-890.18" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$14364  (
    .A(iRXFIFOQ[7:0]),
    .B(iDLL),
    .S(iLCR[7]),
    .Y(\$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5242 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:849.13-849.32|../rtl/apb_uart/apb_uart.sv:847.8-850.13" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14393  (
    .A(iBaudtick16x),
    .Y(\$auto$slang_frontend.cc:694:finish$\iBAUDOUTN$5191 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:825.13-825.27|../rtl/apb_uart/apb_uart.sv:823.13-826.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14395  (
    .A(iRTS),
    .B(\$auto$builder.cc:338:Biop$5179 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRTS$5182 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:821.13-821.27|../rtl/apb_uart/apb_uart.sv:819.8-826.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14402  (
    .A(\$auto$slang_frontend.cc:694:finish$\iRTS$5182 ),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$5163 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRTS$5183 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:805.24-805.45|../rtl/apb_uart/apb_uart.sv:804.27-805.45" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14404  (
    .A(iRXFIFOFull),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5145 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:803.24-803.45|../rtl/apb_uart/apb_uart.sv:802.22-805.45" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14413  (
    .A(1'h1),
    .B(\$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5145 ),
    .S(iFCR_FIFOEnable),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5146 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:801.19-807.22|../rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14418  (
    .A(iRXFinished),
    .B(1'h0),
    .S(rx_State),
    .Y(\$auto$slang_frontend.cc:694:finish$\rx_State$5150 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:801.19-807.22|../rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14428  (
    .A(\$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5134 ),
    .B(iFCR_RXFIFOReset),
    .S(rx_State),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5147 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:791.24-796.27|../rtl/apb_uart/apb_uart.sv:790.22-798.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14449  (
    .A(iFCR_RXFIFOReset),
    .B(\$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5133 ),
    .S(iRXFinished),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5134 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:794.29-794.50|../rtl/apb_uart/apb_uart.sv:793.27-794.50" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14455  (
    .A(1'h1),
    .B(iFCR_RXFIFOReset),
    .S(iFCR_FIFOEnable),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5133 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:801.19-807.22|../rtl/apb_uart/apb_uart.sv:787.13-809.21" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14462  (
    .A(rx_State),
    .B(\$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5146 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5148 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:759.19-766.22|../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14469_CMP0  (
    .A(tx_State),
    .B(2'h2),
    .Y(\$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:767.31-767.50|../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$14470  (
    .A({ 1'h0, iTXEnable }),
    .B({ 3'h5, iTXFinished, 2'h0 }),
    .S({ \$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 , \$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 , \$procmux$14471_CMP  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\tx_State$5121 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:767.31-767.50|../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$14471_CMP0  (
    .A(tx_State),
    .B(2'h3),
    .Y(\$procmux$14471_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:752.19-757.22|../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14474_CMP0  (
    .A(tx_State),
    .B(1'h1),
    .Y(\$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:767.31-767.50|../rtl/apb_uart/apb_uart.sv:740.13-769.20" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$14477  (
    .A(iTXEnable),
    .B(2'h2),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$17115 , \$procmux$14471_CMP  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\iTXStart$5119 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:601.13-601.32|../rtl/apb_uart/apb_uart.sv:599.13-602.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14516  (
    .A(iMSR_dDCD),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4917 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:597.13-597.32|../rtl/apb_uart/apb_uart.sv:595.8-602.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14526  (
    .A(\$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4917 ),
    .B(\$auto$builder.cc:338:Biop$4910 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4918 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:593.13-593.32|../rtl/apb_uart/apb_uart.sv:591.13-594.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14531  (
    .A(iMSR_TERI),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4903 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:589.13-589.32|../rtl/apb_uart/apb_uart.sv:587.8-594.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14540  (
    .A(\$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4903 ),
    .B(iRInFE),
    .Y(\$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4904 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:585.13-585.32|../rtl/apb_uart/apb_uart.sv:583.13-586.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14544  (
    .A(iMSR_dDSR),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4893 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:581.13-581.32|../rtl/apb_uart/apb_uart.sv:579.8-586.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14552  (
    .A(\$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4893 ),
    .B(\$auto$builder.cc:338:Biop$4886 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4894 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:577.13-577.32|../rtl/apb_uart/apb_uart.sv:575.13-578.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14555  (
    .A(iMSR_dCTS),
    .B(1'h0),
    .S(iMSRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4879 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:573.13-573.32|../rtl/apb_uart/apb_uart.sv:571.8-578.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14562  (
    .A(\$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4879 ),
    .B(\$auto$builder.cc:338:Biop$4872 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4880 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:497.13-497.29|../rtl/apb_uart/apb_uart.sv:495.8-509.13" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$14591  (
    .A(\$auto$opt_share.cc:222:merge_operators$18114 ),
    .B(7'h00),
    .S(iRXFIFOClear),
    .Y(\$auto$slang_frontend.cc:694:finish$\iFECounter$4701 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:493.13-493.35|../rtl/apb_uart/apb_uart.sv:491.13-494.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14598  (
    .A(iLSR_FIFOERR),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$4670 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4673 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:489.13-489.35|../rtl/apb_uart/apb_uart.sv:487.8-494.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14609  (
    .A(\$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4673 ),
    .B(\$auto$builder.cc:338:Biop$4662 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4674 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:485.13-485.30|../rtl/apb_uart/apb_uart.sv:483.13-486.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14615  (
    .A(iLSR_BI),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_BI$4659 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:481.13-481.30|../rtl/apb_uart/apb_uart.sv:479.8-486.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14625  (
    .A(\$auto$slang_frontend.cc:694:finish$\iLSR_BI$4659 ),
    .B(iBIRE),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_BI$4660 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:477.13-477.30|../rtl/apb_uart/apb_uart.sv:475.13-478.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14630  (
    .A(iLSR_FE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_FE$4649 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:473.13-473.30|../rtl/apb_uart/apb_uart.sv:471.8-478.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14639  (
    .A(\$auto$slang_frontend.cc:694:finish$\iLSR_FE$4649 ),
    .B(iFERE),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_FE$4650 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:469.13-469.30|../rtl/apb_uart/apb_uart.sv:467.13-470.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14643  (
    .A(iLSR_PE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_PE$4639 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:465.13-465.30|../rtl/apb_uart/apb_uart.sv:463.8-470.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14651  (
    .A(\$auto$slang_frontend.cc:694:finish$\iLSR_PE$4639 ),
    .B(iPERE),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_PE$4640 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:461.13-461.30|../rtl/apb_uart/apb_uart.sv:459.13-462.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14654  (
    .A(iLSR_OE),
    .B(1'h0),
    .S(iLSRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_OE$4629 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:457.13-457.30|../rtl/apb_uart/apb_uart.sv:455.8-462.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14661  (
    .A(\$auto$slang_frontend.cc:694:finish$\iLSR_OE$4629 ),
    .B(\$auto$builder.cc:338:Biop$4622 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iLSR_OE$4630 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:371.10-389.13|../rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14700  (
    .A(iFCRWrite),
    .B(\$auto$builder.cc:338:Biop$4572 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iFCR_TXFIFOReset$4578 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:371.10-389.13|../rtl/apb_uart/apb_uart.sv:370.8-389.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14705  (
    .A(iFCRWrite),
    .B(\$auto$builder.cc:338:Biop$4551 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iFCR_RXFIFOReset$4577 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:340.13-347.18|../rtl/apb_uart/apb_uart.sv:338.8-352.13" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14714  (
    .A(iFCR_FIFOEnable),
    .B(\$auto$slang_frontend.cc:694:finish$\iCharTimeout$4520 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCharTimeout$4521 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:346.18-346.40|../rtl/apb_uart/apb_uart.sv:344.18-347.18" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14718  (
    .A(iCharTimeout),
    .B(iTimeoutCount[5]),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCharTimeout$4519 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:342.18-342.40|../rtl/apb_uart/apb_uart.sv:340.13-347.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14729  (
    .A(\$auto$slang_frontend.cc:694:finish$\iCharTimeout$4519 ),
    .B(1'h0),
    .S(iRBRRead),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCharTimeout$4520 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:332.13-332.72|../rtl/apb_uart/apb_uart.sv:329.8-337.13" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$14741  (
    .A(\$auto$builder.cc:338:Biop$4504 ),
    .B(6'h00),
    .S(\$auto$builder.cc:338:Biop$4488 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iTimeoutCount$4506 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:305.13-305.36|../rtl/apb_uart/apb_uart.sv:303.13-306.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14743  (
    .A(iTHRInterrupt),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$4449 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4452 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/apb_uart.sv:301.13-301.36|../rtl/apb_uart/apb_uart.sv:299.8-306.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14750  (
    .A(\$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4452 ),
    .B(\$auto$builder.cc:338:Biop$4437 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4453 )
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:630.14" */
  \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16  UART_BG16 (
    .BAUDTICK(iBaudtick16x),
    .CE(1'h1),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIVIDER({ iDLM, iDLL }),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:637.29" */
  \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2  UART_BG2 (
    .CE(iBaudtick16x),
    .CLK(CLK),
    .Q(iBaudtick2x),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:517.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET  UART_BIDET (
    .CLK(CLK),
    .D(iRXFIFOBI),
    .RE(iBIRE),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:536.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS  UART_ED_CTS (
    .CLK(CLK),
    .D(iMSR_CTS),
    .FE(iCTSnFE),
    .RE(iCTSnRE),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:554.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD  UART_ED_DCD (
    .CLK(CLK),
    .D(iMSR_DCD),
    .FE(iDCDnFE),
    .RE(iDCDnRE),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:542.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR  UART_ED_DSR (
    .CLK(CLK),
    .D(iMSR_DSR),
    .FE(iDSRnFE),
    .RE(iDSRnRE),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:548.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI  UART_ED_RI (
    .CLK(CLK),
    .D(iMSR_RI),
    .FE(iRInFE),
    .RE(iRInRE),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:516.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET  UART_FEDET (
    .CLK(CLK),
    .D(iRXFIFOFE),
    .RE(iFERE),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:229.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS  UART_IF_CTS (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iCTSNs),
    .Q(iCTSn),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:231.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD  UART_IF_DCD (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDCDNs),
    .Q(iDCDn),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:230.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR  UART_IF_DSR (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDSRNs),
    .Q(iDSRn),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:232.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI  UART_IF_RI (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iRINs),
    .Q(iRIn),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:273.16" */
  \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC  UART_IIC (
    .AFE(iMCR[5]),
    .CLK(CLK),
    .CTI(iCharTimeout),
    .IER(iIER[3:0]),
    .IIR(iIIR[3:0]),
    .INT(INT),
    .LSR({ iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR }),
    .MSR({ iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS }),
    .RDA(iRDAInterrupt),
    .RST(iRST),
    .THI(iTHRInterrupt)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:285.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED  UART_IIC_THRE_ED (
    .CLK(CLK),
    .D(iLSR_THRE),
    .RE(iLSR_THRERE),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:225.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS  UART_IS_CTS (
    .CLK(CLK),
    .D(CTSN),
    .Q(iCTSNs),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:227.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD  UART_IS_DCD (
    .CLK(CLK),
    .D(DCDN),
    .Q(iDCDNs),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:226.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR  UART_IS_DSR (
    .CLK(CLK),
    .D(DSRN),
    .Q(iDSRNs),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:228.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI  UART_IS_RI (
    .CLK(CLK),
    .D(RIN),
    .Q(iRINs),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:224.17" */
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN  UART_IS_SIN (
    .CLK(CLK),
    .D(SIN),
    .Q(iSINr),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:515.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET  UART_PEDET (
    .CLK(CLK),
    .D(iRXFIFOPE),
    .RE(iPERE),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:642.18" */
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK  UART_RCLK (
    .CLK(CLK),
    .D(iBAUDOUTN),
    .RE(iRCLK),
    .RST(iRST)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:697.15" */
  \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX  UART_RX (
    .BI(iRXBI),
    .CLK(CLK),
    .DOUT(iRXData),
    .EPS(iLCR[4]),
    .FE(iRXFE),
    .PE(iRXPE),
    .PEN(iLCR[3]),
    .RST(iRST),
    .RXCLEAR(1'h0),
    .RXCLK(iRCLK),
    .RXFINISHED(iRXFinished),
    .SIN(iSIN),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .WLS(iLCR[1:0])
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:663.37" */
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF  UART_RXFF (
    .CLEAR(iRXFIFOClear),
    .CLK(CLK),
    .D(iRXFIFOD),
    .EMPTY(iRXFIFOEmpty),
    .FULL(iRXFIFO64Full),
    .Q(iRXFIFOQ),
    .READ(iRBRRead),
    .RST(iRST),
    .USAGE(iRXFIFOUsage),
    .WRITE(iRXFIFOWrite)
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:681.18" */
  \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX  UART_TX (
    .BC(iLCR[6]),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIN(iTSR),
    .EPS(iLCR[4]),
    .PEN(iLCR[3]),
    .RST(iRST),
    .SOUT(iSOUT),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .TXCLK(iBaudtick2x),
    .TXFINISHED(iTXFinished),
    .TXSTART(iTXStart),
    .WLS(iLCR[1:0])
  );
  /* src = "../rtl/apb_uart/apb_uart.sv:648.36" */
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF  UART_TXFF (
    .CLEAR(iFCR_TXFIFOReset),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EMPTY(iLSR_THRE),
    .FULL(iTXFIFO64Full),
    .Q(iTXFIFOQ),
    .READ(iTXFIFORead),
    .RST(iRST),
    .USAGE(iTXFIFOUsage),
    .WRITE(iTXFIFOWrite)
  );
  assign \$auto$rtlil.cc:2874:Mux$18116 [5:0] = { \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], 1'h1 };
  assign PRDATA[31:8] = 24'h000000;
  assign PREADY = 1'h1;
  assign PSLVERR = 1'h0;
  assign iBaudgenDiv = { iDLM, iDLL };
  assign iFCR = { iFCR_RXTrigger, iFCR_FIFO64E, 2'b0x, iFCR_TXFIFOReset, iFCR_RXFIFOReset, iFCR_FIFOEnable };
  assign iFCR_DMAMode = 1'hx;
  assign iIER[7:4] = 4'h0;
  assign iIER_EDSSI = iIER[3];
  assign iIER_ELSI = iIER[2];
  assign iIER_ERBI = iIER[0];
  assign iIER_ETBEI = iIER[1];
  assign iIIR[7:4] = { iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0 };
  assign iIIR_ID0 = iIIR[1];
  assign iIIR_ID1 = iIIR[2];
  assign iIIR_ID2 = iIIR[3];
  assign iIIR_PI = iIIR[0];
  assign iLCR_BC = iLCR[6];
  assign iLCR_DLAB = iLCR[7];
  assign iLCR_EPS = iLCR[4];
  assign iLCR_PEN = iLCR[3];
  assign iLCR_SP = iLCR[5];
  assign iLCR_STB = iLCR[2];
  assign iLCR_WLS = iLCR[1:0];
  assign iLSR[6:0] = { iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR };
  assign iMCR[7:6] = 2'h0;
  assign iMCR_AFE = iMCR[5];
  assign iMCR_DTR = iMCR[0];
  assign iMCR_LOOP = iMCR[4];
  assign iMCR_OUT1 = iMCR[2];
  assign iMCR_OUT2 = iMCR[3];
  assign iMCR_RTS = iMCR[1];
  assign iMSR = { iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS };
  assign iRBR = iRXFIFOQ[7:0];
  assign iRXClear = 1'h0;
  assign iRXFIFO16Full = iRXFIFOUsage[4];
  assign iRXFIFORead = iRBRRead;
  assign iTXClear = 1'h0;
  assign iTXFIFO16Full = iTXFIFOUsage[4];
  assign iTXFIFOClear = iFCR_TXFIFOReset;
  assign iTXFIFOEmpty = iLSR_THRE;
endmodule

/* src = "../rtl/common_cells/cdc_2phase_clearable.sv:54.8" */
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$auto$builder.cc:338:Biop$6049 ;
  wire \$auto$builder.cc:338:Biop$6057 ;
  wire \$auto$builder.cc:364:Unop$6047 ;
  wire \$auto$builder.cc:364:Unop$6055 ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:88.35" */
  wire async_ack;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:89.31" */
  wire [40:0] async_data;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:87.35" */
  wire async_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:69.16" */
  input dst_clear_i;
  wire dst_clear_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:70.16" */
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:68.16" */
  input dst_clk_i;
  wire dst_clk_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:71.16" */
  output [40:0] dst_data_o;
  wire [40:0] dst_data_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:73.16" */
  input dst_ready_i;
  wire dst_ready_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:67.16" */
  input dst_rst_ni;
  wire dst_rst_ni;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:72.16" */
  output dst_valid_o;
  wire dst_valid_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:81.16" */
  wire s_dst_clear_ack_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:80.16" */
  wire s_dst_clear_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:84.16" */
  wire s_dst_isolate_ack_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:83.16" */
  wire s_dst_isolate_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:82.16" */
  wire s_dst_valid;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:76.16" */
  wire s_src_clear_ack_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:75.16" */
  wire s_src_clear_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:79.16" */
  wire s_src_isolate_ack_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:78.16" */
  wire s_src_isolate_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:77.16" */
  wire s_src_ready;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:61.16" */
  input src_clear_i;
  wire src_clear_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:62.16" */
  output src_clear_pending_o;
  wire src_clear_pending_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:60.16" */
  input src_clk_i;
  wire src_clk_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:63.16" */
  input [40:0] src_data_i;
  wire [40:0] src_data_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:65.16" */
  output src_ready_o;
  wire src_ready_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:59.16" */
  input src_rst_ni;
  wire src_rst_ni;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:64.16" */
  input src_valid_i;
  wire src_valid_i;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6048  (
    .A(src_valid_i),
    .B(\$auto$builder.cc:364:Unop$6047 ),
    .Y(\$auto$builder.cc:338:Biop$6049 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6052  (
    .A(s_src_ready),
    .B(\$auto$builder.cc:364:Unop$6047 ),
    .Y(src_ready_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6056  (
    .A(dst_ready_i),
    .B(\$auto$builder.cc:364:Unop$6055 ),
    .Y(\$auto$builder.cc:338:Biop$6057 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6060  (
    .A(s_dst_valid),
    .B(\$auto$builder.cc:364:Unop$6055 ),
    .Y(dst_valid_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6046  (
    .A(s_src_isolate_req),
    .Y(\$auto$builder.cc:364:Unop$6047 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6054  (
    .A(s_dst_isolate_req),
    .Y(\$auto$builder.cc:364:Unop$6055 )
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_clear_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_clear_req),
    .Q(s_dst_clear_ack_q)
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_isolate_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_isolate_req),
    .Q(s_dst_isolate_ack_q)
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_clear_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_clear_req),
    .Q(s_src_clear_ack_q)
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_isolate_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_isolate_req),
    .Q(s_src_isolate_ack_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:143.5" */
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(s_src_isolate_req),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(s_dst_isolate_req),
    .b_rst_ni(dst_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:125.5" */
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$auto$builder.cc:338:Biop$6057 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:106.5" */
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$auto$builder.cc:338:Biop$6049 )
  );
  assign dst_clear_pending_o = s_dst_isolate_req;
  assign src_clear_pending_o = s_src_isolate_req;
endmodule

/* src = "../rtl/common_cells/cdc_2phase_clearable.sv:54.8" */
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$auto$builder.cc:338:Biop$6075 ;
  wire \$auto$builder.cc:338:Biop$6083 ;
  wire \$auto$builder.cc:364:Unop$6073 ;
  wire \$auto$builder.cc:364:Unop$6081 ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:88.35" */
  wire async_ack;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:89.31" */
  wire [33:0] async_data;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:87.35" */
  wire async_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:69.16" */
  input dst_clear_i;
  wire dst_clear_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:70.16" */
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:68.16" */
  input dst_clk_i;
  wire dst_clk_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:71.16" */
  output [33:0] dst_data_o;
  wire [33:0] dst_data_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:73.16" */
  input dst_ready_i;
  wire dst_ready_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:67.16" */
  input dst_rst_ni;
  wire dst_rst_ni;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:72.16" */
  output dst_valid_o;
  wire dst_valid_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:81.16" */
  wire s_dst_clear_ack_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:80.16" */
  wire s_dst_clear_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:84.16" */
  wire s_dst_isolate_ack_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:83.16" */
  wire s_dst_isolate_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:82.16" */
  wire s_dst_valid;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:76.16" */
  wire s_src_clear_ack_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:75.16" */
  wire s_src_clear_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:79.16" */
  wire s_src_isolate_ack_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:78.16" */
  wire s_src_isolate_req;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:77.16" */
  wire s_src_ready;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:61.16" */
  input src_clear_i;
  wire src_clear_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:62.16" */
  output src_clear_pending_o;
  wire src_clear_pending_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:60.16" */
  input src_clk_i;
  wire src_clk_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:63.16" */
  input [33:0] src_data_i;
  wire [33:0] src_data_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:65.16" */
  output src_ready_o;
  wire src_ready_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:59.16" */
  input src_rst_ni;
  wire src_rst_ni;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:64.16" */
  input src_valid_i;
  wire src_valid_i;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6074  (
    .A(src_valid_i),
    .B(\$auto$builder.cc:364:Unop$6073 ),
    .Y(\$auto$builder.cc:338:Biop$6075 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6078  (
    .A(s_src_ready),
    .B(\$auto$builder.cc:364:Unop$6073 ),
    .Y(src_ready_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6082  (
    .A(dst_ready_i),
    .B(\$auto$builder.cc:364:Unop$6081 ),
    .Y(\$auto$builder.cc:338:Biop$6083 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6086  (
    .A(s_dst_valid),
    .B(\$auto$builder.cc:364:Unop$6081 ),
    .Y(dst_valid_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6072  (
    .A(s_src_isolate_req),
    .Y(\$auto$builder.cc:364:Unop$6073 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6080  (
    .A(s_dst_isolate_req),
    .Y(\$auto$builder.cc:364:Unop$6081 )
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_clear_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_clear_req),
    .Q(s_dst_clear_ack_q)
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_dst_isolate_ack_q  (
    .ARST(dst_rst_ni),
    .CLK(dst_clk_i),
    .D(s_dst_isolate_req),
    .Q(s_dst_isolate_ack_q)
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_clear_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_clear_req),
    .Q(s_src_clear_ack_q)
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$s_src_isolate_ack_q  (
    .ARST(src_rst_ni),
    .CLK(src_clk_i),
    .D(s_src_isolate_req),
    .Q(s_src_isolate_ack_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:143.5" */
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(s_src_isolate_req),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(s_dst_isolate_req),
    .b_rst_ni(dst_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:125.5" */
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$auto$builder.cc:338:Biop$6083 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:106.5" */
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$auto$builder.cc:338:Biop$6075 )
  );
  assign dst_clear_pending_o = s_dst_isolate_req;
  assign src_clear_pending_o = s_src_isolate_req;
endmodule

/* src = "../rtl/common_cells/cdc_2phase_clearable.sv:269.8" */
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst (clk_i, rst_ni, data_o, clear_i, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$builder.cc:338:Biop$9328 ;
  wire \$auto$builder.cc:338:Biop$9337 ;
  wire \$auto$builder.cc:338:Biop$9341 ;
  wire \$auto$builder.cc:364:Unop$9332 ;
  wire \$auto$builder.cc:364:Unop$9339 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17471 ;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.8" */
  wire ack_dst_d;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.19" */
  wire ack_dst_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:280.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:281.16" */
  input [40:0] async_data_i;
  wire [40:0] async_data_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:279.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:275.16" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:274.16" */
  input clk_i;
  wire clk_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" */
  wire [40:0] data_dst_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.17" */
  wire [40:0] data_dst_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:276.16" */
  output [40:0] data_o;
  wire [40:0] data_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:278.16" */
  input ready_i;
  wire ready_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.30" */
  wire req_synced;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.42" */
  wire req_synced_q1;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:273.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:277.16" */
  output valid_o;
  wire valid_o;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9327  (
    .A(valid_o),
    .B(ready_i),
    .Y(\$auto$builder.cc:338:Biop$9328 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9336  (
    .A(req_synced),
    .B(req_synced_q1),
    .Y(\$auto$builder.cc:338:Biop$9337 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9340  (
    .A(\$auto$builder.cc:338:Biop$9337 ),
    .B(\$auto$builder.cc:364:Unop$9339 ),
    .Y(\$auto$builder.cc:338:Biop$9341 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9351  (
    .A(ack_dst_q),
    .B(req_synced_q1),
    .Y(valid_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9331  (
    .A(ack_dst_q),
    .Y(\$auto$builder.cc:364:Unop$9332 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9338  (
    .A(valid_o),
    .Y(\$auto$builder.cc:364:Unop$9339 )
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17467  (
    .CLK(clk_i),
    .D(async_data_i[33:32]),
    .EN(\$auto$builder.cc:338:Biop$9341 ),
    .Q(data_dst_q[33:32])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17468  (
    .CLK(clk_i),
    .D(async_data_i[31:0]),
    .EN(\$auto$builder.cc:338:Biop$9341 ),
    .Q(data_dst_q[31:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17469  (
    .CLK(clk_i),
    .D(async_data_i[40:34]),
    .EN(\$auto$builder.cc:338:Biop$9341 ),
    .Q(data_dst_q[40:34])
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17470  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17471 ),
    .Q(ack_dst_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17472  (
    .A({ \$auto$builder.cc:338:Biop$9328 , clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17471 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_synced_q1  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_synced),
    .Q(req_synced_q1)
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|../rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$12696  (
    .A(data_dst_q),
    .B(async_data_i),
    .S(\$auto$builder.cc:338:Biop$9341 ),
    .Y(data_dst_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|../rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12705  (
    .A(\$auto$builder.cc:364:Unop$9332 ),
    .B(1'h0),
    .S(clear_i),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:294.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = data_dst_q;
endmodule

/* src = "../rtl/common_cells/cdc_2phase_clearable.sv:269.8" */
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst (clk_i, rst_ni, data_o, clear_i, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$builder.cc:338:Biop$9378 ;
  wire \$auto$builder.cc:338:Biop$9387 ;
  wire \$auto$builder.cc:338:Biop$9391 ;
  wire \$auto$builder.cc:364:Unop$9382 ;
  wire \$auto$builder.cc:364:Unop$9389 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17476 ;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.8" */
  wire ack_dst_d;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.19" */
  wire ack_dst_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:280.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:281.16" */
  input [33:0] async_data_i;
  wire [33:0] async_data_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:279.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:275.16" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:274.16" */
  input clk_i;
  wire clk_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [33:0] data_dst_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.17" */
  wire [33:0] data_dst_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:276.16" */
  output [33:0] data_o;
  wire [33:0] data_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:278.16" */
  input ready_i;
  wire ready_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.30" */
  wire req_synced;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.42" */
  wire req_synced_q1;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:273.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:277.16" */
  output valid_o;
  wire valid_o;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9377  (
    .A(valid_o),
    .B(ready_i),
    .Y(\$auto$builder.cc:338:Biop$9378 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9386  (
    .A(req_synced),
    .B(req_synced_q1),
    .Y(\$auto$builder.cc:338:Biop$9387 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9390  (
    .A(\$auto$builder.cc:338:Biop$9387 ),
    .B(\$auto$builder.cc:364:Unop$9389 ),
    .Y(\$auto$builder.cc:338:Biop$9391 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9401  (
    .A(ack_dst_q),
    .B(req_synced_q1),
    .Y(valid_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9381  (
    .A(ack_dst_q),
    .Y(\$auto$builder.cc:364:Unop$9382 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9388  (
    .A(valid_o),
    .Y(\$auto$builder.cc:364:Unop$9389 )
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17473  (
    .CLK(clk_i),
    .D(async_data_i[1:0]),
    .EN(\$auto$builder.cc:338:Biop$9391 ),
    .Q(data_dst_q[1:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17474  (
    .CLK(clk_i),
    .D(async_data_i[33:2]),
    .EN(\$auto$builder.cc:338:Biop$9391 ),
    .Q(data_dst_q[33:2])
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17475  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17476 ),
    .Q(ack_dst_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17477  (
    .A({ \$auto$builder.cc:338:Biop$9378 , clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17476 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_synced_q1  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_synced),
    .Q(req_synced_q1)
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|../rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$12667  (
    .A(data_dst_q),
    .B(async_data_i),
    .S(\$auto$builder.cc:338:Biop$9391 ),
    .Y(data_dst_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|../rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12676  (
    .A(\$auto$builder.cc:364:Unop$9382 ),
    .B(1'h0),
    .S(clear_i),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:294.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = data_dst_q;
endmodule

/* src = "../rtl/common_cells/cdc_2phase_clearable.sv:199.8" */
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$builder.cc:338:Biop$9307 ;
  wire \$auto$builder.cc:364:Unop$9311 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17479 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17484 ;
  wire \$auto$rtlil.cc:2739:Not$17483 ;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$9313 ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.32" */
  wire ack_synced;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:210.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:211.16" */
  output [40:0] async_data_o;
  wire [40:0] async_data_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:209.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:205.16" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:204.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:206.16" */
  input [40:0] data_i;
  wire [40:0] data_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" */
  wire [40:0] data_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.17" */
  wire [40:0] data_src_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:208.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.21" */
  wire req_src_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:203.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:207.16" */
  input valid_i;
  wire valid_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9306  (
    .A(valid_i),
    .B(ready_o),
    .Y(\$auto$builder.cc:338:Biop$9307 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9322  (
    .A(req_src_q),
    .B(ack_synced),
    .Y(ready_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9310  (
    .A(req_src_q),
    .Y(\$auto$builder.cc:364:Unop$9311 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:245.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17478  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17479 ),
    .Q(req_src_q)
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17481  (
    .CLK(clk_i),
    .D(data_i[33:32]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17484 ),
    .Q(data_src_q[33:32])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17486  (
    .CLK(clk_i),
    .D(data_i[31:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17484 ),
    .Q(data_src_q[31:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17491  (
    .CLK(clk_i),
    .D(data_i[40:34]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17484 ),
    .Q(data_src_q[40:34])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17480  (
    .A({ \$auto$builder.cc:338:Biop$9307 , clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17479 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$17482  (
    .A(clear_i),
    .Y(\$auto$rtlil.cc:2739:Not$17483 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17485  (
    .A({ \$auto$rtlil.cc:2739:Not$17483 , \$auto$builder.cc:338:Biop$9307  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17484 )
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$12707  (
    .A(data_src_q),
    .B(data_i),
    .S(\$auto$builder.cc:338:Biop$9307 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\data_src_d$9313 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12719  (
    .A(\$auto$builder.cc:364:Unop$9311 ),
    .B(1'h0),
    .S(clear_i),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$12723  (
    .A(\$auto$slang_frontend.cc:694:finish$\data_src_d$9313 ),
    .B(data_src_q),
    .S(clear_i),
    .Y(data_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:222.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "../rtl/common_cells/cdc_2phase_clearable.sv:199.8" */
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$builder.cc:338:Biop$9357 ;
  wire \$auto$builder.cc:364:Unop$9361 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17497 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17502 ;
  wire \$auto$rtlil.cc:2739:Not$17501 ;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  wire [33:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$9363 ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.32" */
  wire ack_synced;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:210.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:211.16" */
  output [33:0] async_data_o;
  wire [33:0] async_data_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:209.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:205.16" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:204.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:206.16" */
  input [33:0] data_i;
  wire [33:0] data_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.5" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [33:0] data_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.17" */
  wire [33:0] data_src_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:208.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.21" */
  wire req_src_q;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:203.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:207.16" */
  input valid_i;
  wire valid_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9356  (
    .A(valid_i),
    .B(ready_o),
    .Y(\$auto$builder.cc:338:Biop$9357 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9372  (
    .A(req_src_q),
    .B(ack_synced),
    .Y(ready_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9360  (
    .A(req_src_q),
    .Y(\$auto$builder.cc:364:Unop$9361 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:245.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17496  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17497 ),
    .Q(req_src_q)
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17499  (
    .CLK(clk_i),
    .D(data_i[1:0]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17502 ),
    .Q(data_src_q[1:0])
  );
  /* keep = "true" */
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17504  (
    .CLK(clk_i),
    .D(data_i[33:2]),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17502 ),
    .Q(data_src_q[33:2])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17498  (
    .A({ \$auto$builder.cc:338:Biop$9357 , clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17497 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:210:make_patterns_logic$17500  (
    .A(clear_i),
    .Y(\$auto$rtlil.cc:2739:Not$17501 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17503  (
    .A({ \$auto$builder.cc:338:Biop$9357 , \$auto$rtlil.cc:2739:Not$17501  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17502 )
  );
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$12678  (
    .A(data_src_q),
    .B(data_i),
    .S(\$auto$builder.cc:338:Biop$9357 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\data_src_d$9363 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12690  (
    .A(\$auto$builder.cc:364:Unop$9361 ),
    .B(1'h0),
    .S(clear_i),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" */
  \$mux  #(
    .WIDTH(32'd34)
  ) \$procmux$12694  (
    .A(\$auto$slang_frontend.cc:694:finish$\data_src_d$9363 ),
    .B(data_src_q),
    .S(clear_i),
    .Y(data_src_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_2phase_clearable.sv:222.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "../rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17510 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17512 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17514 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17516 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$10500 ;
  wire \$procmux$11253_CMP ;
  wire \$procmux$11264_CMP ;
  wire \$procmux$11278_CMP ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "../rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "../rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "../rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "../rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17509  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17516 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17511  (
    .A({ \$procmux$11264_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17510 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17513  (
    .A({ \$procmux$11278_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17512 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17515  (
    .A({ \$procmux$11253_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17514 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17517  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17510 , \$auto$opt_dff.cc:194:make_patterns_logic$17512 , \$auto$opt_dff.cc:194:make_patterns_logic$17514  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17516 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11253_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$11253_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11264_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$11264_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11275  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$11278_CMP , \$procmux$11264_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11278_CMP0  (
    .A(state_q),
    .Y(\$procmux$11278_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$11281  (
    .A(2'h0),
    .B({ \$auto$slang_frontend.cc:694:finish$\state_d$10500 , 2'h2 }),
    .S({ \$procmux$11278_CMP , \$procmux$11264_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11291  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\state_d$10500 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11315  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$11264_CMP , \$procmux$11253_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "../rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17519 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17521 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17523 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17525 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$10573 ;
  wire \$procmux$11099_CMP ;
  wire \$procmux$11110_CMP ;
  wire \$procmux$11124_CMP ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "../rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "../rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "../rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "../rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17518  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17525 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17520  (
    .A({ \$procmux$11110_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17519 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17522  (
    .A({ \$procmux$11124_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17521 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17524  (
    .A({ \$procmux$11099_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17523 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17526  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17519 , \$auto$opt_dff.cc:194:make_patterns_logic$17521 , \$auto$opt_dff.cc:194:make_patterns_logic$17523  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17525 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11099_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$11099_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11110_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$11110_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11121  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$11124_CMP , \$procmux$11110_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11124_CMP0  (
    .A(state_q),
    .Y(\$procmux$11124_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$11127  (
    .A(2'h0),
    .B({ \$auto$slang_frontend.cc:694:finish$\state_d$10573 , 2'h2 }),
    .S({ \$procmux$11124_CMP , \$procmux$11110_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11137  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\state_d$10573 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11161  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$11110_CMP , \$procmux$11099_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "../rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17528 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17530 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17532 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17534 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$10646 ;
  wire \$procmux$10945_CMP ;
  wire \$procmux$10956_CMP ;
  wire \$procmux$10970_CMP ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "../rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "../rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "../rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "../rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17527  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17534 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17529  (
    .A({ \$procmux$10956_CMP , ready_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17528 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17531  (
    .A({ \$procmux$10970_CMP , req_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17530 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17533  (
    .A({ \$procmux$10945_CMP , req_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17532 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17535  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17530 , \$auto$opt_dff.cc:194:make_patterns_logic$17528 , \$auto$opt_dff.cc:194:make_patterns_logic$17532  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17534 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10945_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$10945_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10956_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$10956_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10967  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$10970_CMP , \$procmux$10956_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10970_CMP0  (
    .A(state_q),
    .Y(\$procmux$10970_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$10973  (
    .A(2'h0),
    .B({ \$auto$slang_frontend.cc:694:finish$\state_d$10646 , 2'h2 }),
    .S({ \$procmux$10970_CMP , \$procmux$10956_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10983  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\state_d$10646 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11007  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$10956_CMP , \$procmux$10945_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "../rtl/common_cells/cdc_4phase.sv:205.8" */
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17537 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17539 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17541 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17543 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$10719 ;
  wire \$procmux$10791_CMP ;
  wire \$procmux$10802_CMP ;
  wire \$procmux$10816_CMP ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:221.10" */
  wire ack_dst_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:221.21" */
  wire ack_dst_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:216.16" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:217.16" */
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:215.16" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:211.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:212.16" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:225.10" */
  wire data_valid;
  /* src = "../rtl/common_cells/cdc_4phase.sv:227.10" */
  wire output_ready;
  /* src = "../rtl/common_cells/cdc_4phase.sv:214.16" */
  input ready_i;
  wire ready_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:223.10" */
  wire req_synced;
  /* src = "../rtl/common_cells/cdc_4phase.sv:210.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_4phase.sv:231.11" */
  wire [1:0] state_d;
  /* src = "../rtl/common_cells/cdc_4phase.sv:231.20" */
  wire [1:0] state_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:213.16" */
  output valid_o;
  wire valid_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:284.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17536  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17543 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17538  (
    .A({ req_synced, \$procmux$10791_CMP  }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17537 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17540  (
    .A({ ready_i, \$procmux$10802_CMP  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17539 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17542  (
    .A({ req_synced, \$procmux$10816_CMP  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17541 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17544  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17537 , \$auto$opt_dff.cc:194:make_patterns_logic$17539 , \$auto$opt_dff.cc:194:make_patterns_logic$17541  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17543 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:293.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$ack_dst_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(ack_dst_d),
    .Q(ack_dst_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10791_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$10791_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10802_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$10802_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10813  (
    .A(1'h0),
    .B({ req_synced, 1'h1 }),
    .S({ \$procmux$10816_CMP , \$procmux$10802_CMP  }),
    .Y(valid_o)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10816_CMP0  (
    .A(state_q),
    .Y(\$procmux$10816_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$10819  (
    .A(2'h0),
    .B({ \$auto$slang_frontend.cc:694:finish$\state_d$10719 , 2'h2 }),
    .S({ \$procmux$10816_CMP , \$procmux$10802_CMP  }),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10829  (
    .A(2'h1),
    .B(2'h2),
    .S(ready_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\state_d$10719 )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10853  (
    .A(1'h0),
    .B({ ready_i, req_synced }),
    .S({ \$procmux$10802_CMP , \$procmux$10791_CMP  }),
    .Y(ack_dst_d)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:236.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign async_ack_o = ack_dst_q;
  assign data_o = async_data_i;
  assign data_valid = valid_o;
  assign output_ready = ready_i;
endmodule

/* src = "../rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17549 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17551 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17553 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17546 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17555 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$10461 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$10474 ;
  wire \$procmux$11323_CMP ;
  wire \$procmux$11339_CMP ;
  wire \$procmux$11353_CMP ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "../rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "../rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17545  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17546 ),
    .Q(data_src_q)
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17548  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17555 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17550  (
    .A({ \$procmux$11353_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17549 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17552  (
    .A({ \$procmux$11339_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17551 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17554  (
    .A({ \$procmux$11323_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17553 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17547  (
    .A({ \$procmux$11353_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17546 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17556  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17551 , \$auto$opt_dff.cc:194:make_patterns_logic$17549 , \$auto$opt_dff.cc:194:make_patterns_logic$17553  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17555 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11323_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$11323_CMP )
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11325  (
    .A(ack_synced),
    .Y(\$auto$slang_frontend.cc:694:finish$\ready_o$10474 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11339_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$11339_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11352  (
    .A(data_src_q),
    .B(\$auto$slang_frontend.cc:694:finish$\data_src_d$10461 ),
    .S(\$procmux$11353_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11353_CMP0  (
    .A(state_q),
    .Y(\$procmux$11353_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11358  (
    .A(1'h0),
    .B({ valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$10474  }),
    .S({ \$procmux$11353_CMP , \$procmux$11339_CMP  }),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11364  (
    .A(\$procmux$11323_CMP ),
    .B(\$auto$slang_frontend.cc:694:finish$\ready_o$10474 ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$11371  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$11353_CMP , \$procmux$11339_CMP  }),
    .Y(state_d)
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11380  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\data_src_d$10461 )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "../rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17561 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17563 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17565 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17558 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17567 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$10534 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$10547 ;
  wire \$procmux$11169_CMP ;
  wire \$procmux$11185_CMP ;
  wire \$procmux$11199_CMP ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "../rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "../rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17557  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17558 ),
    .Q(data_src_q)
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17560  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17567 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17562  (
    .A({ \$procmux$11199_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17561 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17564  (
    .A({ \$procmux$11185_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17563 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17566  (
    .A({ \$procmux$11169_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17565 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17559  (
    .A({ \$procmux$11199_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17558 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17568  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17563 , \$auto$opt_dff.cc:194:make_patterns_logic$17561 , \$auto$opt_dff.cc:194:make_patterns_logic$17565  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17567 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11169_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$11169_CMP )
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11171  (
    .A(ack_synced),
    .Y(\$auto$slang_frontend.cc:694:finish$\ready_o$10547 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11185_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$11185_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11198  (
    .A(data_src_q),
    .B(\$auto$slang_frontend.cc:694:finish$\data_src_d$10534 ),
    .S(\$procmux$11199_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11199_CMP0  (
    .A(state_q),
    .Y(\$procmux$11199_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11204  (
    .A(1'h0),
    .B({ valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$10547  }),
    .S({ \$procmux$11199_CMP , \$procmux$11185_CMP  }),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11210  (
    .A(\$procmux$11169_CMP ),
    .B(\$auto$slang_frontend.cc:694:finish$\ready_o$10547 ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$11217  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$11199_CMP , \$procmux$11185_CMP  }),
    .Y(state_d)
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11226  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\data_src_d$10534 )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "../rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17573 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17575 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17577 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17570 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17579 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$10607 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$10620 ;
  wire \$procmux$11015_CMP ;
  wire \$procmux$11031_CMP ;
  wire \$procmux$11045_CMP ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "../rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "../rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17569  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17570 ),
    .Q(data_src_q)
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17572  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17579 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17574  (
    .A({ \$procmux$11045_CMP , valid_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17573 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17576  (
    .A({ \$procmux$11031_CMP , ack_synced }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17575 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17578  (
    .A({ \$procmux$11015_CMP , ack_synced }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17577 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17571  (
    .A({ \$procmux$11045_CMP , valid_i }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17570 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17580  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17575 , \$auto$opt_dff.cc:194:make_patterns_logic$17577 , \$auto$opt_dff.cc:194:make_patterns_logic$17573  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17579 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11015_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$11015_CMP )
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11017  (
    .A(ack_synced),
    .Y(\$auto$slang_frontend.cc:694:finish$\ready_o$10620 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11031_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$11031_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11044  (
    .A(data_src_q),
    .B(\$auto$slang_frontend.cc:694:finish$\data_src_d$10607 ),
    .S(\$procmux$11045_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11045_CMP0  (
    .A(state_q),
    .Y(\$procmux$11045_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11050  (
    .A(1'h0),
    .B({ valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$10620  }),
    .S({ \$procmux$11045_CMP , \$procmux$11031_CMP  }),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11056  (
    .A(\$procmux$11015_CMP ),
    .B(\$auto$slang_frontend.cc:694:finish$\ready_o$10620 ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$11063  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$11045_CMP , \$procmux$11031_CMP  }),
    .Y(state_d)
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11072  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\data_src_d$10607 )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "../rtl/common_cells/cdc_4phase.sv:92.8" */
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17585 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17587 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17589 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17582 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17591 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$10680 ;
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$10693 ;
  wire \$procmux$10861_CMP ;
  wire \$procmux$10877_CMP ;
  wire \$procmux$10891_CMP ;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:114.10" */
  wire ack_synced;
  /* src = "../rtl/common_cells/cdc_4phase.sv:105.16" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:106.16" */
  output [1:0] async_data_o;
  wire [1:0] async_data_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:104.16" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_4phase.sv:100.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_4phase.sv:101.16" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:112.5" */
  /* unused_bits = "0 1" */
  wire [1:0] data_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:112.17" */
  wire [1:0] data_src_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:103.16" */
  output ready_o;
  wire ready_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:110.10" */
  wire req_src_d;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:110.21" */
  wire req_src_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:99.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/cdc_4phase.sv:117.11" */
  wire [1:0] state_d;
  /* src = "../rtl/common_cells/cdc_4phase.sv:117.20" */
  wire [1:0] state_q;
  /* src = "../rtl/common_cells/cdc_4phase.sv:102.16" */
  input valid_i;
  wire valid_i;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17581  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(data_i),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17582 ),
    .Q(data_src_q)
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:172.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17584  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17591 ),
    .Q(state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17586  (
    .A({ ack_synced, \$procmux$10861_CMP  }),
    .B(2'h3),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17585 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17588  (
    .A({ ack_synced, \$procmux$10877_CMP  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17587 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17590  (
    .A({ valid_i, \$procmux$10891_CMP  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17589 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17583  (
    .A({ valid_i, \$procmux$10891_CMP  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17582 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17592  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17589 , \$auto$opt_dff.cc:194:make_patterns_logic$17585 , \$auto$opt_dff.cc:194:make_patterns_logic$17587  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17591 )
  );
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:181.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_src_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(req_src_d),
    .Q(req_src_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10861_CMP0  (
    .A(state_q),
    .B(2'h2),
    .Y(\$procmux$10861_CMP )
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10863  (
    .A(ack_synced),
    .Y(\$auto$slang_frontend.cc:694:finish$\ready_o$10693 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10877_CMP0  (
    .A(state_q),
    .B(1'h1),
    .Y(\$procmux$10877_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10890  (
    .A(data_src_q),
    .B(\$auto$slang_frontend.cc:694:finish$\data_src_d$10680 ),
    .S(\$procmux$10891_CMP ),
    .Y(data_src_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$10891_CMP0  (
    .A(state_q),
    .Y(\$procmux$10891_CMP )
  );
  /* full_case = 32'd1 */
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$10896  (
    .A(1'h0),
    .B({ valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$10693  }),
    .S({ \$procmux$10891_CMP , \$procmux$10877_CMP  }),
    .Y(req_src_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$10902  (
    .A(\$procmux$10861_CMP ),
    .B(\$auto$slang_frontend.cc:694:finish$\ready_o$10693 ),
    .Y(ready_o)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd2)
  ) \$procmux$10909  (
    .A(2'h0),
    .B(4'h6),
    .S({ \$procmux$10891_CMP , \$procmux$10877_CMP  }),
    .Y(state_d)
  );
  /* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$10918  (
    .A(data_src_q),
    .B(data_i),
    .S(valid_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\data_src_d$10680 )
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_4phase.sv:122.5" */
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign async_data_o = data_src_q;
  assign async_req_o = req_src_q;
endmodule

/* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:109.8" */
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:125.15" */
  input a_clear_ack_i;
  wire a_clear_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:123.16" */
  input a_clear_i;
  wire a_clear_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:124.16" */
  output a_clear_o;
  wire a_clear_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:121.16" */
  input a_clk_i;
  wire a_clk_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:127.16" */
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:126.16" */
  output a_isolate_o;
  wire a_isolate_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:122.16" */
  input a_rst_ni;
  wire a_rst_ni;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.31" */
  wire async_a2b_ack;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:141.21" */
  wire [1:0] async_a2b_next_phase;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.16" */
  wire async_a2b_req;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.31" */
  wire async_b2a_ack;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:145.21" */
  wire [1:0] async_b2a_next_phase;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.16" */
  wire async_b2a_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:133.16" */
  input b_clear_ack_i;
  wire b_clear_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:131.16" */
  input b_clear_i;
  wire b_clear_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:132.16" */
  output b_clear_o;
  wire b_clear_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:129.16" */
  input b_clk_i;
  wire b_clk_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:135.16" */
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:134.16" */
  output b_isolate_o;
  wire b_isolate_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:130.16" */
  input b_rst_ni;
  wire b_rst_ni;
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:150.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:169.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

/* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:109.8" */
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:125.15" */
  input a_clear_ack_i;
  wire a_clear_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:123.16" */
  input a_clear_i;
  wire a_clear_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:124.16" */
  output a_clear_o;
  wire a_clear_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:121.16" */
  input a_clk_i;
  wire a_clk_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:127.16" */
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:126.16" */
  output a_isolate_o;
  wire a_isolate_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:122.16" */
  input a_rst_ni;
  wire a_rst_ni;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.31" */
  wire async_a2b_ack;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:141.21" */
  wire [1:0] async_a2b_next_phase;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.16" */
  wire async_a2b_req;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.31" */
  wire async_b2a_ack;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:145.21" */
  wire [1:0] async_b2a_next_phase;
  /* keep = "true" */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.16" */
  wire async_b2a_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:133.16" */
  input b_clear_ack_i;
  wire b_clear_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:131.16" */
  input b_clear_i;
  wire b_clear_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:132.16" */
  output b_clear_o;
  wire b_clear_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:129.16" */
  input b_clk_i;
  wire b_clk_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:135.16" */
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:134.16" */
  output b_isolate_o;
  wire b_isolate_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:130.16" */
  input b_rst_ni;
  wire b_rst_ni;
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:150.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  /* keep = "true" */
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:169.5" */
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

/* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$10126 ;
  wire \$auto$builder.cc:338:Biop$10143 ;
  wire \$auto$builder.cc:338:Biop$10182 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17595 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17597 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17599 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17601 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17603 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17605 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17607 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17609 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17611 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17613 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17117 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17119 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17125 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17129 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17131 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17135 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18097 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18099 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10135 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10151 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10152 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10191 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10194 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10189 ;
  wire \$procmux$12292_CMP ;
  wire \$procmux$12293_CMP ;
  wire \$procmux$12294_CMP ;
  wire \$procmux$12295_CMP ;
  wire \$procmux$12327_CMP ;
  wire \$procmux$12328_CMP ;
  wire \$procmux$12329_CMP ;
  wire \$procmux$12330_CMP ;
  wire \$procmux$12355_CMP ;
  wire \$procmux$12361_CMP ;
  wire \$procmux$12368_CMP ;
  wire \$procmux$12376_CMP ;
  wire \$procmux$12391_CMP ;
  wire \$procmux$12426_CMP ;
  wire \$procmux$12437_CMP ;
  wire \$procmux$12455_CMP ;
  wire \$procmux$12506_CMP ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10125  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$auto$builder.cc:338:Biop$10126 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10142  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$auto$builder.cc:338:Biop$10143 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10181  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$auto$builder.cc:338:Biop$10182 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10198  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10200  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17593  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$auto$builder.cc:338:Biop$10182 ),
    .Q(receiver_phase_q)
  );
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17594  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17613 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17596  (
    .A({ \$procmux$12506_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17595 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17598  (
    .A({ \$procmux$12455_CMP , \$auto$builder.cc:338:Biop$10126 , initiator_phase_transition_ack, isolate_ack_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17597 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17600  (
    .A({ \$procmux$12437_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17599 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17602  (
    .A({ \$procmux$12391_CMP , \$auto$builder.cc:338:Biop$10143 , initiator_phase_transition_ack, clear_ack_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17601 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17604  (
    .A({ \$procmux$12376_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17603 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17606  (
    .A({ \$procmux$12355_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17605 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17608  (
    .A({ \$procmux$12361_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17607 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17610  (
    .A({ \$procmux$12368_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17609 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17612  (
    .A({ \$procmux$12426_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17611 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17614  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17599 , \$auto$opt_dff.cc:194:make_patterns_logic$17601 , \$auto$opt_dff.cc:194:make_patterns_logic$17603 , \$auto$opt_dff.cc:194:make_patterns_logic$17605 , \$auto$opt_dff.cc:194:make_patterns_logic$17607 , \$auto$opt_dff.cc:194:make_patterns_logic$17609 , \$auto$opt_dff.cc:194:make_patterns_logic$17611 , \$auto$opt_dff.cc:194:make_patterns_logic$17597 , \$auto$opt_dff.cc:194:make_patterns_logic$17595  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17613 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17116  (
    .A({ \$procmux$12294_CMP , \$procmux$12293_CMP , \$procmux$12292_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17117 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17118  (
    .A({ \$procmux$12330_CMP , \$procmux$12329_CMP , \$procmux$12327_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17119 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17122  (
    .A({ \$procmux$12455_CMP , \$procmux$12437_CMP , \$procmux$12426_CMP , \$procmux$12391_CMP , \$procmux$12376_CMP , \$procmux$12368_CMP , \$procmux$12361_CMP , \$procmux$12355_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17124  (
    .A({ \$procmux$12329_CMP , \$procmux$12328_CMP , \$procmux$12327_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17125 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17126  (
    .A({ \$procmux$12455_CMP , \$procmux$12426_CMP , \$procmux$12391_CMP , \$procmux$12368_CMP , \$procmux$12361_CMP , \$procmux$12355_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17128  (
    .A({ \$procmux$12330_CMP , \$procmux$12327_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17129 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17130  (
    .A({ \$procmux$12295_CMP , \$procmux$12294_CMP , \$procmux$12292_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17131 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17132  (
    .A({ \$procmux$12391_CMP , \$procmux$12376_CMP , \$procmux$12368_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17134  (
    .A({ \$procmux$12455_CMP , \$procmux$12437_CMP , \$procmux$12426_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17135 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18096  (
    .A({ \$procmux$12376_CMP , \$procmux$12368_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18097 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18098  (
    .A({ \$procmux$12437_CMP , \$procmux$12426_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18099 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12291  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17131 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10194 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12292_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$12292_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12293_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$12293_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12294_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$12294_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12295_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$12295_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12313  (
    .A(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10194 ),
    .B(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10191 ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12318  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17117 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$17125 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12323  (
    .A(receiver_phase_req),
    .B(\$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10189 ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12326  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17119 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10191 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12327_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$12327_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12328_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$12328_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12329_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$12329_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12330_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$12330_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12342  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$12328_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17129  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10189 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$12355_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$12355_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12361_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$12361_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12368_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$12368_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12376_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$12376_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12391_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$12391_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12399  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10151 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12413  (
    .A(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10151 [1:0]),
    .B(2'h3),
    .S(\$auto$builder.cc:338:Biop$10143 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10152 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12426_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$12426_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12437_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$12437_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12455_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$12455_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12483  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$auto$builder.cc:338:Biop$10126 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10135 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$12489  (
    .A(4'h1),
    .B({ 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10135 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10152 [1:0], 12'h780 }),
    .S({ \$procmux$12455_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18099 , \$procmux$12391_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18097 , \$procmux$12361_CMP , \$procmux$12355_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$12506_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$12506_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$12573  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$17135 , initiator_clear_out, \$procmux$12361_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10135 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10151 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10152 [3:2] = 2'h1;
endmodule

/* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$10207 ;
  wire \$auto$builder.cc:338:Biop$10224 ;
  wire \$auto$builder.cc:338:Biop$10263 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17617 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17619 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17621 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17623 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17625 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17627 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17629 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17631 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17633 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17635 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17137 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17139 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17145 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17149 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17151 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17155 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18101 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18103 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10216 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10232 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10233 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10272 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10275 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10270 ;
  wire \$procmux$11996_CMP ;
  wire \$procmux$11997_CMP ;
  wire \$procmux$11998_CMP ;
  wire \$procmux$11999_CMP ;
  wire \$procmux$12031_CMP ;
  wire \$procmux$12032_CMP ;
  wire \$procmux$12033_CMP ;
  wire \$procmux$12034_CMP ;
  wire \$procmux$12059_CMP ;
  wire \$procmux$12065_CMP ;
  wire \$procmux$12072_CMP ;
  wire \$procmux$12080_CMP ;
  wire \$procmux$12095_CMP ;
  wire \$procmux$12130_CMP ;
  wire \$procmux$12141_CMP ;
  wire \$procmux$12159_CMP ;
  wire \$procmux$12210_CMP ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10206  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$auto$builder.cc:338:Biop$10207 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10223  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$auto$builder.cc:338:Biop$10224 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10262  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$auto$builder.cc:338:Biop$10263 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10279  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10281  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17615  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$auto$builder.cc:338:Biop$10263 ),
    .Q(receiver_phase_q)
  );
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17616  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17635 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17618  (
    .A({ \$procmux$12210_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17617 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17620  (
    .A({ \$procmux$12159_CMP , \$auto$builder.cc:338:Biop$10207 , initiator_phase_transition_ack, isolate_ack_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17619 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17622  (
    .A({ \$procmux$12141_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17621 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17624  (
    .A({ \$procmux$12095_CMP , \$auto$builder.cc:338:Biop$10224 , initiator_phase_transition_ack, clear_ack_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17623 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17626  (
    .A({ \$procmux$12080_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17625 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17628  (
    .A({ \$procmux$12059_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17627 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17630  (
    .A({ \$procmux$12065_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17629 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17632  (
    .A({ \$procmux$12072_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17631 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17634  (
    .A({ \$procmux$12130_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17633 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17636  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17631 , \$auto$opt_dff.cc:194:make_patterns_logic$17629 , \$auto$opt_dff.cc:194:make_patterns_logic$17633 , \$auto$opt_dff.cc:194:make_patterns_logic$17617 , \$auto$opt_dff.cc:194:make_patterns_logic$17619 , \$auto$opt_dff.cc:194:make_patterns_logic$17621 , \$auto$opt_dff.cc:194:make_patterns_logic$17623 , \$auto$opt_dff.cc:194:make_patterns_logic$17625 , \$auto$opt_dff.cc:194:make_patterns_logic$17627  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17635 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17136  (
    .A({ \$procmux$11998_CMP , \$procmux$11997_CMP , \$procmux$11996_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17137 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17138  (
    .A({ \$procmux$12034_CMP , \$procmux$12033_CMP , \$procmux$12031_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17139 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17142  (
    .A({ \$procmux$12159_CMP , \$procmux$12141_CMP , \$procmux$12130_CMP , \$procmux$12095_CMP , \$procmux$12080_CMP , \$procmux$12072_CMP , \$procmux$12065_CMP , \$procmux$12059_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17144  (
    .A({ \$procmux$12033_CMP , \$procmux$12032_CMP , \$procmux$12031_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17145 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17146  (
    .A({ \$procmux$12159_CMP , \$procmux$12130_CMP , \$procmux$12095_CMP , \$procmux$12072_CMP , \$procmux$12065_CMP , \$procmux$12059_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17148  (
    .A({ \$procmux$12034_CMP , \$procmux$12031_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17149 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17150  (
    .A({ \$procmux$11999_CMP , \$procmux$11998_CMP , \$procmux$11996_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17151 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17152  (
    .A({ \$procmux$12095_CMP , \$procmux$12080_CMP , \$procmux$12072_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17154  (
    .A({ \$procmux$12159_CMP , \$procmux$12141_CMP , \$procmux$12130_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17155 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18100  (
    .A({ \$procmux$12080_CMP , \$procmux$12072_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18101 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18102  (
    .A({ \$procmux$12141_CMP , \$procmux$12130_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18103 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11995  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17151 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10275 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11996_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$11996_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11997_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$11997_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11998_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$11998_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11999_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$11999_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12017  (
    .A(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10275 ),
    .B(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10272 ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12022  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17137 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$17145 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12027  (
    .A(receiver_phase_req),
    .B(\$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10270 ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12030  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17139 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10272 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12031_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$12031_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12032_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$12032_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12033_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$12033_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12034_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$12034_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$12046  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$12032_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17149  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10270 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$12059_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$12059_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12065_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$12065_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12072_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$12072_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12080_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$12080_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12095_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$12095_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12103  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10232 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12117  (
    .A(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10232 [1:0]),
    .B(2'h3),
    .S(\$auto$builder.cc:338:Biop$10224 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10233 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12130_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$12130_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12141_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$12141_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12159_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$12159_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12187  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$auto$builder.cc:338:Biop$10207 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10216 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$12193  (
    .A(4'h1),
    .B({ 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10216 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10233 [1:0], 12'h780 }),
    .S({ \$procmux$12159_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18103 , \$procmux$12095_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18101 , \$procmux$12065_CMP , \$procmux$12059_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$12210_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$12210_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$12277  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$17155 , initiator_clear_out, \$procmux$12065_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10216 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10232 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10233 [3:2] = 2'h1;
endmodule

/* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$10298 ;
  wire \$auto$builder.cc:338:Biop$10315 ;
  wire \$auto$builder.cc:338:Biop$10354 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17639 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17641 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17643 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17645 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17647 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17649 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17651 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17653 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17655 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17657 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17157 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17159 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17165 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17169 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17171 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17175 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18105 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18107 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10307 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10323 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10324 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10363 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10366 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10361 ;
  wire \$procmux$11700_CMP ;
  wire \$procmux$11701_CMP ;
  wire \$procmux$11702_CMP ;
  wire \$procmux$11703_CMP ;
  wire \$procmux$11735_CMP ;
  wire \$procmux$11736_CMP ;
  wire \$procmux$11737_CMP ;
  wire \$procmux$11738_CMP ;
  wire \$procmux$11763_CMP ;
  wire \$procmux$11769_CMP ;
  wire \$procmux$11776_CMP ;
  wire \$procmux$11784_CMP ;
  wire \$procmux$11799_CMP ;
  wire \$procmux$11834_CMP ;
  wire \$procmux$11845_CMP ;
  wire \$procmux$11863_CMP ;
  wire \$procmux$11914_CMP ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10297  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$auto$builder.cc:338:Biop$10298 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10314  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$auto$builder.cc:338:Biop$10315 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10353  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$auto$builder.cc:338:Biop$10354 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10370  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10372  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17637  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$auto$builder.cc:338:Biop$10354 ),
    .Q(receiver_phase_q)
  );
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17638  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17657 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17640  (
    .A({ \$procmux$11914_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17639 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17642  (
    .A({ \$procmux$11863_CMP , \$auto$builder.cc:338:Biop$10298 , initiator_phase_transition_ack, isolate_ack_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17641 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17644  (
    .A({ \$procmux$11845_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17643 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17646  (
    .A({ \$procmux$11799_CMP , \$auto$builder.cc:338:Biop$10315 , initiator_phase_transition_ack, clear_ack_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17645 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17648  (
    .A({ \$procmux$11784_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17647 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17650  (
    .A({ \$procmux$11763_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17649 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17652  (
    .A({ \$procmux$11769_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17651 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17654  (
    .A({ \$procmux$11776_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17653 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17656  (
    .A({ \$procmux$11834_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17655 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17658  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17639 , \$auto$opt_dff.cc:194:make_patterns_logic$17643 , \$auto$opt_dff.cc:194:make_patterns_logic$17641 , \$auto$opt_dff.cc:194:make_patterns_logic$17655 , \$auto$opt_dff.cc:194:make_patterns_logic$17651 , \$auto$opt_dff.cc:194:make_patterns_logic$17653 , \$auto$opt_dff.cc:194:make_patterns_logic$17645 , \$auto$opt_dff.cc:194:make_patterns_logic$17649 , \$auto$opt_dff.cc:194:make_patterns_logic$17647  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17657 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17156  (
    .A({ \$procmux$11702_CMP , \$procmux$11701_CMP , \$procmux$11700_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17157 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17158  (
    .A({ \$procmux$11738_CMP , \$procmux$11737_CMP , \$procmux$11735_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17159 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17162  (
    .A({ \$procmux$11863_CMP , \$procmux$11845_CMP , \$procmux$11834_CMP , \$procmux$11799_CMP , \$procmux$11784_CMP , \$procmux$11776_CMP , \$procmux$11769_CMP , \$procmux$11763_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17164  (
    .A({ \$procmux$11737_CMP , \$procmux$11736_CMP , \$procmux$11735_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17165 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17166  (
    .A({ \$procmux$11863_CMP , \$procmux$11834_CMP , \$procmux$11799_CMP , \$procmux$11776_CMP , \$procmux$11769_CMP , \$procmux$11763_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17168  (
    .A({ \$procmux$11738_CMP , \$procmux$11735_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17169 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17170  (
    .A({ \$procmux$11703_CMP , \$procmux$11702_CMP , \$procmux$11700_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17171 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17172  (
    .A({ \$procmux$11799_CMP , \$procmux$11784_CMP , \$procmux$11776_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17174  (
    .A({ \$procmux$11863_CMP , \$procmux$11845_CMP , \$procmux$11834_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17175 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18104  (
    .A({ \$procmux$11784_CMP , \$procmux$11776_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18105 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18106  (
    .A({ \$procmux$11845_CMP , \$procmux$11834_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18107 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11699  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17171 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10366 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11700_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$11700_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11701_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$11701_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11702_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$11702_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11703_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$11703_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11721  (
    .A(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10366 ),
    .B(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10363 ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11726  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17157 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$17165 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11731  (
    .A(receiver_phase_req),
    .B(\$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10361 ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11734  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17159 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10363 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11735_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$11735_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11736_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$11736_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11737_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$11737_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11738_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$11738_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11750  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$11736_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17169  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10361 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11763_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$11763_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11769_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$11769_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11776_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$11776_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11784_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$11784_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11799_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$11799_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11807  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10323 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11821  (
    .A(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10323 [1:0]),
    .B(2'h3),
    .S(\$auto$builder.cc:338:Biop$10315 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10324 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11834_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$11834_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11845_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$11845_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11863_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$11863_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11891  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$auto$builder.cc:338:Biop$10298 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10307 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$11897  (
    .A(4'h1),
    .B({ 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10307 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10324 [1:0], 12'h780 }),
    .S({ \$procmux$11863_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18107 , \$procmux$11799_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18105 , \$procmux$11769_CMP , \$procmux$11763_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11914_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$11914_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$11981  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$17175 , initiator_clear_out, \$procmux$11769_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10307 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10323 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10324 [3:2] = 2'h1;
endmodule

/* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" */
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$10379 ;
  wire \$auto$builder.cc:338:Biop$10396 ;
  wire \$auto$builder.cc:338:Biop$10435 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17661 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17663 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17665 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17667 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17669 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17671 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17673 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17675 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17677 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17679 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17177 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17179 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17185 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17189 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17191 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17195 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18109 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18111 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10388 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10404 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10405 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10444 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10447 ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10442 ;
  wire \$procmux$11404_CMP ;
  wire \$procmux$11405_CMP ;
  wire \$procmux$11406_CMP ;
  wire \$procmux$11407_CMP ;
  wire \$procmux$11439_CMP ;
  wire \$procmux$11440_CMP ;
  wire \$procmux$11441_CMP ;
  wire \$procmux$11442_CMP ;
  wire \$procmux$11467_CMP ;
  wire \$procmux$11473_CMP ;
  wire \$procmux$11480_CMP ;
  wire \$procmux$11488_CMP ;
  wire \$procmux$11503_CMP ;
  wire \$procmux$11538_CMP ;
  wire \$procmux$11549_CMP ;
  wire \$procmux$11567_CMP ;
  wire \$procmux$11618_CMP ;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" */
  input async_ack_i;
  wire async_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" */
  output async_ack_o;
  wire async_ack_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" */
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" */
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" */
  input async_req_i;
  wire async_req_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" */
  output async_req_o;
  wire async_req_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" */
  input clear_ack_i;
  wire clear_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" */
  output clear_o;
  wire clear_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" */
  wire initiator_clear_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" */
  wire [1:0] initiator_clear_seq_phase;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" */
  wire initiator_isolate_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" */
  wire initiator_phase_transition_ack;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" */
  wire initiator_phase_transition_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" */
  wire [3:0] initiator_state_d;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" */
  wire [3:0] initiator_state_q;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" */
  input isolate_ack_i;
  wire isolate_ack_i;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" */
  output isolate_o;
  wire isolate_o;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" */
  wire receiver_clear_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" */
  wire receiver_isolate_out;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" */
  wire [1:0] receiver_next_phase;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" */
  wire receiver_phase_ack;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" */
  wire [1:0] receiver_phase_q;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" */
  wire receiver_phase_req;
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" */
  input rst_ni;
  wire rst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10378  (
    .A(initiator_phase_transition_ack),
    .B(isolate_ack_i),
    .Y(\$auto$builder.cc:338:Biop$10379 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10395  (
    .A(initiator_phase_transition_ack),
    .B(clear_ack_i),
    .Y(\$auto$builder.cc:338:Biop$10396 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10434  (
    .A(receiver_phase_req),
    .B(receiver_phase_ack),
    .Y(\$auto$builder.cc:338:Biop$10435 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10451  (
    .A(initiator_clear_out),
    .B(receiver_clear_out),
    .Y(clear_o)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10453  (
    .A(initiator_isolate_out),
    .B(receiver_isolate_out),
    .Y(isolate_o)
  );
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17659  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(receiver_next_phase),
    .EN(\$auto$builder.cc:338:Biop$10435 ),
    .Q(receiver_phase_q)
  );
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17660  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(initiator_state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17679 ),
    .Q(initiator_state_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17662  (
    .A({ \$procmux$11618_CMP , clear_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17661 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17664  (
    .A({ \$procmux$11567_CMP , \$auto$builder.cc:338:Biop$10379 , initiator_phase_transition_ack, isolate_ack_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17663 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17666  (
    .A({ \$procmux$11549_CMP , isolate_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17665 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17668  (
    .A({ \$procmux$11503_CMP , \$auto$builder.cc:338:Biop$10396 , initiator_phase_transition_ack, clear_ack_i }),
    .B(4'h8),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17667 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17670  (
    .A({ \$procmux$11488_CMP , clear_ack_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17669 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17672  (
    .A({ \$procmux$11467_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17671 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17674  (
    .A({ \$procmux$11473_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17673 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17676  (
    .A({ \$procmux$11480_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17675 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17678  (
    .A({ \$procmux$11538_CMP , initiator_phase_transition_ack }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17677 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17680  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17661 , \$auto$opt_dff.cc:194:make_patterns_logic$17665 , \$auto$opt_dff.cc:194:make_patterns_logic$17663 , \$auto$opt_dff.cc:194:make_patterns_logic$17669 , \$auto$opt_dff.cc:194:make_patterns_logic$17677 , \$auto$opt_dff.cc:194:make_patterns_logic$17675 , \$auto$opt_dff.cc:194:make_patterns_logic$17667 , \$auto$opt_dff.cc:194:make_patterns_logic$17673 , \$auto$opt_dff.cc:194:make_patterns_logic$17671  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17679 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17176  (
    .A({ \$procmux$11406_CMP , \$procmux$11405_CMP , \$procmux$11404_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17177 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17178  (
    .A({ \$procmux$11442_CMP , \$procmux$11441_CMP , \$procmux$11439_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17179 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17182  (
    .A({ \$procmux$11567_CMP , \$procmux$11549_CMP , \$procmux$11538_CMP , \$procmux$11503_CMP , \$procmux$11488_CMP , \$procmux$11480_CMP , \$procmux$11473_CMP , \$procmux$11467_CMP  }),
    .Y(initiator_isolate_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17184  (
    .A({ \$procmux$11441_CMP , \$procmux$11440_CMP , \$procmux$11439_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17185 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17186  (
    .A({ \$procmux$11567_CMP , \$procmux$11538_CMP , \$procmux$11503_CMP , \$procmux$11480_CMP , \$procmux$11473_CMP , \$procmux$11467_CMP  }),
    .Y(initiator_phase_transition_req)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17188  (
    .A({ \$procmux$11442_CMP , \$procmux$11439_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17189 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17190  (
    .A({ \$procmux$11407_CMP , \$procmux$11406_CMP , \$procmux$11404_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17191 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17192  (
    .A({ \$procmux$11503_CMP , \$procmux$11488_CMP , \$procmux$11480_CMP  }),
    .Y(initiator_clear_out)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17194  (
    .A({ \$procmux$11567_CMP , \$procmux$11549_CMP , \$procmux$11538_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17195 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18108  (
    .A({ \$procmux$11488_CMP , \$procmux$11480_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18109 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$18110  (
    .A({ \$procmux$11549_CMP , \$procmux$11538_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$18111 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11403  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17191 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10447 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11404_CMP0  (
    .A(receiver_phase_q),
    .B(2'h3),
    .Y(\$procmux$11404_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11405_CMP0  (
    .A(receiver_phase_q),
    .B(2'h2),
    .Y(\$procmux$11405_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11406_CMP0  (
    .A(receiver_phase_q),
    .B(1'h1),
    .Y(\$procmux$11406_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11407_CMP0  (
    .A(receiver_phase_q),
    .Y(\$procmux$11407_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11425  (
    .A(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10447 ),
    .B(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10444 ),
    .S(receiver_phase_req),
    .Y(receiver_clear_out)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$11430  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17177 ),
    .B(\$auto$opt_reduce.cc:137:opt_pmux$17185 ),
    .S(receiver_phase_req),
    .Y(receiver_isolate_out)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11435  (
    .A(receiver_phase_req),
    .B(\$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10442 ),
    .Y(receiver_phase_ack)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11438  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17179 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10444 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11439_CMP0  (
    .A(receiver_next_phase),
    .B(2'h3),
    .Y(\$procmux$11439_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11440_CMP0  (
    .A(receiver_next_phase),
    .B(2'h2),
    .Y(\$procmux$11440_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11441_CMP0  (
    .A(receiver_next_phase),
    .B(1'h1),
    .Y(\$procmux$11441_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11442_CMP0  (
    .A(receiver_next_phase),
    .Y(\$procmux$11442_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" */
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$procmux$11454  (
    .A(isolate_ack_i),
    .B({ clear_ack_i, 1'h1 }),
    .S({ \$procmux$11440_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17189  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10442 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11467_CMP0  (
    .A(initiator_state_q),
    .B(4'h8),
    .Y(\$procmux$11467_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11473_CMP0  (
    .A(initiator_state_q),
    .B(3'h7),
    .Y(\$procmux$11473_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11480_CMP0  (
    .A(initiator_state_q),
    .B(3'h5),
    .Y(\$procmux$11480_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11488_CMP0  (
    .A(initiator_state_q),
    .B(3'h6),
    .Y(\$procmux$11488_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$11503_CMP0  (
    .A(initiator_state_q),
    .B(3'h4),
    .Y(\$procmux$11503_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11511  (
    .A(2'h1),
    .B(2'h2),
    .S(initiator_phase_transition_ack),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10404 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$11525  (
    .A(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10404 [1:0]),
    .B(2'h3),
    .S(\$auto$builder.cc:338:Biop$10396 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10405 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11538_CMP0  (
    .A(initiator_state_q),
    .B(2'h2),
    .Y(\$procmux$11538_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$11549_CMP0  (
    .A(initiator_state_q),
    .B(2'h3),
    .Y(\$procmux$11549_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$11567_CMP0  (
    .A(initiator_state_q),
    .B(1'h1),
    .Y(\$procmux$11567_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$11595  (
    .A({ 2'h1, initiator_phase_transition_ack }),
    .B(3'h4),
    .S(\$auto$builder.cc:338:Biop$10379 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\initiator_state_d$10388 [2:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd4)
  ) \$procmux$11601  (
    .A(4'h1),
    .B({ 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10388 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10405 [1:0], 12'h780 }),
    .S({ \$procmux$11567_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18111 , \$procmux$11503_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18109 , \$procmux$11473_CMP , \$procmux$11467_CMP  }),
    .Y(initiator_state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$11618_CMP0  (
    .A(initiator_state_q),
    .Y(\$procmux$11618_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd2)
  ) \$procmux$11685  (
    .A(2'h0),
    .B(6'h1b),
    .S({ \$auto$opt_reduce.cc:137:opt_pmux$17195 , initiator_clear_out, \$procmux$11473_CMP  }),
    .Y(initiator_clear_seq_phase)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" */
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" */
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10388 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10404 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10405 [3:2] = 2'h1;
endmodule

/* src = "../rtl/core_wrap.sv:8.8" */
module \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap (clk_i, rst_ni, ref_clk_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_err_i, debug_req_i, fetch_enable_i, core_busy_o, test_enable_i, irqs_i, timer0_irq_i, boot_addr_i, instr_addr_o, instr_rdata_i
, data_be_o, data_addr_o, data_wdata_o, data_rdata_i);
  /* src = "../rtl/core_wrap.sv:17.23" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "../rtl/core_wrap.sv:9.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/core_wrap.sv:44.23" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "../rtl/core_wrap.sv:33.23" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "../rtl/core_wrap.sv:32.23" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "../rtl/core_wrap.sv:36.23" */
  input data_err_i;
  wire data_err_i;
  /* src = "../rtl/core_wrap.sv:29.23" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "../rtl/core_wrap.sv:35.23" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "../rtl/core_wrap.sv:28.23" */
  output data_req_o;
  wire data_req_o;
  /* src = "../rtl/core_wrap.sv:30.23" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "../rtl/core_wrap.sv:34.23" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "../rtl/core_wrap.sv:31.23" */
  output data_we_o;
  wire data_we_o;
  /* src = "../rtl/core_wrap.sv:39.23" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "../rtl/core_wrap.sv:42.23" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "../rtl/core_wrap.sv:48.15" */
  wire [31:0] ibex_boot_addr;
  /* src = "../rtl/core_wrap.sv:23.23" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "../rtl/core_wrap.sv:25.23" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "../rtl/core_wrap.sv:21.23" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "../rtl/core_wrap.sv:24.23" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "../rtl/core_wrap.sv:20.23" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "../rtl/core_wrap.sv:22.23" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "../rtl/core_wrap.sv:14.22" */
  input [15:0] irqs_i;
  wire [15:0] irqs_i;
  /* src = "../rtl/core_wrap.sv:11.16" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "../rtl/core_wrap.sv:10.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/core_wrap.sv:12.16" */
  input test_enable_i;
  wire test_enable_i;
  /* src = "../rtl/core_wrap.sv:15.15" */
  input timer0_irq_i;
  wire timer0_irq_i;
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/core_wrap.sv:68.5" */
  \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex  i_ibex (
    .boot_addr_i({ boot_addr_i[31:8], 8'h00 }),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .debug_req_i(debug_req_i),
    .fetch_enable_i(fetch_enable_i),
    .hart_id_i(32'd0),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .irq_external_i(1'h0),
    .irq_fast_i(irqs_i),
    .irq_nm_i(1'h0),
    .irq_software_i(1'h0),
    .irq_timer_i(timer0_irq_i),
    .rst_ni(rst_ni),
    .test_en_i(test_enable_i)
  );
  assign ibex_boot_addr = { boot_addr_i[31:8], 8'h00 };
endmodule

/* top =  1  */
/* src = "../rtl/croc_chip.sv:8.8" */
module croc_chip(clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio0_io, gpio1_io, gpio2_io, gpio3_io, gpio4_io, gpio5_io, gpio6_io, gpio7_io, gpio8_io
, gpio9_io, gpio10_io, gpio11_io, gpio12_io, gpio13_io, gpio14_io, gpio15_io, gpio16_io, gpio17_io, gpio18_io, gpio19_io, gpio20_io, gpio21_io, gpio22_io, gpio23_io, gpio24_io, gpio25_io, gpio26_io, gpio27_io, gpio28_io, gpio29_io
, gpio30_io, gpio31_io, unused0_o, unused1_o, unused2_o, unused3_o);
  /* src = "../rtl/croc_chip.sv:9.15" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/croc_chip.sv:22.15" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "../rtl/croc_chip.sv:25.15" */
  inout gpio0_io;
  wire gpio0_io;
  /* src = "../rtl/croc_chip.sv:35.15" */
  inout gpio10_io;
  wire gpio10_io;
  /* src = "../rtl/croc_chip.sv:36.15" */
  inout gpio11_io;
  wire gpio11_io;
  /* src = "../rtl/croc_chip.sv:37.15" */
  inout gpio12_io;
  wire gpio12_io;
  /* src = "../rtl/croc_chip.sv:38.15" */
  inout gpio13_io;
  wire gpio13_io;
  /* src = "../rtl/croc_chip.sv:39.15" */
  inout gpio14_io;
  wire gpio14_io;
  /* src = "../rtl/croc_chip.sv:40.15" */
  inout gpio15_io;
  wire gpio15_io;
  /* src = "../rtl/croc_chip.sv:41.15" */
  inout gpio16_io;
  wire gpio16_io;
  /* src = "../rtl/croc_chip.sv:42.15" */
  inout gpio17_io;
  wire gpio17_io;
  /* src = "../rtl/croc_chip.sv:43.15" */
  inout gpio18_io;
  wire gpio18_io;
  /* src = "../rtl/croc_chip.sv:44.15" */
  inout gpio19_io;
  wire gpio19_io;
  /* src = "../rtl/croc_chip.sv:26.15" */
  inout gpio1_io;
  wire gpio1_io;
  /* src = "../rtl/croc_chip.sv:45.15" */
  inout gpio20_io;
  wire gpio20_io;
  /* src = "../rtl/croc_chip.sv:46.15" */
  inout gpio21_io;
  wire gpio21_io;
  /* src = "../rtl/croc_chip.sv:47.15" */
  inout gpio22_io;
  wire gpio22_io;
  /* src = "../rtl/croc_chip.sv:48.15" */
  inout gpio23_io;
  wire gpio23_io;
  /* src = "../rtl/croc_chip.sv:49.15" */
  inout gpio24_io;
  wire gpio24_io;
  /* src = "../rtl/croc_chip.sv:50.15" */
  inout gpio25_io;
  wire gpio25_io;
  /* src = "../rtl/croc_chip.sv:51.15" */
  inout gpio26_io;
  wire gpio26_io;
  /* src = "../rtl/croc_chip.sv:52.15" */
  inout gpio27_io;
  wire gpio27_io;
  /* src = "../rtl/croc_chip.sv:53.15" */
  inout gpio28_io;
  wire gpio28_io;
  /* src = "../rtl/croc_chip.sv:54.15" */
  inout gpio29_io;
  wire gpio29_io;
  /* src = "../rtl/croc_chip.sv:27.15" */
  inout gpio2_io;
  wire gpio2_io;
  /* src = "../rtl/croc_chip.sv:55.15" */
  inout gpio30_io;
  wire gpio30_io;
  /* src = "../rtl/croc_chip.sv:56.15" */
  inout gpio31_io;
  wire gpio31_io;
  /* src = "../rtl/croc_chip.sv:28.15" */
  inout gpio3_io;
  wire gpio3_io;
  /* src = "../rtl/croc_chip.sv:29.15" */
  inout gpio4_io;
  wire gpio4_io;
  /* src = "../rtl/croc_chip.sv:30.15" */
  inout gpio5_io;
  wire gpio5_io;
  /* src = "../rtl/croc_chip.sv:31.15" */
  inout gpio6_io;
  wire gpio6_io;
  /* src = "../rtl/croc_chip.sv:32.15" */
  inout gpio7_io;
  wire gpio7_io;
  /* src = "../rtl/croc_chip.sv:33.15" */
  inout gpio8_io;
  wire gpio8_io;
  /* src = "../rtl/croc_chip.sv:34.15" */
  inout gpio9_io;
  wire gpio9_io;
  /* src = "../rtl/croc_chip.sv:13.15" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "../rtl/croc_chip.sv:16.15" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "../rtl/croc_chip.sv:17.15" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "../rtl/croc_chip.sv:15.15" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "../rtl/croc_chip.sv:14.15" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "../rtl/croc_chip.sv:11.15" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "../rtl/croc_chip.sv:10.15" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/croc_chip.sv:62.11" */
  wire soc_clk_i;
  /* src = "../rtl/croc_chip.sv:73.11" */
  wire soc_fetch_en_i;
  /* src = "../rtl/croc_chip.sv:78.27" */
  wire [31:0] soc_gpio_i;
  /* src = "../rtl/croc_chip.sv:79.27" */
  wire [31:0] soc_gpio_o;
  /* src = "../rtl/croc_chip.sv:80.27" */
  wire [31:0] soc_gpio_out_en_o;
  /* src = "../rtl/croc_chip.sv:67.11" */
  wire soc_jtag_tck_i;
  /* src = "../rtl/croc_chip.sv:70.11" */
  wire soc_jtag_tdi_i;
  /* src = "../rtl/croc_chip.sv:71.11" */
  wire soc_jtag_tdo_o;
  /* src = "../rtl/croc_chip.sv:69.11" */
  wire soc_jtag_tms_i;
  /* src = "../rtl/croc_chip.sv:68.11" */
  wire soc_jtag_trst_ni;
  /* src = "../rtl/croc_chip.sv:64.11" */
  wire soc_ref_clk_i;
  /* src = "../rtl/croc_chip.sv:63.11" */
  wire soc_rst_ni;
  /* src = "../rtl/croc_chip.sv:74.11" */
  wire soc_status_o;
  /* src = "../rtl/croc_chip.sv:85.12" */
  wire soc_testmode_i;
  /* src = "../rtl/croc_chip.sv:93.70" */
  wire soc_uart_rx_i;
  /* src = "../rtl/croc_chip.sv:94.70" */
  wire soc_uart_tx_o;
  /* src = "../rtl/croc_chip.sv:23.15" */
  output status_o;
  wire status_o;
  /* src = "../rtl/croc_chip.sv:19.15" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "../rtl/croc_chip.sv:20.15" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "../rtl/croc_chip.sv:57.15" */
  output unused0_o;
  wire unused0_o;
  /* src = "../rtl/croc_chip.sv:58.15" */
  output unused1_o;
  wire unused1_o;
  /* src = "../rtl/croc_chip.sv:59.15" */
  output unused2_o;
  wire unused2_o;
  /* src = "../rtl/croc_chip.sv:60.15" */
  output unused3_o;
  wire unused3_o;
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_chip.sv:159.3" */
  \croc_soc$croc_chip.i_croc_soc  i_croc_soc (
    .clk_i(soc_clk_i),
    .fetch_en_i(soc_fetch_en_i),
    .gpio_i(soc_gpio_i),
    .gpio_o(soc_gpio_o),
    .gpio_out_en_o(soc_gpio_out_en_o),
    .jtag_tck_i(soc_jtag_tck_i),
    .jtag_tdi_i(soc_jtag_tdi_i),
    .jtag_tdo_o(soc_jtag_tdo_o),
    .jtag_tms_i(soc_jtag_tms_i),
    .jtag_trst_ni(soc_jtag_trst_ni),
    .ref_clk_i(soc_ref_clk_i),
    .rst_ni(soc_rst_ni),
    .status_o(soc_status_o),
    .testmode_i(1'h0),
    .uart_rx_i(soc_uart_rx_i),
    .uart_tx_o(soc_uart_tx_o)
  );
  /* src = "../rtl/croc_chip.sv:82.27" */
  sg13g2_IOPadIn pad_clk_i (
    .p2c(soc_clk_i),
    .pad(clk_i)
  );
  /* src = "../rtl/croc_chip.sv:96.27" */
  sg13g2_IOPadIn pad_fetch_en_i (
    .p2c(soc_fetch_en_i),
    .pad(fetch_en_i)
  );
  /* src = "../rtl/croc_chip.sv:99.27" */
  sg13g2_IOPadInOut30mA pad_gpio0_io (
    .c2p(soc_gpio_o[0]),
    .c2p_en(soc_gpio_out_en_o[0]),
    .p2c(soc_gpio_i[0]),
    .pad(gpio0_io)
  );
  /* src = "../rtl/croc_chip.sv:109.27" */
  sg13g2_IOPadInOut30mA pad_gpio10_io (
    .c2p(soc_gpio_o[10]),
    .c2p_en(soc_gpio_out_en_o[10]),
    .p2c(soc_gpio_i[10]),
    .pad(gpio10_io)
  );
  /* src = "../rtl/croc_chip.sv:110.27" */
  sg13g2_IOPadInOut30mA pad_gpio11_io (
    .c2p(soc_gpio_o[11]),
    .c2p_en(soc_gpio_out_en_o[11]),
    .p2c(soc_gpio_i[11]),
    .pad(gpio11_io)
  );
  /* src = "../rtl/croc_chip.sv:111.27" */
  sg13g2_IOPadInOut30mA pad_gpio12_io (
    .c2p(soc_gpio_o[12]),
    .c2p_en(soc_gpio_out_en_o[12]),
    .p2c(soc_gpio_i[12]),
    .pad(gpio12_io)
  );
  /* src = "../rtl/croc_chip.sv:112.27" */
  sg13g2_IOPadInOut30mA pad_gpio13_io (
    .c2p(soc_gpio_o[13]),
    .c2p_en(soc_gpio_out_en_o[13]),
    .p2c(soc_gpio_i[13]),
    .pad(gpio13_io)
  );
  /* src = "../rtl/croc_chip.sv:113.27" */
  sg13g2_IOPadInOut30mA pad_gpio14_io (
    .c2p(soc_gpio_o[14]),
    .c2p_en(soc_gpio_out_en_o[14]),
    .p2c(soc_gpio_i[14]),
    .pad(gpio14_io)
  );
  /* src = "../rtl/croc_chip.sv:114.27" */
  sg13g2_IOPadInOut30mA pad_gpio15_io (
    .c2p(soc_gpio_o[15]),
    .c2p_en(soc_gpio_out_en_o[15]),
    .p2c(soc_gpio_i[15]),
    .pad(gpio15_io)
  );
  /* src = "../rtl/croc_chip.sv:115.27" */
  sg13g2_IOPadInOut30mA pad_gpio16_io (
    .c2p(soc_gpio_o[16]),
    .c2p_en(soc_gpio_out_en_o[16]),
    .p2c(soc_gpio_i[16]),
    .pad(gpio16_io)
  );
  /* src = "../rtl/croc_chip.sv:116.27" */
  sg13g2_IOPadInOut30mA pad_gpio17_io (
    .c2p(soc_gpio_o[17]),
    .c2p_en(soc_gpio_out_en_o[17]),
    .p2c(soc_gpio_i[17]),
    .pad(gpio17_io)
  );
  /* src = "../rtl/croc_chip.sv:117.27" */
  sg13g2_IOPadInOut30mA pad_gpio18_io (
    .c2p(soc_gpio_o[18]),
    .c2p_en(soc_gpio_out_en_o[18]),
    .p2c(soc_gpio_i[18]),
    .pad(gpio18_io)
  );
  /* src = "../rtl/croc_chip.sv:118.27" */
  sg13g2_IOPadInOut30mA pad_gpio19_io (
    .c2p(soc_gpio_o[19]),
    .c2p_en(soc_gpio_out_en_o[19]),
    .p2c(soc_gpio_i[19]),
    .pad(gpio19_io)
  );
  /* src = "../rtl/croc_chip.sv:100.27" */
  sg13g2_IOPadInOut30mA pad_gpio1_io (
    .c2p(soc_gpio_o[1]),
    .c2p_en(soc_gpio_out_en_o[1]),
    .p2c(soc_gpio_i[1]),
    .pad(gpio1_io)
  );
  /* src = "../rtl/croc_chip.sv:119.27" */
  sg13g2_IOPadInOut30mA pad_gpio20_io (
    .c2p(soc_gpio_o[20]),
    .c2p_en(soc_gpio_out_en_o[20]),
    .p2c(soc_gpio_i[20]),
    .pad(gpio20_io)
  );
  /* src = "../rtl/croc_chip.sv:120.27" */
  sg13g2_IOPadInOut30mA pad_gpio21_io (
    .c2p(soc_gpio_o[21]),
    .c2p_en(soc_gpio_out_en_o[21]),
    .p2c(soc_gpio_i[21]),
    .pad(gpio21_io)
  );
  /* src = "../rtl/croc_chip.sv:121.27" */
  sg13g2_IOPadInOut30mA pad_gpio22_io (
    .c2p(soc_gpio_o[22]),
    .c2p_en(soc_gpio_out_en_o[22]),
    .p2c(soc_gpio_i[22]),
    .pad(gpio22_io)
  );
  /* src = "../rtl/croc_chip.sv:122.27" */
  sg13g2_IOPadInOut30mA pad_gpio23_io (
    .c2p(soc_gpio_o[23]),
    .c2p_en(soc_gpio_out_en_o[23]),
    .p2c(soc_gpio_i[23]),
    .pad(gpio23_io)
  );
  /* src = "../rtl/croc_chip.sv:123.27" */
  sg13g2_IOPadInOut30mA pad_gpio24_io (
    .c2p(soc_gpio_o[24]),
    .c2p_en(soc_gpio_out_en_o[24]),
    .p2c(soc_gpio_i[24]),
    .pad(gpio24_io)
  );
  /* src = "../rtl/croc_chip.sv:124.27" */
  sg13g2_IOPadInOut30mA pad_gpio25_io (
    .c2p(soc_gpio_o[25]),
    .c2p_en(soc_gpio_out_en_o[25]),
    .p2c(soc_gpio_i[25]),
    .pad(gpio25_io)
  );
  /* src = "../rtl/croc_chip.sv:125.27" */
  sg13g2_IOPadInOut30mA pad_gpio26_io (
    .c2p(soc_gpio_o[26]),
    .c2p_en(soc_gpio_out_en_o[26]),
    .p2c(soc_gpio_i[26]),
    .pad(gpio26_io)
  );
  /* src = "../rtl/croc_chip.sv:126.27" */
  sg13g2_IOPadInOut30mA pad_gpio27_io (
    .c2p(soc_gpio_o[27]),
    .c2p_en(soc_gpio_out_en_o[27]),
    .p2c(soc_gpio_i[27]),
    .pad(gpio27_io)
  );
  /* src = "../rtl/croc_chip.sv:127.27" */
  sg13g2_IOPadInOut30mA pad_gpio28_io (
    .c2p(soc_gpio_o[28]),
    .c2p_en(soc_gpio_out_en_o[28]),
    .p2c(soc_gpio_i[28]),
    .pad(gpio28_io)
  );
  /* src = "../rtl/croc_chip.sv:128.27" */
  sg13g2_IOPadInOut30mA pad_gpio29_io (
    .c2p(soc_gpio_o[29]),
    .c2p_en(soc_gpio_out_en_o[29]),
    .p2c(soc_gpio_i[29]),
    .pad(gpio29_io)
  );
  /* src = "../rtl/croc_chip.sv:101.27" */
  sg13g2_IOPadInOut30mA pad_gpio2_io (
    .c2p(soc_gpio_o[2]),
    .c2p_en(soc_gpio_out_en_o[2]),
    .p2c(soc_gpio_i[2]),
    .pad(gpio2_io)
  );
  /* src = "../rtl/croc_chip.sv:129.27" */
  sg13g2_IOPadInOut30mA pad_gpio30_io (
    .c2p(soc_gpio_o[30]),
    .c2p_en(soc_gpio_out_en_o[30]),
    .p2c(soc_gpio_i[30]),
    .pad(gpio30_io)
  );
  /* src = "../rtl/croc_chip.sv:130.27" */
  sg13g2_IOPadInOut30mA pad_gpio31_io (
    .c2p(soc_gpio_o[31]),
    .c2p_en(soc_gpio_out_en_o[31]),
    .p2c(soc_gpio_i[31]),
    .pad(gpio31_io)
  );
  /* src = "../rtl/croc_chip.sv:102.27" */
  sg13g2_IOPadInOut30mA pad_gpio3_io (
    .c2p(soc_gpio_o[3]),
    .c2p_en(soc_gpio_out_en_o[3]),
    .p2c(soc_gpio_i[3]),
    .pad(gpio3_io)
  );
  /* src = "../rtl/croc_chip.sv:103.27" */
  sg13g2_IOPadInOut30mA pad_gpio4_io (
    .c2p(soc_gpio_o[4]),
    .c2p_en(soc_gpio_out_en_o[4]),
    .p2c(soc_gpio_i[4]),
    .pad(gpio4_io)
  );
  /* src = "../rtl/croc_chip.sv:104.27" */
  sg13g2_IOPadInOut30mA pad_gpio5_io (
    .c2p(soc_gpio_o[5]),
    .c2p_en(soc_gpio_out_en_o[5]),
    .p2c(soc_gpio_i[5]),
    .pad(gpio5_io)
  );
  /* src = "../rtl/croc_chip.sv:105.27" */
  sg13g2_IOPadInOut30mA pad_gpio6_io (
    .c2p(soc_gpio_o[6]),
    .c2p_en(soc_gpio_out_en_o[6]),
    .p2c(soc_gpio_i[6]),
    .pad(gpio6_io)
  );
  /* src = "../rtl/croc_chip.sv:106.27" */
  sg13g2_IOPadInOut30mA pad_gpio7_io (
    .c2p(soc_gpio_o[7]),
    .c2p_en(soc_gpio_out_en_o[7]),
    .p2c(soc_gpio_i[7]),
    .pad(gpio7_io)
  );
  /* src = "../rtl/croc_chip.sv:107.27" */
  sg13g2_IOPadInOut30mA pad_gpio8_io (
    .c2p(soc_gpio_o[8]),
    .c2p_en(soc_gpio_out_en_o[8]),
    .p2c(soc_gpio_i[8]),
    .pad(gpio8_io)
  );
  /* src = "../rtl/croc_chip.sv:108.27" */
  sg13g2_IOPadInOut30mA pad_gpio9_io (
    .c2p(soc_gpio_o[9]),
    .c2p_en(soc_gpio_out_en_o[9]),
    .p2c(soc_gpio_i[9]),
    .pad(gpio9_io)
  );
  /* src = "../rtl/croc_chip.sv:87.27" */
  sg13g2_IOPadIn pad_jtag_tck_i (
    .p2c(soc_jtag_tck_i),
    .pad(jtag_tck_i)
  );
  /* src = "../rtl/croc_chip.sv:90.27" */
  sg13g2_IOPadIn pad_jtag_tdi_i (
    .p2c(soc_jtag_tdi_i),
    .pad(jtag_tdi_i)
  );
  /* src = "../rtl/croc_chip.sv:91.27" */
  sg13g2_IOPadOut16mA pad_jtag_tdo_o (
    .c2p(soc_jtag_tdo_o),
    .pad(jtag_tdo_o)
  );
  /* src = "../rtl/croc_chip.sv:89.27" */
  sg13g2_IOPadIn pad_jtag_tms_i (
    .p2c(soc_jtag_tms_i),
    .pad(jtag_tms_i)
  );
  /* src = "../rtl/croc_chip.sv:88.27" */
  sg13g2_IOPadIn pad_jtag_trst_ni (
    .p2c(soc_jtag_trst_ni),
    .pad(jtag_trst_ni)
  );
  /* src = "../rtl/croc_chip.sv:84.27" */
  sg13g2_IOPadIn pad_ref_clk_i (
    .p2c(soc_ref_clk_i),
    .pad(ref_clk_i)
  );
  /* src = "../rtl/croc_chip.sv:83.27" */
  sg13g2_IOPadIn pad_rst_ni (
    .p2c(soc_rst_ni),
    .pad(rst_ni)
  );
  /* src = "../rtl/croc_chip.sv:97.27" */
  sg13g2_IOPadOut16mA pad_status_o (
    .c2p(soc_status_o),
    .pad(status_o)
  );
  /* src = "../rtl/croc_chip.sv:93.27" */
  sg13g2_IOPadIn pad_uart_rx_i (
    .p2c(soc_uart_rx_i),
    .pad(uart_rx_i)
  );
  /* src = "../rtl/croc_chip.sv:94.27" */
  sg13g2_IOPadOut16mA pad_uart_tx_o (
    .c2p(soc_uart_tx_o),
    .pad(uart_tx_o)
  );
  /* src = "../rtl/croc_chip.sv:131.25" */
  sg13g2_IOPadOut16mA pad_unused0_o (
    .c2p(soc_status_o),
    .pad(unused0_o)
  );
  /* src = "../rtl/croc_chip.sv:132.25" */
  sg13g2_IOPadOut16mA pad_unused1_o (
    .c2p(soc_status_o),
    .pad(unused1_o)
  );
  /* src = "../rtl/croc_chip.sv:133.25" */
  sg13g2_IOPadOut16mA pad_unused2_o (
    .c2p(soc_status_o),
    .pad(unused2_o)
  );
  /* src = "../rtl/croc_chip.sv:134.25" */
  sg13g2_IOPadOut16mA pad_unused3_o (
    .c2p(soc_status_o),
    .pad(unused3_o)
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:136.46" */
  sg13g2_IOPadVdd pad_vdd0 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:137.46" */
  sg13g2_IOPadVdd pad_vdd1 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:138.46" */
  sg13g2_IOPadVdd pad_vdd2 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:139.46" */
  sg13g2_IOPadVdd pad_vdd3 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:146.48" */
  sg13g2_IOPadIOVdd pad_vddio0 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:147.48" */
  sg13g2_IOPadIOVdd pad_vddio1 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:148.48" */
  sg13g2_IOPadIOVdd pad_vddio2 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:149.48" */
  sg13g2_IOPadIOVdd pad_vddio3 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:141.46" */
  sg13g2_IOPadVss pad_vss0 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:142.46" */
  sg13g2_IOPadVss pad_vss1 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:143.46" */
  sg13g2_IOPadVss pad_vss2 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:144.46" */
  sg13g2_IOPadVss pad_vss3 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:151.48" */
  sg13g2_IOPadIOVss pad_vssio0 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:152.48" */
  sg13g2_IOPadIOVss pad_vssio1 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:153.48" */
  sg13g2_IOPadIOVss pad_vssio2 (
  );
  /* keep = "true" */
  /* src = "../rtl/croc_chip.sv:154.48" */
  sg13g2_IOPadIOVss pad_vssio3 (
  );
  assign soc_testmode_i = 1'h0;
endmodule

/* src = "../rtl/croc_domain.sv:8.8" */
module \croc_domain$croc_chip.i_croc_soc.i_croc (clk_i, rst_ni, testmode_i, ref_clk_i, core_busy_o, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, user_sbr_obi_req_o, user_sbr_obi_rsp_i, user_mgr_obi_req_i, user_mgr_obi_rsp_o
, interrupts_i);
  wire \$auto$builder.cc:364:Unop$12 ;
  wire \$auto$builder.cc:364:Unop$14 ;
  wire \$auto$builder.cc:364:Unop$8 ;
  /* src = "../rtl/croc_domain.sv:133.34" */
  /* unused_bits = "75 149 223 371" */
  wire [443:0] all_periph_obi_req;
  /* src = "../rtl/croc_domain.sv:134.34" */
  wire [233:0] all_periph_obi_rsp;
  /* src = "../rtl/croc_domain.sv:97.34" */
  wire [369:0] all_sbr_obi_req;
  /* src = "../rtl/croc_domain.sv:98.34" */
  wire [194:0] all_sbr_obi_rsp;
  /* src = "../rtl/croc_domain.sv:52.16" */
  wire [31:0] boot_addr;
  /* src = "../rtl/croc_domain.sv:11.21" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/croc_domain.sv:43.16" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "../rtl/croc_domain.sv:82.17" */
  wire [71:0] core_data_obi_req;
  /* src = "../rtl/croc_domain.sv:83.17" */
  /* unused_bits = "2 4" */
  wire [36:0] core_data_obi_rsp;
  /* src = "../rtl/croc_domain.sv:73.17" */
  wire [71:0] core_instr_obi_req;
  /* src = "../rtl/croc_domain.sv:74.17" */
  /* unused_bits = "2 4" */
  wire [36:0] core_instr_obi_rsp;
  /* src = "../rtl/croc_domain.sv:141.17" */
  /* unused_bits = "1" */
  wire [73:0] dbg_mem_obi_req;
  /* src = "../rtl/croc_domain.sv:142.17" */
  wire [38:0] dbg_mem_obi_rsp;
  /* src = "../rtl/croc_domain.sv:88.17" */
  wire [71:0] dbg_req_obi_req;
  /* src = "../rtl/croc_domain.sv:89.17" */
  /* unused_bits = "2 4" */
  wire [36:0] dbg_req_obi_rsp;
  /* src = "../rtl/croc_domain.sv:50.9" */
  wire debug_req;
  /* src = "../rtl/croc_domain.sv:228.17" */
  wire [40:0] dmi_req;
  /* src = "../rtl/croc_domain.sv:227.35" */
  wire dmi_req_ready;
  /* src = "../rtl/croc_domain.sv:227.20" */
  wire dmi_req_valid;
  /* src = "../rtl/croc_domain.sv:229.18" */
  wire [33:0] dmi_resp;
  /* src = "../rtl/croc_domain.sv:227.66" */
  wire dmi_resp_ready;
  /* src = "../rtl/croc_domain.sv:227.50" */
  wire dmi_resp_valid;
  /* src = "../rtl/croc_domain.sv:227.9" */
  wire dmi_rst_n;
  /* src = "../rtl/croc_domain.sv:137.17" */
  wire [73:0] error_obi_req;
  /* src = "../rtl/croc_domain.sv:138.17" */
  wire [38:0] error_obi_rsp;
  /* src = "../rtl/croc_domain.sv:15.21" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "../rtl/croc_domain.sv:51.9" */
  wire fetch_enable;
  /* src = "../rtl/croc_domain.sv:347.39" */
  wire [3:0] \gen_sram_bank[0].bank_be ;
  /* src = "../rtl/croc_domain.sv:344.37" */
  /* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_sram_bank[0].bank_byte_addr ;
  /* src = "../rtl/croc_domain.sv:343.30" */
  wire \gen_sram_bank[0].bank_gnt ;
  /* src = "../rtl/croc_domain.sv:346.49" */
  wire [31:0] \gen_sram_bank[0].bank_rdata ;
  /* src = "../rtl/croc_domain.sv:343.11" */
  wire \gen_sram_bank[0].bank_req ;
  /* src = "../rtl/croc_domain.sv:346.37" */
  wire [31:0] \gen_sram_bank[0].bank_wdata ;
  /* src = "../rtl/croc_domain.sv:343.21" */
  wire \gen_sram_bank[0].bank_we ;
  /* src = "../rtl/croc_domain.sv:345.35" */
  wire [8:0] \gen_sram_bank[0].bank_word_addr ;
  /* src = "../rtl/croc_domain.sv:347.39" */
  wire [3:0] \gen_sram_bank[1].bank_be ;
  /* src = "../rtl/croc_domain.sv:344.37" */
  /* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_sram_bank[1].bank_byte_addr ;
  /* src = "../rtl/croc_domain.sv:343.30" */
  wire \gen_sram_bank[1].bank_gnt ;
  /* src = "../rtl/croc_domain.sv:346.49" */
  wire [31:0] \gen_sram_bank[1].bank_rdata ;
  /* src = "../rtl/croc_domain.sv:343.11" */
  wire \gen_sram_bank[1].bank_req ;
  /* src = "../rtl/croc_domain.sv:346.37" */
  wire [31:0] \gen_sram_bank[1].bank_wdata ;
  /* src = "../rtl/croc_domain.sv:343.21" */
  wire \gen_sram_bank[1].bank_we ;
  /* src = "../rtl/croc_domain.sv:345.35" */
  wire [8:0] \gen_sram_bank[1].bank_word_addr ;
  /* src = "../rtl/croc_domain.sv:26.32" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "../rtl/croc_domain.sv:30.32" */
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  /* src = "../rtl/croc_domain.sv:56.9" */
  wire gpio_irq;
  /* src = "../rtl/croc_domain.sv:27.32" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "../rtl/croc_domain.sv:153.17" */
  wire [73:0] gpio_obi_req;
  /* src = "../rtl/croc_domain.sv:154.17" */
  wire [38:0] gpio_obi_rsp;
  /* src = "../rtl/croc_domain.sv:28.32" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "../rtl/croc_domain.sv:225.18" */
  wire [31:0] hartinfo;
  wire [6:0] interrupts;
  /* src = "../rtl/croc_domain.sv:42.38" */
  input [3:0] interrupts_i;
  wire [3:0] interrupts_i;
  /* src = "../rtl/croc_domain.sv:17.21" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "../rtl/croc_domain.sv:18.21" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "../rtl/croc_domain.sv:19.21" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "../rtl/croc_domain.sv:20.21" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "../rtl/croc_domain.sv:21.21" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "../rtl/croc_domain.sv:418.50" */
  wire [2:0] periph_idx;
  /* src = "../rtl/croc_domain.sv:13.21" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "../rtl/croc_domain.sv:12.21" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/croc_domain.sv:503.39" */
  wire [3:0] soc_ctrl_hw2reg;
  /* src = "../rtl/croc_domain.sv:145.17" */
  /* unused_bits = "1" */
  wire [73:0] soc_ctrl_obi_req;
  /* src = "../rtl/croc_domain.sv:146.17" */
  wire [38:0] soc_ctrl_obi_rsp;
  /* src = "../rtl/croc_domain.sv:502.39" */
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" */
  wire [66:0] soc_ctrl_reg2hw;
  /* src = "../rtl/croc_domain.sv:470.13" */
  wire [69:0] soc_ctrl_reg_req;
  /* src = "../rtl/croc_domain.sv:471.13" */
  wire [33:0] soc_ctrl_reg_rsp;
  /* src = "../rtl/croc_domain.sv:49.9" */
  wire sram_impl;
  /* src = "../rtl/croc_domain.sv:14.21" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/croc_domain.sv:57.9" */
  wire timer0_irq0;
  /* src = "../rtl/croc_domain.sv:58.9" */
  wire timer0_irq1;
  /* src = "../rtl/croc_domain.sv:157.17" */
  /* unused_bits = "1" */
  wire [73:0] timer_obi_req;
  /* src = "../rtl/croc_domain.sv:158.17" */
  wire [38:0] timer_obi_rsp;
  /* src = "../rtl/croc_domain.sv:55.9" */
  wire uart_irq;
  /* src = "../rtl/croc_domain.sv:149.17" */
  /* unused_bits = "1" */
  wire [73:0] uart_obi_req;
  /* src = "../rtl/croc_domain.sv:150.17" */
  wire [38:0] uart_obi_rsp;
  /* src = "../rtl/croc_domain.sv:524.13" */
  wire [69:0] uart_reg_req;
  /* src = "../rtl/croc_domain.sv:525.13" */
  wire [33:0] uart_reg_rsp;
  /* src = "../rtl/croc_domain.sv:23.21" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "../rtl/croc_domain.sv:24.21" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "../rtl/croc_domain.sv:39.24" */
  input [71:0] user_mgr_obi_req_i;
  wire [71:0] user_mgr_obi_req_i;
  /* src = "../rtl/croc_domain.sv:40.24" */
  output [36:0] user_mgr_obi_rsp_o;
  wire [36:0] user_mgr_obi_rsp_o;
  /* src = "../rtl/croc_domain.sv:35.24" */
  output [73:0] user_sbr_obi_req_o;
  wire [73:0] user_sbr_obi_req_o;
  /* src = "../rtl/croc_domain.sv:36.24" */
  input [38:0] user_sbr_obi_rsp_i;
  wire [38:0] user_sbr_obi_rsp_i;
  /* src = "../rtl/croc_domain.sv:111.17" */
  wire [73:0] xbar_error_obi_req;
  /* src = "../rtl/croc_domain.sv:112.17" */
  wire [38:0] xbar_error_obi_rsp;
  /* src = "../rtl/croc_domain.sv:103.36" */
  wire [147:0] xbar_mem_bank_obi_req;
  /* src = "../rtl/croc_domain.sv:104.36" */
  wire [77:0] xbar_mem_bank_obi_rsp;
  /* src = "../rtl/croc_domain.sv:107.17" */
  wire [73:0] xbar_periph_obi_req;
  /* src = "../rtl/croc_domain.sv:108.17" */
  wire [38:0] xbar_periph_obi_rsp;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9  (
    .A(soc_ctrl_reg2hw[34]),
    .B(fetch_en_i),
    .Y(fetch_enable)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$11  (
    .A(all_periph_obi_req[263]),
    .Y(\$auto$builder.cc:364:Unop$12 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$13  (
    .A(all_periph_obi_req[411]),
    .Y(\$auto$builder.cc:364:Unop$14 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7  (
    .A(all_periph_obi_req[189]),
    .Y(\$auto$builder.cc:364:Unop$8 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:377.7" */
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram  \gen_sram_bank[0].i_sram  (
    .addr_i(\gen_sram_bank[0].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[0].bank_rdata ),
    .req_i(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[0].bank_wdata ),
    .we_i(\gen_sram_bank[0].bank_we )
  );
  /* src = "../rtl/croc_domain.sv:353.7" */
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim  \gen_sram_bank[0].i_sram_shim  (
    .addr_o(\gen_sram_bank[0].bank_byte_addr ),
    .be_o(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[221:148]),
    .obi_rsp_o(all_sbr_obi_rsp[116:78]),
    .rdata_i(\gen_sram_bank[0].bank_rdata ),
    .req_o(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[0].bank_wdata ),
    .we_o(\gen_sram_bank[0].bank_we )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:377.7" */
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram  \gen_sram_bank[1].i_sram  (
    .addr_i(\gen_sram_bank[1].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[1].bank_rdata ),
    .req_i(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[1].bank_wdata ),
    .we_i(\gen_sram_bank[1].bank_we )
  );
  /* src = "../rtl/croc_domain.sv:353.7" */
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim  \gen_sram_bank[1].i_sram_shim  (
    .addr_o(\gen_sram_bank[1].bank_byte_addr ),
    .be_o(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[295:222]),
    .obi_rsp_o(all_sbr_obi_rsp[155:117]),
    .rdata_i(\gen_sram_bank[1].bank_rdata ),
    .req_o(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[1].bank_wdata ),
    .we_o(\gen_sram_bank[1].bank_we )
  );
  /* src = "../rtl/croc_domain.sv:426.5" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(all_sbr_obi_req[147:116]),
    .addr_map_i(480'h000000010000000000040000000000020300000003001000000000030300200003003000000000040300500003006000000000050300a0000300b000),
    .default_idx_i(3'h0),
    .en_default_idx_i(1'h1),
    .idx_o(periph_idx)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:179.5" */
  \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap  i_core_wrap (
    .boot_addr_i(soc_ctrl_reg2hw[66:35]),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(core_data_obi_req[71:40]),
    .data_be_o(core_data_obi_req[38:35]),
    .data_err_i(core_data_obi_rsp[3]),
    .data_gnt_i(core_data_obi_rsp[1]),
    .data_rdata_i(core_data_obi_rsp[36:5]),
    .data_req_o(core_data_obi_req[0]),
    .data_rvalid_i(core_data_obi_rsp[0]),
    .data_wdata_o(core_data_obi_req[34:3]),
    .data_we_o(core_data_obi_req[39]),
    .debug_req_i(debug_req),
    .fetch_enable_i(fetch_enable),
    .instr_addr_o(core_instr_obi_req[71:40]),
    .instr_err_i(core_instr_obi_rsp[3]),
    .instr_gnt_i(core_instr_obi_rsp[1]),
    .instr_rdata_i(core_instr_obi_rsp[36:5]),
    .instr_req_o(core_instr_obi_req[0]),
    .instr_rvalid_i(core_instr_obi_rsp[0]),
    .irqs_i({ 9'h000, interrupts_i, gpio_irq, uart_irq, timer0_irq1 }),
    .ref_clk_i(ref_clk_i),
    .rst_ni(rst_ni),
    .test_enable_i(testmode_i),
    .timer0_irq_i(timer0_irq0)
  );
  /* src = "../rtl/croc_domain.sv:258.5" */
  \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req),
    .dmi_req_i(dmi_req),
    .dmi_req_ready_o(dmi_req_ready),
    .dmi_req_valid_i(dmi_req_valid),
    .dmi_resp_o(dmi_resp),
    .dmi_resp_ready_i(dmi_resp_ready),
    .dmi_resp_valid_o(dmi_resp_valid),
    .dmi_rst_ni(dmi_rst_n),
    .hartinfo_i(32'd2171776),
    .master_addr_o(dbg_req_obi_req[71:40]),
    .master_be_o(dbg_req_obi_req[38:35]),
    .master_err_i(dbg_req_obi_rsp[3]),
    .master_gnt_i(dbg_req_obi_rsp[1]),
    .master_other_err_i(1'h0),
    .master_rdata_i(dbg_req_obi_rsp[36:5]),
    .master_req_o(dbg_req_obi_req[0]),
    .master_rvalid_i(dbg_req_obi_rsp[0]),
    .master_wdata_o(dbg_req_obi_req[34:3]),
    .master_we_o(dbg_req_obi_req[39]),
    .rst_ni(rst_ni),
    .slave_addr_i(all_periph_obi_req[147:116]),
    .slave_aid_i(all_periph_obi_req[78:76]),
    .slave_be_i(all_periph_obi_req[114:111]),
    .slave_gnt_o(all_periph_obi_rsp[40]),
    .slave_rdata_o(all_periph_obi_rsp[77:46]),
    .slave_req_i(all_periph_obi_req[74]),
    .slave_rid_o(all_periph_obi_rsp[45:43]),
    .slave_rvalid_o(all_periph_obi_rsp[39]),
    .slave_wdata_i(all_periph_obi_req[110:79]),
    .slave_we_i(all_periph_obi_req[115]),
    .testmode_i(testmode_i),
    .unavailable_i(1'h0)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:233.5" */
  \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag  i_dmi_jtag (
    .clk_i(clk_i),
    .dmi_req_o(dmi_req),
    .dmi_req_ready_i(dmi_req_ready),
    .dmi_req_valid_o(dmi_req_valid),
    .dmi_resp_i(dmi_resp),
    .dmi_resp_ready_o(dmi_resp_ready),
    .dmi_resp_valid_i(dmi_resp_valid),
    .dmi_rst_no(dmi_rst_n),
    .rst_ni(rst_ni),
    .tck_i(jtag_tck_i),
    .td_i(jtag_tdi_i),
    .td_o(jtag_tdo_o),
    .testmode_i(testmode_i),
    .tms_i(jtag_tms_i),
    .trst_ni(jtag_trst_ni)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:584.5" */
  \gpio$croc_chip.i_croc_soc.i_croc.i_gpio  i_gpio (
    .clk_i(clk_i),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync_o),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupt_o(gpio_irq),
    .obi_req_i(all_periph_obi_req[369:296]),
    .obi_rsp_o(gpio_obi_rsp),
    .rst_ni(rst_ni)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:323.5" */
  \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar  i_main_xbar (
    .addr_map_i(384'h000000042000000080000000000000031000080010001000000000021000000010000800000000010000000010000000),
    .clk_i(clk_i),
    .default_idx_i(12'h000),
    .en_default_idx_i(4'hf),
    .mgr_ports_req_o(all_sbr_obi_req),
    .mgr_ports_rsp_i({ user_sbr_obi_rsp_i, all_sbr_obi_rsp[155:78], xbar_periph_obi_rsp, xbar_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_ports_req_i({ core_instr_obi_req[71:40], 39'h3c00000000, core_instr_obi_req[0], core_data_obi_req[71:3], 2'h0, core_data_obi_req[0], dbg_req_obi_req[71:3], 2'h0, dbg_req_obi_req[0], user_mgr_obi_req_i }),
    .sbr_ports_rsp_o({ core_instr_obi_rsp, core_data_obi_rsp, dbg_req_obi_rsp, user_mgr_obi_rsp_o }),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/croc_domain.sv:442.5" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_periph_obi_req),
    .mgr_ports_rsp_i({ all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195], gpio_obi_rsp, all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:81], 1'h0, all_periph_obi_rsp[79:43], 2'h0, all_periph_obi_rsp[40:39], error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(all_sbr_obi_req[147:74]),
    .sbr_port_rsp_o(xbar_periph_obi_rsp),
    .sbr_port_select_i(periph_idx)
  );
  /* src = "../rtl/croc_domain.sv:461.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err  i_periph_err (
    .clk_i(clk_i),
    .obi_req_i(all_periph_obi_req[73:0]),
    .obi_rsp_o(error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:513.5" */
  \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl  i_soc_ctrl (
    .clk_i(clk_i),
    .devmode_i(1'h0),
    .hw2reg(4'h0),
    .reg2hw(soc_ctrl_reg2hw),
    .reg_req_i(soc_ctrl_reg_req),
    .reg_rsp_o(soc_ctrl_reg_rsp),
    .rst_ni(rst_ni)
  );
  /* src = "../rtl/croc_domain.sv:480.5" */
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate  i_soc_ctrl_translate (
    .add_i(all_periph_obi_req[221:190]),
    .be_i(all_periph_obi_req[188:185]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[79]),
    .id_i(all_periph_obi_req[152:150]),
    .r_id_o(all_periph_obi_rsp[84:82]),
    .r_opc_o(all_periph_obi_rsp[81]),
    .r_rdata_o(all_periph_obi_rsp[116:85]),
    .r_valid_o(all_periph_obi_rsp[78]),
    .reg_req_o(soc_ctrl_reg_req),
    .reg_rsp_i(soc_ctrl_reg_rsp),
    .req_i(all_periph_obi_req[148]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[184:153]),
    .wen_i(\$auto$builder.cc:364:Unop$8 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:599.5" */
  \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer  i_timer (
    .addr_i(all_periph_obi_req[443:412]),
    .be_i(all_periph_obi_req[410:407]),
    .clk_i(clk_i),
    .event_hi_i(1'h0),
    .event_lo_i(1'h0),
    .gnt_o(all_periph_obi_rsp[196]),
    .id_i(all_periph_obi_req[374:372]),
    .irq_hi_o(timer0_irq1),
    .irq_lo_o(timer0_irq0),
    .r_id_o(all_periph_obi_rsp[201:199]),
    .r_rdata_o(all_periph_obi_rsp[233:202]),
    .r_valid_o(all_periph_obi_rsp[195]),
    .ref_clk_i(ref_clk_i),
    .req_i(all_periph_obi_req[370]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[406:375]),
    .wen_i(\$auto$builder.cc:364:Unop$14 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_domain.sv:559.5" */
  \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart  i_uart (
    .clk_i(clk_i),
    .cts_ni(1'h0),
    .dcd_ni(1'h0),
    .dsr_ni(1'h0),
    .intr_o(uart_irq),
    .reg_req_i(uart_reg_req),
    .reg_rsp_o(uart_reg_rsp),
    .rin_ni(1'h0),
    .rst_ni(rst_ni),
    .sin_i(uart_rx_i),
    .sout_o(uart_tx_o)
  );
  /* src = "../rtl/croc_domain.sv:534.5" */
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate  i_uart_translate (
    .add_i(all_periph_obi_req[295:264]),
    .be_i(all_periph_obi_req[262:259]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[118]),
    .id_i(all_periph_obi_req[226:224]),
    .r_id_o(all_periph_obi_rsp[123:121]),
    .r_opc_o(all_periph_obi_rsp[120]),
    .r_rdata_o(all_periph_obi_rsp[155:124]),
    .r_valid_o(all_periph_obi_rsp[117]),
    .reg_req_o(uart_reg_req),
    .reg_rsp_i(uart_reg_rsp),
    .req_i(all_periph_obi_req[222]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[258:227]),
    .wen_i(\$auto$builder.cc:364:Unop$12 )
  );
  /* src = "../rtl/croc_domain.sv:404.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err  i_xbar_err (
    .clk_i(clk_i),
    .obi_req_i(all_sbr_obi_req[73:0]),
    .obi_rsp_o(xbar_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { all_periph_obi_rsp[198:197], all_periph_obi_rsp[194:156], all_periph_obi_rsp[119], all_periph_obi_rsp[80], all_periph_obi_rsp[42:41], all_periph_obi_rsp[38:0] } = { 2'h0, gpio_obi_rsp, 4'h0, error_obi_rsp };
  assign { all_sbr_obi_rsp[194:156], all_sbr_obi_rsp[77:0] } = { user_sbr_obi_rsp_i, xbar_periph_obi_rsp, xbar_error_obi_rsp };
  assign boot_addr = soc_ctrl_reg2hw[66:35];
  assign core_data_obi_req[2:1] = 2'h0;
  assign core_instr_obi_req[39:1] = 39'h3c00000000;
  assign dbg_mem_obi_req = all_periph_obi_req[147:74];
  assign dbg_mem_obi_rsp = { all_periph_obi_rsp[77:43], 2'h0, all_periph_obi_rsp[40:39] };
  assign dbg_req_obi_req[2:1] = 2'h0;
  assign error_obi_req = all_periph_obi_req[73:0];
  assign \gen_sram_bank[0].bank_gnt  = 1'h1;
  assign \gen_sram_bank[0].bank_word_addr  = \gen_sram_bank[0].bank_byte_addr [10:2];
  assign \gen_sram_bank[1].bank_gnt  = 1'h1;
  assign \gen_sram_bank[1].bank_word_addr  = \gen_sram_bank[1].bank_byte_addr [10:2];
  assign gpio_obi_req = all_periph_obi_req[369:296];
  assign hartinfo = 32'd2171776;
  assign interrupts = { interrupts_i, gpio_irq, uart_irq, timer0_irq1 };
  assign soc_ctrl_hw2reg = 4'h0;
  assign soc_ctrl_obi_req = all_periph_obi_req[221:148];
  assign soc_ctrl_obi_rsp = { all_periph_obi_rsp[116:81], 1'h0, all_periph_obi_rsp[79:78] };
  assign sram_impl = soc_ctrl_reg2hw[0];
  assign timer_obi_req = all_periph_obi_req[443:370];
  assign timer_obi_rsp = { all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195] };
  assign uart_obi_req = all_periph_obi_req[295:222];
  assign uart_obi_rsp = { all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:117] };
  assign user_sbr_obi_req_o = all_sbr_obi_req[369:296];
  assign xbar_error_obi_req = all_sbr_obi_req[73:0];
  assign xbar_mem_bank_obi_req = all_sbr_obi_req[295:148];
  assign xbar_mem_bank_obi_rsp = all_sbr_obi_rsp[155:78];
  assign xbar_periph_obi_req = all_sbr_obi_req[147:74];
endmodule

/* src = "../rtl/croc_soc.sv:8.8" */
module \croc_soc$croc_chip.i_croc_soc (clk_i, rst_ni, testmode_i, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio_i, gpio_o, gpio_out_en_o);
  /* src = "../rtl/croc_soc.sv:11.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/croc_soc.sv:15.16" */
  input fetch_en_i;
  wire fetch_en_i;
  /* src = "../rtl/croc_soc.sv:27.32" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "../rtl/croc_soc.sv:61.23" */
  wire [31:0] gpio_in_sync;
  /* src = "../rtl/croc_soc.sv:28.32" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "../rtl/croc_soc.sv:29.32" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "../rtl/croc_soc.sv:60.29" */
  wire [3:0] interrupts;
  /* src = "../rtl/croc_soc.sv:18.16" */
  input jtag_tck_i;
  wire jtag_tck_i;
  /* src = "../rtl/croc_soc.sv:19.16" */
  input jtag_tdi_i;
  wire jtag_tdi_i;
  /* src = "../rtl/croc_soc.sv:20.16" */
  output jtag_tdo_o;
  wire jtag_tdo_o;
  /* src = "../rtl/croc_soc.sv:21.16" */
  input jtag_tms_i;
  wire jtag_tms_i;
  /* src = "../rtl/croc_soc.sv:22.16" */
  input jtag_trst_ni;
  wire jtag_trst_ni;
  /* src = "../rtl/croc_soc.sv:13.16" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "../rtl/croc_soc.sv:12.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/croc_soc.sv:16.16" */
  output status_o;
  wire status_o;
  /* src = "../rtl/croc_soc.sv:32.23" */
  wire synced_fetch_en;
  /* src = "../rtl/croc_soc.sv:32.9" */
  wire synced_rst_n;
  /* src = "../rtl/croc_soc.sv:14.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/croc_soc.sv:24.16" */
  input uart_rx_i;
  wire uart_rx_i;
  /* src = "../rtl/croc_soc.sv:25.16" */
  output uart_tx_o;
  wire uart_tx_o;
  /* src = "../rtl/croc_soc.sv:57.15" */
  wire [71:0] user_mgr_obi_req;
  /* src = "../rtl/croc_soc.sv:58.15" */
  wire [36:0] user_mgr_obi_rsp;
  /* src = "../rtl/croc_soc.sv:53.15" */
  wire [73:0] user_sbr_obi_req;
  /* src = "../rtl/croc_soc.sv:54.15" */
  wire [38:0] user_sbr_obi_rsp;
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_soc.sv:65.3" */
  \croc_domain$croc_chip.i_croc_soc.i_croc  i_croc (
    .clk_i(clk_i),
    .core_busy_o(status_o),
    .fetch_en_i(synced_fetch_en),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupts_i(interrupts),
    .jtag_tck_i(jtag_tck_i),
    .jtag_tdi_i(jtag_tdi_i),
    .jtag_tdo_o(jtag_tdo_o),
    .jtag_tms_i(jtag_tms_i),
    .jtag_trst_ni(jtag_trst_ni),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .uart_rx_i(uart_rx_i),
    .uart_tx_o(uart_tx_o),
    .user_mgr_obi_req_i(user_mgr_obi_req),
    .user_mgr_obi_rsp_o(user_mgr_obi_rsp),
    .user_sbr_obi_req_o(user_sbr_obi_req),
    .user_sbr_obi_rsp_i(user_sbr_obi_rsp)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_soc.sv:45.7" */
  \sync$croc_chip.i_croc_soc.i_ext_intr_sync  i_ext_intr_sync (
    .clk_i(clk_i),
    .rst_ni(synced_rst_n),
    .serial_i(fetch_en_i),
    .serial_o(synced_fetch_en)
  );
  /* src = "../rtl/croc_soc.sv:34.10" */
  \rstgen$croc_chip.i_croc_soc.i_rstgen  i_rstgen (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .rst_no(synced_rst_n),
    .test_mode_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/croc_soc.sv:99.3" */
  \user_domain$croc_chip.i_croc_soc.i_user  i_user (
    .clk_i(clk_i),
    .gpio_in_sync_i(gpio_in_sync),
    .interrupts_o(interrupts),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .user_mgr_obi_req_o(user_mgr_obi_req),
    .user_mgr_obi_rsp_i(user_mgr_obi_rsp),
    .user_sbr_obi_req_i(user_sbr_obi_req),
    .user_sbr_obi_rsp_o(user_sbr_obi_rsp)
  );
endmodule

/* src = "../rtl/cve2/cve2_core_blackbox.sv:15.8" */
module \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex (clk_i, rst_ni, test_en_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_err_i, irq_software_i, irq_timer_i, irq_external_i, irq_nm_i, irq_pending_o, debug_req_i, fetch_enable_i, core_busy_o, boot_addr_i
, instr_addr_o, instr_rdata_i, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, hart_id_i, irq_fast_i, crash_dump_o);
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:36.40" */
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:30.40" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:106.40" */
  output core_busy_o;
  wire core_busy_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:67.40" */
  output [127:0] crash_dump_o;
  wire [127:0] crash_dump_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:52.40" */
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:51.40" */
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:55.40" */
  input data_err_i;
  wire data_err_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:48.40" */
  input data_gnt_i;
  wire data_gnt_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:54.40" */
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:47.40" */
  output data_req_o;
  wire data_req_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:49.40" */
  input data_rvalid_i;
  wire data_rvalid_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:53.40" */
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:50.40" */
  output data_we_o;
  wire data_we_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:66.40" */
  input debug_req_i;
  wire debug_req_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:105.40" */
  input fetch_enable_i;
  wire fetch_enable_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:35.40" */
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:42.40" */
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:44.40" */
  input instr_err_i;
  wire instr_err_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:40.40" */
  input instr_gnt_i;
  wire instr_gnt_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:43.40" */
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:39.40" */
  output instr_req_o;
  wire instr_req_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:41.40" */
  input instr_rvalid_i;
  wire instr_rvalid_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:60.40" */
  input irq_external_i;
  wire irq_external_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:61.40" */
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:62.40" */
  input irq_nm_i;
  wire irq_nm_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:63.40" */
  output irq_pending_o;
  wire irq_pending_o;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:58.40" */
  input irq_software_i;
  wire irq_software_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:59.40" */
  input irq_timer_i;
  wire irq_timer_i;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:31.40" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/cve2/cve2_core_blackbox.sv:33.40" */
  input test_en_i;
  wire test_en_i;
  assign core_busy_o = 1'hx;
  assign crash_dump_o = 128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
  assign data_addr_o = 32'hxxxxxxxx;
  assign data_be_o = 4'hx;
  assign data_req_o = 1'hx;
  assign data_wdata_o = 32'hxxxxxxxx;
  assign data_we_o = 1'hx;
  assign instr_addr_o = 32'hxxxxxxxx;
  assign instr_req_o = 1'hx;
  assign irq_pending_o = 1'hx;
endmodule

/* src = "../rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17682 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17409 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17408 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17411 ;
  /* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$6240 ;
  /* src = "../rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "../rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "../rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "../rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "../rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "../rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "../rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "../rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "../rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "../rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$6234  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:2874:Mux$17411 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17409 )
  );
  /* src = "../rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17681  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17682 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17683  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17682 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17407  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2741:Neg$17408 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17410  (
    .A(\$auto$rtlil.cc:2741:Neg$17408 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:2874:Mux$17411 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14059  (
    .A(\$auto$opt_share.cc:222:merge_operators$17409 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\counter_d$6240 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14066  (
    .A(\$auto$slang_frontend.cc:694:finish$\counter_d$6240 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "../rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17685 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17414 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17413 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17416 ;
  /* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$6389 ;
  /* src = "../rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "../rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "../rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "../rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "../rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "../rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "../rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "../rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "../rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "../rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$6383  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:2874:Mux$17416 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17414 )
  );
  /* src = "../rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17684  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17685 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17686  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17685 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17412  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2741:Neg$17413 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17415  (
    .A(\$auto$rtlil.cc:2741:Neg$17413 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:2874:Mux$17416 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13972  (
    .A(\$auto$opt_share.cc:222:merge_operators$17414 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\counter_d$6389 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13979  (
    .A(\$auto$slang_frontend.cc:694:finish$\counter_d$6389 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "../rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17688 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17419 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17418 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17421 ;
  /* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$6538 ;
  /* src = "../rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "../rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "../rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "../rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "../rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "../rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "../rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "../rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "../rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "../rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$6532  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:2874:Mux$17421 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17419 )
  );
  /* src = "../rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17687  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17688 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17689  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17688 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17417  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2741:Neg$17418 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17420  (
    .A(\$auto$rtlil.cc:2741:Neg$17418 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:2874:Mux$17421 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13885  (
    .A(\$auto$opt_share.cc:222:merge_operators$17419 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\counter_d$6538 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13892  (
    .A(\$auto$slang_frontend.cc:694:finish$\counter_d$6538 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "../rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17691 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17424 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17423 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17426 ;
  /* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$6687 ;
  /* src = "../rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "../rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "../rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "../rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "../rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "../rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "../rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "../rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "../rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "../rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$6681  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:2874:Mux$17426 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17424 )
  );
  /* src = "../rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17690  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17691 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17692  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17691 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17422  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2741:Neg$17423 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17425  (
    .A(\$auto$rtlil.cc:2741:Neg$17423 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:2874:Mux$17426 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13798  (
    .A(\$auto$opt_share.cc:222:merge_operators$17424 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\counter_d$6687 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13805  (
    .A(\$auto$slang_frontend.cc:694:finish$\counter_d$6687 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "../rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17694 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17429 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17428 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17431 ;
  /* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$4028 ;
  /* src = "../rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "../rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "../rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "../rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "../rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "../rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "../rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "../rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "../rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "../rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$4022  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:2874:Mux$17431 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17429 )
  );
  /* src = "../rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17693  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17694 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17695  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17694 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17427  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2741:Neg$17428 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17430  (
    .A(\$auto$rtlil.cc:2741:Neg$17428 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:2874:Mux$17431 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14869  (
    .A(\$auto$opt_share.cc:222:merge_operators$17429 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\counter_d$4028 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14876  (
    .A(\$auto$slang_frontend.cc:694:finish$\counter_d$4028 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "../rtl/common_cells/delta_counter.sv:13.8" */
module \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17697 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17434 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17433 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17436 ;
  /* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$5932 ;
  /* src = "../rtl/common_cells/delta_counter.sv:19.30" */
  input clear_i;
  wire clear_i;
  /* src = "../rtl/common_cells/delta_counter.sv:17.30" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/delta_counter.sv:28.32" */
  wire [1:0] counter_d;
  /* src = "../rtl/common_cells/delta_counter.sv:28.21" */
  wire [1:0] counter_q;
  /* src = "../rtl/common_cells/delta_counter.sv:24.30" */
  input d_i;
  wire d_i;
  /* src = "../rtl/common_cells/delta_counter.sv:23.30" */
  input delta_i;
  wire delta_i;
  /* src = "../rtl/common_cells/delta_counter.sv:22.30" */
  input down_i;
  wire down_i;
  /* src = "../rtl/common_cells/delta_counter.sv:20.30" */
  input en_i;
  wire en_i;
  /* src = "../rtl/common_cells/delta_counter.sv:21.30" */
  input load_i;
  wire load_i;
  /* src = "../rtl/common_cells/delta_counter.sv:26.30" */
  output overflow_o;
  wire overflow_o;
  /* src = "../rtl/common_cells/delta_counter.sv:25.30" */
  output q_o;
  wire q_o;
  /* src = "../rtl/common_cells/delta_counter.sv:18.30" */
  input rst_ni;
  wire rst_ni;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$5926  (
    .A(counter_q),
    .B(\$auto$rtlil.cc:2874:Mux$17436 ),
    .Y(\$auto$opt_share.cc:222:merge_operators$17434 )
  );
  /* src = "../rtl/common_cells/delta_counter.sv:76.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17696  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(counter_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17697 ),
    .Q(counter_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17698  (
    .A({ load_i, en_i, clear_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17697 )
  );
  \$neg  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$opt_share.cc:199:merge_operators$17432  (
    .A({ 1'h0, delta_i }),
    .Y(\$auto$rtlil.cc:2741:Neg$17433 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$opt_share.cc:244:merge_operators$17435  (
    .A(\$auto$rtlil.cc:2741:Neg$17433 ),
    .B({ 1'h0, delta_i }),
    .S(down_i),
    .Y(\$auto$rtlil.cc:2874:Mux$17436 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14204  (
    .A(\$auto$opt_share.cc:222:merge_operators$17434 ),
    .B({ 1'h0, d_i }),
    .S(load_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\counter_d$5932 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14211  (
    .A(\$auto$slang_frontend.cc:694:finish$\counter_d$5932 ),
    .B(2'h0),
    .S(clear_i),
    .Y(counter_d)
  );
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

/* src = "../rtl/riscv-dbg/dm_obi_top.sv:63.8" */
module \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top (clk_i, rst_ni, testmode_i, ndmreset_o, dmactive_o, debug_req_o, unavailable_i, slave_req_i, slave_we_i, master_req_o, master_we_o, master_gnt_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_resp_valid_o, dmi_resp_ready_i, hartinfo_i, slave_gnt_o, slave_addr_i, slave_be_i
, slave_wdata_i, slave_aid_i, slave_rvalid_o, slave_rdata_o, slave_rid_o, master_addr_o, master_wdata_o, master_be_o, master_rvalid_i, master_err_i, master_other_err_i, master_rdata_i, dmi_req_i, dmi_resp_o);
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:72.33" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:78.33" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:77.33" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:113.33" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:112.33" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:111.33" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:117.33" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:116.33" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:115.33" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:110.33" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:81.40" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:99.33" */
  output [31:0] master_addr_o;
  wire [31:0] master_addr_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:102.33" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:105.33" */
  input master_err_i;
  wire master_err_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:103.33" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:106.33" */
  input master_other_err_i;
  wire master_other_err_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:107.33" */
  input [31:0] master_rdata_i;
  wire [31:0] master_rdata_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:98.33" */
  output master_req_o;
  wire master_req_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:104.33" */
  input master_rvalid_i;
  wire master_rvalid_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:101.33" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:100.33" */
  output master_we_o;
  wire master_we_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:76.33" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:74.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:87.33" */
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:91.33" */
  input [2:0] slave_aid_i;
  wire [2:0] slave_aid_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:88.33" */
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:85.33" */
  output slave_gnt_o;
  wire slave_gnt_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:94.33" */
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:83.33" */
  input slave_req_i;
  wire slave_req_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:96.33" */
  output [2:0] slave_rid_o;
  wire [2:0] slave_rid_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:122.23" */
  wire [2:0] slave_rid_q;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:93.33" */
  output slave_rvalid_o;
  wire slave_rvalid_o;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:121.23" */
  wire slave_rvalid_q;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:89.33" */
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:86.33" */
  input slave_we_i;
  wire slave_we_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:75.33" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:80.33" */
  input unavailable_i;
  wire unavailable_i;
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:175.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17699  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(slave_aid_i),
    .EN(slave_req_i),
    .Q(slave_rid_q)
  );
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:175.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$slave_rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(slave_req_i),
    .Q(slave_rvalid_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/riscv-dbg/dm_obi_top.sv:130.5" */
  \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req_o),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .hartinfo_i(hartinfo_i),
    .master_add_o(master_addr_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_err_i),
    .master_r_other_err_i(master_other_err_i),
    .master_r_rdata_i(master_rdata_i),
    .master_r_valid_i(master_rvalid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .ndmreset_ack_i(ndmreset_o),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(32'd0),
    .rst_ni(rst_ni),
    .slave_addr_i(slave_addr_i),
    .slave_be_i(slave_be_i),
    .slave_rdata_o(slave_rdata_o),
    .slave_req_i(slave_req_i),
    .slave_wdata_i(slave_wdata_i),
    .slave_we_i(slave_we_i),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  assign slave_gnt_o = 1'h1;
  assign slave_rid_o = slave_rid_q;
  assign slave_rvalid_o = slave_rvalid_q;
endmodule

/* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:20.8" */
module \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top (clk_i, rst_ni, testmode_i, ndmreset_o, ndmreset_ack_i, dmactive_o, debug_req_o, unavailable_i, slave_req_i, slave_we_i, master_req_o, master_we_o, master_gnt_i, master_r_valid_i, master_r_err_i, master_r_other_err_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_resp_valid_o, dmi_resp_ready_i
, hartinfo_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_rdata_o, master_wdata_o, master_be_o, dmi_req_i, dmi_resp_o, next_dm_addr_i, master_add_o, master_r_rdata_i);
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:30.33" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:43.33" */
  output debug_req_o;
  wire debug_req_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:42.33" */
  output dmactive_o;
  wire dmactive_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:72.33" */
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:71.33" */
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:70.33" */
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:76.33" */
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:75.33" */
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:74.33" */
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:67.33" */
  input dmi_rst_ni;
  wire dmi_rst_ni;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:46.39" */
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:56.33" */
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:59.33" */
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:60.33" */
  input master_gnt_i;
  wire master_gnt_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:62.33" */
  input master_r_err_i;
  wire master_r_err_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:63.33" */
  input master_r_other_err_i;
  wire master_r_other_err_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:64.33" */
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:61.33" */
  input master_r_valid_i;
  wire master_r_valid_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:55.33" */
  output master_req_o;
  wire master_req_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:58.33" */
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:57.33" */
  output master_we_o;
  wire master_we_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:41.33" */
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:40.33" */
  output ndmreset_o;
  wire ndmreset_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:38.33" */
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:32.33" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:50.33" */
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:51.33" */
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:53.33" */
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:48.33" */
  input slave_req_i;
  wire slave_req_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:52.33" */
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:49.33" */
  input slave_we_i;
  wire slave_we_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:39.33" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:45.33" */
  input unavailable_i;
  wire unavailable_i;
  assign debug_req_o = 1'hx;
  assign dmactive_o = 1'hx;
  assign dmi_req_ready_o = 1'hx;
  assign dmi_resp_o = 34'hxxxxxxxxx;
  assign dmi_resp_valid_o = 1'hx;
  assign master_add_o = 32'hxxxxxxxx;
  assign master_be_o = 4'hx;
  assign master_req_o = 1'hx;
  assign master_wdata_o = 32'hxxxxxxxx;
  assign master_we_o = 1'hx;
  assign ndmreset_o = 1'hx;
  assign slave_rdata_o = 32'hxxxxxxxx;
endmodule

/* src = "../rtl/riscv-dbg/dmi_cdc.sv:19.8" */
module \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc (clk_i, rst_ni, tck_i, trst_ni, jtag_dmi_req_i, jtag_dmi_ready_o, jtag_dmi_valid_i, jtag_dmi_cdc_clear_i, jtag_dmi_resp_o, jtag_dmi_valid_o, jtag_dmi_ready_i, core_dmi_rst_no, core_dmi_req_o, core_dmi_valid_o, core_dmi_ready_i, core_dmi_resp_i, core_dmi_ready_o, core_dmi_valid_i);
  wire \$auto$builder.cc:364:Unop$2864 ;
  wire \$auto$builder.cc:364:Unop$2873 ;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:98.28" */
  wire clear_pending_rise_edge_detect;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:35.28" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:48.28" */
  wire core_clear_pending;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:96.28" */
  wire core_clear_pending_q;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:41.28" */
  input core_dmi_ready_i;
  wire core_dmi_ready_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:44.28" */
  output core_dmi_ready_o;
  wire core_dmi_ready_o;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:39.28" */
  output [40:0] core_dmi_req_o;
  wire [40:0] core_dmi_req_o;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:43.28" */
  input [33:0] core_dmi_resp_i;
  wire [33:0] core_dmi_resp_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:38.28" */
  output core_dmi_rst_no;
  wire core_dmi_rst_no;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:97.28" */
  wire core_dmi_rst_nq;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:45.28" */
  input core_dmi_valid_i;
  wire core_dmi_valid_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:40.28" */
  output core_dmi_valid_o;
  wire core_dmi_valid_o;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:26.28" */
  input jtag_dmi_cdc_clear_i;
  wire jtag_dmi_cdc_clear_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:32.28" */
  input jtag_dmi_ready_i;
  wire jtag_dmi_ready_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:24.28" */
  output jtag_dmi_ready_o;
  wire jtag_dmi_ready_o;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:23.28" */
  input [40:0] jtag_dmi_req_i;
  wire [40:0] jtag_dmi_req_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:30.28" */
  output [33:0] jtag_dmi_resp_o;
  wire [33:0] jtag_dmi_resp_o;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:25.28" */
  input jtag_dmi_valid_i;
  wire jtag_dmi_valid_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:31.28" */
  output jtag_dmi_valid_o;
  wire jtag_dmi_valid_o;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:36.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:21.28" */
  input tck_i;
  wire tck_i;
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:22.28" */
  input trst_ni;
  wire trst_ni;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2865  (
    .A(\$auto$builder.cc:364:Unop$2864 ),
    .B(core_clear_pending),
    .Y(clear_pending_rise_edge_detect)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2863  (
    .A(core_clear_pending_q),
    .Y(\$auto$builder.cc:364:Unop$2864 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2872  (
    .A(clear_pending_rise_edge_detect),
    .Y(\$auto$builder.cc:364:Unop$2873 )
  );
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:102.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$core_clear_pending_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(core_clear_pending),
    .Q(core_clear_pending_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:102.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$core_dmi_rst_nq  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$builder.cc:364:Unop$2873 ),
    .Q(core_dmi_rst_nq)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:50.45" */
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req  i_cdc_req (
    .dst_clear_i(1'h0),
    .dst_clear_pending_o(core_clear_pending),
    .dst_clk_i(clk_i),
    .dst_data_o(core_dmi_req_o),
    .dst_ready_i(core_dmi_ready_i),
    .dst_rst_ni(rst_ni),
    .dst_valid_o(core_dmi_valid_o),
    .src_clear_i(jtag_dmi_cdc_clear_i),
    .src_clk_i(tck_i),
    .src_data_i(jtag_dmi_req_i),
    .src_ready_o(jtag_dmi_ready_o),
    .src_rst_ni(trst_ni),
    .src_valid_i(jtag_dmi_valid_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_cdc.sv:72.46" */
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp  i_cdc_resp (
    .dst_clear_i(jtag_dmi_cdc_clear_i),
    .dst_clk_i(tck_i),
    .dst_data_o(jtag_dmi_resp_o),
    .dst_ready_i(jtag_dmi_ready_i),
    .dst_rst_ni(trst_ni),
    .dst_valid_o(jtag_dmi_valid_o),
    .src_clear_i(1'h0),
    .src_clk_i(clk_i),
    .src_data_i(core_dmi_resp_i),
    .src_ready_o(core_dmi_ready_o),
    .src_rst_ni(rst_ni),
    .src_valid_i(core_dmi_valid_i)
  );
  assign core_dmi_rst_no = core_dmi_rst_nq;
endmodule

/* src = "../rtl/riscv-dbg/dmi_jtag.sv:19.8" */
module \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag (clk_i, rst_ni, testmode_i, dmi_rst_no, dmi_req_o, dmi_req_valid_o, dmi_req_ready_i, dmi_resp_i, dmi_resp_ready_o, dmi_resp_valid_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o);
  wire \$auto$builder.cc:338:Biop$110 ;
  wire \$auto$builder.cc:338:Biop$112 ;
  wire \$auto$builder.cc:338:Biop$123 ;
  wire \$auto$builder.cc:338:Biop$128 ;
  wire \$auto$builder.cc:338:Biop$130 ;
  wire \$auto$builder.cc:338:Biop$137 ;
  wire \$auto$builder.cc:338:Biop$142 ;
  wire \$auto$builder.cc:338:Biop$144 ;
  wire \$auto$builder.cc:338:Biop$167 ;
  wire \$auto$builder.cc:338:Biop$171 ;
  wire \$auto$builder.cc:338:Biop$173 ;
  wire \$auto$builder.cc:338:Biop$23 ;
  wire \$auto$builder.cc:338:Biop$25 ;
  wire \$auto$builder.cc:338:Biop$49 ;
  wire \$auto$builder.cc:338:Biop$58 ;
  wire \$auto$builder.cc:338:Biop$62 ;
  wire \$auto$builder.cc:338:Biop$66 ;
  wire \$auto$builder.cc:338:Biop$70 ;
  wire \$auto$builder.cc:364:Unop$165 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17701 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17703 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17705 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17707 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17709 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17714 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17717 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17721 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17728 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17711 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17723 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17730 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17197 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17209 ;
  wire \$auto$rtlil.cc:2746:ReduceBool$121 ;
  wire \$auto$rtlil.cc:2793:Eq$117 ;
  wire \$auto$rtlil.cc:2793:Eq$119 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\data_d$106 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\data_d$83 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:271.20-273.14" */
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$176 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14" */
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$177 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12" */
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$178 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:266.7-275.10" */
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$179 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12" */
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$184 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:277.7-281.10" */
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$185 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$33 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:72.5-85.8" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$34 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$41 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:247.7-249.10" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\error_d$140 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:252.7-254.10" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\error_d$147 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$107 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:232.7-234.10" */
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$115 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:239.7-241.10" */
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$126 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" */
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$84 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" */
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$88 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$108 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" */
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$85 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" */
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$89 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\state_d$104 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:163.13-167.16" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\state_d$74 ;
  wire \$procmux$16628_CMP ;
  wire \$procmux$16632_CMP ;
  wire \$procmux$16702_CMP ;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:125.15" */
  wire [6:0] address_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:125.26" */
  wire [6:0] address_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:56.9" */
  wire capture;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:22.24" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:126.16" */
  wire [31:0] data_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:126.24" */
  wire [31:0] data_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:128.10" */
  wire [40:0] dmi;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:54.9" */
  wire dmi_clear;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:107.18" */
  wire [40:0] dmi_req;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:29.24" */
  output [40:0] dmi_req_o;
  wire [40:0] dmi_req_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:108.18" */
  wire dmi_req_ready;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:31.24" */
  input dmi_req_ready_i;
  wire dmi_req_ready_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:109.18" */
  wire dmi_req_valid;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:30.24" */
  output dmi_req_valid_o;
  wire dmi_req_valid_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:111.18" */
  wire [33:0] dmi_resp;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:33.24" */
  input [33:0] dmi_resp_i;
  wire [33:0] dmi_resp_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:113.18" */
  wire dmi_resp_ready;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:34.24" */
  output dmi_resp_ready_o;
  wire dmi_resp_ready_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:112.18" */
  wire dmi_resp_valid;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:35.24" */
  input dmi_resp_valid_i;
  wire dmi_resp_valid_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:28.24" */
  output dmi_rst_no;
  wire dmi_rst_no;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:104.16" */
  wire dmi_select;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:105.16" */
  wire dmi_tdo;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:124.28" */
  wire [40:0] dr_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:124.34" */
  wire [40:0] dr_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:68.15" */
  wire [31:0] dtmcs_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:68.24" */
  wire [31:0] dtmcs_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:60.9" */
  wire dtmcs_select;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:49.15" */
  wire [1:0] error_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:136.9" */
  wire error_dmi_busy;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:49.24" */
  wire [1:0] error_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:52.9" */
  wire jtag_dmi_clear;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:23.24" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:57.9" */
  wire shift;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:122.11" */
  wire [2:0] state_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:122.20" */
  wire [2:0] state_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:51.9" */
  wire tck;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:37.24" */
  input tck_i;
  wire tck_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:40.24" */
  input td_i;
  wire td_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:41.24" */
  output td_o;
  wire td_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:58.9" */
  wire tdi;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:42.24" */
  output tdo_oe_o;
  wire tdo_oe_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:24.24" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:38.24" */
  input tms_i;
  wire tms_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:39.24" */
  input trst_ni;
  wire trst_ni;
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:55.9" */
  wire update;
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:18:ReduceBool$120  (
    .A({ \$auto$rtlil.cc:2793:Eq$119 , \$auto$rtlil.cc:2793:Eq$117  }),
    .Y(\$auto$rtlil.cc:2746:ReduceBool$121 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$109  (
    .A(state_q),
    .Y(\$auto$builder.cc:338:Biop$110 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$111  (
    .A(update),
    .B(\$auto$builder.cc:338:Biop$110 ),
    .Y(\$auto$builder.cc:338:Biop$112 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$122  (
    .A(capture),
    .B(\$auto$rtlil.cc:2746:ReduceBool$121 ),
    .Y(\$auto$builder.cc:338:Biop$123 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$127  (
    .A(error_q),
    .Y(\$auto$builder.cc:338:Biop$128 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$129  (
    .A(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$126 ),
    .B(\$auto$builder.cc:338:Biop$128 ),
    .Y(\$auto$builder.cc:338:Biop$130 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$136  (
    .A(\$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$108 ),
    .B(\$auto$builder.cc:338:Biop$128 ),
    .Y(\$auto$builder.cc:338:Biop$137 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$141  (
    .A(update),
    .B(dtmcs_q[16]),
    .Y(\$auto$builder.cc:338:Biop$142 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$143  (
    .A(\$auto$builder.cc:338:Biop$142 ),
    .B(dtmcs_select),
    .Y(\$auto$builder.cc:338:Biop$144 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$166  (
    .A(\$auto$builder.cc:338:Biop$128 ),
    .B(\$auto$builder.cc:364:Unop$165 ),
    .Y(\$auto$builder.cc:338:Biop$167 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$170  (
    .A(error_q),
    .B(2'h3),
    .Y(\$auto$builder.cc:338:Biop$171 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$172  (
    .A(\$auto$builder.cc:338:Biop$171 ),
    .B(error_dmi_busy),
    .Y(\$auto$builder.cc:338:Biop$173 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$22  (
    .A(dtmcs_select),
    .B(update),
    .Y(\$auto$builder.cc:338:Biop$23 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$24  (
    .A(\$auto$builder.cc:338:Biop$23 ),
    .B(dtmcs_q[17]),
    .Y(\$auto$builder.cc:338:Biop$25 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$26  (
    .A(jtag_dmi_clear),
    .B(\$auto$builder.cc:338:Biop$25 ),
    .Y(dmi_clear)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$48  (
    .A(state_q),
    .B(2'h3),
    .Y(\$auto$builder.cc:338:Biop$49 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$57  (
    .A(dmi_select),
    .B(update),
    .Y(\$auto$builder.cc:338:Biop$58 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$61  (
    .A(\$auto$builder.cc:338:Biop$58 ),
    .B(\$auto$builder.cc:338:Biop$128 ),
    .Y(\$auto$builder.cc:338:Biop$62 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$65  (
    .A(dr_q[1:0]),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$66 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$69  (
    .A(dr_q[1:0]),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$70 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$164  (
    .A(error_dmi_busy),
    .Y(\$auto$builder.cc:364:Unop$165 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:78:EqWildcard$116  (
    .A(state_q),
    .B(1'h1),
    .Y(\$auto$rtlil.cc:2793:Eq$117 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:78:EqWildcard$118  (
    .A(state_q),
    .B(2'h2),
    .Y(\$auto$rtlil.cc:2793:Eq$119 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17700  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(state_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17711 ),
    .Q(state_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17713  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(error_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17714 ),
    .Q(error_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17716  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(data_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17723 ),
    .Q(data_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17725  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(address_d),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17730 ),
    .Q(address_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17702  (
    .A({ \$auto$builder.cc:338:Biop$49 , dmi_clear, dmi_req_ready }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17701 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17704  (
    .A({ \$auto$rtlil.cc:2793:Eq$117 , dmi_clear, dmi_req_ready }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17703 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17706  (
    .A({ \$procmux$16632_CMP , \$auto$rtlil.cc:2793:Eq$117 , \$auto$builder.cc:338:Biop$49 , dmi_clear, dmi_resp_valid }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17705 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17708  (
    .A({ \$procmux$16632_CMP , \$auto$builder.cc:338:Biop$62 , dmi_clear }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17707 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17710  (
    .A({ \$procmux$16632_CMP , \$auto$builder.cc:338:Biop$70 , \$auto$builder.cc:338:Biop$66 , \$auto$builder.cc:338:Biop$62 , dmi_clear }),
    .B(5'h12),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17709 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17715  (
    .A({ \$auto$builder.cc:338:Biop$144 , \$auto$builder.cc:338:Biop$137 , \$auto$builder.cc:338:Biop$130 , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17714 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17718  (
    .A({ \$auto$rtlil.cc:2793:Eq$119 , dmi_clear, dmi_resp_valid }),
    .B(3'h4),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17717 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17722  (
    .A({ \$procmux$16632_CMP , \$auto$rtlil.cc:2793:Eq$119 , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17721 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17729  (
    .A({ \$procmux$16632_CMP , dmi_clear }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17728 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17712  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17709 , \$auto$opt_dff.cc:194:make_patterns_logic$17701 , \$auto$opt_dff.cc:194:make_patterns_logic$17707 , \$auto$opt_dff.cc:194:make_patterns_logic$17703 , \$auto$opt_dff.cc:194:make_patterns_logic$17705  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17711 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17724  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17707 , \$auto$opt_dff.cc:194:make_patterns_logic$17717 , \$auto$opt_dff.cc:194:make_patterns_logic$17721  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17723 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17731  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17707 , \$auto$opt_dff.cc:194:make_patterns_logic$17728  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17730 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17196  (
    .A({ \$auto$rtlil.cc:2793:Eq$117 , \$auto$builder.cc:338:Biop$49  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17197 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17210  (
    .A({ \$procmux$16628_CMP , \$auto$rtlil.cc:2793:Eq$119  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17209 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$52  (
    .A(2'h1),
    .B(2'h2),
    .S(\$auto$builder.cc:338:Biop$49 ),
    .Y(dmi_req[33:32])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(41'h00000000000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd41)
  ) \$driver$dr_q  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dr_d),
    .Q(dr_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$driver$dtmcs_q.abits  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[9:4]),
    .Q(dtmcs_q[9:4])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.dmihardreset  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[17]),
    .Q(dtmcs_q[17])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.dmireset  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[16]),
    .Q(dtmcs_q[16])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$dtmcs_q.dmistat  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[11:10]),
    .Q(dtmcs_q[11:10])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$dtmcs_q.idle  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[14:12]),
    .Q(dtmcs_q[14:12])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$dtmcs_q.version  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[3:0]),
    .Q(dtmcs_q[3:0])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$dtmcs_q.zero0  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[15]),
    .Q(dtmcs_q[15])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(14'h0000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd14)
  ) \$driver$dtmcs_q.zero1  (
    .ARST(trst_ni),
    .CLK(tck),
    .D(dtmcs_d[31:18]),
    .Q(dtmcs_q[31:18])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:253.9-253.30|../rtl/riscv-dbg/dmi_jtag.sv:252.7-254.10" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16584  (
    .A({ 1'h1, \$auto$slang_frontend.cc:694:finish$\error_d$140 [0] }),
    .B(2'h0),
    .S(\$auto$builder.cc:338:Biop$144 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_d$147 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:248.9-248.31|../rtl/riscv-dbg/dmi_jtag.sv:247.7-249.10" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16594  (
    .A(\$auto$builder.cc:338:Biop$137 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_d$140 [0])
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:240.9-240.31|../rtl/riscv-dbg/dmi_jtag.sv:239.7-241.10" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16611  (
    .A(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$115 ),
    .B(\$auto$builder.cc:338:Biop$123 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$126 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:233.9-233.31|../rtl/riscv-dbg/dmi_jtag.sv:232.7-234.10" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16618  (
    .A(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$107 ),
    .B(\$auto$builder.cc:338:Biop$112 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$115 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16628_CMP0  (
    .A(state_q),
    .B(3'h4),
    .Y(\$procmux$16628_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:159.11-169.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$16632_CMP0  (
    .A(state_q),
    .Y(\$procmux$16632_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:214.28-214.55|../rtl/riscv-dbg/dmi_jtag.sv:213.13-217.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16640_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h2),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$85 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:215.29-215.51|../rtl/riscv-dbg/dmi_jtag.sv:213.13-217.20" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16651_CMP0  (
    .A(dmi_resp[1:0]),
    .B(2'h3),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$84 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.31-219.14|../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16670  (
    .A(dmi_resp_valid),
    .B(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$84 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$88 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:190.29-193.18|../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd32)
  ) \$procmux$16699  (
    .A(32'd3131949278),
    .B({ dmi_resp[33:2], 64'hdeadbeefb051b051 }),
    .S({ \$procmux$16702_CMP , \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$85 , \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$84  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\data_d$83 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:184.17-184.40|../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$16702_CMP0  (
    .A(dmi_resp[1:0]),
    .Y(\$procmux$16702_CMP )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.31-199.14|../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16741  (
    .A(dmi_resp_valid),
    .B(\$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$85 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$89 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16799  (
    .A(dr_q[33:2]),
    .B(\$auto$slang_frontend.cc:694:finish$\data_d$83 ),
    .S(\$auto$rtlil.cc:2793:Eq$119 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\data_d$106 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd3)
  ) \$procmux$16826  (
    .A(3'h0),
    .B({ 1'h0, \$auto$slang_frontend.cc:694:finish$\state_d$74 [1], 7'h54 }),
    .S({ \$procmux$16632_CMP , \$auto$rtlil.cc:2793:Eq$117 , \$auto$builder.cc:338:Biop$49  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\state_d$104 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:164.15-164.30|../rtl/riscv-dbg/dmi_jtag.sv:163.13-167.16" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16863  (
    .A(\$auto$builder.cc:338:Biop$66 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\state_d$74 [1])
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16914  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17209 ),
    .B(\$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$89 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$108 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$16925  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17209 ),
    .B(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$88 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$107 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$16953  (
    .A(\$auto$slang_frontend.cc:694:finish$\data_d$106 ),
    .B(32'd0),
    .S(dmi_clear),
    .Y(data_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$16962  (
    .A(dr_q[40:34]),
    .B(7'h00),
    .S(dmi_clear),
    .Y(address_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$16971  (
    .A(\$auto$slang_frontend.cc:694:finish$\state_d$104 ),
    .B(3'h0),
    .S(dmi_clear),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$16980  (
    .A(\$auto$slang_frontend.cc:694:finish$\error_d$147 ),
    .B(2'h0),
    .S(dmi_clear),
    .Y(error_d)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16998  (
    .A(\$auto$slang_frontend.cc:694:finish$\error_dmi_busy$126 ),
    .B(1'h0),
    .S(dmi_clear),
    .Y(error_dmi_busy)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$17007  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17197 ),
    .B(1'h0),
    .S(dmi_clear),
    .Y(dmi_req_valid)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:279.11-279.47|../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$17009  (
    .A(\$auto$slang_frontend.cc:694:finish$\dr_d$179 ),
    .B({ tdi, dr_q[40:1] }),
    .S(dmi_select),
    .Y(\$auto$slang_frontend.cc:694:finish$\dr_d$184 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12|../rtl/riscv-dbg/dmi_jtag.sv:277.7-281.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$17018  (
    .A(\$auto$slang_frontend.cc:694:finish$\dr_d$179 ),
    .B(\$auto$slang_frontend.cc:694:finish$\dr_d$184 ),
    .S(shift),
    .Y(\$auto$slang_frontend.cc:694:finish$\dr_d$185 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:272.13-272.49|../rtl/riscv-dbg/dmi_jtag.sv:271.20-273.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$17024  (
    .A(dr_q),
    .B({ address_q, data_q, 2'h3 }),
    .S(\$auto$builder.cc:338:Biop$173 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dr_d$176 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:269.13-269.52|../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$17038  (
    .A(\$auto$slang_frontend.cc:694:finish$\dr_d$176 ),
    .B({ address_q, data_q, 2'h0 }),
    .S(\$auto$builder.cc:338:Biop$167 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\dr_d$177 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14|../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$17048  (
    .A(dr_q),
    .B(\$auto$slang_frontend.cc:694:finish$\dr_d$177 ),
    .S(dmi_select),
    .Y(\$auto$slang_frontend.cc:694:finish$\dr_d$178 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12|../rtl/riscv-dbg/dmi_jtag.sv:266.7-275.10" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$17056  (
    .A(dr_q),
    .B(\$auto$slang_frontend.cc:694:finish$\dr_d$178 ),
    .S(capture),
    .Y(\$auto$slang_frontend.cc:694:finish$\dr_d$179 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:264.7-264.17|../rtl/riscv-dbg/dmi_jtag.sv:263.5-282.8" */
  \$mux  #(
    .WIDTH(32'd41)
  ) \$procmux$17064  (
    .A(\$auto$slang_frontend.cc:694:finish$\dr_d$185 ),
    .B(41'h00000000000),
    .S(dmi_clear),
    .Y(dr_d)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.25-88.61|../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$17066  (
    .A(\$auto$slang_frontend.cc:694:finish$\dtmcs_d$34 ),
    .B({ tdi, dtmcs_q[31:1] }),
    .S(dtmcs_select),
    .Y(\$auto$slang_frontend.cc:694:finish$\dtmcs_d$41 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61|../rtl/riscv-dbg/dmi_jtag.sv:87.5-89.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$17072  (
    .A(\$auto$slang_frontend.cc:694:finish$\dtmcs_d$34 ),
    .B(\$auto$slang_frontend.cc:694:finish$\dtmcs_d$41 ),
    .S(shift),
    .Y(dtmcs_d)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:74.9-83.23|../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$17075  (
    .A(dtmcs_q),
    .B({ 20'h00001, error_q, 10'h071 }),
    .S(dtmcs_select),
    .Y(\$auto$slang_frontend.cc:694:finish$\dtmcs_d$33 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10|../rtl/riscv-dbg/dmi_jtag.sv:72.5-85.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$17080  (
    .A(dtmcs_q),
    .B(\$auto$slang_frontend.cc:694:finish$\dtmcs_d$33 ),
    .S(capture),
    .Y(\$auto$slang_frontend.cc:694:finish$\dtmcs_d$34 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:330.11" */
  \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc  i_dmi_cdc (
    .clk_i(clk_i),
    .core_dmi_ready_i(dmi_req_ready_i),
    .core_dmi_ready_o(dmi_resp_ready_o),
    .core_dmi_req_o(dmi_req_o),
    .core_dmi_resp_i(dmi_resp_i),
    .core_dmi_rst_no(dmi_rst_no),
    .core_dmi_valid_i(dmi_resp_valid_i),
    .core_dmi_valid_o(dmi_req_valid_o),
    .jtag_dmi_cdc_clear_i(dmi_clear),
    .jtag_dmi_ready_i(1'h1),
    .jtag_dmi_ready_o(dmi_req_ready),
    .jtag_dmi_req_i({ address_q, dmi_req[33:32], data_q }),
    .jtag_dmi_resp_o(dmi_resp),
    .jtag_dmi_valid_i(dmi_req_valid),
    .jtag_dmi_valid_o(dmi_resp_valid),
    .rst_ni(rst_ni),
    .tck_i(tck),
    .trst_ni(trst_ni)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag.sv:307.5" */
  \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap  i_dmi_jtag_tap (
    .capture_o(capture),
    .dmi_clear_o(jtag_dmi_clear),
    .dmi_select_o(dmi_select),
    .dmi_tdo_i(dr_q[0]),
    .dtmcs_select_o(dtmcs_select),
    .dtmcs_tdo_i(dtmcs_q[0]),
    .shift_o(shift),
    .tck_i(tck_i),
    .tck_o(tck),
    .td_i(td_i),
    .td_o(td_o),
    .tdi_o(tdi),
    .tdo_oe_o(tdo_oe_o),
    .testmode_i(testmode_i),
    .tms_i(tms_i),
    .trst_ni(trst_ni),
    .update_o(update)
  );
  assign \$auto$slang_frontend.cc:694:finish$\error_d$140 [1] = 1'h1;
  assign { \$auto$slang_frontend.cc:694:finish$\state_d$74 [2], \$auto$slang_frontend.cc:694:finish$\state_d$74 [0] } = 2'h1;
  assign dmi = dr_q;
  assign { dmi_req[40:34], dmi_req[31:0] } = { address_q, data_q };
  assign dmi_resp_ready = 1'h1;
  assign dmi_tdo = dr_q[0];
endmodule

/* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:19.8" */
module \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap (testmode_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o, tck_o, dmi_clear_o, update_o, capture_o, shift_o, tdi_o, dtmcs_select_o, dtmcs_tdo_i, dmi_select_o, dmi_tdo_i);
  wire \$auto$builder.cc:338:Biop$2784 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17733 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17736 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17199 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17201 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17213 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17215 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17217 ;
  wire \$auto$rtlil.cc:2874:Mux$2789 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$2793 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" */
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$2749 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$2751 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" */
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$2761 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$2763 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$2746 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$2750 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$2758 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$2762 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" */
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$2728 ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  wire \$auto$slang_frontend.cc:694:finish$\tdo_mux$2776 ;
  wire \$procmux$15177_CMP ;
  wire \$procmux$15178_CMP ;
  wire \$procmux$15179_CMP ;
  wire \$procmux$15182_CMP ;
  wire \$procmux$15184_CMP ;
  wire \$procmux$15185_CMP ;
  wire \$procmux$15186_CMP ;
  wire \$procmux$15189_CMP ;
  wire \$procmux$15190_CMP ;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:124.16" */
  wire bypass_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:124.26" */
  wire bypass_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:58.30" */
  wire capture_dr;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.9" */
  wire capture_ir;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:40.23" */
  output capture_o;
  wire capture_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:38.23" */
  output dmi_clear_o;
  wire dmi_clear_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:46.23" */
  output dmi_select_o;
  wire dmi_select_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:47.23" */
  input dmi_tdo_i;
  wire dmi_tdo_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:43.23" */
  output dtmcs_select_o;
  wire dtmcs_select_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:44.23" */
  input dtmcs_tdo_i;
  wire dtmcs_tdo_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:120.16" */
  wire [31:0] idcode_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:120.26" */
  wire [31:0] idcode_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:121.16" */
  wire idcode_select;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:75.25" */
  wire [4:0] jtag_ir_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:75.36" */
  wire [4:0] jtag_ir_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:73.25" */
  wire [4:0] jtag_ir_shift_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:73.42" */
  wire [4:0] jtag_ir_shift_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:58.20" */
  wire shift_dr;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.21" */
  wire shift_ir;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:41.23" */
  output shift_o;
  wire shift_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:57.28" */
  wire [3:0] tap_state_d;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:57.15" */
  wire [3:0] tap_state_q;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:28.23" */
  input tck_i;
  wire tck_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:188.9" */
  wire tck_n;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:188.16" */
  wire tck_ni;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:36.23" */
  output tck_o;
  wire tck_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:31.23" */
  input td_i;
  wire td_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:32.23" */
  output td_o;
  wire td_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:42.23" */
  output tdi_o;
  wire tdi_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:168.9" */
  wire tdo_mux;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:33.23" */
  output tdo_oe_o;
  wire tdo_oe_o;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.42" */
  wire test_logic_reset;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:34.23" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:29.23" */
  input tms_i;
  wire tms_i;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:30.23" */
  input trst_ni;
  wire trst_ni;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:58.9" */
  wire update_dr;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.31" */
  wire update_ir;
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:39.23" */
  output update_o;
  wire update_o;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2783  (
    .A(shift_ir),
    .B(shift_dr),
    .Y(\$auto$builder.cc:338:Biop$2784 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(5'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$17732  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(jtag_ir_shift_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17733 ),
    .Q(jtag_ir_shift_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(5'h01),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$17735  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(jtag_ir_d),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17736 ),
    .Q(jtag_ir_q)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17734  (
    .A({ capture_ir, shift_ir, \$auto$opt_reduce.cc:137:opt_pmux$17201  }),
    .B(3'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17733 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17737  (
    .A({ update_ir, \$auto$opt_reduce.cc:137:opt_pmux$17201  }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17736 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17198  (
    .A({ idcode_select, dmi_select_o, dtmcs_select_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17199 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd15),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17200  (
    .A({ \$procmux$15190_CMP , \$procmux$15189_CMP , \$procmux$15186_CMP , \$procmux$15185_CMP , \$procmux$15184_CMP , \$procmux$15182_CMP , \$procmux$15179_CMP , \$procmux$15178_CMP , \$procmux$15177_CMP , update_ir, shift_ir, capture_ir, shift_dr, capture_o, update_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17201 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17212  (
    .A({ \$procmux$15190_CMP , update_ir, update_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17213 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17214  (
    .A({ shift_ir, capture_ir }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17215 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17216  (
    .A({ shift_dr, capture_o }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17217 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2788  (
    .A(tms_i),
    .Y(\$auto$rtlil.cc:2874:Mux$2789 )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$2816  (
    .A(2'h1),
    .B(2'h2),
    .S(tms_i),
    .Y(\$auto$rtlil.cc:2874:Mux$2793 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$bypass_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(bypass_d),
    .Q(bypass_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd202137011),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$idcode_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(idcode_d),
    .Q(idcode_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$tap_state_q  (
    .ARST(trst_ni),
    .CLK(tck_i),
    .D(tap_state_d),
    .Q(tap_state_q)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$td_o  (
    .ARST(trst_ni),
    .CLK(tck_n),
    .D(tdo_mux),
    .Q(td_o)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$tdo_oe_o  (
    .ARST(trst_ni),
    .CLK(tck_n),
    .D(\$auto$builder.cc:338:Biop$2784 ),
    .Q(tdo_oe_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$15097  (
    .A(bypass_q),
    .B({ idcode_q[0], dtmcs_tdo_i, dmi_tdo_i }),
    .S({ idcode_select, dtmcs_select_o, dmi_select_o }),
    .Y(\$auto$slang_frontend.cc:694:finish$\tdo_mux$2776 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$15098_CMP0  (
    .A(jtag_ir_q),
    .B(5'h11),
    .Y(dmi_select_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:178.25-178.47|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$procmux$15099_CMP0  (
    .A(jtag_ir_q),
    .B(5'h10),
    .Y(dtmcs_select_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:177.25-177.47|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15100_CMP0  (
    .A(jtag_ir_q),
    .B(1'h1),
    .Y(idcode_select)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|../rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15106  (
    .A(\$auto$slang_frontend.cc:694:finish$\tdo_mux$2776 ),
    .B(jtag_ir_shift_q[0]),
    .S(shift_ir),
    .Y(tdo_mux)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15129  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17201 ),
    .B(\$auto$slang_frontend.cc:694:finish$\bypass_d$2763 ),
    .Y(bypass_d)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$15133  (
    .A(32'd202137011),
    .B(\$auto$slang_frontend.cc:694:finish$\idcode_d$2762 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$17201 ),
    .Y(idcode_d)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:137.27-137.43|../rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15137  (
    .A(td_i),
    .B(\$auto$slang_frontend.cc:694:finish$\bypass_d$2751 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$17199 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\bypass_d$2761 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:136.27-136.65|../rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$15143  (
    .A(\$auto$slang_frontend.cc:694:finish$\idcode_d$2750 ),
    .B({ td_i, idcode_q[31:1] }),
    .S(idcode_select),
    .Y(\$auto$slang_frontend.cc:694:finish$\idcode_d$2758 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15150  (
    .A(\$auto$slang_frontend.cc:694:finish$\bypass_d$2751 ),
    .B(\$auto$slang_frontend.cc:694:finish$\bypass_d$2761 ),
    .S(shift_dr),
    .Y(\$auto$slang_frontend.cc:694:finish$\bypass_d$2763 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$15155  (
    .A(\$auto$slang_frontend.cc:694:finish$\idcode_d$2750 ),
    .B(\$auto$slang_frontend.cc:694:finish$\idcode_d$2758 ),
    .S(shift_dr),
    .Y(\$auto$slang_frontend.cc:694:finish$\idcode_d$2762 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:132.26-132.42|../rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15158  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17199 ),
    .B(bypass_q),
    .Y(\$auto$slang_frontend.cc:694:finish$\bypass_d$2749 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:131.26-131.49|../rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$15163  (
    .A(idcode_q),
    .B(32'd202137011),
    .S(idcode_select),
    .Y(\$auto$slang_frontend.cc:694:finish$\idcode_d$2746 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15169  (
    .A(bypass_q),
    .B(\$auto$slang_frontend.cc:694:finish$\bypass_d$2749 ),
    .S(capture_o),
    .Y(\$auto$slang_frontend.cc:694:finish$\bypass_d$2751 )
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$15173  (
    .A(idcode_q),
    .B(\$auto$slang_frontend.cc:694:finish$\idcode_d$2746 ),
    .S(capture_o),
    .Y(\$auto$slang_frontend.cc:694:finish$\idcode_d$2750 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15175  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17201 ),
    .Y(dmi_clear_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$15176_CMP0  (
    .A(tap_state_q),
    .B(4'hf),
    .Y(update_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:290.9-290.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$15177_CMP0  (
    .A(tap_state_q),
    .B(4'he),
    .Y(\$procmux$15177_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:287.9-287.51|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$15178_CMP0  (
    .A(tap_state_q),
    .B(4'hd),
    .Y(\$procmux$15178_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:283.9-283.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$15179_CMP0  (
    .A(tap_state_q),
    .B(4'hc),
    .Y(\$procmux$15179_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$15180_CMP0  (
    .A(tap_state_q),
    .B(4'hb),
    .Y(shift_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$15181_CMP0  (
    .A(tap_state_q),
    .B(4'ha),
    .Y(capture_ir)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:264.9-264.60|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$15182_CMP0  (
    .A(tap_state_q),
    .B(4'h9),
    .Y(\$procmux$15182_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$15183_CMP0  (
    .A(tap_state_q),
    .B(4'h8),
    .Y(update_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:256.9-256.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$15184_CMP0  (
    .A(tap_state_q),
    .B(3'h7),
    .Y(\$procmux$15184_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:253.9-253.51|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$15185_CMP0  (
    .A(tap_state_q),
    .B(3'h6),
    .Y(\$procmux$15185_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:250.9-250.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$15186_CMP0  (
    .A(tap_state_q),
    .B(3'h5),
    .Y(\$procmux$15186_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$15187_CMP0  (
    .A(tap_state_q),
    .B(3'h4),
    .Y(shift_dr)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$15188_CMP0  (
    .A(tap_state_q),
    .B(2'h3),
    .Y(capture_o)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:239.9-239.58|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$15189_CMP0  (
    .A(tap_state_q),
    .B(2'h2),
    .Y(\$procmux$15189_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:235.9-235.60|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15190_CMP0  (
    .A(tap_state_q),
    .B(1'h1),
    .Y(\$procmux$15190_CMP )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" */
  \$pmux  #(
    .S_WIDTH(32'd11),
    .WIDTH(32'd4)
  ) \$procmux$15192  (
    .A({ 3'h0, \$auto$rtlil.cc:2874:Mux$2789  }),
    .B({ \$auto$rtlil.cc:2874:Mux$2793 [1], 1'h0, \$auto$rtlil.cc:2874:Mux$2793 [0], 4'ha, tms_i, \$auto$rtlil.cc:2874:Mux$2793 , \$auto$rtlil.cc:2874:Mux$2793 [0], 4'h3, tms_i, \$auto$rtlil.cc:2874:Mux$2793 , 2'h0, \$auto$rtlil.cc:2874:Mux$2789 , 1'h0, \$auto$rtlil.cc:2874:Mux$2789 , 2'h1, \$auto$rtlil.cc:2874:Mux$2793 , \$auto$rtlil.cc:2874:Mux$2793 [0], 2'h3, tms_i, 3'h7, \$auto$rtlil.cc:2874:Mux$2793 , 1'h1, tms_i, 4'hc, \$auto$rtlil.cc:2874:Mux$2793  }),
    .S({ \$procmux$15189_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17217 , \$procmux$15186_CMP , \$procmux$15185_CMP , \$procmux$15184_CMP , \$procmux$15182_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17215 , \$procmux$15179_CMP , \$procmux$15178_CMP , \$procmux$15177_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17213  }),
    .Y(tap_state_d)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$15260  (
    .A(5'h01),
    .B(jtag_ir_shift_q),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$17201 ),
    .Y(jtag_ir_d)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$15265  (
    .A(5'h00),
    .B(\$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$2728 ),
    .S(\$auto$opt_reduce.cc:137:opt_pmux$17201 ),
    .Y(jtag_ir_shift_d)
  );
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:89.7-89.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$15274  (
    .A({ td_i, jtag_ir_shift_q[4:1] }),
    .B(5'h05),
    .S(capture_ir),
    .Y(\$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$2728 )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:195.15" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux  i_dft_tck_mux (
    .clk0_i(tck_ni),
    .clk1_i(tck_i),
    .clk_o(tck_n),
    .clk_sel_i(testmode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:190.19" */
  \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv  i_tck_inv (
    .clk_i(tck_i),
    .clk_o(tck_ni)
  );
  assign capture_dr = capture_o;
  assign shift_o = shift_dr;
  assign tck_o = tck_i;
  assign tdi_o = td_i;
  assign test_logic_reset = dmi_clear_o;
  assign update_dr = update_o;
endmodule

/* src = "../rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$6878 ;
  wire \$auto$builder.cc:338:Biop$6911 ;
  wire \$auto$builder.cc:338:Biop$6926 ;
  wire \$auto$builder.cc:338:Biop$6930 ;
  wire \$auto$builder.cc:338:Biop$6934 ;
  wire \$auto$builder.cc:364:Unop$6876 ;
  wire \$auto$builder.cc:364:Unop$6909 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17739 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17742 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17744 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17749 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17746 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18121 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$6890 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$6954 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$6956 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$6955 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$6893  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$6890 [3], \$auto$rtlil.cc:2896:Demux$6890 [3], \$auto$rtlil.cc:2896:Demux$6890 [1], \$auto$rtlil.cc:2896:Demux$6890 [1] }),
    .Y(mem_n)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$builder.cc:195:Bmux$6869  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6854  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6856  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6877  (
    .A(push_i),
    .B(\$auto$builder.cc:364:Unop$6876 ),
    .Y(\$auto$builder.cc:338:Biop$6878 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6899  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6910  (
    .A(pop_i),
    .B(\$auto$builder.cc:364:Unop$6909 ),
    .Y(\$auto$builder.cc:338:Biop$6911 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6918  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$6921  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:2874:Mux$18121 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6925  (
    .A(push_i),
    .B(pop_i),
    .Y(\$auto$builder.cc:338:Biop$6926 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6929  (
    .A(\$auto$builder.cc:338:Biop$6926 ),
    .B(\$auto$builder.cc:364:Unop$6876 ),
    .Y(\$auto$builder.cc:338:Biop$6930 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6933  (
    .A(\$auto$builder.cc:338:Biop$6930 ),
    .B(\$auto$builder.cc:364:Unop$6909 ),
    .Y(\$auto$builder.cc:338:Biop$6934 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6875  (
    .A(full_o),
    .Y(\$auto$builder.cc:364:Unop$6876 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6908  (
    .A(empty_o),
    .Y(\$auto$builder.cc:364:Unop$6909 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$6889  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:2896:Demux$6890 [3], \$auto$rtlil.cc:2896:Demux$6890 [1] })
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17738  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$6955 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17739 ),
    .Q(write_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17741  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$6956 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17746 ),
    .Q(status_cnt_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17748  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$6954 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17749 ),
    .Q(read_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17751  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$auto$builder.cc:338:Biop$6878 ),
    .Q(mem_q[3:2])
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17752  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$auto$builder.cc:338:Biop$6878 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17740  (
    .A({ \$auto$builder.cc:338:Biop$6878 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17739 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17743  (
    .A({ \$auto$builder.cc:338:Biop$6934 , \$auto$builder.cc:338:Biop$6911 , \$auto$builder.cc:338:Biop$6878 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17742 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17745  (
    .A({ \$auto$builder.cc:338:Biop$6934 , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17744 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17750  (
    .A({ \$auto$builder.cc:338:Biop$6911 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17749 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17747  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17742 , \$auto$opt_dff.cc:194:make_patterns_logic$17744  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17746 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18120  (
    .A(\$auto$builder.cc:338:Biop$6911 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18121 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13712  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$6956 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13715  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$6955 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13718  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$6954 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18121 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$6890 [2], \$auto$rtlil.cc:2896:Demux$6890 [0] } = { \$auto$rtlil.cc:2896:Demux$6890 [3], \$auto$rtlil.cc:2896:Demux$6890 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "../rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$7151 ;
  wire \$auto$builder.cc:338:Biop$7184 ;
  wire \$auto$builder.cc:338:Biop$7199 ;
  wire \$auto$builder.cc:338:Biop$7203 ;
  wire \$auto$builder.cc:338:Biop$7207 ;
  wire \$auto$builder.cc:364:Unop$7149 ;
  wire \$auto$builder.cc:364:Unop$7182 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17754 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17757 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17759 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17764 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17761 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18126 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$7163 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7227 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7229 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7228 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$7166  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$7163 [3], \$auto$rtlil.cc:2896:Demux$7163 [3], \$auto$rtlil.cc:2896:Demux$7163 [1], \$auto$rtlil.cc:2896:Demux$7163 [1] }),
    .Y(mem_n)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$builder.cc:195:Bmux$7142  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7127  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7129  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7150  (
    .A(push_i),
    .B(\$auto$builder.cc:364:Unop$7149 ),
    .Y(\$auto$builder.cc:338:Biop$7151 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7172  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7183  (
    .A(pop_i),
    .B(\$auto$builder.cc:364:Unop$7182 ),
    .Y(\$auto$builder.cc:338:Biop$7184 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7191  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$7194  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:2874:Mux$18126 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7198  (
    .A(push_i),
    .B(pop_i),
    .Y(\$auto$builder.cc:338:Biop$7199 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7202  (
    .A(\$auto$builder.cc:338:Biop$7199 ),
    .B(\$auto$builder.cc:364:Unop$7149 ),
    .Y(\$auto$builder.cc:338:Biop$7203 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7206  (
    .A(\$auto$builder.cc:338:Biop$7203 ),
    .B(\$auto$builder.cc:364:Unop$7182 ),
    .Y(\$auto$builder.cc:338:Biop$7207 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7148  (
    .A(full_o),
    .Y(\$auto$builder.cc:364:Unop$7149 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7181  (
    .A(empty_o),
    .Y(\$auto$builder.cc:364:Unop$7182 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$7162  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:2896:Demux$7163 [3], \$auto$rtlil.cc:2896:Demux$7163 [1] })
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17753  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$7228 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17754 ),
    .Q(write_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17756  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$7229 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17761 ),
    .Q(status_cnt_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17763  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$7227 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17764 ),
    .Q(read_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17766  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$auto$builder.cc:338:Biop$7151 ),
    .Q(mem_q[3:2])
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17767  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$auto$builder.cc:338:Biop$7151 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17755  (
    .A({ \$auto$builder.cc:338:Biop$7151 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17754 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17758  (
    .A({ \$auto$builder.cc:338:Biop$7207 , \$auto$builder.cc:338:Biop$7184 , \$auto$builder.cc:338:Biop$7151 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17757 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17760  (
    .A({ \$auto$builder.cc:338:Biop$7207 , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17759 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17765  (
    .A({ \$auto$builder.cc:338:Biop$7184 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17764 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17762  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17757 , \$auto$opt_dff.cc:194:make_patterns_logic$17759  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17761 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18125  (
    .A(\$auto$builder.cc:338:Biop$7184 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18126 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13645  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$7229 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13648  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$7228 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13651  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$7227 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18126 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$7163 [2], \$auto$rtlil.cc:2896:Demux$7163 [0] } = { \$auto$rtlil.cc:2896:Demux$7163 [3], \$auto$rtlil.cc:2896:Demux$7163 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "../rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$7424 ;
  wire \$auto$builder.cc:338:Biop$7457 ;
  wire \$auto$builder.cc:338:Biop$7472 ;
  wire \$auto$builder.cc:338:Biop$7476 ;
  wire \$auto$builder.cc:338:Biop$7480 ;
  wire \$auto$builder.cc:364:Unop$7422 ;
  wire \$auto$builder.cc:364:Unop$7455 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17769 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17772 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17774 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17779 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17776 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18131 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$7436 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7500 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7502 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7501 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$7439  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$7436 [3], \$auto$rtlil.cc:2896:Demux$7436 [3], \$auto$rtlil.cc:2896:Demux$7436 [1], \$auto$rtlil.cc:2896:Demux$7436 [1] }),
    .Y(mem_n)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$builder.cc:195:Bmux$7415  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7400  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7402  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7423  (
    .A(push_i),
    .B(\$auto$builder.cc:364:Unop$7422 ),
    .Y(\$auto$builder.cc:338:Biop$7424 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7445  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7456  (
    .A(pop_i),
    .B(\$auto$builder.cc:364:Unop$7455 ),
    .Y(\$auto$builder.cc:338:Biop$7457 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7464  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$7467  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:2874:Mux$18131 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7471  (
    .A(push_i),
    .B(pop_i),
    .Y(\$auto$builder.cc:338:Biop$7472 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7475  (
    .A(\$auto$builder.cc:338:Biop$7472 ),
    .B(\$auto$builder.cc:364:Unop$7422 ),
    .Y(\$auto$builder.cc:338:Biop$7476 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7479  (
    .A(\$auto$builder.cc:338:Biop$7476 ),
    .B(\$auto$builder.cc:364:Unop$7455 ),
    .Y(\$auto$builder.cc:338:Biop$7480 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7421  (
    .A(full_o),
    .Y(\$auto$builder.cc:364:Unop$7422 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7454  (
    .A(empty_o),
    .Y(\$auto$builder.cc:364:Unop$7455 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$7435  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:2896:Demux$7436 [3], \$auto$rtlil.cc:2896:Demux$7436 [1] })
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17768  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$7501 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17769 ),
    .Q(write_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17771  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$7502 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17776 ),
    .Q(status_cnt_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17778  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$7500 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17779 ),
    .Q(read_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17781  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$auto$builder.cc:338:Biop$7424 ),
    .Q(mem_q[3:2])
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17782  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$auto$builder.cc:338:Biop$7424 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17770  (
    .A({ \$auto$builder.cc:338:Biop$7424 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17769 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17773  (
    .A({ \$auto$builder.cc:338:Biop$7480 , \$auto$builder.cc:338:Biop$7457 , \$auto$builder.cc:338:Biop$7424 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17772 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17775  (
    .A({ \$auto$builder.cc:338:Biop$7480 , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17774 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17780  (
    .A({ \$auto$builder.cc:338:Biop$7457 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17779 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17777  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17772 , \$auto$opt_dff.cc:194:make_patterns_logic$17774  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17776 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18130  (
    .A(\$auto$builder.cc:338:Biop$7457 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18131 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13578  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$7502 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13581  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$7501 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13584  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$7500 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18131 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$7436 [2], \$auto$rtlil.cc:2896:Demux$7436 [0] } = { \$auto$rtlil.cc:2896:Demux$7436 [3], \$auto$rtlil.cc:2896:Demux$7436 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "../rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$7697 ;
  wire \$auto$builder.cc:338:Biop$7730 ;
  wire \$auto$builder.cc:338:Biop$7745 ;
  wire \$auto$builder.cc:338:Biop$7749 ;
  wire \$auto$builder.cc:338:Biop$7753 ;
  wire \$auto$builder.cc:364:Unop$7695 ;
  wire \$auto$builder.cc:364:Unop$7728 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17784 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17787 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17789 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17794 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17791 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18136 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$7709 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7773 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7775 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7774 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$7712  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$7709 [3], \$auto$rtlil.cc:2896:Demux$7709 [3], \$auto$rtlil.cc:2896:Demux$7709 [1], \$auto$rtlil.cc:2896:Demux$7709 [1] }),
    .Y(mem_n)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$builder.cc:195:Bmux$7688  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7673  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7675  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7696  (
    .A(push_i),
    .B(\$auto$builder.cc:364:Unop$7695 ),
    .Y(\$auto$builder.cc:338:Biop$7697 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7718  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7729  (
    .A(pop_i),
    .B(\$auto$builder.cc:364:Unop$7728 ),
    .Y(\$auto$builder.cc:338:Biop$7730 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7737  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$7740  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:2874:Mux$18136 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7744  (
    .A(push_i),
    .B(pop_i),
    .Y(\$auto$builder.cc:338:Biop$7745 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7748  (
    .A(\$auto$builder.cc:338:Biop$7745 ),
    .B(\$auto$builder.cc:364:Unop$7695 ),
    .Y(\$auto$builder.cc:338:Biop$7749 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7752  (
    .A(\$auto$builder.cc:338:Biop$7749 ),
    .B(\$auto$builder.cc:364:Unop$7728 ),
    .Y(\$auto$builder.cc:338:Biop$7753 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7694  (
    .A(full_o),
    .Y(\$auto$builder.cc:364:Unop$7695 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7727  (
    .A(empty_o),
    .Y(\$auto$builder.cc:364:Unop$7728 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$7708  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:2896:Demux$7709 [3], \$auto$rtlil.cc:2896:Demux$7709 [1] })
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17783  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$7774 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17784 ),
    .Q(write_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17786  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$7775 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17791 ),
    .Q(status_cnt_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17793  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$7773 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17794 ),
    .Q(read_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17796  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$auto$builder.cc:338:Biop$7697 ),
    .Q(mem_q[3:2])
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17797  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$auto$builder.cc:338:Biop$7697 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17785  (
    .A({ \$auto$builder.cc:338:Biop$7697 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17784 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17788  (
    .A({ \$auto$builder.cc:338:Biop$7753 , \$auto$builder.cc:338:Biop$7730 , \$auto$builder.cc:338:Biop$7697 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17787 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17790  (
    .A({ \$auto$builder.cc:338:Biop$7753 , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17789 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17795  (
    .A({ \$auto$builder.cc:338:Biop$7730 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17794 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17792  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17787 , \$auto$opt_dff.cc:194:make_patterns_logic$17789  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17791 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18135  (
    .A(\$auto$builder.cc:338:Biop$7730 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18136 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13511  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$7775 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13514  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$7774 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13517  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$7773 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18136 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$7709 [2], \$auto$rtlil.cc:2896:Demux$7709 [0] } = { \$auto$rtlil.cc:2896:Demux$7709 [3], \$auto$rtlil.cc:2896:Demux$7709 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "../rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$7970 ;
  wire \$auto$builder.cc:338:Biop$8003 ;
  wire \$auto$builder.cc:338:Biop$8018 ;
  wire \$auto$builder.cc:338:Biop$8022 ;
  wire \$auto$builder.cc:338:Biop$8026 ;
  wire \$auto$builder.cc:364:Unop$7968 ;
  wire \$auto$builder.cc:364:Unop$8001 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17799 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17802 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17804 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17809 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17806 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18141 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$7982 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$8046 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$8048 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$8047 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:32.19" */
  input [1:0] data_i;
  wire [1:0] data_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:35.19" */
  output [1:0] data_o;
  wire [1:0] data_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.29" */
  wire [3:0] mem_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.36" */
  wire [3:0] mem_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.30" */
  wire read_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.46" */
  wire read_pointer_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$7985  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$7982 [3], \$auto$rtlil.cc:2896:Demux$7982 [3], \$auto$rtlil.cc:2896:Demux$7982 [1], \$auto$rtlil.cc:2896:Demux$7982 [1] }),
    .Y(mem_n)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$builder.cc:195:Bmux$7961  (
    .A(mem_q[1:0]),
    .B(mem_q[3:2]),
    .S(read_pointer_q),
    .Y(data_o)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7946  (
    .A(status_cnt_q),
    .B(2'h2),
    .Y(full_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7948  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7969  (
    .A(push_i),
    .B(\$auto$builder.cc:364:Unop$7968 ),
    .Y(\$auto$builder.cc:338:Biop$7970 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7991  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(write_pointer_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8002  (
    .A(pop_i),
    .B(\$auto$builder.cc:364:Unop$8001 ),
    .Y(\$auto$builder.cc:338:Biop$8003 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8010  (
    .A(read_pointer_q),
    .B(1'h1),
    .Y(read_pointer_n)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$8013  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:2874:Mux$18141 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8017  (
    .A(push_i),
    .B(pop_i),
    .Y(\$auto$builder.cc:338:Biop$8018 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8021  (
    .A(\$auto$builder.cc:338:Biop$8018 ),
    .B(\$auto$builder.cc:364:Unop$7968 ),
    .Y(\$auto$builder.cc:338:Biop$8022 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8025  (
    .A(\$auto$builder.cc:338:Biop$8022 ),
    .B(\$auto$builder.cc:364:Unop$8001 ),
    .Y(\$auto$builder.cc:338:Biop$8026 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7967  (
    .A(full_o),
    .Y(\$auto$builder.cc:364:Unop$7968 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$8000  (
    .A(empty_o),
    .Y(\$auto$builder.cc:364:Unop$8001 )
  );
  \$demux  #(
    .S_WIDTH(32'd1),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$7981  (
    .A(1'h1),
    .S(write_pointer_q),
    .Y({ \$auto$rtlil.cc:2896:Demux$7982 [3], \$auto$rtlil.cc:2896:Demux$7982 [1] })
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17798  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$8047 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17799 ),
    .Q(write_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17801  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$8048 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17806 ),
    .Q(status_cnt_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17808  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$8046 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17809 ),
    .Q(read_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17811  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[3:2]),
    .EN(\$auto$builder.cc:338:Biop$7970 ),
    .Q(mem_q[3:2])
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17812  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n[1:0]),
    .EN(\$auto$builder.cc:338:Biop$7970 ),
    .Q(mem_q[1:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17800  (
    .A({ \$auto$builder.cc:338:Biop$7970 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17799 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17803  (
    .A({ \$auto$builder.cc:338:Biop$8026 , \$auto$builder.cc:338:Biop$8003 , \$auto$builder.cc:338:Biop$7970 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17802 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17805  (
    .A({ \$auto$builder.cc:338:Biop$8026 , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17804 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17810  (
    .A({ \$auto$builder.cc:338:Biop$8003 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17809 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17807  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17802 , \$auto$opt_dff.cc:194:make_patterns_logic$17804  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17806 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18140  (
    .A(\$auto$builder.cc:338:Biop$8003 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18141 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13444  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$8048 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13447  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$8047 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13450  (
    .A(read_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\read_pointer_q$8046 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18141 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$7982 [2], \$auto$rtlil.cc:2896:Demux$7982 [0] } = { \$auto$rtlil.cc:2896:Demux$7982 [3], \$auto$rtlil.cc:2896:Demux$7982 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "../rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$4057 ;
  wire \$auto$builder.cc:338:Biop$4075 ;
  wire \$auto$builder.cc:338:Biop$4086 ;
  wire \$auto$builder.cc:338:Biop$4101 ;
  wire \$auto$builder.cc:338:Biop$4105 ;
  wire \$auto$builder.cc:338:Biop$4109 ;
  wire \$auto$builder.cc:364:Unop$4055 ;
  wire \$auto$builder.cc:364:Unop$4084 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17814 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17817 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17819 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17821 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18146 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$4067 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$4131 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$4130 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:112:Mux$4066  (
    .A(write_pointer_q),
    .Y(\$auto$rtlil.cc:2874:Mux$4067 [2])
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$auto$builder.cc:128:Bwmux$4068  (
    .A(mem_q),
    .B(data_i),
    .S({ \$auto$rtlil.cc:2874:Mux$4067 [2], \$auto$rtlil.cc:2874:Mux$4067 [2], \$auto$rtlil.cc:2874:Mux$4067 [2] }),
    .Y(mem_n)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4035  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4037  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4056  (
    .A(push_i),
    .B(\$auto$builder.cc:364:Unop$4055 ),
    .Y(\$auto$builder.cc:338:Biop$4057 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4074  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$4075 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4085  (
    .A(pop_i),
    .B(\$auto$builder.cc:364:Unop$4084 ),
    .Y(\$auto$builder.cc:338:Biop$4086 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$4096  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:2874:Mux$18146 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4100  (
    .A(push_i),
    .B(pop_i),
    .Y(\$auto$builder.cc:338:Biop$4101 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4104  (
    .A(\$auto$builder.cc:338:Biop$4101 ),
    .B(\$auto$builder.cc:364:Unop$4055 ),
    .Y(\$auto$builder.cc:338:Biop$4105 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$4108  (
    .A(\$auto$builder.cc:338:Biop$4105 ),
    .B(\$auto$builder.cc:364:Unop$4084 ),
    .Y(\$auto$builder.cc:338:Biop$4109 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$4054  (
    .A(full_o),
    .Y(\$auto$builder.cc:364:Unop$4055 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$4083  (
    .A(empty_o),
    .Y(\$auto$builder.cc:364:Unop$4084 )
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17813  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$4130 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17814 ),
    .Q(write_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17816  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$4131 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17821 ),
    .Q(status_cnt_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17826  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$auto$builder.cc:338:Biop$4057 ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17815  (
    .A({ \$auto$builder.cc:338:Biop$4057 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17814 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17818  (
    .A({ \$auto$builder.cc:338:Biop$4109 , \$auto$builder.cc:338:Biop$4086 , \$auto$builder.cc:338:Biop$4057 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17817 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17820  (
    .A({ \$auto$builder.cc:338:Biop$4109 , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17819 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17822  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17817 , \$auto$opt_dff.cc:194:make_patterns_logic$17819  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17821 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18145  (
    .A(\$auto$builder.cc:338:Biop$4086 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18146 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14792  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$4131 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14795  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$4130 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:81.17-81.38|../rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14831  (
    .A(write_pointer_q),
    .B(\$auto$builder.cc:338:Biop$4075 ),
    .Y(write_pointer_n)
  );
  assign \$auto$rtlil.cc:2874:Mux$18146 [0] = 1'h1;
  assign \$auto$rtlil.cc:2874:Mux$4067 [1:0] = { \$auto$rtlil.cc:2874:Mux$4067 [2], \$auto$rtlil.cc:2874:Mux$4067 [2] };
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "../rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$3772 ;
  wire \$auto$builder.cc:338:Biop$3790 ;
  wire \$auto$builder.cc:338:Biop$3801 ;
  wire \$auto$builder.cc:338:Biop$3816 ;
  wire \$auto$builder.cc:338:Biop$3820 ;
  wire \$auto$builder.cc:338:Biop$3824 ;
  wire \$auto$builder.cc:364:Unop$3770 ;
  wire \$auto$builder.cc:364:Unop$3799 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17828 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17831 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17833 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17835 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18151 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3782 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$3846 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$3845 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:112:Mux$3781  (
    .A(write_pointer_q),
    .Y(\$auto$rtlil.cc:2874:Mux$3782 [2])
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$auto$builder.cc:128:Bwmux$3783  (
    .A(mem_q),
    .B(data_i),
    .S({ \$auto$rtlil.cc:2874:Mux$3782 [2], \$auto$rtlil.cc:2874:Mux$3782 [2], \$auto$rtlil.cc:2874:Mux$3782 [2] }),
    .Y(mem_n)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3750  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3752  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3771  (
    .A(push_i),
    .B(\$auto$builder.cc:364:Unop$3770 ),
    .Y(\$auto$builder.cc:338:Biop$3772 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3789  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$3790 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3800  (
    .A(pop_i),
    .B(\$auto$builder.cc:364:Unop$3799 ),
    .Y(\$auto$builder.cc:338:Biop$3801 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$3811  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:2874:Mux$18151 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3815  (
    .A(push_i),
    .B(pop_i),
    .Y(\$auto$builder.cc:338:Biop$3816 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3819  (
    .A(\$auto$builder.cc:338:Biop$3816 ),
    .B(\$auto$builder.cc:364:Unop$3770 ),
    .Y(\$auto$builder.cc:338:Biop$3820 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3823  (
    .A(\$auto$builder.cc:338:Biop$3820 ),
    .B(\$auto$builder.cc:364:Unop$3799 ),
    .Y(\$auto$builder.cc:338:Biop$3824 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$3769  (
    .A(full_o),
    .Y(\$auto$builder.cc:364:Unop$3770 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$3798  (
    .A(empty_o),
    .Y(\$auto$builder.cc:364:Unop$3799 )
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17827  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$3845 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17828 ),
    .Q(write_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17830  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$3846 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17835 ),
    .Q(status_cnt_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17840  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$auto$builder.cc:338:Biop$3772 ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17829  (
    .A({ \$auto$builder.cc:338:Biop$3772 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17828 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17832  (
    .A({ \$auto$builder.cc:338:Biop$3824 , \$auto$builder.cc:338:Biop$3801 , \$auto$builder.cc:338:Biop$3772 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17831 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17834  (
    .A({ \$auto$builder.cc:338:Biop$3824 , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17833 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17836  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17831 , \$auto$opt_dff.cc:194:make_patterns_logic$17833  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17835 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18150  (
    .A(\$auto$builder.cc:338:Biop$3801 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18151 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14961  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$3846 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14964  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$3845 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:81.17-81.38|../rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15000  (
    .A(write_pointer_q),
    .B(\$auto$builder.cc:338:Biop$3790 ),
    .Y(write_pointer_n)
  );
  assign \$auto$rtlil.cc:2874:Mux$18151 [0] = 1'h1;
  assign \$auto$rtlil.cc:2874:Mux$3782 [1:0] = { \$auto$rtlil.cc:2874:Mux$3782 [2], \$auto$rtlil.cc:2874:Mux$3782 [2] };
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "../rtl/common_cells/fifo_v3.sv:15.8" */
module \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$5961 ;
  wire \$auto$builder.cc:338:Biop$5979 ;
  wire \$auto$builder.cc:338:Biop$5990 ;
  wire \$auto$builder.cc:338:Biop$6005 ;
  wire \$auto$builder.cc:338:Biop$6009 ;
  wire \$auto$builder.cc:338:Biop$6013 ;
  wire \$auto$builder.cc:364:Unop$5959 ;
  wire \$auto$builder.cc:364:Unop$5988 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17842 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17845 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17847 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17849 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18156 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$5971 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$6035 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$6034 ;
  /* src = "../rtl/common_cells/fifo_v3.sv:23.19" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:32.19" */
  input [2:0] data_i;
  wire [2:0] data_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:35.19" */
  output [2:0] data_o;
  wire [2:0] data_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:29.19" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:25.19" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:28.19" */
  output full_o;
  wire full_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.29" */
  wire [2:0] mem_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:49.36" */
  wire [2:0] mem_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:36.19" */
  input pop_i;
  wire pop_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:33.19" */
  input push_i;
  wire push_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:24.19" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.26" */
  wire [1:0] status_cnt_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:47.40" */
  wire [1:0] status_cnt_q;
  /* src = "../rtl/common_cells/fifo_v3.sv:26.19" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/common_cells/fifo_v3.sv:30.36" */
  output usage_o;
  wire usage_o;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.62" */
  wire write_pointer_n;
  /* src = "../rtl/common_cells/fifo_v3.sv:44.79" */
  wire write_pointer_q;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:112:Mux$5970  (
    .A(write_pointer_q),
    .Y(\$auto$rtlil.cc:2874:Mux$5971 [2])
  );
  \$bwmux  #(
    .WIDTH(32'd3)
  ) \$auto$builder.cc:128:Bwmux$5972  (
    .A(mem_q),
    .B(data_i),
    .S({ \$auto$rtlil.cc:2874:Mux$5971 [2], \$auto$rtlil.cc:2874:Mux$5971 [2], \$auto$rtlil.cc:2874:Mux$5971 [2] }),
    .Y(mem_n)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5939  (
    .A(status_cnt_q),
    .B(1'h1),
    .Y(full_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5941  (
    .A(status_cnt_q),
    .Y(empty_o)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5960  (
    .A(push_i),
    .B(\$auto$builder.cc:364:Unop$5959 ),
    .Y(\$auto$builder.cc:338:Biop$5961 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5978  (
    .A(write_pointer_q),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$5979 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5989  (
    .A(pop_i),
    .B(\$auto$builder.cc:364:Unop$5988 ),
    .Y(\$auto$builder.cc:338:Biop$5990 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$6000  (
    .A(status_cnt_q),
    .B({ \$auto$rtlil.cc:2874:Mux$18156 [1], 1'h1 }),
    .Y(status_cnt_n)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6004  (
    .A(push_i),
    .B(pop_i),
    .Y(\$auto$builder.cc:338:Biop$6005 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6008  (
    .A(\$auto$builder.cc:338:Biop$6005 ),
    .B(\$auto$builder.cc:364:Unop$5959 ),
    .Y(\$auto$builder.cc:338:Biop$6009 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6012  (
    .A(\$auto$builder.cc:338:Biop$6009 ),
    .B(\$auto$builder.cc:364:Unop$5988 ),
    .Y(\$auto$builder.cc:338:Biop$6013 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$5958  (
    .A(full_o),
    .Y(\$auto$builder.cc:364:Unop$5959 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$5987  (
    .A(empty_o),
    .Y(\$auto$builder.cc:364:Unop$5988 )
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17841  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$6034 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17842 ),
    .Q(write_pointer_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:116.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17844  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$6035 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17849 ),
    .Q(status_cnt_q)
  );
  /* src = "../rtl/common_cells/fifo_v3.sv:134.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17854  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(mem_n),
    .EN(\$auto$builder.cc:338:Biop$5961 ),
    .Q(mem_q)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17843  (
    .A({ \$auto$builder.cc:338:Biop$5961 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17842 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17846  (
    .A({ \$auto$builder.cc:338:Biop$6013 , \$auto$builder.cc:338:Biop$5990 , \$auto$builder.cc:338:Biop$5961 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17845 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17848  (
    .A({ \$auto$builder.cc:338:Biop$6013 , flush_i }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17847 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17850  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$17847 , \$auto$opt_dff.cc:194:make_patterns_logic$17845  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17849 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18155  (
    .A(\$auto$builder.cc:338:Biop$5990 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18156 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$14127  (
    .A(status_cnt_n),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\status_cnt_q$6035 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14130  (
    .A(write_pointer_n),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\write_pointer_q$6034 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/fifo_v3.sv:81.17-81.38|../rtl/common_cells/fifo_v3.sv:80.13-83.55" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14166  (
    .A(write_pointer_q),
    .B(\$auto$builder.cc:338:Biop$5979 ),
    .Y(write_pointer_n)
  );
  assign \$auto$rtlil.cc:2874:Mux$18156 [0] = 1'h1;
  assign \$auto$rtlil.cc:2874:Mux$5971 [1:0] = { \$auto$rtlil.cc:2874:Mux$5971 [2], \$auto$rtlil.cc:2874:Mux$5971 [2] };
  assign data_o = mem_q;
  assign usage_o = status_cnt_q[0];
endmodule

/* src = "../rtl/gpio/gpio.sv:12.8" */
module \gpio$croc_chip.i_croc_soc.i_croc.i_gpio (clk_i, rst_ni, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, obi_req_i, obi_rsp_o, interrupt_o);
  wire \$auto$builder.cc:338:Biop$1312 ;
  wire \$auto$builder.cc:338:Biop$1319 ;
  wire \$auto$builder.cc:338:Biop$1351 ;
  wire \$auto$builder.cc:338:Biop$1358 ;
  wire \$auto$builder.cc:338:Biop$1390 ;
  wire \$auto$builder.cc:338:Biop$1397 ;
  wire \$auto$builder.cc:338:Biop$1429 ;
  wire \$auto$builder.cc:338:Biop$1436 ;
  wire \$auto$builder.cc:338:Biop$1468 ;
  wire \$auto$builder.cc:338:Biop$1475 ;
  wire \$auto$builder.cc:338:Biop$1507 ;
  wire \$auto$builder.cc:338:Biop$1514 ;
  wire \$auto$builder.cc:338:Biop$1546 ;
  wire \$auto$builder.cc:338:Biop$1553 ;
  wire \$auto$builder.cc:338:Biop$1585 ;
  wire \$auto$builder.cc:338:Biop$1592 ;
  wire \$auto$builder.cc:338:Biop$1624 ;
  wire \$auto$builder.cc:338:Biop$1631 ;
  wire \$auto$builder.cc:338:Biop$1663 ;
  wire \$auto$builder.cc:338:Biop$1670 ;
  wire \$auto$builder.cc:338:Biop$1702 ;
  wire \$auto$builder.cc:338:Biop$1709 ;
  wire \$auto$builder.cc:338:Biop$1741 ;
  wire \$auto$builder.cc:338:Biop$1748 ;
  wire \$auto$builder.cc:338:Biop$1780 ;
  wire \$auto$builder.cc:338:Biop$1787 ;
  wire \$auto$builder.cc:338:Biop$1819 ;
  wire \$auto$builder.cc:338:Biop$1826 ;
  wire \$auto$builder.cc:338:Biop$1858 ;
  wire \$auto$builder.cc:338:Biop$1865 ;
  wire \$auto$builder.cc:338:Biop$1897 ;
  wire \$auto$builder.cc:338:Biop$1904 ;
  wire \$auto$builder.cc:338:Biop$1936 ;
  wire \$auto$builder.cc:338:Biop$1943 ;
  wire \$auto$builder.cc:338:Biop$1975 ;
  wire \$auto$builder.cc:338:Biop$1982 ;
  wire \$auto$builder.cc:338:Biop$2014 ;
  wire \$auto$builder.cc:338:Biop$2021 ;
  wire \$auto$builder.cc:338:Biop$2053 ;
  wire \$auto$builder.cc:338:Biop$2060 ;
  wire \$auto$builder.cc:338:Biop$2092 ;
  wire \$auto$builder.cc:338:Biop$2099 ;
  wire \$auto$builder.cc:338:Biop$2131 ;
  wire \$auto$builder.cc:338:Biop$2138 ;
  wire \$auto$builder.cc:338:Biop$2170 ;
  wire \$auto$builder.cc:338:Biop$2177 ;
  wire \$auto$builder.cc:338:Biop$2209 ;
  wire \$auto$builder.cc:338:Biop$2216 ;
  wire \$auto$builder.cc:338:Biop$2248 ;
  wire \$auto$builder.cc:338:Biop$2255 ;
  wire \$auto$builder.cc:338:Biop$2287 ;
  wire \$auto$builder.cc:338:Biop$2294 ;
  wire \$auto$builder.cc:338:Biop$2326 ;
  wire \$auto$builder.cc:338:Biop$2333 ;
  wire \$auto$builder.cc:338:Biop$2365 ;
  wire \$auto$builder.cc:338:Biop$2372 ;
  wire \$auto$builder.cc:338:Biop$2404 ;
  wire \$auto$builder.cc:338:Biop$2411 ;
  wire \$auto$builder.cc:338:Biop$2443 ;
  wire \$auto$builder.cc:338:Biop$2450 ;
  wire \$auto$builder.cc:338:Biop$2482 ;
  wire \$auto$builder.cc:338:Biop$2489 ;
  wire \$auto$builder.cc:338:Biop$2521 ;
  wire \$auto$builder.cc:338:Biop$2528 ;
  wire \$auto$builder.cc:338:Biop$2539 ;
  wire \$auto$builder.cc:338:Biop$2542 ;
  wire \$auto$builder.cc:338:Biop$2545 ;
  wire \$auto$builder.cc:338:Biop$2548 ;
  wire \$auto$builder.cc:338:Biop$2551 ;
  wire \$auto$builder.cc:338:Biop$2554 ;
  wire \$auto$builder.cc:338:Biop$2557 ;
  wire \$auto$builder.cc:338:Biop$2560 ;
  wire \$auto$builder.cc:338:Biop$2563 ;
  wire \$auto$builder.cc:338:Biop$2566 ;
  wire \$auto$builder.cc:338:Biop$2569 ;
  wire \$auto$builder.cc:338:Biop$2572 ;
  wire \$auto$builder.cc:338:Biop$2575 ;
  wire \$auto$builder.cc:338:Biop$2578 ;
  wire \$auto$builder.cc:338:Biop$2581 ;
  wire \$auto$builder.cc:338:Biop$2584 ;
  wire \$auto$builder.cc:338:Biop$2587 ;
  wire \$auto$builder.cc:338:Biop$2590 ;
  wire \$auto$builder.cc:338:Biop$2593 ;
  wire \$auto$builder.cc:338:Biop$2596 ;
  wire \$auto$builder.cc:338:Biop$2599 ;
  wire \$auto$builder.cc:338:Biop$2602 ;
  wire \$auto$builder.cc:338:Biop$2605 ;
  wire \$auto$builder.cc:338:Biop$2608 ;
  wire \$auto$builder.cc:338:Biop$2611 ;
  wire \$auto$builder.cc:338:Biop$2614 ;
  wire \$auto$builder.cc:338:Biop$2617 ;
  wire \$auto$builder.cc:338:Biop$2620 ;
  wire \$auto$builder.cc:338:Biop$2623 ;
  wire \$auto$builder.cc:338:Biop$2626 ;
  wire \$auto$builder.cc:364:Unop$1289 ;
  wire \$auto$builder.cc:364:Unop$1293 ;
  wire \$auto$builder.cc:364:Unop$1301 ;
  wire \$auto$builder.cc:364:Unop$1316 ;
  wire \$auto$builder.cc:364:Unop$1328 ;
  wire \$auto$builder.cc:364:Unop$1332 ;
  wire \$auto$builder.cc:364:Unop$1340 ;
  wire \$auto$builder.cc:364:Unop$1355 ;
  wire \$auto$builder.cc:364:Unop$1367 ;
  wire \$auto$builder.cc:364:Unop$1371 ;
  wire \$auto$builder.cc:364:Unop$1379 ;
  wire \$auto$builder.cc:364:Unop$1394 ;
  wire \$auto$builder.cc:364:Unop$1406 ;
  wire \$auto$builder.cc:364:Unop$1410 ;
  wire \$auto$builder.cc:364:Unop$1418 ;
  wire \$auto$builder.cc:364:Unop$1433 ;
  wire \$auto$builder.cc:364:Unop$1445 ;
  wire \$auto$builder.cc:364:Unop$1449 ;
  wire \$auto$builder.cc:364:Unop$1457 ;
  wire \$auto$builder.cc:364:Unop$1472 ;
  wire \$auto$builder.cc:364:Unop$1484 ;
  wire \$auto$builder.cc:364:Unop$1488 ;
  wire \$auto$builder.cc:364:Unop$1496 ;
  wire \$auto$builder.cc:364:Unop$1511 ;
  wire \$auto$builder.cc:364:Unop$1523 ;
  wire \$auto$builder.cc:364:Unop$1527 ;
  wire \$auto$builder.cc:364:Unop$1535 ;
  wire \$auto$builder.cc:364:Unop$1550 ;
  wire \$auto$builder.cc:364:Unop$1562 ;
  wire \$auto$builder.cc:364:Unop$1566 ;
  wire \$auto$builder.cc:364:Unop$1574 ;
  wire \$auto$builder.cc:364:Unop$1589 ;
  wire \$auto$builder.cc:364:Unop$1601 ;
  wire \$auto$builder.cc:364:Unop$1605 ;
  wire \$auto$builder.cc:364:Unop$1613 ;
  wire \$auto$builder.cc:364:Unop$1628 ;
  wire \$auto$builder.cc:364:Unop$1640 ;
  wire \$auto$builder.cc:364:Unop$1644 ;
  wire \$auto$builder.cc:364:Unop$1652 ;
  wire \$auto$builder.cc:364:Unop$1667 ;
  wire \$auto$builder.cc:364:Unop$1679 ;
  wire \$auto$builder.cc:364:Unop$1683 ;
  wire \$auto$builder.cc:364:Unop$1691 ;
  wire \$auto$builder.cc:364:Unop$1706 ;
  wire \$auto$builder.cc:364:Unop$1718 ;
  wire \$auto$builder.cc:364:Unop$1722 ;
  wire \$auto$builder.cc:364:Unop$1730 ;
  wire \$auto$builder.cc:364:Unop$1745 ;
  wire \$auto$builder.cc:364:Unop$1757 ;
  wire \$auto$builder.cc:364:Unop$1761 ;
  wire \$auto$builder.cc:364:Unop$1769 ;
  wire \$auto$builder.cc:364:Unop$1784 ;
  wire \$auto$builder.cc:364:Unop$1796 ;
  wire \$auto$builder.cc:364:Unop$1800 ;
  wire \$auto$builder.cc:364:Unop$1808 ;
  wire \$auto$builder.cc:364:Unop$1823 ;
  wire \$auto$builder.cc:364:Unop$1835 ;
  wire \$auto$builder.cc:364:Unop$1839 ;
  wire \$auto$builder.cc:364:Unop$1847 ;
  wire \$auto$builder.cc:364:Unop$1862 ;
  wire \$auto$builder.cc:364:Unop$1874 ;
  wire \$auto$builder.cc:364:Unop$1878 ;
  wire \$auto$builder.cc:364:Unop$1886 ;
  wire \$auto$builder.cc:364:Unop$1901 ;
  wire \$auto$builder.cc:364:Unop$1913 ;
  wire \$auto$builder.cc:364:Unop$1917 ;
  wire \$auto$builder.cc:364:Unop$1925 ;
  wire \$auto$builder.cc:364:Unop$1940 ;
  wire \$auto$builder.cc:364:Unop$1952 ;
  wire \$auto$builder.cc:364:Unop$1956 ;
  wire \$auto$builder.cc:364:Unop$1964 ;
  wire \$auto$builder.cc:364:Unop$1979 ;
  wire \$auto$builder.cc:364:Unop$1991 ;
  wire \$auto$builder.cc:364:Unop$1995 ;
  wire \$auto$builder.cc:364:Unop$2003 ;
  wire \$auto$builder.cc:364:Unop$2018 ;
  wire \$auto$builder.cc:364:Unop$2030 ;
  wire \$auto$builder.cc:364:Unop$2034 ;
  wire \$auto$builder.cc:364:Unop$2042 ;
  wire \$auto$builder.cc:364:Unop$2057 ;
  wire \$auto$builder.cc:364:Unop$2069 ;
  wire \$auto$builder.cc:364:Unop$2073 ;
  wire \$auto$builder.cc:364:Unop$2081 ;
  wire \$auto$builder.cc:364:Unop$2096 ;
  wire \$auto$builder.cc:364:Unop$2108 ;
  wire \$auto$builder.cc:364:Unop$2112 ;
  wire \$auto$builder.cc:364:Unop$2120 ;
  wire \$auto$builder.cc:364:Unop$2135 ;
  wire \$auto$builder.cc:364:Unop$2147 ;
  wire \$auto$builder.cc:364:Unop$2151 ;
  wire \$auto$builder.cc:364:Unop$2159 ;
  wire \$auto$builder.cc:364:Unop$2174 ;
  wire \$auto$builder.cc:364:Unop$2186 ;
  wire \$auto$builder.cc:364:Unop$2190 ;
  wire \$auto$builder.cc:364:Unop$2198 ;
  wire \$auto$builder.cc:364:Unop$2213 ;
  wire \$auto$builder.cc:364:Unop$2225 ;
  wire \$auto$builder.cc:364:Unop$2229 ;
  wire \$auto$builder.cc:364:Unop$2237 ;
  wire \$auto$builder.cc:364:Unop$2252 ;
  wire \$auto$builder.cc:364:Unop$2264 ;
  wire \$auto$builder.cc:364:Unop$2268 ;
  wire \$auto$builder.cc:364:Unop$2276 ;
  wire \$auto$builder.cc:364:Unop$2291 ;
  wire \$auto$builder.cc:364:Unop$2303 ;
  wire \$auto$builder.cc:364:Unop$2307 ;
  wire \$auto$builder.cc:364:Unop$2315 ;
  wire \$auto$builder.cc:364:Unop$2330 ;
  wire \$auto$builder.cc:364:Unop$2342 ;
  wire \$auto$builder.cc:364:Unop$2346 ;
  wire \$auto$builder.cc:364:Unop$2354 ;
  wire \$auto$builder.cc:364:Unop$2369 ;
  wire \$auto$builder.cc:364:Unop$2381 ;
  wire \$auto$builder.cc:364:Unop$2385 ;
  wire \$auto$builder.cc:364:Unop$2393 ;
  wire \$auto$builder.cc:364:Unop$2408 ;
  wire \$auto$builder.cc:364:Unop$2420 ;
  wire \$auto$builder.cc:364:Unop$2424 ;
  wire \$auto$builder.cc:364:Unop$2432 ;
  wire \$auto$builder.cc:364:Unop$2447 ;
  wire \$auto$builder.cc:364:Unop$2459 ;
  wire \$auto$builder.cc:364:Unop$2463 ;
  wire \$auto$builder.cc:364:Unop$2471 ;
  wire \$auto$builder.cc:364:Unop$2486 ;
  wire \$auto$builder.cc:364:Unop$2498 ;
  wire \$auto$builder.cc:364:Unop$2502 ;
  wire \$auto$builder.cc:364:Unop$2510 ;
  wire \$auto$builder.cc:364:Unop$2525 ;
  /* src = "../rtl/gpio/gpio.sv:25.34" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[0].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[0].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[0].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[0].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[0].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[0].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[10].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[10].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[10].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[10].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[10].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[10].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[11].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[11].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[11].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[11].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[11].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[11].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[12].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[12].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[12].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[12].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[12].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[12].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[13].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[13].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[13].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[13].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[13].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[13].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[14].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[14].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[14].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[14].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[14].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[14].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[15].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[15].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[15].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[15].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[15].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[15].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[16].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[16].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[16].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[16].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[16].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[16].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[17].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[17].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[17].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[17].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[17].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[17].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[18].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[18].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[18].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[18].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[18].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[18].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[19].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[19].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[19].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[19].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[19].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[19].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[1].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[1].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[1].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[1].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[1].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[1].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[20].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[20].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[20].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[20].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[20].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[20].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[21].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[21].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[21].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[21].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[21].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[21].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[22].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[22].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[22].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[22].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[22].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[22].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[23].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[23].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[23].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[23].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[23].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[23].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[24].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[24].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[24].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[24].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[24].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[24].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[25].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[25].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[25].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[25].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[25].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[25].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[26].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[26].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[26].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[26].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[26].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[26].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[27].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[27].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[27].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[27].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[27].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[27].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[28].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[28].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[28].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[28].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[28].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[28].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[29].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[29].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[29].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[29].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[29].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[29].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[2].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[2].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[2].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[2].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[2].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[2].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[30].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[30].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[30].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[30].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[30].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[30].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[31].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[31].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[31].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[31].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[31].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[31].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[3].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[3].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[3].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[3].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[3].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[3].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[4].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[4].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[4].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[4].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[4].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[4].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[5].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[5].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[5].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[5].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[5].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[5].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[6].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[6].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[6].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[6].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[6].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[6].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[7].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[7].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[7].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[7].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[7].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[7].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[8].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[8].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[8].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[8].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[8].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[8].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:95.24" */
  wire \gen_gpios[9].f_edge ;
  /* src = "../rtl/gpio/gpio.sv:119.15" */
  wire \gen_gpios[9].is_input ;
  /* src = "../rtl/gpio/gpio.sv:120.15" */
  wire \gen_gpios[9].is_output ;
  /* src = "../rtl/gpio/gpio.sv:96.24" */
  wire \gen_gpios[9].r_edge ;
  /* src = "../rtl/gpio/gpio.sv:97.24" */
  wire \gen_gpios[9].serial_d ;
  /* src = "../rtl/gpio/gpio.sv:97.34" */
  wire \gen_gpios[9].serial_q ;
  /* src = "../rtl/gpio/gpio.sv:64.25" */
  wire [31:0] gpio_edge;
  /* src = "../rtl/gpio/gpio.sv:30.34" */
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  /* src = "../rtl/gpio/gpio.sv:61.25" */
  wire [31:0] gpio_in_sync;
  /* src = "../rtl/gpio/gpio.sv:39.34" */
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  /* src = "../rtl/gpio/gpio.sv:65.25" */
  wire [31:0] gpio_intrpt;
  /* src = "../rtl/gpio/gpio.sv:67.9" */
  wire gpio_intrpt_pending;
  /* src = "../rtl/gpio/gpio.sv:32.34" */
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  /* src = "../rtl/gpio/gpio.sv:36.34" */
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  /* src = "../rtl/gpio/gpio.sv:58.33" */
  wire [159:0] hw2reg;
  /* src = "../rtl/gpio/gpio.sv:42.34" */
  output interrupt_o;
  wire interrupt_o;
  /* src = "../rtl/gpio/gpio.sv:45.34" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "../rtl/gpio/gpio.sv:47.34" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "../rtl/gpio/gpio.sv:57.33" */
  wire [223:0] reg2hw;
  /* src = "../rtl/gpio/gpio.sv:27.34" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1290  (
    .A(\$auto$builder.cc:364:Unop$1289 ),
    .B(\gen_gpios[0].serial_q ),
    .Y(\gen_gpios[0].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1294  (
    .A(\gen_gpios[0].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1293 ),
    .Y(\gen_gpios[0].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1302  (
    .A(reg2hw[5]),
    .B(\$auto$builder.cc:364:Unop$1301 ),
    .Y(\gen_gpios[0].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1304  (
    .A(reg2hw[5]),
    .B(reg2hw[6]),
    .Y(\gen_gpios[0].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1306  (
    .A(\gen_gpios[0].serial_q ),
    .B(\gen_gpios[0].is_input ),
    .Y(hw2reg[4])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1308  (
    .A(reg2hw[4]),
    .B(\gen_gpios[0].is_output ),
    .Y(gpio_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1311  (
    .A(\gen_gpios[0].is_output ),
    .B(reg2hw[3]),
    .Y(\$auto$builder.cc:338:Biop$1312 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1318  (
    .A(gpio_edge[0]),
    .B(reg2hw[2]),
    .Y(\$auto$builder.cc:338:Biop$1319 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1320  (
    .A(\$auto$builder.cc:338:Biop$1319 ),
    .B(\gen_gpios[0].is_input ),
    .Y(hw2reg[1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1329  (
    .A(\$auto$builder.cc:364:Unop$1328 ),
    .B(\gen_gpios[1].serial_q ),
    .Y(\gen_gpios[1].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1333  (
    .A(\gen_gpios[1].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1332 ),
    .Y(\gen_gpios[1].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1341  (
    .A(reg2hw[12]),
    .B(\$auto$builder.cc:364:Unop$1340 ),
    .Y(\gen_gpios[1].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1343  (
    .A(reg2hw[12]),
    .B(reg2hw[13]),
    .Y(\gen_gpios[1].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1345  (
    .A(\gen_gpios[1].serial_q ),
    .B(\gen_gpios[1].is_input ),
    .Y(hw2reg[9])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1347  (
    .A(reg2hw[11]),
    .B(\gen_gpios[1].is_output ),
    .Y(gpio_o[1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1350  (
    .A(\gen_gpios[1].is_output ),
    .B(reg2hw[10]),
    .Y(\$auto$builder.cc:338:Biop$1351 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1357  (
    .A(gpio_edge[1]),
    .B(reg2hw[9]),
    .Y(\$auto$builder.cc:338:Biop$1358 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1359  (
    .A(\$auto$builder.cc:338:Biop$1358 ),
    .B(\gen_gpios[1].is_input ),
    .Y(hw2reg[6])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1368  (
    .A(\$auto$builder.cc:364:Unop$1367 ),
    .B(\gen_gpios[2].serial_q ),
    .Y(\gen_gpios[2].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1372  (
    .A(\gen_gpios[2].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1371 ),
    .Y(\gen_gpios[2].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1380  (
    .A(reg2hw[19]),
    .B(\$auto$builder.cc:364:Unop$1379 ),
    .Y(\gen_gpios[2].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1382  (
    .A(reg2hw[19]),
    .B(reg2hw[20]),
    .Y(\gen_gpios[2].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1384  (
    .A(\gen_gpios[2].serial_q ),
    .B(\gen_gpios[2].is_input ),
    .Y(hw2reg[14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1386  (
    .A(reg2hw[18]),
    .B(\gen_gpios[2].is_output ),
    .Y(gpio_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1389  (
    .A(\gen_gpios[2].is_output ),
    .B(reg2hw[17]),
    .Y(\$auto$builder.cc:338:Biop$1390 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1396  (
    .A(gpio_edge[2]),
    .B(reg2hw[16]),
    .Y(\$auto$builder.cc:338:Biop$1397 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1398  (
    .A(\$auto$builder.cc:338:Biop$1397 ),
    .B(\gen_gpios[2].is_input ),
    .Y(hw2reg[11])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1407  (
    .A(\$auto$builder.cc:364:Unop$1406 ),
    .B(\gen_gpios[3].serial_q ),
    .Y(\gen_gpios[3].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1411  (
    .A(\gen_gpios[3].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1410 ),
    .Y(\gen_gpios[3].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1419  (
    .A(reg2hw[26]),
    .B(\$auto$builder.cc:364:Unop$1418 ),
    .Y(\gen_gpios[3].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1421  (
    .A(reg2hw[26]),
    .B(reg2hw[27]),
    .Y(\gen_gpios[3].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1423  (
    .A(\gen_gpios[3].serial_q ),
    .B(\gen_gpios[3].is_input ),
    .Y(hw2reg[19])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1425  (
    .A(reg2hw[25]),
    .B(\gen_gpios[3].is_output ),
    .Y(gpio_o[3])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1428  (
    .A(\gen_gpios[3].is_output ),
    .B(reg2hw[24]),
    .Y(\$auto$builder.cc:338:Biop$1429 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1435  (
    .A(gpio_edge[3]),
    .B(reg2hw[23]),
    .Y(\$auto$builder.cc:338:Biop$1436 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1437  (
    .A(\$auto$builder.cc:338:Biop$1436 ),
    .B(\gen_gpios[3].is_input ),
    .Y(hw2reg[16])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1446  (
    .A(\$auto$builder.cc:364:Unop$1445 ),
    .B(\gen_gpios[4].serial_q ),
    .Y(\gen_gpios[4].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1450  (
    .A(\gen_gpios[4].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1449 ),
    .Y(\gen_gpios[4].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1458  (
    .A(reg2hw[33]),
    .B(\$auto$builder.cc:364:Unop$1457 ),
    .Y(\gen_gpios[4].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1460  (
    .A(reg2hw[33]),
    .B(reg2hw[34]),
    .Y(\gen_gpios[4].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1462  (
    .A(\gen_gpios[4].serial_q ),
    .B(\gen_gpios[4].is_input ),
    .Y(hw2reg[24])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1464  (
    .A(reg2hw[32]),
    .B(\gen_gpios[4].is_output ),
    .Y(gpio_o[4])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1467  (
    .A(\gen_gpios[4].is_output ),
    .B(reg2hw[31]),
    .Y(\$auto$builder.cc:338:Biop$1468 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1474  (
    .A(gpio_edge[4]),
    .B(reg2hw[30]),
    .Y(\$auto$builder.cc:338:Biop$1475 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1476  (
    .A(\$auto$builder.cc:338:Biop$1475 ),
    .B(\gen_gpios[4].is_input ),
    .Y(hw2reg[21])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1485  (
    .A(\$auto$builder.cc:364:Unop$1484 ),
    .B(\gen_gpios[5].serial_q ),
    .Y(\gen_gpios[5].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1489  (
    .A(\gen_gpios[5].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1488 ),
    .Y(\gen_gpios[5].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1497  (
    .A(reg2hw[40]),
    .B(\$auto$builder.cc:364:Unop$1496 ),
    .Y(\gen_gpios[5].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1499  (
    .A(reg2hw[40]),
    .B(reg2hw[41]),
    .Y(\gen_gpios[5].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1501  (
    .A(\gen_gpios[5].serial_q ),
    .B(\gen_gpios[5].is_input ),
    .Y(hw2reg[29])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1503  (
    .A(reg2hw[39]),
    .B(\gen_gpios[5].is_output ),
    .Y(gpio_o[5])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1506  (
    .A(\gen_gpios[5].is_output ),
    .B(reg2hw[38]),
    .Y(\$auto$builder.cc:338:Biop$1507 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1513  (
    .A(gpio_edge[5]),
    .B(reg2hw[37]),
    .Y(\$auto$builder.cc:338:Biop$1514 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1515  (
    .A(\$auto$builder.cc:338:Biop$1514 ),
    .B(\gen_gpios[5].is_input ),
    .Y(hw2reg[26])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1524  (
    .A(\$auto$builder.cc:364:Unop$1523 ),
    .B(\gen_gpios[6].serial_q ),
    .Y(\gen_gpios[6].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1528  (
    .A(\gen_gpios[6].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1527 ),
    .Y(\gen_gpios[6].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1536  (
    .A(reg2hw[47]),
    .B(\$auto$builder.cc:364:Unop$1535 ),
    .Y(\gen_gpios[6].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1538  (
    .A(reg2hw[47]),
    .B(reg2hw[48]),
    .Y(\gen_gpios[6].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1540  (
    .A(\gen_gpios[6].serial_q ),
    .B(\gen_gpios[6].is_input ),
    .Y(hw2reg[34])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1542  (
    .A(reg2hw[46]),
    .B(\gen_gpios[6].is_output ),
    .Y(gpio_o[6])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1545  (
    .A(\gen_gpios[6].is_output ),
    .B(reg2hw[45]),
    .Y(\$auto$builder.cc:338:Biop$1546 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1552  (
    .A(gpio_edge[6]),
    .B(reg2hw[44]),
    .Y(\$auto$builder.cc:338:Biop$1553 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1554  (
    .A(\$auto$builder.cc:338:Biop$1553 ),
    .B(\gen_gpios[6].is_input ),
    .Y(hw2reg[31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1563  (
    .A(\$auto$builder.cc:364:Unop$1562 ),
    .B(\gen_gpios[7].serial_q ),
    .Y(\gen_gpios[7].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1567  (
    .A(\gen_gpios[7].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1566 ),
    .Y(\gen_gpios[7].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1575  (
    .A(reg2hw[54]),
    .B(\$auto$builder.cc:364:Unop$1574 ),
    .Y(\gen_gpios[7].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1577  (
    .A(reg2hw[54]),
    .B(reg2hw[55]),
    .Y(\gen_gpios[7].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1579  (
    .A(\gen_gpios[7].serial_q ),
    .B(\gen_gpios[7].is_input ),
    .Y(hw2reg[39])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1581  (
    .A(reg2hw[53]),
    .B(\gen_gpios[7].is_output ),
    .Y(gpio_o[7])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1584  (
    .A(\gen_gpios[7].is_output ),
    .B(reg2hw[52]),
    .Y(\$auto$builder.cc:338:Biop$1585 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1591  (
    .A(gpio_edge[7]),
    .B(reg2hw[51]),
    .Y(\$auto$builder.cc:338:Biop$1592 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1593  (
    .A(\$auto$builder.cc:338:Biop$1592 ),
    .B(\gen_gpios[7].is_input ),
    .Y(hw2reg[36])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1602  (
    .A(\$auto$builder.cc:364:Unop$1601 ),
    .B(\gen_gpios[8].serial_q ),
    .Y(\gen_gpios[8].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1606  (
    .A(\gen_gpios[8].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1605 ),
    .Y(\gen_gpios[8].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1614  (
    .A(reg2hw[61]),
    .B(\$auto$builder.cc:364:Unop$1613 ),
    .Y(\gen_gpios[8].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1616  (
    .A(reg2hw[61]),
    .B(reg2hw[62]),
    .Y(\gen_gpios[8].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1618  (
    .A(\gen_gpios[8].serial_q ),
    .B(\gen_gpios[8].is_input ),
    .Y(hw2reg[44])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1620  (
    .A(reg2hw[60]),
    .B(\gen_gpios[8].is_output ),
    .Y(gpio_o[8])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1623  (
    .A(\gen_gpios[8].is_output ),
    .B(reg2hw[59]),
    .Y(\$auto$builder.cc:338:Biop$1624 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1630  (
    .A(gpio_edge[8]),
    .B(reg2hw[58]),
    .Y(\$auto$builder.cc:338:Biop$1631 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1632  (
    .A(\$auto$builder.cc:338:Biop$1631 ),
    .B(\gen_gpios[8].is_input ),
    .Y(hw2reg[41])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1641  (
    .A(\$auto$builder.cc:364:Unop$1640 ),
    .B(\gen_gpios[9].serial_q ),
    .Y(\gen_gpios[9].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1645  (
    .A(\gen_gpios[9].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1644 ),
    .Y(\gen_gpios[9].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1653  (
    .A(reg2hw[68]),
    .B(\$auto$builder.cc:364:Unop$1652 ),
    .Y(\gen_gpios[9].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1655  (
    .A(reg2hw[68]),
    .B(reg2hw[69]),
    .Y(\gen_gpios[9].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1657  (
    .A(\gen_gpios[9].serial_q ),
    .B(\gen_gpios[9].is_input ),
    .Y(hw2reg[49])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1659  (
    .A(reg2hw[67]),
    .B(\gen_gpios[9].is_output ),
    .Y(gpio_o[9])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1662  (
    .A(\gen_gpios[9].is_output ),
    .B(reg2hw[66]),
    .Y(\$auto$builder.cc:338:Biop$1663 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1669  (
    .A(gpio_edge[9]),
    .B(reg2hw[65]),
    .Y(\$auto$builder.cc:338:Biop$1670 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1671  (
    .A(\$auto$builder.cc:338:Biop$1670 ),
    .B(\gen_gpios[9].is_input ),
    .Y(hw2reg[46])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1680  (
    .A(\$auto$builder.cc:364:Unop$1679 ),
    .B(\gen_gpios[10].serial_q ),
    .Y(\gen_gpios[10].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1684  (
    .A(\gen_gpios[10].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1683 ),
    .Y(\gen_gpios[10].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1692  (
    .A(reg2hw[75]),
    .B(\$auto$builder.cc:364:Unop$1691 ),
    .Y(\gen_gpios[10].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1694  (
    .A(reg2hw[75]),
    .B(reg2hw[76]),
    .Y(\gen_gpios[10].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1696  (
    .A(\gen_gpios[10].serial_q ),
    .B(\gen_gpios[10].is_input ),
    .Y(hw2reg[54])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1698  (
    .A(reg2hw[74]),
    .B(\gen_gpios[10].is_output ),
    .Y(gpio_o[10])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1701  (
    .A(\gen_gpios[10].is_output ),
    .B(reg2hw[73]),
    .Y(\$auto$builder.cc:338:Biop$1702 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1708  (
    .A(gpio_edge[10]),
    .B(reg2hw[72]),
    .Y(\$auto$builder.cc:338:Biop$1709 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1710  (
    .A(\$auto$builder.cc:338:Biop$1709 ),
    .B(\gen_gpios[10].is_input ),
    .Y(hw2reg[51])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1719  (
    .A(\$auto$builder.cc:364:Unop$1718 ),
    .B(\gen_gpios[11].serial_q ),
    .Y(\gen_gpios[11].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1723  (
    .A(\gen_gpios[11].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1722 ),
    .Y(\gen_gpios[11].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1731  (
    .A(reg2hw[82]),
    .B(\$auto$builder.cc:364:Unop$1730 ),
    .Y(\gen_gpios[11].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1733  (
    .A(reg2hw[82]),
    .B(reg2hw[83]),
    .Y(\gen_gpios[11].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1735  (
    .A(\gen_gpios[11].serial_q ),
    .B(\gen_gpios[11].is_input ),
    .Y(hw2reg[59])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1737  (
    .A(reg2hw[81]),
    .B(\gen_gpios[11].is_output ),
    .Y(gpio_o[11])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1740  (
    .A(\gen_gpios[11].is_output ),
    .B(reg2hw[80]),
    .Y(\$auto$builder.cc:338:Biop$1741 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1747  (
    .A(gpio_edge[11]),
    .B(reg2hw[79]),
    .Y(\$auto$builder.cc:338:Biop$1748 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1749  (
    .A(\$auto$builder.cc:338:Biop$1748 ),
    .B(\gen_gpios[11].is_input ),
    .Y(hw2reg[56])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1758  (
    .A(\$auto$builder.cc:364:Unop$1757 ),
    .B(\gen_gpios[12].serial_q ),
    .Y(\gen_gpios[12].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1762  (
    .A(\gen_gpios[12].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1761 ),
    .Y(\gen_gpios[12].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1770  (
    .A(reg2hw[89]),
    .B(\$auto$builder.cc:364:Unop$1769 ),
    .Y(\gen_gpios[12].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1772  (
    .A(reg2hw[89]),
    .B(reg2hw[90]),
    .Y(\gen_gpios[12].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1774  (
    .A(\gen_gpios[12].serial_q ),
    .B(\gen_gpios[12].is_input ),
    .Y(hw2reg[64])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1776  (
    .A(reg2hw[88]),
    .B(\gen_gpios[12].is_output ),
    .Y(gpio_o[12])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1779  (
    .A(\gen_gpios[12].is_output ),
    .B(reg2hw[87]),
    .Y(\$auto$builder.cc:338:Biop$1780 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1786  (
    .A(gpio_edge[12]),
    .B(reg2hw[86]),
    .Y(\$auto$builder.cc:338:Biop$1787 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1788  (
    .A(\$auto$builder.cc:338:Biop$1787 ),
    .B(\gen_gpios[12].is_input ),
    .Y(hw2reg[61])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1797  (
    .A(\$auto$builder.cc:364:Unop$1796 ),
    .B(\gen_gpios[13].serial_q ),
    .Y(\gen_gpios[13].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1801  (
    .A(\gen_gpios[13].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1800 ),
    .Y(\gen_gpios[13].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1809  (
    .A(reg2hw[96]),
    .B(\$auto$builder.cc:364:Unop$1808 ),
    .Y(\gen_gpios[13].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1811  (
    .A(reg2hw[96]),
    .B(reg2hw[97]),
    .Y(\gen_gpios[13].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1813  (
    .A(\gen_gpios[13].serial_q ),
    .B(\gen_gpios[13].is_input ),
    .Y(hw2reg[69])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1815  (
    .A(reg2hw[95]),
    .B(\gen_gpios[13].is_output ),
    .Y(gpio_o[13])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1818  (
    .A(\gen_gpios[13].is_output ),
    .B(reg2hw[94]),
    .Y(\$auto$builder.cc:338:Biop$1819 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1825  (
    .A(gpio_edge[13]),
    .B(reg2hw[93]),
    .Y(\$auto$builder.cc:338:Biop$1826 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1827  (
    .A(\$auto$builder.cc:338:Biop$1826 ),
    .B(\gen_gpios[13].is_input ),
    .Y(hw2reg[66])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1836  (
    .A(\$auto$builder.cc:364:Unop$1835 ),
    .B(\gen_gpios[14].serial_q ),
    .Y(\gen_gpios[14].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1840  (
    .A(\gen_gpios[14].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1839 ),
    .Y(\gen_gpios[14].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1848  (
    .A(reg2hw[103]),
    .B(\$auto$builder.cc:364:Unop$1847 ),
    .Y(\gen_gpios[14].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1850  (
    .A(reg2hw[103]),
    .B(reg2hw[104]),
    .Y(\gen_gpios[14].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1852  (
    .A(\gen_gpios[14].serial_q ),
    .B(\gen_gpios[14].is_input ),
    .Y(hw2reg[74])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1854  (
    .A(reg2hw[102]),
    .B(\gen_gpios[14].is_output ),
    .Y(gpio_o[14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1857  (
    .A(\gen_gpios[14].is_output ),
    .B(reg2hw[101]),
    .Y(\$auto$builder.cc:338:Biop$1858 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1864  (
    .A(gpio_edge[14]),
    .B(reg2hw[100]),
    .Y(\$auto$builder.cc:338:Biop$1865 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1866  (
    .A(\$auto$builder.cc:338:Biop$1865 ),
    .B(\gen_gpios[14].is_input ),
    .Y(hw2reg[71])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1875  (
    .A(\$auto$builder.cc:364:Unop$1874 ),
    .B(\gen_gpios[15].serial_q ),
    .Y(\gen_gpios[15].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1879  (
    .A(\gen_gpios[15].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1878 ),
    .Y(\gen_gpios[15].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1887  (
    .A(reg2hw[110]),
    .B(\$auto$builder.cc:364:Unop$1886 ),
    .Y(\gen_gpios[15].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1889  (
    .A(reg2hw[110]),
    .B(reg2hw[111]),
    .Y(\gen_gpios[15].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1891  (
    .A(\gen_gpios[15].serial_q ),
    .B(\gen_gpios[15].is_input ),
    .Y(hw2reg[79])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1893  (
    .A(reg2hw[109]),
    .B(\gen_gpios[15].is_output ),
    .Y(gpio_o[15])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1896  (
    .A(\gen_gpios[15].is_output ),
    .B(reg2hw[108]),
    .Y(\$auto$builder.cc:338:Biop$1897 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1903  (
    .A(gpio_edge[15]),
    .B(reg2hw[107]),
    .Y(\$auto$builder.cc:338:Biop$1904 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1905  (
    .A(\$auto$builder.cc:338:Biop$1904 ),
    .B(\gen_gpios[15].is_input ),
    .Y(hw2reg[76])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1914  (
    .A(\$auto$builder.cc:364:Unop$1913 ),
    .B(\gen_gpios[16].serial_q ),
    .Y(\gen_gpios[16].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1918  (
    .A(\gen_gpios[16].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1917 ),
    .Y(\gen_gpios[16].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1926  (
    .A(reg2hw[117]),
    .B(\$auto$builder.cc:364:Unop$1925 ),
    .Y(\gen_gpios[16].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1928  (
    .A(reg2hw[117]),
    .B(reg2hw[118]),
    .Y(\gen_gpios[16].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1930  (
    .A(\gen_gpios[16].serial_q ),
    .B(\gen_gpios[16].is_input ),
    .Y(hw2reg[84])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1932  (
    .A(reg2hw[116]),
    .B(\gen_gpios[16].is_output ),
    .Y(gpio_o[16])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1935  (
    .A(\gen_gpios[16].is_output ),
    .B(reg2hw[115]),
    .Y(\$auto$builder.cc:338:Biop$1936 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1942  (
    .A(gpio_edge[16]),
    .B(reg2hw[114]),
    .Y(\$auto$builder.cc:338:Biop$1943 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1944  (
    .A(\$auto$builder.cc:338:Biop$1943 ),
    .B(\gen_gpios[16].is_input ),
    .Y(hw2reg[81])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1953  (
    .A(\$auto$builder.cc:364:Unop$1952 ),
    .B(\gen_gpios[17].serial_q ),
    .Y(\gen_gpios[17].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1957  (
    .A(\gen_gpios[17].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1956 ),
    .Y(\gen_gpios[17].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1965  (
    .A(reg2hw[124]),
    .B(\$auto$builder.cc:364:Unop$1964 ),
    .Y(\gen_gpios[17].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1967  (
    .A(reg2hw[124]),
    .B(reg2hw[125]),
    .Y(\gen_gpios[17].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1969  (
    .A(\gen_gpios[17].serial_q ),
    .B(\gen_gpios[17].is_input ),
    .Y(hw2reg[89])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1971  (
    .A(reg2hw[123]),
    .B(\gen_gpios[17].is_output ),
    .Y(gpio_o[17])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1974  (
    .A(\gen_gpios[17].is_output ),
    .B(reg2hw[122]),
    .Y(\$auto$builder.cc:338:Biop$1975 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1981  (
    .A(gpio_edge[17]),
    .B(reg2hw[121]),
    .Y(\$auto$builder.cc:338:Biop$1982 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1983  (
    .A(\$auto$builder.cc:338:Biop$1982 ),
    .B(\gen_gpios[17].is_input ),
    .Y(hw2reg[86])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1992  (
    .A(\$auto$builder.cc:364:Unop$1991 ),
    .B(\gen_gpios[18].serial_q ),
    .Y(\gen_gpios[18].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1996  (
    .A(\gen_gpios[18].serial_d ),
    .B(\$auto$builder.cc:364:Unop$1995 ),
    .Y(\gen_gpios[18].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2004  (
    .A(reg2hw[131]),
    .B(\$auto$builder.cc:364:Unop$2003 ),
    .Y(\gen_gpios[18].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2006  (
    .A(reg2hw[131]),
    .B(reg2hw[132]),
    .Y(\gen_gpios[18].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2008  (
    .A(\gen_gpios[18].serial_q ),
    .B(\gen_gpios[18].is_input ),
    .Y(hw2reg[94])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2010  (
    .A(reg2hw[130]),
    .B(\gen_gpios[18].is_output ),
    .Y(gpio_o[18])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2013  (
    .A(\gen_gpios[18].is_output ),
    .B(reg2hw[129]),
    .Y(\$auto$builder.cc:338:Biop$2014 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2020  (
    .A(gpio_edge[18]),
    .B(reg2hw[128]),
    .Y(\$auto$builder.cc:338:Biop$2021 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2022  (
    .A(\$auto$builder.cc:338:Biop$2021 ),
    .B(\gen_gpios[18].is_input ),
    .Y(hw2reg[91])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2031  (
    .A(\$auto$builder.cc:364:Unop$2030 ),
    .B(\gen_gpios[19].serial_q ),
    .Y(\gen_gpios[19].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2035  (
    .A(\gen_gpios[19].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2034 ),
    .Y(\gen_gpios[19].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2043  (
    .A(reg2hw[138]),
    .B(\$auto$builder.cc:364:Unop$2042 ),
    .Y(\gen_gpios[19].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2045  (
    .A(reg2hw[138]),
    .B(reg2hw[139]),
    .Y(\gen_gpios[19].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2047  (
    .A(\gen_gpios[19].serial_q ),
    .B(\gen_gpios[19].is_input ),
    .Y(hw2reg[99])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2049  (
    .A(reg2hw[137]),
    .B(\gen_gpios[19].is_output ),
    .Y(gpio_o[19])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2052  (
    .A(\gen_gpios[19].is_output ),
    .B(reg2hw[136]),
    .Y(\$auto$builder.cc:338:Biop$2053 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2059  (
    .A(gpio_edge[19]),
    .B(reg2hw[135]),
    .Y(\$auto$builder.cc:338:Biop$2060 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2061  (
    .A(\$auto$builder.cc:338:Biop$2060 ),
    .B(\gen_gpios[19].is_input ),
    .Y(hw2reg[96])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2070  (
    .A(\$auto$builder.cc:364:Unop$2069 ),
    .B(\gen_gpios[20].serial_q ),
    .Y(\gen_gpios[20].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2074  (
    .A(\gen_gpios[20].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2073 ),
    .Y(\gen_gpios[20].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2082  (
    .A(reg2hw[145]),
    .B(\$auto$builder.cc:364:Unop$2081 ),
    .Y(\gen_gpios[20].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2084  (
    .A(reg2hw[145]),
    .B(reg2hw[146]),
    .Y(\gen_gpios[20].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2086  (
    .A(\gen_gpios[20].serial_q ),
    .B(\gen_gpios[20].is_input ),
    .Y(hw2reg[104])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2088  (
    .A(reg2hw[144]),
    .B(\gen_gpios[20].is_output ),
    .Y(gpio_o[20])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2091  (
    .A(\gen_gpios[20].is_output ),
    .B(reg2hw[143]),
    .Y(\$auto$builder.cc:338:Biop$2092 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2098  (
    .A(gpio_edge[20]),
    .B(reg2hw[142]),
    .Y(\$auto$builder.cc:338:Biop$2099 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2100  (
    .A(\$auto$builder.cc:338:Biop$2099 ),
    .B(\gen_gpios[20].is_input ),
    .Y(hw2reg[101])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2109  (
    .A(\$auto$builder.cc:364:Unop$2108 ),
    .B(\gen_gpios[21].serial_q ),
    .Y(\gen_gpios[21].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2113  (
    .A(\gen_gpios[21].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2112 ),
    .Y(\gen_gpios[21].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2121  (
    .A(reg2hw[152]),
    .B(\$auto$builder.cc:364:Unop$2120 ),
    .Y(\gen_gpios[21].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2123  (
    .A(reg2hw[152]),
    .B(reg2hw[153]),
    .Y(\gen_gpios[21].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2125  (
    .A(\gen_gpios[21].serial_q ),
    .B(\gen_gpios[21].is_input ),
    .Y(hw2reg[109])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2127  (
    .A(reg2hw[151]),
    .B(\gen_gpios[21].is_output ),
    .Y(gpio_o[21])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2130  (
    .A(\gen_gpios[21].is_output ),
    .B(reg2hw[150]),
    .Y(\$auto$builder.cc:338:Biop$2131 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2137  (
    .A(gpio_edge[21]),
    .B(reg2hw[149]),
    .Y(\$auto$builder.cc:338:Biop$2138 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2139  (
    .A(\$auto$builder.cc:338:Biop$2138 ),
    .B(\gen_gpios[21].is_input ),
    .Y(hw2reg[106])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2148  (
    .A(\$auto$builder.cc:364:Unop$2147 ),
    .B(\gen_gpios[22].serial_q ),
    .Y(\gen_gpios[22].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2152  (
    .A(\gen_gpios[22].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2151 ),
    .Y(\gen_gpios[22].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2160  (
    .A(reg2hw[159]),
    .B(\$auto$builder.cc:364:Unop$2159 ),
    .Y(\gen_gpios[22].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2162  (
    .A(reg2hw[159]),
    .B(reg2hw[160]),
    .Y(\gen_gpios[22].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2164  (
    .A(\gen_gpios[22].serial_q ),
    .B(\gen_gpios[22].is_input ),
    .Y(hw2reg[114])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2166  (
    .A(reg2hw[158]),
    .B(\gen_gpios[22].is_output ),
    .Y(gpio_o[22])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2169  (
    .A(\gen_gpios[22].is_output ),
    .B(reg2hw[157]),
    .Y(\$auto$builder.cc:338:Biop$2170 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2176  (
    .A(gpio_edge[22]),
    .B(reg2hw[156]),
    .Y(\$auto$builder.cc:338:Biop$2177 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2178  (
    .A(\$auto$builder.cc:338:Biop$2177 ),
    .B(\gen_gpios[22].is_input ),
    .Y(hw2reg[111])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2187  (
    .A(\$auto$builder.cc:364:Unop$2186 ),
    .B(\gen_gpios[23].serial_q ),
    .Y(\gen_gpios[23].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2191  (
    .A(\gen_gpios[23].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2190 ),
    .Y(\gen_gpios[23].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2199  (
    .A(reg2hw[166]),
    .B(\$auto$builder.cc:364:Unop$2198 ),
    .Y(\gen_gpios[23].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2201  (
    .A(reg2hw[166]),
    .B(reg2hw[167]),
    .Y(\gen_gpios[23].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2203  (
    .A(\gen_gpios[23].serial_q ),
    .B(\gen_gpios[23].is_input ),
    .Y(hw2reg[119])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2205  (
    .A(reg2hw[165]),
    .B(\gen_gpios[23].is_output ),
    .Y(gpio_o[23])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2208  (
    .A(\gen_gpios[23].is_output ),
    .B(reg2hw[164]),
    .Y(\$auto$builder.cc:338:Biop$2209 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2215  (
    .A(gpio_edge[23]),
    .B(reg2hw[163]),
    .Y(\$auto$builder.cc:338:Biop$2216 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2217  (
    .A(\$auto$builder.cc:338:Biop$2216 ),
    .B(\gen_gpios[23].is_input ),
    .Y(hw2reg[116])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2226  (
    .A(\$auto$builder.cc:364:Unop$2225 ),
    .B(\gen_gpios[24].serial_q ),
    .Y(\gen_gpios[24].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2230  (
    .A(\gen_gpios[24].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2229 ),
    .Y(\gen_gpios[24].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2238  (
    .A(reg2hw[173]),
    .B(\$auto$builder.cc:364:Unop$2237 ),
    .Y(\gen_gpios[24].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2240  (
    .A(reg2hw[173]),
    .B(reg2hw[174]),
    .Y(\gen_gpios[24].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2242  (
    .A(\gen_gpios[24].serial_q ),
    .B(\gen_gpios[24].is_input ),
    .Y(hw2reg[124])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2244  (
    .A(reg2hw[172]),
    .B(\gen_gpios[24].is_output ),
    .Y(gpio_o[24])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2247  (
    .A(\gen_gpios[24].is_output ),
    .B(reg2hw[171]),
    .Y(\$auto$builder.cc:338:Biop$2248 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2254  (
    .A(gpio_edge[24]),
    .B(reg2hw[170]),
    .Y(\$auto$builder.cc:338:Biop$2255 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2256  (
    .A(\$auto$builder.cc:338:Biop$2255 ),
    .B(\gen_gpios[24].is_input ),
    .Y(hw2reg[121])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2265  (
    .A(\$auto$builder.cc:364:Unop$2264 ),
    .B(\gen_gpios[25].serial_q ),
    .Y(\gen_gpios[25].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2269  (
    .A(\gen_gpios[25].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2268 ),
    .Y(\gen_gpios[25].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2277  (
    .A(reg2hw[180]),
    .B(\$auto$builder.cc:364:Unop$2276 ),
    .Y(\gen_gpios[25].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2279  (
    .A(reg2hw[180]),
    .B(reg2hw[181]),
    .Y(\gen_gpios[25].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2281  (
    .A(\gen_gpios[25].serial_q ),
    .B(\gen_gpios[25].is_input ),
    .Y(hw2reg[129])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2283  (
    .A(reg2hw[179]),
    .B(\gen_gpios[25].is_output ),
    .Y(gpio_o[25])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2286  (
    .A(\gen_gpios[25].is_output ),
    .B(reg2hw[178]),
    .Y(\$auto$builder.cc:338:Biop$2287 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2293  (
    .A(gpio_edge[25]),
    .B(reg2hw[177]),
    .Y(\$auto$builder.cc:338:Biop$2294 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2295  (
    .A(\$auto$builder.cc:338:Biop$2294 ),
    .B(\gen_gpios[25].is_input ),
    .Y(hw2reg[126])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2304  (
    .A(\$auto$builder.cc:364:Unop$2303 ),
    .B(\gen_gpios[26].serial_q ),
    .Y(\gen_gpios[26].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2308  (
    .A(\gen_gpios[26].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2307 ),
    .Y(\gen_gpios[26].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2316  (
    .A(reg2hw[187]),
    .B(\$auto$builder.cc:364:Unop$2315 ),
    .Y(\gen_gpios[26].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2318  (
    .A(reg2hw[187]),
    .B(reg2hw[188]),
    .Y(\gen_gpios[26].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2320  (
    .A(\gen_gpios[26].serial_q ),
    .B(\gen_gpios[26].is_input ),
    .Y(hw2reg[134])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2322  (
    .A(reg2hw[186]),
    .B(\gen_gpios[26].is_output ),
    .Y(gpio_o[26])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2325  (
    .A(\gen_gpios[26].is_output ),
    .B(reg2hw[185]),
    .Y(\$auto$builder.cc:338:Biop$2326 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2332  (
    .A(gpio_edge[26]),
    .B(reg2hw[184]),
    .Y(\$auto$builder.cc:338:Biop$2333 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2334  (
    .A(\$auto$builder.cc:338:Biop$2333 ),
    .B(\gen_gpios[26].is_input ),
    .Y(hw2reg[131])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2343  (
    .A(\$auto$builder.cc:364:Unop$2342 ),
    .B(\gen_gpios[27].serial_q ),
    .Y(\gen_gpios[27].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2347  (
    .A(\gen_gpios[27].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2346 ),
    .Y(\gen_gpios[27].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2355  (
    .A(reg2hw[194]),
    .B(\$auto$builder.cc:364:Unop$2354 ),
    .Y(\gen_gpios[27].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2357  (
    .A(reg2hw[194]),
    .B(reg2hw[195]),
    .Y(\gen_gpios[27].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2359  (
    .A(\gen_gpios[27].serial_q ),
    .B(\gen_gpios[27].is_input ),
    .Y(hw2reg[139])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2361  (
    .A(reg2hw[193]),
    .B(\gen_gpios[27].is_output ),
    .Y(gpio_o[27])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2364  (
    .A(\gen_gpios[27].is_output ),
    .B(reg2hw[192]),
    .Y(\$auto$builder.cc:338:Biop$2365 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2371  (
    .A(gpio_edge[27]),
    .B(reg2hw[191]),
    .Y(\$auto$builder.cc:338:Biop$2372 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2373  (
    .A(\$auto$builder.cc:338:Biop$2372 ),
    .B(\gen_gpios[27].is_input ),
    .Y(hw2reg[136])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2382  (
    .A(\$auto$builder.cc:364:Unop$2381 ),
    .B(\gen_gpios[28].serial_q ),
    .Y(\gen_gpios[28].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2386  (
    .A(\gen_gpios[28].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2385 ),
    .Y(\gen_gpios[28].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2394  (
    .A(reg2hw[201]),
    .B(\$auto$builder.cc:364:Unop$2393 ),
    .Y(\gen_gpios[28].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2396  (
    .A(reg2hw[201]),
    .B(reg2hw[202]),
    .Y(\gen_gpios[28].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2398  (
    .A(\gen_gpios[28].serial_q ),
    .B(\gen_gpios[28].is_input ),
    .Y(hw2reg[144])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2400  (
    .A(reg2hw[200]),
    .B(\gen_gpios[28].is_output ),
    .Y(gpio_o[28])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2403  (
    .A(\gen_gpios[28].is_output ),
    .B(reg2hw[199]),
    .Y(\$auto$builder.cc:338:Biop$2404 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2410  (
    .A(gpio_edge[28]),
    .B(reg2hw[198]),
    .Y(\$auto$builder.cc:338:Biop$2411 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2412  (
    .A(\$auto$builder.cc:338:Biop$2411 ),
    .B(\gen_gpios[28].is_input ),
    .Y(hw2reg[141])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2421  (
    .A(\$auto$builder.cc:364:Unop$2420 ),
    .B(\gen_gpios[29].serial_q ),
    .Y(\gen_gpios[29].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2425  (
    .A(\gen_gpios[29].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2424 ),
    .Y(\gen_gpios[29].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2433  (
    .A(reg2hw[208]),
    .B(\$auto$builder.cc:364:Unop$2432 ),
    .Y(\gen_gpios[29].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2435  (
    .A(reg2hw[208]),
    .B(reg2hw[209]),
    .Y(\gen_gpios[29].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2437  (
    .A(\gen_gpios[29].serial_q ),
    .B(\gen_gpios[29].is_input ),
    .Y(hw2reg[149])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2439  (
    .A(reg2hw[207]),
    .B(\gen_gpios[29].is_output ),
    .Y(gpio_o[29])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2442  (
    .A(\gen_gpios[29].is_output ),
    .B(reg2hw[206]),
    .Y(\$auto$builder.cc:338:Biop$2443 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2449  (
    .A(gpio_edge[29]),
    .B(reg2hw[205]),
    .Y(\$auto$builder.cc:338:Biop$2450 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2451  (
    .A(\$auto$builder.cc:338:Biop$2450 ),
    .B(\gen_gpios[29].is_input ),
    .Y(hw2reg[146])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2460  (
    .A(\$auto$builder.cc:364:Unop$2459 ),
    .B(\gen_gpios[30].serial_q ),
    .Y(\gen_gpios[30].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2464  (
    .A(\gen_gpios[30].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2463 ),
    .Y(\gen_gpios[30].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2472  (
    .A(reg2hw[215]),
    .B(\$auto$builder.cc:364:Unop$2471 ),
    .Y(\gen_gpios[30].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2474  (
    .A(reg2hw[215]),
    .B(reg2hw[216]),
    .Y(\gen_gpios[30].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2476  (
    .A(\gen_gpios[30].serial_q ),
    .B(\gen_gpios[30].is_input ),
    .Y(hw2reg[154])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2478  (
    .A(reg2hw[214]),
    .B(\gen_gpios[30].is_output ),
    .Y(gpio_o[30])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2481  (
    .A(\gen_gpios[30].is_output ),
    .B(reg2hw[213]),
    .Y(\$auto$builder.cc:338:Biop$2482 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2488  (
    .A(gpio_edge[30]),
    .B(reg2hw[212]),
    .Y(\$auto$builder.cc:338:Biop$2489 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2490  (
    .A(\$auto$builder.cc:338:Biop$2489 ),
    .B(\gen_gpios[30].is_input ),
    .Y(hw2reg[151])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2499  (
    .A(\$auto$builder.cc:364:Unop$2498 ),
    .B(\gen_gpios[31].serial_q ),
    .Y(\gen_gpios[31].f_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2503  (
    .A(\gen_gpios[31].serial_d ),
    .B(\$auto$builder.cc:364:Unop$2502 ),
    .Y(\gen_gpios[31].r_edge )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2511  (
    .A(reg2hw[222]),
    .B(\$auto$builder.cc:364:Unop$2510 ),
    .Y(\gen_gpios[31].is_input )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2513  (
    .A(reg2hw[222]),
    .B(reg2hw[223]),
    .Y(\gen_gpios[31].is_output )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2515  (
    .A(\gen_gpios[31].serial_q ),
    .B(\gen_gpios[31].is_input ),
    .Y(hw2reg[159])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2517  (
    .A(reg2hw[221]),
    .B(\gen_gpios[31].is_output ),
    .Y(gpio_o[31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2520  (
    .A(\gen_gpios[31].is_output ),
    .B(reg2hw[220]),
    .Y(\$auto$builder.cc:338:Biop$2521 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2527  (
    .A(gpio_edge[31]),
    .B(reg2hw[219]),
    .Y(\$auto$builder.cc:338:Biop$2528 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2529  (
    .A(\$auto$builder.cc:338:Biop$2528 ),
    .B(\gen_gpios[31].is_input ),
    .Y(hw2reg[156])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2538  (
    .A(reg2hw[1]),
    .B(reg2hw[8]),
    .Y(\$auto$builder.cc:338:Biop$2539 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2541  (
    .A(\$auto$builder.cc:338:Biop$2539 ),
    .B(reg2hw[15]),
    .Y(\$auto$builder.cc:338:Biop$2542 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2544  (
    .A(\$auto$builder.cc:338:Biop$2542 ),
    .B(reg2hw[22]),
    .Y(\$auto$builder.cc:338:Biop$2545 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2547  (
    .A(\$auto$builder.cc:338:Biop$2545 ),
    .B(reg2hw[29]),
    .Y(\$auto$builder.cc:338:Biop$2548 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2550  (
    .A(\$auto$builder.cc:338:Biop$2548 ),
    .B(reg2hw[36]),
    .Y(\$auto$builder.cc:338:Biop$2551 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2553  (
    .A(\$auto$builder.cc:338:Biop$2551 ),
    .B(reg2hw[43]),
    .Y(\$auto$builder.cc:338:Biop$2554 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2556  (
    .A(\$auto$builder.cc:338:Biop$2554 ),
    .B(reg2hw[50]),
    .Y(\$auto$builder.cc:338:Biop$2557 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2559  (
    .A(\$auto$builder.cc:338:Biop$2557 ),
    .B(reg2hw[57]),
    .Y(\$auto$builder.cc:338:Biop$2560 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2562  (
    .A(\$auto$builder.cc:338:Biop$2560 ),
    .B(reg2hw[64]),
    .Y(\$auto$builder.cc:338:Biop$2563 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2565  (
    .A(\$auto$builder.cc:338:Biop$2563 ),
    .B(reg2hw[71]),
    .Y(\$auto$builder.cc:338:Biop$2566 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2568  (
    .A(\$auto$builder.cc:338:Biop$2566 ),
    .B(reg2hw[78]),
    .Y(\$auto$builder.cc:338:Biop$2569 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2571  (
    .A(\$auto$builder.cc:338:Biop$2569 ),
    .B(reg2hw[85]),
    .Y(\$auto$builder.cc:338:Biop$2572 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2574  (
    .A(\$auto$builder.cc:338:Biop$2572 ),
    .B(reg2hw[92]),
    .Y(\$auto$builder.cc:338:Biop$2575 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2577  (
    .A(\$auto$builder.cc:338:Biop$2575 ),
    .B(reg2hw[99]),
    .Y(\$auto$builder.cc:338:Biop$2578 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2580  (
    .A(\$auto$builder.cc:338:Biop$2578 ),
    .B(reg2hw[106]),
    .Y(\$auto$builder.cc:338:Biop$2581 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2583  (
    .A(\$auto$builder.cc:338:Biop$2581 ),
    .B(reg2hw[113]),
    .Y(\$auto$builder.cc:338:Biop$2584 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2586  (
    .A(\$auto$builder.cc:338:Biop$2584 ),
    .B(reg2hw[120]),
    .Y(\$auto$builder.cc:338:Biop$2587 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2589  (
    .A(\$auto$builder.cc:338:Biop$2587 ),
    .B(reg2hw[127]),
    .Y(\$auto$builder.cc:338:Biop$2590 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2592  (
    .A(\$auto$builder.cc:338:Biop$2590 ),
    .B(reg2hw[134]),
    .Y(\$auto$builder.cc:338:Biop$2593 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2595  (
    .A(\$auto$builder.cc:338:Biop$2593 ),
    .B(reg2hw[141]),
    .Y(\$auto$builder.cc:338:Biop$2596 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2598  (
    .A(\$auto$builder.cc:338:Biop$2596 ),
    .B(reg2hw[148]),
    .Y(\$auto$builder.cc:338:Biop$2599 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2601  (
    .A(\$auto$builder.cc:338:Biop$2599 ),
    .B(reg2hw[155]),
    .Y(\$auto$builder.cc:338:Biop$2602 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2604  (
    .A(\$auto$builder.cc:338:Biop$2602 ),
    .B(reg2hw[162]),
    .Y(\$auto$builder.cc:338:Biop$2605 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2607  (
    .A(\$auto$builder.cc:338:Biop$2605 ),
    .B(reg2hw[169]),
    .Y(\$auto$builder.cc:338:Biop$2608 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2610  (
    .A(\$auto$builder.cc:338:Biop$2608 ),
    .B(reg2hw[176]),
    .Y(\$auto$builder.cc:338:Biop$2611 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2613  (
    .A(\$auto$builder.cc:338:Biop$2611 ),
    .B(reg2hw[183]),
    .Y(\$auto$builder.cc:338:Biop$2614 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2616  (
    .A(\$auto$builder.cc:338:Biop$2614 ),
    .B(reg2hw[190]),
    .Y(\$auto$builder.cc:338:Biop$2617 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2619  (
    .A(\$auto$builder.cc:338:Biop$2617 ),
    .B(reg2hw[197]),
    .Y(\$auto$builder.cc:338:Biop$2620 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2622  (
    .A(\$auto$builder.cc:338:Biop$2620 ),
    .B(reg2hw[204]),
    .Y(\$auto$builder.cc:338:Biop$2623 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2625  (
    .A(\$auto$builder.cc:338:Biop$2623 ),
    .B(reg2hw[211]),
    .Y(\$auto$builder.cc:338:Biop$2626 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2628  (
    .A(\$auto$builder.cc:338:Biop$2626 ),
    .B(reg2hw[218]),
    .Y(interrupt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1288  (
    .A(\gen_gpios[0].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1289 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1292  (
    .A(\gen_gpios[0].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1293 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1300  (
    .A(reg2hw[6]),
    .Y(\$auto$builder.cc:364:Unop$1301 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1315  (
    .A(reg2hw[4]),
    .Y(\$auto$builder.cc:364:Unop$1316 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1327  (
    .A(\gen_gpios[1].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1328 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1331  (
    .A(\gen_gpios[1].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1332 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1339  (
    .A(reg2hw[13]),
    .Y(\$auto$builder.cc:364:Unop$1340 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1354  (
    .A(reg2hw[11]),
    .Y(\$auto$builder.cc:364:Unop$1355 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1366  (
    .A(\gen_gpios[2].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1367 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1370  (
    .A(\gen_gpios[2].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1371 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1378  (
    .A(reg2hw[20]),
    .Y(\$auto$builder.cc:364:Unop$1379 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1393  (
    .A(reg2hw[18]),
    .Y(\$auto$builder.cc:364:Unop$1394 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1405  (
    .A(\gen_gpios[3].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1406 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1409  (
    .A(\gen_gpios[3].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1410 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1417  (
    .A(reg2hw[27]),
    .Y(\$auto$builder.cc:364:Unop$1418 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1432  (
    .A(reg2hw[25]),
    .Y(\$auto$builder.cc:364:Unop$1433 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1444  (
    .A(\gen_gpios[4].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1445 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1448  (
    .A(\gen_gpios[4].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1449 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1456  (
    .A(reg2hw[34]),
    .Y(\$auto$builder.cc:364:Unop$1457 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1471  (
    .A(reg2hw[32]),
    .Y(\$auto$builder.cc:364:Unop$1472 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1483  (
    .A(\gen_gpios[5].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1484 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1487  (
    .A(\gen_gpios[5].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1488 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1495  (
    .A(reg2hw[41]),
    .Y(\$auto$builder.cc:364:Unop$1496 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1510  (
    .A(reg2hw[39]),
    .Y(\$auto$builder.cc:364:Unop$1511 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1522  (
    .A(\gen_gpios[6].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1523 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1526  (
    .A(\gen_gpios[6].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1527 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1534  (
    .A(reg2hw[48]),
    .Y(\$auto$builder.cc:364:Unop$1535 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1549  (
    .A(reg2hw[46]),
    .Y(\$auto$builder.cc:364:Unop$1550 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1561  (
    .A(\gen_gpios[7].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1562 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1565  (
    .A(\gen_gpios[7].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1566 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1573  (
    .A(reg2hw[55]),
    .Y(\$auto$builder.cc:364:Unop$1574 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1588  (
    .A(reg2hw[53]),
    .Y(\$auto$builder.cc:364:Unop$1589 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1600  (
    .A(\gen_gpios[8].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1601 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1604  (
    .A(\gen_gpios[8].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1605 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1612  (
    .A(reg2hw[62]),
    .Y(\$auto$builder.cc:364:Unop$1613 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1627  (
    .A(reg2hw[60]),
    .Y(\$auto$builder.cc:364:Unop$1628 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1639  (
    .A(\gen_gpios[9].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1640 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1643  (
    .A(\gen_gpios[9].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1644 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1651  (
    .A(reg2hw[69]),
    .Y(\$auto$builder.cc:364:Unop$1652 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1666  (
    .A(reg2hw[67]),
    .Y(\$auto$builder.cc:364:Unop$1667 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1678  (
    .A(\gen_gpios[10].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1679 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1682  (
    .A(\gen_gpios[10].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1683 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1690  (
    .A(reg2hw[76]),
    .Y(\$auto$builder.cc:364:Unop$1691 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1705  (
    .A(reg2hw[74]),
    .Y(\$auto$builder.cc:364:Unop$1706 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1717  (
    .A(\gen_gpios[11].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1718 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1721  (
    .A(\gen_gpios[11].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1722 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1729  (
    .A(reg2hw[83]),
    .Y(\$auto$builder.cc:364:Unop$1730 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1744  (
    .A(reg2hw[81]),
    .Y(\$auto$builder.cc:364:Unop$1745 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1756  (
    .A(\gen_gpios[12].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1757 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1760  (
    .A(\gen_gpios[12].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1761 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1768  (
    .A(reg2hw[90]),
    .Y(\$auto$builder.cc:364:Unop$1769 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1783  (
    .A(reg2hw[88]),
    .Y(\$auto$builder.cc:364:Unop$1784 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1795  (
    .A(\gen_gpios[13].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1796 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1799  (
    .A(\gen_gpios[13].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1800 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1807  (
    .A(reg2hw[97]),
    .Y(\$auto$builder.cc:364:Unop$1808 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1822  (
    .A(reg2hw[95]),
    .Y(\$auto$builder.cc:364:Unop$1823 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1834  (
    .A(\gen_gpios[14].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1835 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1838  (
    .A(\gen_gpios[14].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1839 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1846  (
    .A(reg2hw[104]),
    .Y(\$auto$builder.cc:364:Unop$1847 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1861  (
    .A(reg2hw[102]),
    .Y(\$auto$builder.cc:364:Unop$1862 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1873  (
    .A(\gen_gpios[15].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1874 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1877  (
    .A(\gen_gpios[15].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1878 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1885  (
    .A(reg2hw[111]),
    .Y(\$auto$builder.cc:364:Unop$1886 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1900  (
    .A(reg2hw[109]),
    .Y(\$auto$builder.cc:364:Unop$1901 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1912  (
    .A(\gen_gpios[16].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1913 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1916  (
    .A(\gen_gpios[16].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1917 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1924  (
    .A(reg2hw[118]),
    .Y(\$auto$builder.cc:364:Unop$1925 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1939  (
    .A(reg2hw[116]),
    .Y(\$auto$builder.cc:364:Unop$1940 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1951  (
    .A(\gen_gpios[17].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1952 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1955  (
    .A(\gen_gpios[17].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1956 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1963  (
    .A(reg2hw[125]),
    .Y(\$auto$builder.cc:364:Unop$1964 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1978  (
    .A(reg2hw[123]),
    .Y(\$auto$builder.cc:364:Unop$1979 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1990  (
    .A(\gen_gpios[18].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$1991 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1994  (
    .A(\gen_gpios[18].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$1995 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2002  (
    .A(reg2hw[132]),
    .Y(\$auto$builder.cc:364:Unop$2003 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2017  (
    .A(reg2hw[130]),
    .Y(\$auto$builder.cc:364:Unop$2018 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2029  (
    .A(\gen_gpios[19].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2030 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2033  (
    .A(\gen_gpios[19].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2034 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2041  (
    .A(reg2hw[139]),
    .Y(\$auto$builder.cc:364:Unop$2042 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2056  (
    .A(reg2hw[137]),
    .Y(\$auto$builder.cc:364:Unop$2057 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2068  (
    .A(\gen_gpios[20].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2069 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2072  (
    .A(\gen_gpios[20].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2073 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2080  (
    .A(reg2hw[146]),
    .Y(\$auto$builder.cc:364:Unop$2081 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2095  (
    .A(reg2hw[144]),
    .Y(\$auto$builder.cc:364:Unop$2096 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2107  (
    .A(\gen_gpios[21].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2108 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2111  (
    .A(\gen_gpios[21].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2112 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2119  (
    .A(reg2hw[153]),
    .Y(\$auto$builder.cc:364:Unop$2120 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2134  (
    .A(reg2hw[151]),
    .Y(\$auto$builder.cc:364:Unop$2135 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2146  (
    .A(\gen_gpios[22].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2147 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2150  (
    .A(\gen_gpios[22].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2151 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2158  (
    .A(reg2hw[160]),
    .Y(\$auto$builder.cc:364:Unop$2159 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2173  (
    .A(reg2hw[158]),
    .Y(\$auto$builder.cc:364:Unop$2174 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2185  (
    .A(\gen_gpios[23].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2186 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2189  (
    .A(\gen_gpios[23].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2190 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2197  (
    .A(reg2hw[167]),
    .Y(\$auto$builder.cc:364:Unop$2198 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2212  (
    .A(reg2hw[165]),
    .Y(\$auto$builder.cc:364:Unop$2213 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2224  (
    .A(\gen_gpios[24].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2225 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2228  (
    .A(\gen_gpios[24].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2229 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2236  (
    .A(reg2hw[174]),
    .Y(\$auto$builder.cc:364:Unop$2237 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2251  (
    .A(reg2hw[172]),
    .Y(\$auto$builder.cc:364:Unop$2252 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2263  (
    .A(\gen_gpios[25].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2264 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2267  (
    .A(\gen_gpios[25].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2268 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2275  (
    .A(reg2hw[181]),
    .Y(\$auto$builder.cc:364:Unop$2276 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2290  (
    .A(reg2hw[179]),
    .Y(\$auto$builder.cc:364:Unop$2291 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2302  (
    .A(\gen_gpios[26].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2303 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2306  (
    .A(\gen_gpios[26].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2307 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2314  (
    .A(reg2hw[188]),
    .Y(\$auto$builder.cc:364:Unop$2315 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2329  (
    .A(reg2hw[186]),
    .Y(\$auto$builder.cc:364:Unop$2330 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2341  (
    .A(\gen_gpios[27].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2342 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2345  (
    .A(\gen_gpios[27].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2346 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2353  (
    .A(reg2hw[195]),
    .Y(\$auto$builder.cc:364:Unop$2354 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2368  (
    .A(reg2hw[193]),
    .Y(\$auto$builder.cc:364:Unop$2369 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2380  (
    .A(\gen_gpios[28].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2381 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2384  (
    .A(\gen_gpios[28].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2385 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2392  (
    .A(reg2hw[202]),
    .Y(\$auto$builder.cc:364:Unop$2393 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2407  (
    .A(reg2hw[200]),
    .Y(\$auto$builder.cc:364:Unop$2408 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2419  (
    .A(\gen_gpios[29].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2420 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2423  (
    .A(\gen_gpios[29].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2424 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2431  (
    .A(reg2hw[209]),
    .Y(\$auto$builder.cc:364:Unop$2432 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2446  (
    .A(reg2hw[207]),
    .Y(\$auto$builder.cc:364:Unop$2447 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2458  (
    .A(\gen_gpios[30].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2459 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2462  (
    .A(\gen_gpios[30].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2463 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2470  (
    .A(reg2hw[216]),
    .Y(\$auto$builder.cc:364:Unop$2471 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2485  (
    .A(reg2hw[214]),
    .Y(\$auto$builder.cc:364:Unop$2486 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2497  (
    .A(\gen_gpios[31].serial_d ),
    .Y(\$auto$builder.cc:364:Unop$2498 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2501  (
    .A(\gen_gpios[31].serial_q ),
    .Y(\$auto$builder.cc:364:Unop$2502 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2509  (
    .A(reg2hw[223]),
    .Y(\$auto$builder.cc:364:Unop$2510 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2524  (
    .A(reg2hw[221]),
    .Y(\$auto$builder.cc:364:Unop$2525 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1298  (
    .A(\gen_gpios[0].f_edge ),
    .B(\gen_gpios[0].r_edge ),
    .S(reg2hw[0]),
    .Y(gpio_edge[0])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1337  (
    .A(\gen_gpios[1].f_edge ),
    .B(\gen_gpios[1].r_edge ),
    .S(reg2hw[7]),
    .Y(gpio_edge[1])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1376  (
    .A(\gen_gpios[2].f_edge ),
    .B(\gen_gpios[2].r_edge ),
    .S(reg2hw[14]),
    .Y(gpio_edge[2])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1415  (
    .A(\gen_gpios[3].f_edge ),
    .B(\gen_gpios[3].r_edge ),
    .S(reg2hw[21]),
    .Y(gpio_edge[3])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1454  (
    .A(\gen_gpios[4].f_edge ),
    .B(\gen_gpios[4].r_edge ),
    .S(reg2hw[28]),
    .Y(gpio_edge[4])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1493  (
    .A(\gen_gpios[5].f_edge ),
    .B(\gen_gpios[5].r_edge ),
    .S(reg2hw[35]),
    .Y(gpio_edge[5])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1532  (
    .A(\gen_gpios[6].f_edge ),
    .B(\gen_gpios[6].r_edge ),
    .S(reg2hw[42]),
    .Y(gpio_edge[6])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1571  (
    .A(\gen_gpios[7].f_edge ),
    .B(\gen_gpios[7].r_edge ),
    .S(reg2hw[49]),
    .Y(gpio_edge[7])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1610  (
    .A(\gen_gpios[8].f_edge ),
    .B(\gen_gpios[8].r_edge ),
    .S(reg2hw[56]),
    .Y(gpio_edge[8])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1649  (
    .A(\gen_gpios[9].f_edge ),
    .B(\gen_gpios[9].r_edge ),
    .S(reg2hw[63]),
    .Y(gpio_edge[9])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1688  (
    .A(\gen_gpios[10].f_edge ),
    .B(\gen_gpios[10].r_edge ),
    .S(reg2hw[70]),
    .Y(gpio_edge[10])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1727  (
    .A(\gen_gpios[11].f_edge ),
    .B(\gen_gpios[11].r_edge ),
    .S(reg2hw[77]),
    .Y(gpio_edge[11])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1766  (
    .A(\gen_gpios[12].f_edge ),
    .B(\gen_gpios[12].r_edge ),
    .S(reg2hw[84]),
    .Y(gpio_edge[12])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1805  (
    .A(\gen_gpios[13].f_edge ),
    .B(\gen_gpios[13].r_edge ),
    .S(reg2hw[91]),
    .Y(gpio_edge[13])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1844  (
    .A(\gen_gpios[14].f_edge ),
    .B(\gen_gpios[14].r_edge ),
    .S(reg2hw[98]),
    .Y(gpio_edge[14])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1883  (
    .A(\gen_gpios[15].f_edge ),
    .B(\gen_gpios[15].r_edge ),
    .S(reg2hw[105]),
    .Y(gpio_edge[15])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1922  (
    .A(\gen_gpios[16].f_edge ),
    .B(\gen_gpios[16].r_edge ),
    .S(reg2hw[112]),
    .Y(gpio_edge[16])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1961  (
    .A(\gen_gpios[17].f_edge ),
    .B(\gen_gpios[17].r_edge ),
    .S(reg2hw[119]),
    .Y(gpio_edge[17])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2000  (
    .A(\gen_gpios[18].f_edge ),
    .B(\gen_gpios[18].r_edge ),
    .S(reg2hw[126]),
    .Y(gpio_edge[18])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2039  (
    .A(\gen_gpios[19].f_edge ),
    .B(\gen_gpios[19].r_edge ),
    .S(reg2hw[133]),
    .Y(gpio_edge[19])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2078  (
    .A(\gen_gpios[20].f_edge ),
    .B(\gen_gpios[20].r_edge ),
    .S(reg2hw[140]),
    .Y(gpio_edge[20])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2117  (
    .A(\gen_gpios[21].f_edge ),
    .B(\gen_gpios[21].r_edge ),
    .S(reg2hw[147]),
    .Y(gpio_edge[21])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2156  (
    .A(\gen_gpios[22].f_edge ),
    .B(\gen_gpios[22].r_edge ),
    .S(reg2hw[154]),
    .Y(gpio_edge[22])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2195  (
    .A(\gen_gpios[23].f_edge ),
    .B(\gen_gpios[23].r_edge ),
    .S(reg2hw[161]),
    .Y(gpio_edge[23])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2234  (
    .A(\gen_gpios[24].f_edge ),
    .B(\gen_gpios[24].r_edge ),
    .S(reg2hw[168]),
    .Y(gpio_edge[24])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2273  (
    .A(\gen_gpios[25].f_edge ),
    .B(\gen_gpios[25].r_edge ),
    .S(reg2hw[175]),
    .Y(gpio_edge[25])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2312  (
    .A(\gen_gpios[26].f_edge ),
    .B(\gen_gpios[26].r_edge ),
    .S(reg2hw[182]),
    .Y(gpio_edge[26])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2351  (
    .A(\gen_gpios[27].f_edge ),
    .B(\gen_gpios[27].r_edge ),
    .S(reg2hw[189]),
    .Y(gpio_edge[27])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2390  (
    .A(\gen_gpios[28].f_edge ),
    .B(\gen_gpios[28].r_edge ),
    .S(reg2hw[196]),
    .Y(gpio_edge[28])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2429  (
    .A(\gen_gpios[29].f_edge ),
    .B(\gen_gpios[29].r_edge ),
    .S(reg2hw[203]),
    .Y(gpio_edge[29])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2468  (
    .A(\gen_gpios[30].f_edge ),
    .B(\gen_gpios[30].r_edge ),
    .S(reg2hw[210]),
    .Y(gpio_edge[30])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$2507  (
    .A(\gen_gpios[31].f_edge ),
    .B(\gen_gpios[31].r_edge ),
    .S(reg2hw[217]),
    .Y(gpio_edge[31])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[0].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[0].serial_d ),
    .Q(\gen_gpios[0].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[10].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[10].serial_d ),
    .Q(\gen_gpios[10].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[11].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[11].serial_d ),
    .Q(\gen_gpios[11].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[12].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[12].serial_d ),
    .Q(\gen_gpios[12].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[13].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[13].serial_d ),
    .Q(\gen_gpios[13].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[14].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[14].serial_d ),
    .Q(\gen_gpios[14].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[15].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[15].serial_d ),
    .Q(\gen_gpios[15].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[16].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[16].serial_d ),
    .Q(\gen_gpios[16].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[17].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[17].serial_d ),
    .Q(\gen_gpios[17].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[18].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[18].serial_d ),
    .Q(\gen_gpios[18].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[19].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[19].serial_d ),
    .Q(\gen_gpios[19].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[1].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[1].serial_d ),
    .Q(\gen_gpios[1].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[20].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[20].serial_d ),
    .Q(\gen_gpios[20].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[21].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[21].serial_d ),
    .Q(\gen_gpios[21].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[22].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[22].serial_d ),
    .Q(\gen_gpios[22].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[23].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[23].serial_d ),
    .Q(\gen_gpios[23].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[24].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[24].serial_d ),
    .Q(\gen_gpios[24].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[25].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[25].serial_d ),
    .Q(\gen_gpios[25].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[26].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[26].serial_d ),
    .Q(\gen_gpios[26].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[27].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[27].serial_d ),
    .Q(\gen_gpios[27].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[28].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[28].serial_d ),
    .Q(\gen_gpios[28].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[29].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[29].serial_d ),
    .Q(\gen_gpios[29].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[2].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[2].serial_d ),
    .Q(\gen_gpios[2].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[30].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[30].serial_d ),
    .Q(\gen_gpios[30].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[31].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[31].serial_d ),
    .Q(\gen_gpios[31].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[3].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[3].serial_d ),
    .Q(\gen_gpios[3].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[4].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[4].serial_d ),
    .Q(\gen_gpios[4].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[5].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[5].serial_d ),
    .Q(\gen_gpios[5].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[6].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[6].serial_d ),
    .Q(\gen_gpios[6].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[7].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[7].serial_d ),
    .Q(\gen_gpios[7].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[8].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[8].serial_d ),
    .Q(\gen_gpios[8].serial_q )
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_gpios[9].serial_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\gen_gpios[9].serial_d ),
    .Q(\gen_gpios[9].serial_q )
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15299  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1901 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1897 ),
    .Y(hw2reg[78:77])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15301  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2213 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2209 ),
    .Y(hw2reg[118:117])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15303  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1862 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1858 ),
    .Y(hw2reg[73:72])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15305  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2369 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2365 ),
    .Y(hw2reg[138:137])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15307  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1823 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1819 ),
    .Y(hw2reg[68:67])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15309  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2174 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2170 ),
    .Y(hw2reg[113:112])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15311  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1784 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1780 ),
    .Y(hw2reg[63:62])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15313  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2447 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2443 ),
    .Y(hw2reg[148:147])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15315  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1745 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1741 ),
    .Y(hw2reg[58:57])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15317  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2135 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2131 ),
    .Y(hw2reg[108:107])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15319  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1706 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1702 ),
    .Y(hw2reg[53:52])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15321  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2330 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2326 ),
    .Y(hw2reg[133:132])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15323  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1667 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1663 ),
    .Y(hw2reg[48:47])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15325  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2096 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2092 ),
    .Y(hw2reg[103:102])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15327  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1628 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1624 ),
    .Y(hw2reg[43:42])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15329  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2486 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2482 ),
    .Y(hw2reg[153:152])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15331  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1589 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1585 ),
    .Y(hw2reg[38:37])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15333  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2057 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2053 ),
    .Y(hw2reg[98:97])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15335  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1550 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1546 ),
    .Y(hw2reg[33:32])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15337  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2291 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2287 ),
    .Y(hw2reg[128:127])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15339  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1511 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1507 ),
    .Y(hw2reg[28:27])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15341  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2018 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2014 ),
    .Y(hw2reg[93:92])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15343  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1472 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1468 ),
    .Y(hw2reg[23:22])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15345  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2408 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2404 ),
    .Y(hw2reg[143:142])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15347  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1433 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1429 ),
    .Y(hw2reg[18:17])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15349  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1979 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1975 ),
    .Y(hw2reg[88:87])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15351  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1394 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1390 ),
    .Y(hw2reg[13:12])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15353  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2252 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2248 ),
    .Y(hw2reg[123:122])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15355  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1355 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1351 ),
    .Y(hw2reg[8:7])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15357  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1940 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1936 ),
    .Y(hw2reg[83:82])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15359  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$1316 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$1312 ),
    .Y(hw2reg[3:2])
  );
  /* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$15361  (
    .A(2'h0),
    .B({ \$auto$builder.cc:364:Unop$2525 , 1'h1 }),
    .S(\$auto$builder.cc:338:Biop$2521 ),
    .Y(hw2reg[158:157])
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync  \gen_gpios[0].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[0]),
    .serial_o(\gen_gpios[0].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync  \gen_gpios[10].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[10]),
    .serial_o(\gen_gpios[10].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync  \gen_gpios[11].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[11]),
    .serial_o(\gen_gpios[11].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync  \gen_gpios[12].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[12]),
    .serial_o(\gen_gpios[12].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync  \gen_gpios[13].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[13]),
    .serial_o(\gen_gpios[13].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync  \gen_gpios[14].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[14]),
    .serial_o(\gen_gpios[14].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync  \gen_gpios[15].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[15]),
    .serial_o(\gen_gpios[15].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync  \gen_gpios[16].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[16]),
    .serial_o(\gen_gpios[16].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync  \gen_gpios[17].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[17]),
    .serial_o(\gen_gpios[17].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync  \gen_gpios[18].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[18]),
    .serial_o(\gen_gpios[18].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync  \gen_gpios[19].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[19]),
    .serial_o(\gen_gpios[19].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync  \gen_gpios[1].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[1]),
    .serial_o(\gen_gpios[1].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync  \gen_gpios[20].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[20]),
    .serial_o(\gen_gpios[20].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync  \gen_gpios[21].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[21]),
    .serial_o(\gen_gpios[21].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync  \gen_gpios[22].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[22]),
    .serial_o(\gen_gpios[22].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync  \gen_gpios[23].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[23]),
    .serial_o(\gen_gpios[23].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync  \gen_gpios[24].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[24]),
    .serial_o(\gen_gpios[24].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync  \gen_gpios[25].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[25]),
    .serial_o(\gen_gpios[25].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync  \gen_gpios[26].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[26]),
    .serial_o(\gen_gpios[26].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync  \gen_gpios[27].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[27]),
    .serial_o(\gen_gpios[27].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync  \gen_gpios[28].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[28]),
    .serial_o(\gen_gpios[28].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync  \gen_gpios[29].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[29]),
    .serial_o(\gen_gpios[29].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync  \gen_gpios[2].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[2]),
    .serial_o(\gen_gpios[2].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync  \gen_gpios[30].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[30]),
    .serial_o(\gen_gpios[30].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync  \gen_gpios[31].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[31]),
    .serial_o(\gen_gpios[31].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync  \gen_gpios[3].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[3]),
    .serial_o(\gen_gpios[3].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync  \gen_gpios[4].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[4]),
    .serial_o(\gen_gpios[4].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync  \gen_gpios[5].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[5]),
    .serial_o(\gen_gpios[5].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync  \gen_gpios[6].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[6]),
    .serial_o(\gen_gpios[6].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync  \gen_gpios[7].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[7]),
    .serial_o(\gen_gpios[7].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync  \gen_gpios[8].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[8]),
    .serial_o(\gen_gpios[8].serial_d )
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/gpio/gpio.sv:101.11" */
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync  \gen_gpios[9].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[9]),
    .serial_o(\gen_gpios[9].serial_d )
  );
  /* src = "../rtl/gpio/gpio.sv:74.5" */
  \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file  i_reg_file (
    .clk_i(clk_i),
    .hw2reg({ hw2reg[159:156], hw2reg[156], hw2reg[154:151], hw2reg[151], hw2reg[149:146], hw2reg[146], hw2reg[144:141], hw2reg[141], hw2reg[139:136], hw2reg[136], hw2reg[134:131], hw2reg[131], hw2reg[129:126], hw2reg[126], hw2reg[124:121], hw2reg[121], hw2reg[119:116], hw2reg[116], hw2reg[114:111], hw2reg[111], hw2reg[109:106], hw2reg[106], hw2reg[104:101], hw2reg[101], hw2reg[99:96], hw2reg[96], hw2reg[94:91], hw2reg[91], hw2reg[89:86], hw2reg[86], hw2reg[84:81], hw2reg[81], hw2reg[79:76], hw2reg[76], hw2reg[74:71], hw2reg[71], hw2reg[69:66], hw2reg[66], hw2reg[64:61], hw2reg[61], hw2reg[59:56], hw2reg[56], hw2reg[54:51], hw2reg[51], hw2reg[49:46], hw2reg[46], hw2reg[44:41], hw2reg[41], hw2reg[39:36], hw2reg[36], hw2reg[34:31], hw2reg[31], hw2reg[29:26], hw2reg[26], hw2reg[24:21], hw2reg[21], hw2reg[19:16], hw2reg[16], hw2reg[14:11], hw2reg[11], hw2reg[9:6], hw2reg[6], hw2reg[4:1], hw2reg[1] }),
    .obi_req_i(obi_req_i),
    .obi_rsp_o(obi_rsp_o),
    .reg2hw(reg2hw),
    .rst_ni(rst_ni)
  );
  assign gpio_in_sync = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_in_sync_o = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_intrpt = { hw2reg[156], hw2reg[151], hw2reg[146], hw2reg[141], hw2reg[136], hw2reg[131], hw2reg[126], hw2reg[121], hw2reg[116], hw2reg[111], hw2reg[106], hw2reg[101], hw2reg[96], hw2reg[91], hw2reg[86], hw2reg[81], hw2reg[76], hw2reg[71], hw2reg[66], hw2reg[61], hw2reg[56], hw2reg[51], hw2reg[46], hw2reg[41], hw2reg[36], hw2reg[31], hw2reg[26], hw2reg[21], hw2reg[16], hw2reg[11], hw2reg[6], hw2reg[1] };
  assign gpio_intrpt_pending = interrupt_o;
  assign gpio_out_en_o = { \gen_gpios[31].is_output , \gen_gpios[30].is_output , \gen_gpios[29].is_output , \gen_gpios[28].is_output , \gen_gpios[27].is_output , \gen_gpios[26].is_output , \gen_gpios[25].is_output , \gen_gpios[24].is_output , \gen_gpios[23].is_output , \gen_gpios[22].is_output , \gen_gpios[21].is_output , \gen_gpios[20].is_output , \gen_gpios[19].is_output , \gen_gpios[18].is_output , \gen_gpios[17].is_output , \gen_gpios[16].is_output , \gen_gpios[15].is_output , \gen_gpios[14].is_output , \gen_gpios[13].is_output , \gen_gpios[12].is_output , \gen_gpios[11].is_output , \gen_gpios[10].is_output , \gen_gpios[9].is_output , \gen_gpios[8].is_output , \gen_gpios[7].is_output , \gen_gpios[6].is_output , \gen_gpios[5].is_output , \gen_gpios[4].is_output , \gen_gpios[3].is_output , \gen_gpios[2].is_output , \gen_gpios[1].is_output , \gen_gpios[0].is_output  };
  assign { hw2reg[155], hw2reg[150], hw2reg[145], hw2reg[140], hw2reg[135], hw2reg[130], hw2reg[125], hw2reg[120], hw2reg[115], hw2reg[110], hw2reg[105], hw2reg[100], hw2reg[95], hw2reg[90], hw2reg[85], hw2reg[80], hw2reg[75], hw2reg[70], hw2reg[65], hw2reg[60], hw2reg[55], hw2reg[50], hw2reg[45], hw2reg[40], hw2reg[35], hw2reg[30], hw2reg[25], hw2reg[20], hw2reg[15], hw2reg[10], hw2reg[5], hw2reg[0] } = { hw2reg[156], hw2reg[151], hw2reg[146], hw2reg[141], hw2reg[136], hw2reg[131], hw2reg[126], hw2reg[121], hw2reg[116], hw2reg[111], hw2reg[106], hw2reg[101], hw2reg[96], hw2reg[91], hw2reg[86], hw2reg[81], hw2reg[76], hw2reg[71], hw2reg[66], hw2reg[61], hw2reg[56], hw2reg[51], hw2reg[46], hw2reg[41], hw2reg[36], hw2reg[31], hw2reg[26], hw2reg[21], hw2reg[16], hw2reg[11], hw2reg[6], hw2reg[1] };
endmodule

/* src = "../rtl/gpio/gpio_reg_top.sv:12.8" */
module \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file (clk_i, rst_ni, obi_req_i, obi_rsp_o, reg2hw, hw2reg);
  wire [31:0] \$auto$builder.cc:338:Biop$5686 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5688 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5690 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5694 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5698 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5702 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5706 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5712 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5716 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5720 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5724 ;
  wire \$auto$builder.cc:364:Unop$5251 ;
  wire [31:0] \$auto$builder.cc:364:Unop$5684 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17856 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17859 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17862 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17865 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17203 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17205 ;
  /* src = "../rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  wire \$auto$slang_frontend.cc:694:finish$\obi_err$5731 ;
  /* src = "../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire \$auto$slang_frontend.cc:694:finish$\obi_err$5740 ;
  /* src = "../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\obi_rdata$5741 ;
  /* src = "../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\reg_d[128]$5728 ;
  /* src = "../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\reg_d[32]$5742 ;
  /* src = "../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\toggle_out$5730 ;
  /* src = "../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  wire \$auto$slang_frontend.cc:694:finish$\w_err_d$5725 ;
  wire \$procmux$14215_CMP ;
  wire \$procmux$14216_CMP ;
  wire \$procmux$14217_CMP ;
  wire \$procmux$14218_CMP ;
  wire \$procmux$14219_CMP ;
  wire \$procmux$14220_CMP ;
  wire \$procmux$14221_CMP ;
  wire \$procmux$14222_CMP ;
  wire \$procmux$14265_CMP ;
  wire \$procmux$14272_CMP ;
  wire \$procmux$14281_CMP ;
  wire \$procmux$14289_CMP ;
  wire \$procmux$14295_CMP ;
  wire \$procmux$14300_CMP ;
  /* src = "../rtl/gpio/gpio_reg_top.sv:117.32" */
  wire [31:0] bit_mask;
  /* src = "../rtl/gpio/gpio_reg_top.sv:23.18" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/gpio/gpio_reg_top.sv:37.43" */
  input [159:0] hw2reg;
  wire [159:0] hw2reg;
  /* src = "../rtl/gpio/gpio_reg_top.sv:50.35" */
  wire id_d;
  /* src = "../rtl/gpio/gpio_reg_top.sv:50.41" */
  wire id_q;
  /* src = "../rtl/gpio/gpio_reg_top.sv:113.25" */
  wire [31:0] new_intrpt;
  /* src = "../rtl/gpio/gpio_reg_top.sv:108.21" */
  wire [255:0] new_reg;
  /* src = "../rtl/gpio/gpio_reg_top.sv:51.35" */
  wire obi_err;
  /* src = "../rtl/gpio/gpio_reg_top.sv:54.35" */
  wire [31:0] obi_rdata;
  /* src = "../rtl/gpio/gpio_reg_top.sv:55.35" */
  wire obi_read_request;
  /* src = "../rtl/gpio/gpio_reg_top.sv:29.23" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "../rtl/gpio/gpio_reg_top.sv:31.22" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "../rtl/gpio/gpio_reg_top.sv:54.46" */
  wire [31:0] obi_wdata;
  /* src = "../rtl/gpio/gpio_reg_top.sv:55.53" */
  wire obi_write_request;
  wire [9:0] read_addr_d;
  /* src = "../rtl/gpio/gpio_reg_top.sv:49.48" */
  wire [11:0] read_addr_q;
  /* src = "../rtl/gpio/gpio_reg_top.sv:35.42" */
  output [223:0] reg2hw;
  wire [223:0] reg2hw;
  /* src = "../rtl/gpio/gpio_reg_top.sv:105.21" */
  wire [255:0] reg_d;
  /* src = "../rtl/gpio/gpio_reg_top.sv:105.28" */
  wire [255:0] reg_q;
  /* src = "../rtl/gpio/gpio_reg_top.sv:47.35" */
  wire req_d;
  /* src = "../rtl/gpio/gpio_reg_top.sv:47.42" */
  wire req_q;
  /* src = "../rtl/gpio/gpio_reg_top.sv:25.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/gpio/gpio_reg_top.sv:114.25" */
  wire [31:0] toggle_out;
  /* src = "../rtl/gpio/gpio_reg_top.sv:45.35" */
  wire valid_d;
  /* src = "../rtl/gpio/gpio_reg_top.sv:45.44" */
  wire valid_q;
  /* src = "../rtl/gpio/gpio_reg_top.sv:52.35" */
  wire w_err_d;
  /* src = "../rtl/gpio/gpio_reg_top.sv:52.44" */
  wire w_err_q;
  /* src = "../rtl/gpio/gpio_reg_top.sv:46.35" */
  wire we_d;
  /* src = "../rtl/gpio/gpio_reg_top.sv:46.41" */
  wire we_q;
  wire [9:0] write_addr;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5252  (
    .A(req_q),
    .B(\$auto$builder.cc:364:Unop$5251 ),
    .Y(obi_read_request)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5254  (
    .A(obi_req_i[0]),
    .B(obi_req_i[41]),
    .Y(obi_write_request)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5338  (
    .A(hw2reg[0]),
    .B(hw2reg[1]),
    .Y(new_intrpt[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5349  (
    .A(hw2reg[5]),
    .B(hw2reg[6]),
    .Y(new_intrpt[1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5360  (
    .A(hw2reg[10]),
    .B(hw2reg[11]),
    .Y(new_intrpt[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5371  (
    .A(hw2reg[15]),
    .B(hw2reg[16]),
    .Y(new_intrpt[3])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5382  (
    .A(hw2reg[20]),
    .B(hw2reg[21]),
    .Y(new_intrpt[4])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5393  (
    .A(hw2reg[25]),
    .B(hw2reg[26]),
    .Y(new_intrpt[5])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5404  (
    .A(hw2reg[30]),
    .B(hw2reg[31]),
    .Y(new_intrpt[6])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5415  (
    .A(hw2reg[35]),
    .B(hw2reg[36]),
    .Y(new_intrpt[7])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5426  (
    .A(hw2reg[40]),
    .B(hw2reg[41]),
    .Y(new_intrpt[8])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5437  (
    .A(hw2reg[45]),
    .B(hw2reg[46]),
    .Y(new_intrpt[9])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5448  (
    .A(hw2reg[50]),
    .B(hw2reg[51]),
    .Y(new_intrpt[10])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5459  (
    .A(hw2reg[55]),
    .B(hw2reg[56]),
    .Y(new_intrpt[11])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5470  (
    .A(hw2reg[60]),
    .B(hw2reg[61]),
    .Y(new_intrpt[12])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5481  (
    .A(hw2reg[65]),
    .B(hw2reg[66]),
    .Y(new_intrpt[13])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5492  (
    .A(hw2reg[70]),
    .B(hw2reg[71]),
    .Y(new_intrpt[14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5503  (
    .A(hw2reg[75]),
    .B(hw2reg[76]),
    .Y(new_intrpt[15])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5514  (
    .A(hw2reg[80]),
    .B(hw2reg[81]),
    .Y(new_intrpt[16])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5525  (
    .A(hw2reg[85]),
    .B(hw2reg[86]),
    .Y(new_intrpt[17])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5536  (
    .A(hw2reg[90]),
    .B(hw2reg[91]),
    .Y(new_intrpt[18])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5547  (
    .A(hw2reg[95]),
    .B(hw2reg[96]),
    .Y(new_intrpt[19])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5558  (
    .A(hw2reg[100]),
    .B(hw2reg[101]),
    .Y(new_intrpt[20])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5569  (
    .A(hw2reg[105]),
    .B(hw2reg[106]),
    .Y(new_intrpt[21])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5580  (
    .A(hw2reg[110]),
    .B(hw2reg[111]),
    .Y(new_intrpt[22])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5591  (
    .A(hw2reg[115]),
    .B(hw2reg[116]),
    .Y(new_intrpt[23])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5602  (
    .A(hw2reg[120]),
    .B(hw2reg[121]),
    .Y(new_intrpt[24])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5613  (
    .A(hw2reg[125]),
    .B(hw2reg[126]),
    .Y(new_intrpt[25])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5624  (
    .A(hw2reg[130]),
    .B(hw2reg[131]),
    .Y(new_intrpt[26])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5635  (
    .A(hw2reg[135]),
    .B(hw2reg[136]),
    .Y(new_intrpt[27])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5646  (
    .A(hw2reg[140]),
    .B(hw2reg[141]),
    .Y(new_intrpt[28])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5657  (
    .A(hw2reg[145]),
    .B(hw2reg[146]),
    .Y(new_intrpt[29])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5668  (
    .A(hw2reg[150]),
    .B(hw2reg[151]),
    .Y(new_intrpt[30])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$5679  (
    .A(hw2reg[155]),
    .B(hw2reg[156]),
    .Y(new_intrpt[31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5685  (
    .A({ \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] }),
    .B(reg_q[255:224]),
    .Y(\$auto$builder.cc:338:Biop$5686 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5687  (
    .A({ obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] }),
    .B(obi_req_i[36:5]),
    .Y(\$auto$builder.cc:338:Biop$5688 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5689  (
    .A(\$auto$builder.cc:338:Biop$5686 ),
    .B(\$auto$builder.cc:338:Biop$5688 ),
    .Y(\$auto$builder.cc:338:Biop$5690 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5693  (
    .A({ \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] }),
    .B(reg_q[223:192]),
    .Y(\$auto$builder.cc:338:Biop$5694 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5697  (
    .A(\$auto$builder.cc:338:Biop$5694 ),
    .B(\$auto$builder.cc:338:Biop$5688 ),
    .Y(\$auto$builder.cc:338:Biop$5698 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5701  (
    .A({ \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] }),
    .B(new_reg[159:128]),
    .Y(\$auto$builder.cc:338:Biop$5702 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5705  (
    .A(\$auto$builder.cc:338:Biop$5702 ),
    .B(\$auto$builder.cc:338:Biop$5688 ),
    .Y(\$auto$builder.cc:338:Biop$5706 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5711  (
    .A({ \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] }),
    .B(reg_q[95:64]),
    .Y(\$auto$builder.cc:338:Biop$5712 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5715  (
    .A(\$auto$builder.cc:338:Biop$5712 ),
    .B(\$auto$builder.cc:338:Biop$5688 ),
    .Y(\$auto$builder.cc:338:Biop$5716 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5719  (
    .A({ \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] }),
    .B(reg_q[31:0]),
    .Y(\$auto$builder.cc:338:Biop$5720 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd32),
    .Y_WIDTH(32'd32)
  ) \$auto$builder.cc:330:Biop$5723  (
    .A(\$auto$builder.cc:338:Biop$5720 ),
    .B(\$auto$builder.cc:338:Biop$5688 ),
    .Y(\$auto$builder.cc:338:Biop$5724 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$5250  (
    .A(we_q),
    .Y(\$auto$builder.cc:364:Unop$5251 )
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17855  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$builder.cc:338:Biop$5716 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17856 ),
    .Q(reg_q[95:64])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17858  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$builder.cc:338:Biop$5724 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17859 ),
    .Q(reg_q[31:0])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17861  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$builder.cc:338:Biop$5698 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17862 ),
    .Q(reg_q[223:192])
  );
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17864  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$builder.cc:338:Biop$5690 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$17865 ),
    .Q(reg_q[255:224])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(10'h000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd10)
  ) \$auto$ff.cc:266:slice$17867  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[53:44]),
    .Q(read_addr_q[9:0])
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17857  (
    .A({ \$procmux$14295_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17856 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17860  (
    .A({ \$procmux$14300_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17859 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17863  (
    .A({ \$procmux$14281_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17862 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$17866  (
    .A({ \$procmux$14265_CMP , obi_write_request }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$17865 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17333  (
    .A(obi_req_i[40:37]),
    .Y({ \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7] })
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17202  (
    .A({ \$procmux$14222_CMP , \$procmux$14221_CMP , \$procmux$14220_CMP , \$procmux$14219_CMP , \$procmux$14218_CMP , \$procmux$14217_CMP , \$procmux$14216_CMP , \$procmux$14215_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17203 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17204  (
    .A({ \$procmux$14300_CMP , \$procmux$14295_CMP , \$procmux$14289_CMP , \$procmux$14281_CMP , \$procmux$14272_CMP , \$procmux$14265_CMP  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17205 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5332  (
    .A(reg_q[128]),
    .B(hw2reg[3]),
    .S(hw2reg[2]),
    .Y(new_reg[128])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5336  (
    .A(reg_q[32]),
    .B(hw2reg[1]),
    .S(hw2reg[0]),
    .Y(new_reg[32])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5343  (
    .A(reg_q[129]),
    .B(hw2reg[8]),
    .S(hw2reg[7]),
    .Y(new_reg[129])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5347  (
    .A(reg_q[33]),
    .B(hw2reg[6]),
    .S(hw2reg[5]),
    .Y(new_reg[33])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5354  (
    .A(reg_q[130]),
    .B(hw2reg[13]),
    .S(hw2reg[12]),
    .Y(new_reg[130])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5358  (
    .A(reg_q[34]),
    .B(hw2reg[11]),
    .S(hw2reg[10]),
    .Y(new_reg[34])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5365  (
    .A(reg_q[131]),
    .B(hw2reg[18]),
    .S(hw2reg[17]),
    .Y(new_reg[131])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5369  (
    .A(reg_q[35]),
    .B(hw2reg[16]),
    .S(hw2reg[15]),
    .Y(new_reg[35])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5376  (
    .A(reg_q[132]),
    .B(hw2reg[23]),
    .S(hw2reg[22]),
    .Y(new_reg[132])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5380  (
    .A(reg_q[36]),
    .B(hw2reg[21]),
    .S(hw2reg[20]),
    .Y(new_reg[36])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5387  (
    .A(reg_q[133]),
    .B(hw2reg[28]),
    .S(hw2reg[27]),
    .Y(new_reg[133])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5391  (
    .A(reg_q[37]),
    .B(hw2reg[26]),
    .S(hw2reg[25]),
    .Y(new_reg[37])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5398  (
    .A(reg_q[134]),
    .B(hw2reg[33]),
    .S(hw2reg[32]),
    .Y(new_reg[134])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5402  (
    .A(reg_q[38]),
    .B(hw2reg[31]),
    .S(hw2reg[30]),
    .Y(new_reg[38])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5409  (
    .A(reg_q[135]),
    .B(hw2reg[38]),
    .S(hw2reg[37]),
    .Y(new_reg[135])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5413  (
    .A(reg_q[39]),
    .B(hw2reg[36]),
    .S(hw2reg[35]),
    .Y(new_reg[39])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5420  (
    .A(reg_q[136]),
    .B(hw2reg[43]),
    .S(hw2reg[42]),
    .Y(new_reg[136])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5424  (
    .A(reg_q[40]),
    .B(hw2reg[41]),
    .S(hw2reg[40]),
    .Y(new_reg[40])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5431  (
    .A(reg_q[137]),
    .B(hw2reg[48]),
    .S(hw2reg[47]),
    .Y(new_reg[137])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5435  (
    .A(reg_q[41]),
    .B(hw2reg[46]),
    .S(hw2reg[45]),
    .Y(new_reg[41])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5442  (
    .A(reg_q[138]),
    .B(hw2reg[53]),
    .S(hw2reg[52]),
    .Y(new_reg[138])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5446  (
    .A(reg_q[42]),
    .B(hw2reg[51]),
    .S(hw2reg[50]),
    .Y(new_reg[42])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5453  (
    .A(reg_q[139]),
    .B(hw2reg[58]),
    .S(hw2reg[57]),
    .Y(new_reg[139])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5457  (
    .A(reg_q[43]),
    .B(hw2reg[56]),
    .S(hw2reg[55]),
    .Y(new_reg[43])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5464  (
    .A(reg_q[140]),
    .B(hw2reg[63]),
    .S(hw2reg[62]),
    .Y(new_reg[140])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5468  (
    .A(reg_q[44]),
    .B(hw2reg[61]),
    .S(hw2reg[60]),
    .Y(new_reg[44])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5475  (
    .A(reg_q[141]),
    .B(hw2reg[68]),
    .S(hw2reg[67]),
    .Y(new_reg[141])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5479  (
    .A(reg_q[45]),
    .B(hw2reg[66]),
    .S(hw2reg[65]),
    .Y(new_reg[45])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5486  (
    .A(reg_q[142]),
    .B(hw2reg[73]),
    .S(hw2reg[72]),
    .Y(new_reg[142])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5490  (
    .A(reg_q[46]),
    .B(hw2reg[71]),
    .S(hw2reg[70]),
    .Y(new_reg[46])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5497  (
    .A(reg_q[143]),
    .B(hw2reg[78]),
    .S(hw2reg[77]),
    .Y(new_reg[143])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5501  (
    .A(reg_q[47]),
    .B(hw2reg[76]),
    .S(hw2reg[75]),
    .Y(new_reg[47])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5508  (
    .A(reg_q[144]),
    .B(hw2reg[83]),
    .S(hw2reg[82]),
    .Y(new_reg[144])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5512  (
    .A(reg_q[48]),
    .B(hw2reg[81]),
    .S(hw2reg[80]),
    .Y(new_reg[48])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5519  (
    .A(reg_q[145]),
    .B(hw2reg[88]),
    .S(hw2reg[87]),
    .Y(new_reg[145])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5523  (
    .A(reg_q[49]),
    .B(hw2reg[86]),
    .S(hw2reg[85]),
    .Y(new_reg[49])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5530  (
    .A(reg_q[146]),
    .B(hw2reg[93]),
    .S(hw2reg[92]),
    .Y(new_reg[146])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5534  (
    .A(reg_q[50]),
    .B(hw2reg[91]),
    .S(hw2reg[90]),
    .Y(new_reg[50])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5541  (
    .A(reg_q[147]),
    .B(hw2reg[98]),
    .S(hw2reg[97]),
    .Y(new_reg[147])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5545  (
    .A(reg_q[51]),
    .B(hw2reg[96]),
    .S(hw2reg[95]),
    .Y(new_reg[51])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5552  (
    .A(reg_q[148]),
    .B(hw2reg[103]),
    .S(hw2reg[102]),
    .Y(new_reg[148])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5556  (
    .A(reg_q[52]),
    .B(hw2reg[101]),
    .S(hw2reg[100]),
    .Y(new_reg[52])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5563  (
    .A(reg_q[149]),
    .B(hw2reg[108]),
    .S(hw2reg[107]),
    .Y(new_reg[149])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5567  (
    .A(reg_q[53]),
    .B(hw2reg[106]),
    .S(hw2reg[105]),
    .Y(new_reg[53])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5574  (
    .A(reg_q[150]),
    .B(hw2reg[113]),
    .S(hw2reg[112]),
    .Y(new_reg[150])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5578  (
    .A(reg_q[54]),
    .B(hw2reg[111]),
    .S(hw2reg[110]),
    .Y(new_reg[54])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5585  (
    .A(reg_q[151]),
    .B(hw2reg[118]),
    .S(hw2reg[117]),
    .Y(new_reg[151])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5589  (
    .A(reg_q[55]),
    .B(hw2reg[116]),
    .S(hw2reg[115]),
    .Y(new_reg[55])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5596  (
    .A(reg_q[152]),
    .B(hw2reg[123]),
    .S(hw2reg[122]),
    .Y(new_reg[152])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5600  (
    .A(reg_q[56]),
    .B(hw2reg[121]),
    .S(hw2reg[120]),
    .Y(new_reg[56])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5607  (
    .A(reg_q[153]),
    .B(hw2reg[128]),
    .S(hw2reg[127]),
    .Y(new_reg[153])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5611  (
    .A(reg_q[57]),
    .B(hw2reg[126]),
    .S(hw2reg[125]),
    .Y(new_reg[57])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5618  (
    .A(reg_q[154]),
    .B(hw2reg[133]),
    .S(hw2reg[132]),
    .Y(new_reg[154])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5622  (
    .A(reg_q[58]),
    .B(hw2reg[131]),
    .S(hw2reg[130]),
    .Y(new_reg[58])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5629  (
    .A(reg_q[155]),
    .B(hw2reg[138]),
    .S(hw2reg[137]),
    .Y(new_reg[155])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5633  (
    .A(reg_q[59]),
    .B(hw2reg[136]),
    .S(hw2reg[135]),
    .Y(new_reg[59])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5640  (
    .A(reg_q[156]),
    .B(hw2reg[143]),
    .S(hw2reg[142]),
    .Y(new_reg[156])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5644  (
    .A(reg_q[60]),
    .B(hw2reg[141]),
    .S(hw2reg[140]),
    .Y(new_reg[60])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5651  (
    .A(reg_q[157]),
    .B(hw2reg[148]),
    .S(hw2reg[147]),
    .Y(new_reg[157])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5655  (
    .A(reg_q[61]),
    .B(hw2reg[146]),
    .S(hw2reg[145]),
    .Y(new_reg[61])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5662  (
    .A(reg_q[158]),
    .B(hw2reg[153]),
    .S(hw2reg[152]),
    .Y(new_reg[158])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5666  (
    .A(reg_q[62]),
    .B(hw2reg[151]),
    .S(hw2reg[150]),
    .Y(new_reg[62])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5673  (
    .A(reg_q[159]),
    .B(hw2reg[158]),
    .S(hw2reg[157]),
    .Y(new_reg[159])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$5677  (
    .A(reg_q[63]),
    .B(hw2reg[156]),
    .S(hw2reg[155]),
    .Y(new_reg[63])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[2]),
    .Q(id_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.in  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4] }),
    .Q(reg_q[191:160])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.intrpt  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_d[63:32]),
    .Q(reg_q[63:32])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$reg_q.out  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_d[159:128]),
    .Q(reg_q[159:128])
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[0]),
    .Q(req_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$w_err_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(w_err_d),
    .Q(w_err_q)
  );
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$we_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[41]),
    .Q(we_q)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:237.11-237.41|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$pmux  #(
    .S_WIDTH(32'd8),
    .WIDTH(32'd32)
  ) \$procmux$14214  (
    .A(32'd3135023902),
    .B({ reg_q[255:128], 32'h00000000, reg_q[95:0] }),
    .S({ \$procmux$14222_CMP , \$procmux$14221_CMP , \$procmux$14220_CMP , \$procmux$14219_CMP , \$procmux$14218_CMP , \$procmux$14217_CMP , \$procmux$14216_CMP , \$procmux$14215_CMP  }),
    .Y(\$auto$slang_frontend.cc:694:finish$\obi_rdata$5741 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:237.11-237.41|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14215_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0e0),
    .Y(\$procmux$14215_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:230.36-234.12|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14216_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0c0),
    .Y(\$procmux$14216_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:227.11-227.39|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14217_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h0a0),
    .Y(\$procmux$14217_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:223.11-223.26|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14218_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h080),
    .Y(\$procmux$14218_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:219.11-219.33|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14219_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h060),
    .Y(\$procmux$14219_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:215.11-215.32|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14220_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h040),
    .Y(\$procmux$14220_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:211.11-211.32|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14221_CMP0  (
    .A(read_addr_q[9:0]),
    .B(10'h020),
    .Y(\$procmux$14221_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:207.11-207.33|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14222_CMP0  (
    .A(read_addr_q[9:0]),
    .Y(\$procmux$14222_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:230.36-234.12|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14228  (
    .A(new_reg[63:32]),
    .B(new_intrpt),
    .S(\$procmux$14216_CMP ),
    .Y(\$auto$slang_frontend.cc:694:finish$\reg_d[32]$5742 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:237.11-237.41|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14234  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17203 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\obi_err$5740 )
  );
  /* src = "../rtl/gpio/gpio_reg_top.sv:203.27-245.8|../rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14247  (
    .A(new_reg[63:32]),
    .B(\$auto$slang_frontend.cc:694:finish$\reg_d[32]$5742 ),
    .S(obi_read_request),
    .Y(reg_d[63:32])
  );
  /* src = "../rtl/gpio/gpio_reg_top.sv:203.27-245.8|../rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14251  (
    .A(32'd0),
    .B(\$auto$slang_frontend.cc:694:finish$\obi_rdata$5741 ),
    .S(obi_read_request),
    .Y(obi_rdata)
  );
  /* src = "../rtl/gpio/gpio_reg_top.sv:203.27-245.8|../rtl/gpio/gpio_reg_top.sv:203.5-245.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14255  (
    .A(\$auto$slang_frontend.cc:694:finish$\obi_err$5731 ),
    .B(\$auto$slang_frontend.cc:694:finish$\obi_err$5740 ),
    .S(obi_read_request),
    .Y(obi_err)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:169.11-169.89|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) \$procmux$14265_CMP0  (
    .A(obi_req_i[53:44]),
    .Y(\$procmux$14265_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:182.11-182.60|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14271  (
    .A(32'd0),
    .B(\$auto$builder.cc:338:Biop$5688 ),
    .S(\$procmux$14272_CMP ),
    .Y(\$auto$slang_frontend.cc:694:finish$\toggle_out$5730 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:182.11-182.60|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$14272_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'h80),
    .Y(\$procmux$14272_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:173.11-173.87|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$procmux$14281_CMP0  (
    .A(obi_req_i[53:44]),
    .B(6'h20),
    .Y(\$procmux$14281_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:177.11-178.77|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14288  (
    .A(new_reg[159:128]),
    .B(\$auto$builder.cc:338:Biop$5706 ),
    .S(\$procmux$14289_CMP ),
    .Y(\$auto$slang_frontend.cc:694:finish$\reg_d[128]$5728 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:177.11-178.77|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$procmux$14289_CMP0  (
    .A(obi_req_i[53:44]),
    .B(7'h60),
    .Y(\$procmux$14289_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:186.11-187.85|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$14295_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'ha0),
    .Y(\$procmux$14295_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:191.11-192.87|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$procmux$14300_CMP0  (
    .A(obi_req_i[53:44]),
    .B(8'he0),
    .Y(\$procmux$14300_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/gpio/gpio_reg_top.sv:191.11-192.87|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14304  (
    .A(\$auto$opt_reduce.cc:137:opt_pmux$17205 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\w_err_d$5725 )
  );
  /* src = "../rtl/gpio/gpio_reg_top.sv:165.28-199.8|../rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14314  (
    .A(32'd0),
    .B(\$auto$slang_frontend.cc:694:finish$\toggle_out$5730 ),
    .S(obi_write_request),
    .Y(toggle_out)
  );
  /* src = "../rtl/gpio/gpio_reg_top.sv:165.28-199.8|../rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd32)
  ) \$procmux$14320  (
    .A(new_reg[159:128]),
    .B(\$auto$slang_frontend.cc:694:finish$\reg_d[128]$5728 ),
    .S(obi_write_request),
    .Y(reg_d[159:128])
  );
  /* src = "../rtl/gpio/gpio_reg_top.sv:165.28-199.8|../rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14329  (
    .A(obi_write_request),
    .B(\$auto$slang_frontend.cc:694:finish$\w_err_d$5725 ),
    .Y(w_err_d)
  );
  /* src = "../rtl/gpio/gpio_reg_top.sv:165.28-199.8|../rtl/gpio/gpio_reg_top.sv:165.5-199.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14332  (
    .A(w_err_q),
    .B(1'h0),
    .S(obi_write_request),
    .Y(\$auto$slang_frontend.cc:694:finish$\obi_err$5731 )
  );
  assign { \$auto$builder.cc:364:Unop$5684 [30:24], \$auto$builder.cc:364:Unop$5684 [22:16], \$auto$builder.cc:364:Unop$5684 [14:8], \$auto$builder.cc:364:Unop$5684 [6:0] } = { \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] };
  assign bit_mask = { obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] };
  assign id_d = obi_req_i[2];
  assign { new_reg[255:160], new_reg[127:64], new_reg[31:0] } = { reg_q[255:192], hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 32'h00000000, reg_q[95:64], reg_q[31:0] };
  assign obi_rsp_o = { obi_rdata, 2'h0, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign obi_wdata = obi_req_i[36:5];
  assign read_addr_d = obi_req_i[53:44];
  assign read_addr_q[11:10] = 2'h0;
  assign reg2hw = { reg_q[255], reg_q[223], reg_q[159], toggle_out[31], reg_q[95], reg_q[63], reg_q[31], reg_q[254], reg_q[222], reg_q[158], toggle_out[30], reg_q[94], reg_q[62], reg_q[30], reg_q[253], reg_q[221], reg_q[157], toggle_out[29], reg_q[93], reg_q[61], reg_q[29], reg_q[252], reg_q[220], reg_q[156], toggle_out[28], reg_q[92], reg_q[60], reg_q[28], reg_q[251], reg_q[219], reg_q[155], toggle_out[27], reg_q[91], reg_q[59], reg_q[27], reg_q[250], reg_q[218], reg_q[154], toggle_out[26], reg_q[90], reg_q[58], reg_q[26], reg_q[249], reg_q[217], reg_q[153], toggle_out[25], reg_q[89], reg_q[57], reg_q[25], reg_q[248], reg_q[216], reg_q[152], toggle_out[24], reg_q[88], reg_q[56], reg_q[24], reg_q[247], reg_q[215], reg_q[151], toggle_out[23], reg_q[87], reg_q[55], reg_q[23], reg_q[246], reg_q[214], reg_q[150], toggle_out[22], reg_q[86], reg_q[54], reg_q[22], reg_q[245], reg_q[213], reg_q[149], toggle_out[21], reg_q[85], reg_q[53], reg_q[21], reg_q[244], reg_q[212], reg_q[148], toggle_out[20], reg_q[84], reg_q[52], reg_q[20], reg_q[243], reg_q[211], reg_q[147], toggle_out[19], reg_q[83], reg_q[51], reg_q[19], reg_q[242], reg_q[210], reg_q[146], toggle_out[18], reg_q[82], reg_q[50], reg_q[18], reg_q[241], reg_q[209], reg_q[145], toggle_out[17], reg_q[81], reg_q[49], reg_q[17], reg_q[240], reg_q[208], reg_q[144], toggle_out[16], reg_q[80], reg_q[48], reg_q[16], reg_q[239], reg_q[207], reg_q[143], toggle_out[15], reg_q[79], reg_q[47], reg_q[15], reg_q[238], reg_q[206], reg_q[142], toggle_out[14], reg_q[78], reg_q[46], reg_q[14], reg_q[237], reg_q[205], reg_q[141], toggle_out[13], reg_q[77], reg_q[45], reg_q[13], reg_q[236], reg_q[204], reg_q[140], toggle_out[12], reg_q[76], reg_q[44], reg_q[12], reg_q[235], reg_q[203], reg_q[139], toggle_out[11], reg_q[75], reg_q[43], reg_q[11], reg_q[234], reg_q[202], reg_q[138], toggle_out[10], reg_q[74], reg_q[42], reg_q[10], reg_q[233], reg_q[201], reg_q[137], toggle_out[9], reg_q[73], reg_q[41], reg_q[9], reg_q[232], reg_q[200], reg_q[136], toggle_out[8], reg_q[72], reg_q[40], reg_q[8], reg_q[231], reg_q[199], reg_q[135], toggle_out[7], reg_q[71], reg_q[39], reg_q[7], reg_q[230], reg_q[198], reg_q[134], toggle_out[6], reg_q[70], reg_q[38], reg_q[6], reg_q[229], reg_q[197], reg_q[133], toggle_out[5], reg_q[69], reg_q[37], reg_q[5], reg_q[228], reg_q[196], reg_q[132], toggle_out[4], reg_q[68], reg_q[36], reg_q[4], reg_q[227], reg_q[195], reg_q[131], toggle_out[3], reg_q[67], reg_q[35], reg_q[3], reg_q[226], reg_q[194], reg_q[130], toggle_out[2], reg_q[66], reg_q[34], reg_q[2], reg_q[225], reg_q[193], reg_q[129], toggle_out[1], reg_q[65], reg_q[33], reg_q[1], reg_q[224], reg_q[192], reg_q[128], toggle_out[0], reg_q[64], reg_q[32], reg_q[0] };
  assign { reg_d[255:160], reg_d[127:64], reg_d[31:0] } = { 64'hxxxxxxxxxxxxxxxx, hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 96'h00000000xxxxxxxxxxxxxxxx };
  assign reg_q[127:96] = 32'hxxxxxxxx;
  assign req_d = obi_req_i[0];
  assign valid_d = obi_req_i[0];
  assign valid_q = req_q;
  assign we_d = obi_req_i[41];
  assign write_addr = obi_req_i[53:44];
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9487  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9495  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9503  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9517  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9493  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9501  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9509  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9426  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9434  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9442  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9456  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9432  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9440  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9448  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9609  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9617  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9625  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9639  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9615  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9623  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9631  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9548  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9556  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9564  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9578  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9554  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9562  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9570  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9731  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9739  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9747  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9761  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9737  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9745  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9753  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9670  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9678  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9686  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9700  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9676  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9684  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9692  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9853  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9861  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9869  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9883  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9859  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9867  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9875  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9792  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9800  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9808  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9822  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9798  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9806  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9814  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9975  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9983  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9991  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$10005  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9981  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9989  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9997  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/common_cells/lzc.sv:17.8" */
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  /* src = "../rtl/common_cells/lzc.sv:30.32" */
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  /* src = "../rtl/common_cells/lzc.sv:32.32" */
  output empty_o;
  wire empty_o;
  /* src = "../rtl/common_cells/lzc.sv:52.23" */
  wire [3:0] \gen_lzc.in_tmp ;
  /* src = "../rtl/common_cells/lzc.sv:48.38" */
  wire [7:0] \gen_lzc.index_lut ;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  /* src = "../rtl/common_cells/lzc.sv:28.32" */
  input [3:0] in_i;
  wire [3:0] in_i;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9914  (
    .A(\gen_lzc.sel_nodes [1]),
    .B(\gen_lzc.sel_nodes [2]),
    .Y(\gen_lzc.sel_nodes [0])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9922  (
    .A(in_i[0]),
    .B(in_i[1]),
    .Y(\gen_lzc.sel_nodes [1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9930  (
    .A(in_i[2]),
    .B(in_i[3]),
    .Y(\gen_lzc.sel_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9944  (
    .A(\gen_lzc.sel_nodes [0]),
    .Y(empty_o)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$9920  (
    .A({ 1'h1, \gen_lzc.index_nodes [4] }),
    .B({ 1'h0, \gen_lzc.index_nodes [2] }),
    .S(\gen_lzc.sel_nodes [1]),
    .Y(cnt_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9928  (
    .A(in_i[0]),
    .Y(\gen_lzc.index_nodes [2])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9936  (
    .A(in_i[2]),
    .Y(\gen_lzc.index_nodes [4])
  );
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

/* src = "../rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$auto$builder.cc:338:Biop$2887 ;
  wire \$auto$builder.cc:338:Biop$2889 ;
  wire \$auto$builder.cc:338:Biop$2891 ;
  wire \$auto$builder.cc:338:Biop$2895 ;
  wire \$auto$builder.cc:338:Biop$2897 ;
  wire \$auto$builder.cc:338:Biop$2977 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17334 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:2874:Mux$2933 ;
  wire \$auto$rtlil.cc:2874:Mux$2943 ;
  /* unused_bits = "1" */
  wire [36:0] \$auto$rtlil.cc:2874:Mux$2961 ;
  wire [359:0] \$auto$rtlil.cc:2875:Bwmux$2927 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$auto$rtlil.cc:2895:Bmux$2931 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$auto$rtlil.cc:2895:Bmux$2941 ;
  /* unused_bits = "360 432 504" */
  wire [575:0] \$auto$rtlil.cc:2896:Demux$2909 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2934 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2935 ;
  /* src = "../rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "../rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "../rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "../rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "../rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "../rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "../rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "../rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "../rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "../rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "../rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "../rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$auto$builder.cc:128:Bwmux$2926  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], 1'h0, \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], 1'h0, \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], 1'h0, \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], 1'h0, \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$2927 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$auto$builder.cc:195:Bmux$2930  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$2931 [36:2], \$auto$rtlil.cc:2874:Mux$2933  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$auto$builder.cc:195:Bmux$2940  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$2941 [71:1], \$auto$rtlil.cc:2874:Mux$2943  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$auto$builder.cc:195:Bmux$2958  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$auto$rtlil.cc:2874:Mux$2961 [1], cnt_down })
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2886  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$auto$builder.cc:338:Biop$2887 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2888  (
    .A(in_flight),
    .Y(\$auto$builder.cc:338:Biop$2889 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2890  (
    .A(\$auto$builder.cc:338:Biop$2887 ),
    .B(\$auto$builder.cc:338:Biop$2889 ),
    .Y(\$auto$builder.cc:338:Biop$2891 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2894  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$2895 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2896  (
    .A(\$auto$builder.cc:338:Biop$2891 ),
    .B(\$auto$builder.cc:338:Biop$2895 ),
    .Y(\$auto$builder.cc:338:Biop$2897 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2950  (
    .A(\$auto$rtlil.cc:2874:Mux$2943 ),
    .B(\$auto$rtlil.cc:2874:Mux$2933 [1]),
    .Y(cnt_up)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2976  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$2977 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$2908  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2896:Demux$2909 [504], \$auto$rtlil.cc:2896:Demux$2909 [432], \$auto$rtlil.cc:2896:Demux$2909 [360], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [0] })
  );
  /* src = "../rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17868  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17335  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17334 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15082  (
    .A(\$auto$builder.cc:338:Biop$2897 ),
    .B(\$auto$rtlil.cc:2874:Mux$2933 [1]),
    .Y(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2935 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$15086  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:2875:Bwmux$2927 ),
    .S(\$auto$builder.cc:338:Biop$2897 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2934 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15091  (
    .A(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2935 ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$15094  (
    .A(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2934 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "../rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$auto$builder.cc:338:Biop$2977 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$2961 [36:2], \$auto$rtlil.cc:2874:Mux$2961 [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign \$auto$rtlil.cc:2895:Bmux$2931 [1:0] = \$auto$rtlil.cc:2874:Mux$2933 ;
  assign \$auto$rtlil.cc:2895:Bmux$2941 [0] = \$auto$rtlil.cc:2874:Mux$2943 ;
  assign { \$auto$rtlil.cc:2896:Demux$2909 [575:505], \$auto$rtlil.cc:2896:Demux$2909 [503:433], \$auto$rtlil.cc:2896:Demux$2909 [431:361], \$auto$rtlil.cc:2896:Demux$2909 [359:289], \$auto$rtlil.cc:2896:Demux$2909 [287:217], \$auto$rtlil.cc:2896:Demux$2909 [215:145], \$auto$rtlil.cc:2896:Demux$2909 [143:73], \$auto$rtlil.cc:2896:Demux$2909 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "../rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$auto$builder.cc:338:Biop$2996 ;
  wire \$auto$builder.cc:338:Biop$2998 ;
  wire \$auto$builder.cc:338:Biop$3000 ;
  wire \$auto$builder.cc:338:Biop$3004 ;
  wire \$auto$builder.cc:338:Biop$3006 ;
  wire \$auto$builder.cc:338:Biop$3086 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17337 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:2874:Mux$3042 ;
  wire \$auto$rtlil.cc:2874:Mux$3052 ;
  /* unused_bits = "1" */
  wire [36:0] \$auto$rtlil.cc:2874:Mux$3070 ;
  wire [359:0] \$auto$rtlil.cc:2875:Bwmux$3036 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$auto$rtlil.cc:2895:Bmux$3040 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$auto$rtlil.cc:2895:Bmux$3050 ;
  /* unused_bits = "360 432 504" */
  wire [575:0] \$auto$rtlil.cc:2896:Demux$3018 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3043 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3044 ;
  /* src = "../rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "../rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "../rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "../rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "../rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "../rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "../rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "../rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "../rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "../rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "../rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "../rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$auto$builder.cc:128:Bwmux$3035  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], 1'h0, \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], 1'h0, \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], 1'h0, \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], 1'h0, \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3036 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$auto$builder.cc:195:Bmux$3039  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$3040 [36:2], \$auto$rtlil.cc:2874:Mux$3042  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$auto$builder.cc:195:Bmux$3049  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$3050 [71:1], \$auto$rtlil.cc:2874:Mux$3052  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$auto$builder.cc:195:Bmux$3067  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$auto$rtlil.cc:2874:Mux$3070 [1], cnt_down })
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2995  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$auto$builder.cc:338:Biop$2996 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2997  (
    .A(in_flight),
    .Y(\$auto$builder.cc:338:Biop$2998 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2999  (
    .A(\$auto$builder.cc:338:Biop$2996 ),
    .B(\$auto$builder.cc:338:Biop$2998 ),
    .Y(\$auto$builder.cc:338:Biop$3000 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3003  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$3004 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3005  (
    .A(\$auto$builder.cc:338:Biop$3000 ),
    .B(\$auto$builder.cc:338:Biop$3004 ),
    .Y(\$auto$builder.cc:338:Biop$3006 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3059  (
    .A(\$auto$rtlil.cc:2874:Mux$3052 ),
    .B(\$auto$rtlil.cc:2874:Mux$3042 [1]),
    .Y(cnt_up)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3085  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$3086 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$3017  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2896:Demux$3018 [504], \$auto$rtlil.cc:2896:Demux$3018 [432], \$auto$rtlil.cc:2896:Demux$3018 [360], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [0] })
  );
  /* src = "../rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17869  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17338  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17337 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15062  (
    .A(\$auto$builder.cc:338:Biop$3006 ),
    .B(\$auto$rtlil.cc:2874:Mux$3042 [1]),
    .Y(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3044 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$15066  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:2875:Bwmux$3036 ),
    .S(\$auto$builder.cc:338:Biop$3006 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3043 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15071  (
    .A(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3044 ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$15074  (
    .A(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3043 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "../rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$auto$builder.cc:338:Biop$3086 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$3070 [36:2], \$auto$rtlil.cc:2874:Mux$3070 [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign \$auto$rtlil.cc:2895:Bmux$3040 [1:0] = \$auto$rtlil.cc:2874:Mux$3042 ;
  assign \$auto$rtlil.cc:2895:Bmux$3050 [0] = \$auto$rtlil.cc:2874:Mux$3052 ;
  assign { \$auto$rtlil.cc:2896:Demux$3018 [575:505], \$auto$rtlil.cc:2896:Demux$3018 [503:433], \$auto$rtlil.cc:2896:Demux$3018 [431:361], \$auto$rtlil.cc:2896:Demux$3018 [359:289], \$auto$rtlil.cc:2896:Demux$3018 [287:217], \$auto$rtlil.cc:2896:Demux$3018 [215:145], \$auto$rtlil.cc:2896:Demux$3018 [143:73], \$auto$rtlil.cc:2896:Demux$3018 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "../rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$auto$builder.cc:338:Biop$3105 ;
  wire \$auto$builder.cc:338:Biop$3107 ;
  wire \$auto$builder.cc:338:Biop$3109 ;
  wire \$auto$builder.cc:338:Biop$3113 ;
  wire \$auto$builder.cc:338:Biop$3115 ;
  wire \$auto$builder.cc:338:Biop$3195 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17340 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:2874:Mux$3151 ;
  wire \$auto$rtlil.cc:2874:Mux$3161 ;
  /* unused_bits = "1" */
  wire [36:0] \$auto$rtlil.cc:2874:Mux$3179 ;
  wire [359:0] \$auto$rtlil.cc:2875:Bwmux$3145 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$auto$rtlil.cc:2895:Bmux$3149 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$auto$rtlil.cc:2895:Bmux$3159 ;
  /* unused_bits = "360 432 504" */
  wire [575:0] \$auto$rtlil.cc:2896:Demux$3127 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3152 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3153 ;
  /* src = "../rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "../rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "../rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "../rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "../rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "../rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "../rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "../rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "../rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "../rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "../rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "../rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$auto$builder.cc:128:Bwmux$3144  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], 1'h0, \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], 1'h0, \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], 1'h0, \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], 1'h0, \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3145 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$auto$builder.cc:195:Bmux$3148  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$3149 [36:2], \$auto$rtlil.cc:2874:Mux$3151  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$auto$builder.cc:195:Bmux$3158  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$3159 [71:1], \$auto$rtlil.cc:2874:Mux$3161  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$auto$builder.cc:195:Bmux$3176  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$auto$rtlil.cc:2874:Mux$3179 [1], cnt_down })
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3104  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$auto$builder.cc:338:Biop$3105 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3106  (
    .A(in_flight),
    .Y(\$auto$builder.cc:338:Biop$3107 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3108  (
    .A(\$auto$builder.cc:338:Biop$3105 ),
    .B(\$auto$builder.cc:338:Biop$3107 ),
    .Y(\$auto$builder.cc:338:Biop$3109 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3112  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$3113 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3114  (
    .A(\$auto$builder.cc:338:Biop$3109 ),
    .B(\$auto$builder.cc:338:Biop$3113 ),
    .Y(\$auto$builder.cc:338:Biop$3115 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3168  (
    .A(\$auto$rtlil.cc:2874:Mux$3161 ),
    .B(\$auto$rtlil.cc:2874:Mux$3151 [1]),
    .Y(cnt_up)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3194  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$3195 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$3126  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2896:Demux$3127 [504], \$auto$rtlil.cc:2896:Demux$3127 [432], \$auto$rtlil.cc:2896:Demux$3127 [360], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [0] })
  );
  /* src = "../rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17870  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17341  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17340 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15042  (
    .A(\$auto$builder.cc:338:Biop$3115 ),
    .B(\$auto$rtlil.cc:2874:Mux$3151 [1]),
    .Y(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3153 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$15046  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:2875:Bwmux$3145 ),
    .S(\$auto$builder.cc:338:Biop$3115 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3152 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15051  (
    .A(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3153 ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$15054  (
    .A(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3152 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "../rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$auto$builder.cc:338:Biop$3195 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$3179 [36:2], \$auto$rtlil.cc:2874:Mux$3179 [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign \$auto$rtlil.cc:2895:Bmux$3149 [1:0] = \$auto$rtlil.cc:2874:Mux$3151 ;
  assign \$auto$rtlil.cc:2895:Bmux$3159 [0] = \$auto$rtlil.cc:2874:Mux$3161 ;
  assign { \$auto$rtlil.cc:2896:Demux$3127 [575:505], \$auto$rtlil.cc:2896:Demux$3127 [503:433], \$auto$rtlil.cc:2896:Demux$3127 [431:361], \$auto$rtlil.cc:2896:Demux$3127 [359:289], \$auto$rtlil.cc:2896:Demux$3127 [287:217], \$auto$rtlil.cc:2896:Demux$3127 [215:145], \$auto$rtlil.cc:2896:Demux$3127 [143:73], \$auto$rtlil.cc:2896:Demux$3127 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "../rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$auto$builder.cc:338:Biop$3214 ;
  wire \$auto$builder.cc:338:Biop$3216 ;
  wire \$auto$builder.cc:338:Biop$3218 ;
  wire \$auto$builder.cc:338:Biop$3222 ;
  wire \$auto$builder.cc:338:Biop$3224 ;
  wire \$auto$builder.cc:338:Biop$3304 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17343 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:2874:Mux$3260 ;
  wire \$auto$rtlil.cc:2874:Mux$3270 ;
  /* unused_bits = "1" */
  wire [36:0] \$auto$rtlil.cc:2874:Mux$3288 ;
  wire [359:0] \$auto$rtlil.cc:2875:Bwmux$3254 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" */
  wire [36:0] \$auto$rtlil.cc:2895:Bmux$3258 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" */
  wire [71:0] \$auto$rtlil.cc:2895:Bmux$3268 ;
  /* unused_bits = "360 432 504" */
  wire [575:0] \$auto$rtlil.cc:2896:Demux$3236 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [359:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3261 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3262 ;
  /* src = "../rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "../rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "../rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "../rtl/obi/obi_demux.sv:28.38" */
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  /* src = "../rtl/obi/obi_demux.sv:29.38" */
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  /* src = "../rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "../rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "../rtl/obi/obi_demux.sv:25.38" */
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  /* src = "../rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "../rtl/obi/obi_demux.sv:26.38" */
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  /* src = "../rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "../rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$auto$builder.cc:128:Bwmux$3253  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], 1'h0, \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], 1'h0, \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], 1'h0, \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], 1'h0, \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3254 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$auto$builder.cc:195:Bmux$3257  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$3258 [36:2], \$auto$rtlil.cc:2874:Mux$3260  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd72)
  ) \$auto$builder.cc:195:Bmux$3267  (
    .A({ 216'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$3268 [71:1], \$auto$rtlil.cc:2874:Mux$3270  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd37)
  ) \$auto$builder.cc:195:Bmux$3285  (
    .A({ 111'hxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[36:2], \$auto$rtlil.cc:2874:Mux$3288 [1], cnt_down })
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3213  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$auto$builder.cc:338:Biop$3214 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3215  (
    .A(in_flight),
    .Y(\$auto$builder.cc:338:Biop$3216 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3217  (
    .A(\$auto$builder.cc:338:Biop$3214 ),
    .B(\$auto$builder.cc:338:Biop$3216 ),
    .Y(\$auto$builder.cc:338:Biop$3218 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3221  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$3222 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3223  (
    .A(\$auto$builder.cc:338:Biop$3218 ),
    .B(\$auto$builder.cc:338:Biop$3222 ),
    .Y(\$auto$builder.cc:338:Biop$3224 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3277  (
    .A(\$auto$rtlil.cc:2874:Mux$3270 ),
    .B(\$auto$rtlil.cc:2874:Mux$3260 [1]),
    .Y(cnt_up)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3303  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$3304 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$3235  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2896:Demux$3236 [504], \$auto$rtlil.cc:2896:Demux$3236 [432], \$auto$rtlil.cc:2896:Demux$3236 [360], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [0] })
  );
  /* src = "../rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17871  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17344  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17343 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15022  (
    .A(\$auto$builder.cc:338:Biop$3224 ),
    .B(\$auto$rtlil.cc:2874:Mux$3260 [1]),
    .Y(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3262 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$15026  (
    .A(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:2875:Bwmux$3254 ),
    .S(\$auto$builder.cc:338:Biop$3224 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3261 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15031  (
    .A(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3262 ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd360)
  ) \$procmux$15034  (
    .A(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3261 ),
    .B(360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "../rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$auto$builder.cc:338:Biop$3304 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$3288 [36:2], \$auto$rtlil.cc:2874:Mux$3288 [0] } = { sbr_port_rsp_o[36:2], cnt_down };
  assign \$auto$rtlil.cc:2895:Bmux$3258 [1:0] = \$auto$rtlil.cc:2874:Mux$3260 ;
  assign \$auto$rtlil.cc:2895:Bmux$3268 [0] = \$auto$rtlil.cc:2874:Mux$3270 ;
  assign { \$auto$rtlil.cc:2896:Demux$3236 [575:505], \$auto$rtlil.cc:2896:Demux$3236 [503:433], \$auto$rtlil.cc:2896:Demux$3236 [431:361], \$auto$rtlil.cc:2896:Demux$3236 [359:289], \$auto$rtlil.cc:2896:Demux$3236 [287:217], \$auto$rtlil.cc:2896:Demux$3236 [215:145], \$auto$rtlil.cc:2896:Demux$3236 [143:73], \$auto$rtlil.cc:2896:Demux$3236 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "../rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$auto$builder.cc:338:Biop$1042 ;
  wire \$auto$builder.cc:338:Biop$1044 ;
  wire \$auto$builder.cc:338:Biop$1046 ;
  wire \$auto$builder.cc:338:Biop$1050 ;
  wire \$auto$builder.cc:338:Biop$1052 ;
  wire \$auto$builder.cc:338:Biop$1132 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17346 ;
  /* unused_bits = "0" */
  wire [1:0] \$auto$rtlil.cc:2874:Mux$1088 ;
  wire \$auto$rtlil.cc:2874:Mux$1098 ;
  /* unused_bits = "1" */
  wire [38:0] \$auto$rtlil.cc:2874:Mux$1116 ;
  wire [443:0] \$auto$rtlil.cc:2875:Bwmux$1082 ;
  /* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38" */
  wire [38:0] \$auto$rtlil.cc:2895:Bmux$1086 ;
  /* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" */
  wire [73:0] \$auto$rtlil.cc:2895:Bmux$1096 ;
  /* unused_bits = "444 518" */
  wire [591:0] \$auto$rtlil.cc:2896:Demux$1064 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [443:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$1089 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$1090 ;
  /* src = "../rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "../rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "../rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "../rtl/obi/obi_demux.sv:28.38" */
  output [443:0] mgr_ports_req_o;
  wire [443:0] mgr_ports_req_o;
  /* src = "../rtl/obi/obi_demux.sv:29.38" */
  input [233:0] mgr_ports_rsp_i;
  wire [233:0] mgr_ports_rsp_i;
  /* src = "../rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "../rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "../rtl/obi/obi_demux.sv:25.38" */
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  /* src = "../rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "../rtl/obi/obi_demux.sv:26.38" */
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  /* src = "../rtl/obi/obi_demux.sv:24.38" */
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  /* src = "../rtl/obi/obi_demux.sv:44.22" */
  wire [2:0] select_q;
  \$bwmux  #(
    .WIDTH(32'd444)
  ) \$auto$builder.cc:128:Bwmux$1081  (
    .A({ 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [5], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [4], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [3], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [2], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [1], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$1082 )
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$auto$builder.cc:195:Bmux$1085  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$1086 [38:2], \$auto$rtlil.cc:2874:Mux$1088  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd74)
  ) \$auto$builder.cc:195:Bmux$1095  (
    .A({ 148'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mgr_ports_req_o }),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2895:Bmux$1096 [73:1], \$auto$rtlil.cc:2874:Mux$1098  })
  );
  \$bmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd39)
  ) \$auto$builder.cc:195:Bmux$1113  (
    .A({ 78'hxxxxxxxxxxxxxxxxxxxx, mgr_ports_rsp_i }),
    .S(select_q),
    .Y({ sbr_port_rsp_o[38:2], \$auto$rtlil.cc:2874:Mux$1116 [1], cnt_down })
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1041  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$auto$builder.cc:338:Biop$1042 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1043  (
    .A(in_flight),
    .Y(\$auto$builder.cc:338:Biop$1044 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1045  (
    .A(\$auto$builder.cc:338:Biop$1042 ),
    .B(\$auto$builder.cc:338:Biop$1044 ),
    .Y(\$auto$builder.cc:338:Biop$1046 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1049  (
    .A(in_flight),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$1050 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1051  (
    .A(\$auto$builder.cc:338:Biop$1046 ),
    .B(\$auto$builder.cc:338:Biop$1050 ),
    .Y(\$auto$builder.cc:338:Biop$1052 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1105  (
    .A(\$auto$rtlil.cc:2874:Mux$1098 ),
    .B(\$auto$rtlil.cc:2874:Mux$1088 [1]),
    .Y(cnt_up)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1131  (
    .A(cnt_up),
    .B(cnt_down),
    .Y(\$auto$builder.cc:338:Biop$1132 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$1063  (
    .A(1'h1),
    .S(sbr_port_select_i),
    .Y({ \$auto$rtlil.cc:2896:Demux$1064 [518], \$auto$rtlil.cc:2896:Demux$1064 [444], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [0] })
  );
  /* src = "../rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17872  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17347  (
    .A({ sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [0] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17346 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15376  (
    .A(\$auto$builder.cc:338:Biop$1052 ),
    .B(\$auto$rtlil.cc:2874:Mux$1088 [1]),
    .Y(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$1090 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$15380  (
    .A(444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .B(\$auto$rtlil.cc:2875:Bwmux$1082 ),
    .S(\$auto$builder.cc:338:Biop$1052 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$1089 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15385  (
    .A(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$1090 ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd444)
  ) \$procmux$15388  (
    .A(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$1089 ),
    .B(444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "../rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(cnt_down),
    .en_i(\$auto$builder.cc:338:Biop$1132 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$1116 [38:2], \$auto$rtlil.cc:2874:Mux$1116 [0] } = { sbr_port_rsp_o[38:2], cnt_down };
  assign \$auto$rtlil.cc:2895:Bmux$1086 [1:0] = \$auto$rtlil.cc:2874:Mux$1088 ;
  assign \$auto$rtlil.cc:2895:Bmux$1096 [0] = \$auto$rtlil.cc:2874:Mux$1098 ;
  assign { \$auto$rtlil.cc:2896:Demux$1064 [591:519], \$auto$rtlil.cc:2896:Demux$1064 [517:445], \$auto$rtlil.cc:2896:Demux$1064 [443:371], \$auto$rtlil.cc:2896:Demux$1064 [369:297], \$auto$rtlil.cc:2896:Demux$1064 [295:223], \$auto$rtlil.cc:2896:Demux$1064 [221:149], \$auto$rtlil.cc:2896:Demux$1064 [147:75], \$auto$rtlil.cc:2896:Demux$1064 [73:1] } = 584'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o[1:0] = { sbr_port_gnt, cnt_down };
endmodule

/* src = "../rtl/obi/obi_demux.sv:7.8" */
module \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$auto$builder.cc:338:Biop$2639 ;
  wire \$auto$builder.cc:338:Biop$2641 ;
  wire \$auto$builder.cc:338:Biop$2643 ;
  wire \$auto$builder.cc:338:Biop$2647 ;
  wire \$auto$builder.cc:338:Biop$2649 ;
  wire \$auto$builder.cc:338:Biop$2709 ;
  wire \$auto$opt_expr.cc:205:group_cell_inputs$17351 ;
  wire \$auto$rtlil.cc:2791:Lt$2653 ;
  wire [73:0] \$auto$rtlil.cc:2874:Mux$2669 ;
  wire [73:0] \$auto$rtlil.cc:2875:Bwmux$2671 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire [73:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2676 ;
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10" */
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2677 ;
  /* src = "../rtl/obi/obi_demux.sv:21.38" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_demux.sv:39.17" */
  wire cnt_down;
  /* src = "../rtl/obi/obi_demux.sv:39.9" */
  wire cnt_up;
  /* src = "../rtl/obi/obi_demux.sv:40.28" */
  wire in_flight;
  /* src = "../rtl/obi/obi_demux.sv:28.38" */
  output [73:0] mgr_ports_req_o;
  wire [73:0] mgr_ports_req_o;
  /* src = "../rtl/obi/obi_demux.sv:29.38" */
  input [38:0] mgr_ports_rsp_i;
  wire [38:0] mgr_ports_rsp_i;
  /* src = "../rtl/obi/obi_demux.sv:39.27" */
  wire overflow;
  /* src = "../rtl/obi/obi_demux.sv:22.38" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_demux.sv:41.9" */
  wire sbr_port_gnt;
  /* src = "../rtl/obi/obi_demux.sv:25.38" */
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  /* src = "../rtl/obi/obi_demux.sv:42.9" */
  wire sbr_port_rready;
  /* src = "../rtl/obi/obi_demux.sv:26.38" */
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  /* src = "../rtl/obi/obi_demux.sv:24.38" */
  input sbr_port_select_i;
  wire sbr_port_select_i;
  /* src = "../rtl/obi/obi_demux.sv:44.22" */
  wire select_q;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:112:Mux$2668  (
    .A(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:2874:Mux$2669 [73])
  );
  \$bwmux  #(
    .WIDTH(32'd74)
  ) \$auto$builder.cc:128:Bwmux$2670  (
    .A({ 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17351  }),
    .B({ sbr_port_req_i[73:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$2671 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2638  (
    .A(sbr_port_select_i),
    .B(select_q),
    .Y(\$auto$builder.cc:338:Biop$2639 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2640  (
    .A(in_flight),
    .Y(\$auto$builder.cc:338:Biop$2641 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2642  (
    .A(\$auto$builder.cc:338:Biop$2639 ),
    .B(\$auto$builder.cc:338:Biop$2641 ),
    .Y(\$auto$builder.cc:338:Biop$2643 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2646  (
    .A(in_flight),
    .B(mgr_ports_rsp_i[0]),
    .Y(\$auto$builder.cc:338:Biop$2647 )
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2648  (
    .A(\$auto$builder.cc:338:Biop$2643 ),
    .B(\$auto$builder.cc:338:Biop$2647 ),
    .Y(\$auto$builder.cc:338:Biop$2649 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2688  (
    .A(mgr_ports_req_o[0]),
    .B(mgr_ports_rsp_i[1]),
    .Y(cnt_up)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2708  (
    .A(cnt_up),
    .B(mgr_ports_rsp_i[0]),
    .Y(\$auto$builder.cc:338:Biop$2709 )
  );
  /* src = "../rtl/obi/obi_demux.sv:101.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17873  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(sbr_port_select_i),
    .EN(cnt_up),
    .Q(select_q)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2133:replace_const_cells$17350  (
    .A(sbr_port_select_i),
    .Y(\$auto$rtlil.cc:2791:Lt$2653 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17352  (
    .A(sbr_port_req_i[0]),
    .B(\$auto$rtlil.cc:2791:Lt$2653 ),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17351 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$15285  (
    .A(\$auto$builder.cc:338:Biop$2649 ),
    .B(mgr_ports_rsp_i[1]),
    .Y(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2677 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" */
  \$mux  #(
    .WIDTH(32'd74)
  ) \$procmux$15289  (
    .A(74'h0000000000000000000),
    .B(\$auto$rtlil.cc:2875:Bwmux$2671 ),
    .S(\$auto$builder.cc:338:Biop$2649 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2676 )
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15294  (
    .A(\$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2677 ),
    .B(1'h0),
    .S(overflow),
    .Y(sbr_port_gnt)
  );
  /* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" */
  \$mux  #(
    .WIDTH(32'd74)
  ) \$procmux$15297  (
    .A(\$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2676 ),
    .B(74'h0000000000000000000),
    .S(overflow),
    .Y(mgr_ports_req_o)
  );
  /* src = "../rtl/obi/obi_demux.sv:87.5" */
  \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(mgr_ports_rsp_i[0]),
    .en_i(\$auto$builder.cc:338:Biop$2709 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign \$auto$rtlil.cc:2874:Mux$2669 [72:0] = { \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], 1'h0 };
  assign cnt_down = mgr_ports_rsp_i[0];
  assign sbr_port_rready = 1'h1;
  assign sbr_port_rsp_o = { mgr_ports_rsp_i[38:2], sbr_port_gnt, mgr_ports_rsp_i[0] };
endmodule

/* src = "../rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$auto$builder.cc:338:Biop$1144 ;
  /* src = "../rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "../rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "../rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "../rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "../rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1143  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$auto$builder.cc:338:Biop$1144 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1139  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1141  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  /* src = "../rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$auto$builder.cc:338:Biop$1144 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "../rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$auto$builder.cc:338:Biop$1027 ;
  /* src = "../rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "../rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "../rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "../rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "../rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1026  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$auto$builder.cc:338:Biop$1027 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1022  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1024  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  /* src = "../rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$auto$builder.cc:338:Biop$1027 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "../rtl/obi/obi_err_sbr.sv:7.8" */
module \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$auto$builder.cc:338:Biop$2721 ;
  /* src = "../rtl/obi/obi_err_sbr.sv:19.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.20" */
  wire fifo_empty;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.9" */
  wire fifo_full;
  /* src = "../rtl/obi/obi_err_sbr.sv:28.32" */
  wire fifo_pop;
  /* src = "../rtl/obi/obi_err_sbr.sv:23.20" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "../rtl/obi/obi_err_sbr.sv:24.20" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "../rtl/obi/obi_err_sbr.sv:27.30" */
  wire [2:0] rid;
  /* src = "../rtl/obi/obi_err_sbr.sv:20.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_err_sbr.sv:21.16" */
  input testmode_i;
  wire testmode_i;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$2720  (
    .A(obi_req_i[0]),
    .B(obi_rsp_o[1]),
    .Y(\$auto$builder.cc:338:Biop$2721 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2716  (
    .A(fifo_full),
    .Y(obi_rsp_o[1])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$2718  (
    .A(fifo_empty),
    .Y(fifo_pop)
  );
  /* src = "../rtl/obi/obi_err_sbr.sv:50.5" */
  \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$auto$builder.cc:338:Biop$2721 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

/* src = "../rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3313 ;
  wire \$auto$builder.cc:338:Biop$3320 ;
  wire \$auto$builder.cc:364:Unop$3311 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17355 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3355 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3369 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3337 ;
  /* src = "../rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "../rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "../rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "../rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "../rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "../rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "../rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "../rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "../rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "../rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "../rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "../rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "../rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "../rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "../rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "../rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3354  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17355 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17355 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17355 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17355 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3337 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3355 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3368  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3355 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3369 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3382  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3369 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3312  (
    .A(mgr_port_rsp_i[1]),
    .B(\$auto$builder.cc:364:Unop$3311 ),
    .Y(\$auto$builder.cc:338:Biop$3313 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3316  (
    .A(mgr_port_req),
    .B(\$auto$builder.cc:364:Unop$3311 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3319  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$auto$builder.cc:338:Biop$3320 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$3310  (
    .A(fifo_full),
    .Y(\$auto$builder.cc:364:Unop$3311 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$3336  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17356  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17355 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$17100  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "../rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3320 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3313 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3337 [138:105], \$auto$rtlil.cc:2896:Demux$3337 [103:70], \$auto$rtlil.cc:2896:Demux$3337 [68:35], \$auto$rtlil.cc:2896:Demux$3337 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "../rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3401 ;
  wire \$auto$builder.cc:338:Biop$3408 ;
  wire \$auto$builder.cc:364:Unop$3399 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17358 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3443 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3457 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3425 ;
  /* src = "../rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "../rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "../rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "../rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "../rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "../rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "../rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "../rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "../rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "../rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "../rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "../rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "../rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "../rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "../rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "../rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3442  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17358 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17358 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17358 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17358 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3425 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3443 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3456  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3443 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3457 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3470  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3457 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3400  (
    .A(mgr_port_rsp_i[1]),
    .B(\$auto$builder.cc:364:Unop$3399 ),
    .Y(\$auto$builder.cc:338:Biop$3401 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3404  (
    .A(mgr_port_req),
    .B(\$auto$builder.cc:364:Unop$3399 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3407  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$auto$builder.cc:338:Biop$3408 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$3398  (
    .A(fifo_full),
    .Y(\$auto$builder.cc:364:Unop$3399 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$3424  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17359  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17358 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$17096  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "../rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3408 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3401 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3425 [138:105], \$auto$rtlil.cc:2896:Demux$3425 [103:70], \$auto$rtlil.cc:2896:Demux$3425 [68:35], \$auto$rtlil.cc:2896:Demux$3425 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "../rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3489 ;
  wire \$auto$builder.cc:338:Biop$3496 ;
  wire \$auto$builder.cc:364:Unop$3487 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17361 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3531 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3545 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3513 ;
  /* src = "../rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "../rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "../rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "../rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "../rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "../rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "../rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "../rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "../rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "../rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "../rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "../rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "../rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "../rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "../rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "../rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3530  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17361 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17361 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17361 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17361 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3513 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3531 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3544  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3531 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3545 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3558  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3545 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3488  (
    .A(mgr_port_rsp_i[1]),
    .B(\$auto$builder.cc:364:Unop$3487 ),
    .Y(\$auto$builder.cc:338:Biop$3489 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3492  (
    .A(mgr_port_req),
    .B(\$auto$builder.cc:364:Unop$3487 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3495  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$auto$builder.cc:338:Biop$3496 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$3486  (
    .A(fifo_full),
    .Y(\$auto$builder.cc:364:Unop$3487 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$3512  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17362  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17361 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$17092  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "../rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3496 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3489 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3513 [138:105], \$auto$rtlil.cc:2896:Demux$3513 [103:70], \$auto$rtlil.cc:2896:Demux$3513 [68:35], \$auto$rtlil.cc:2896:Demux$3513 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "../rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3577 ;
  wire \$auto$builder.cc:338:Biop$3584 ;
  wire \$auto$builder.cc:364:Unop$3575 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17364 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3619 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3633 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3601 ;
  /* src = "../rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "../rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "../rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "../rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "../rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "../rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "../rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "../rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "../rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "../rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "../rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "../rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "../rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "../rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "../rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "../rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3618  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17364 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17364 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17364 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17364 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3601 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3619 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3632  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3619 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3633 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3646  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3633 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3576  (
    .A(mgr_port_rsp_i[1]),
    .B(\$auto$builder.cc:364:Unop$3575 ),
    .Y(\$auto$builder.cc:338:Biop$3577 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3580  (
    .A(mgr_port_req),
    .B(\$auto$builder.cc:364:Unop$3575 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3583  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$auto$builder.cc:338:Biop$3584 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$3574  (
    .A(fifo_full),
    .Y(\$auto$builder.cc:364:Unop$3575 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$3600  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17365  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17364 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$17088  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "../rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3584 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3577 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3601 [138:105], \$auto$rtlil.cc:2896:Demux$3601 [103:70], \$auto$rtlil.cc:2896:Demux$3601 [68:35], \$auto$rtlil.cc:2896:Demux$3601 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "../rtl/obi/obi_mux.sv:10.8" */
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3665 ;
  wire \$auto$builder.cc:338:Biop$3672 ;
  wire \$auto$builder.cc:364:Unop$3663 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17367 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3707 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3721 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3689 ;
  /* src = "../rtl/obi/obi_mux.sv:34.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_mux.sv:60.23" */
  wire fifo_full;
  /* src = "../rtl/obi/obi_mux.sv:60.34" */
  wire fifo_pop;
  /* src = "../rtl/obi/obi_mux.sv:58.21" */
  wire [70:0] mgr_port_a_in_sbr;
  /* src = "../rtl/obi/obi_mux.sv:60.9" */
  wire mgr_port_req;
  /* src = "../rtl/obi/obi_mux.sv:41.47" */
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  /* src = "../rtl/obi/obi_mux.sv:42.47" */
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  /* src = "../rtl/obi/obi_mux.sv:59.49" */
  wire [1:0] response_id;
  /* src = "../rtl/obi/obi_mux.sv:35.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_mux.sv:51.39" */
  wire [283:0] sbr_ports_a;
  /* src = "../rtl/obi/obi_mux.sv:50.42" */
  wire [3:0] sbr_ports_gnt;
  /* src = "../rtl/obi/obi_mux.sv:50.27" */
  wire [3:0] sbr_ports_req;
  /* src = "../rtl/obi/obi_mux.sv:38.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "../rtl/obi/obi_mux.sv:39.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "../rtl/obi/obi_mux.sv:141.39" */
  wire [139:0] sbr_rsp_r;
  /* src = "../rtl/obi/obi_mux.sv:140.27" */
  wire [3:0] sbr_rsp_rvalid;
  /* src = "../rtl/obi/obi_mux.sv:59.36" */
  wire [1:0] selected_id;
  /* src = "../rtl/obi/obi_mux.sv:36.16" */
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3706  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17367 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17367 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17367 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17367 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3689 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3707 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3720  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3707 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3721 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3734  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3721 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [34] }),
    .Y(sbr_rsp_r)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3664  (
    .A(mgr_port_rsp_i[1]),
    .B(\$auto$builder.cc:364:Unop$3663 ),
    .Y(\$auto$builder.cc:338:Biop$3665 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3668  (
    .A(mgr_port_req),
    .B(\$auto$builder.cc:364:Unop$3663 ),
    .Y(mgr_port_req_o[0])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$3671  (
    .A(mgr_port_req_o[0]),
    .B(mgr_port_rsp_i[1]),
    .Y(\$auto$builder.cc:338:Biop$3672 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$3662  (
    .A(fifo_full),
    .Y(\$auto$builder.cc:364:Unop$3663 )
  );
  \$demux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$3688  (
    .A(1'h1),
    .S(response_id),
    .Y({ \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34] })
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd128),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd128),
    .Y_WIDTH(32'd128)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17368  (
    .A({ mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34] }),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17367 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$opt_expr.cc:785:replace_const_cells$17084  (
    .A({ mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] }),
    .B({ \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34] }),
    .Y(sbr_rsp_rvalid)
  );
  /* src = "../rtl/obi/obi_mux.sv:119.7" */
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3672 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_mux.sv:67.5" */
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3665 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3689 [138:105], \$auto$rtlil.cc:2896:Demux$3689 [103:70], \$auto$rtlil.cc:2896:Demux$3689 [68:35], \$auto$rtlil.cc:2896:Demux$3689 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], 3'h0 };
  assign fifo_pop = mgr_port_rsp_i[0];
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_a = { sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] };
  assign sbr_ports_req = { sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

/* src = "../rtl/obi/obi_sram_shim.sv:7.8" */
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  /* src = "../rtl/obi/obi_sram_shim.sv:23.41" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:25.41" */
  output [3:0] be_o;
  wire [3:0] be_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:15.41" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_sram_shim.sv:27.41" */
  input gnt_i;
  wire gnt_i;
  /* src = "../rtl/obi/obi_sram_shim.sv:38.30" */
  wire [2:0] id_d;
  /* src = "../rtl/obi/obi_sram_shim.sv:38.36" */
  wire [2:0] id_q;
  /* src = "../rtl/obi/obi_sram_shim.sv:18.41" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "../rtl/obi/obi_sram_shim.sv:19.41" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:28.41" */
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  /* src = "../rtl/obi/obi_sram_shim.sv:21.41" */
  output req_o;
  wire req_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:16.41" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_sram_shim.sv:37.9" */
  wire rvalid_d;
  /* src = "../rtl/obi/obi_sram_shim.sv:37.19" */
  wire rvalid_q;
  /* src = "../rtl/obi/obi_sram_shim.sv:24.41" */
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:22.41" */
  output we_o;
  wire we_o;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$204  (
    .A(obi_req_i[0]),
    .B(gnt_i),
    .Y(rvalid_d)
  );
  /* src = "../rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[4:2]),
    .Q(id_q)
  );
  /* src = "../rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rvalid_d),
    .Q(rvalid_q)
  );
  assign addr_o = obi_req_i[73:42];
  assign be_o = obi_req_i[40:37];
  assign id_d = obi_req_i[4:2];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

/* src = "../rtl/obi/obi_sram_shim.sv:7.8" */
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  /* src = "../rtl/obi/obi_sram_shim.sv:23.41" */
  output [31:0] addr_o;
  wire [31:0] addr_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:25.41" */
  output [3:0] be_o;
  wire [3:0] be_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:15.41" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_sram_shim.sv:27.41" */
  input gnt_i;
  wire gnt_i;
  /* src = "../rtl/obi/obi_sram_shim.sv:38.30" */
  wire [2:0] id_d;
  /* src = "../rtl/obi/obi_sram_shim.sv:38.36" */
  wire [2:0] id_q;
  /* src = "../rtl/obi/obi_sram_shim.sv:18.41" */
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  /* src = "../rtl/obi/obi_sram_shim.sv:19.41" */
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:28.41" */
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  /* src = "../rtl/obi/obi_sram_shim.sv:21.41" */
  output req_o;
  wire req_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:16.41" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_sram_shim.sv:37.9" */
  wire rvalid_d;
  /* src = "../rtl/obi/obi_sram_shim.sv:37.19" */
  wire rvalid_q;
  /* src = "../rtl/obi/obi_sram_shim.sv:24.41" */
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  /* src = "../rtl/obi/obi_sram_shim.sv:22.41" */
  output we_o;
  wire we_o;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$613  (
    .A(obi_req_i[0]),
    .B(gnt_i),
    .Y(rvalid_d)
  );
  /* src = "../rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(obi_req_i[4:2]),
    .Q(id_q)
  );
  /* src = "../rtl/obi/obi_sram_shim.sv:58.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$rvalid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(rvalid_d),
    .Q(rvalid_q)
  );
  assign addr_o = obi_req_i[73:42];
  assign be_o = obi_req_i[40:37];
  assign id_d = obi_req_i[4:2];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

/* src = "../rtl/obi/obi_xbar.sv:8.8" */
module \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_ports_req_o, mgr_ports_rsp_i, addr_map_i, en_default_idx_i, default_idx_i);
  /* src = "../rtl/obi/obi_xbar.sv:50.47" */
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  /* src = "../rtl/obi/obi_xbar.sv:40.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/obi/obi_xbar.sv:52.75" */
  input [11:0] default_idx_i;
  wire [11:0] default_idx_i;
  /* src = "../rtl/obi/obi_xbar.sv:51.47" */
  input [3:0] en_default_idx_i;
  wire [3:0] en_default_idx_i;
  /* src = "../rtl/obi/obi_xbar.sv:47.47" */
  output [369:0] mgr_ports_req_o;
  wire [369:0] mgr_ports_req_o;
  /* src = "../rtl/obi/obi_xbar.sv:48.47" */
  input [194:0] mgr_ports_rsp_i;
  wire [194:0] mgr_ports_rsp_i;
  /* src = "../rtl/obi/obi_xbar.sv:62.57" */
  wire [1439:0] mgr_reqs;
  /* src = "../rtl/obi/obi_xbar.sv:63.57" */
  wire [739:0] mgr_rsps;
  /* src = "../rtl/obi/obi_xbar.sv:41.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/obi/obi_xbar.sv:55.68" */
  wire [11:0] sbr_port_select;
  /* src = "../rtl/obi/obi_xbar.sv:44.47" */
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  /* src = "../rtl/obi/obi_xbar.sv:45.47" */
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  /* src = "../rtl/obi/obi_xbar.sv:58.57" */
  wire [1439:0] sbr_reqs;
  /* src = "../rtl/obi/obi_xbar.sv:59.57" */
  wire [739:0] sbr_rsps;
  /* src = "../rtl/obi/obi_xbar.sv:42.16" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode  \gen_demux[0].i_addr_decode  (
    .addr_i(sbr_ports_req_i[71:40]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[2:0]),
    .en_default_idx_i(en_default_idx_i[0]),
    .idx_o(sbr_port_select[2:0])
  );
  /* src = "../rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux  \gen_demux[0].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] }),
    .mgr_ports_rsp_i({ mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[71:0]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[36:0]),
    .sbr_port_select_i(sbr_port_select[2:0])
  );
  /* src = "../rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode  \gen_demux[1].i_addr_decode  (
    .addr_i(sbr_ports_req_i[143:112]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[5:3]),
    .en_default_idx_i(en_default_idx_i[1]),
    .idx_o(sbr_port_select[5:3])
  );
  /* src = "../rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux  \gen_demux[1].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72] }),
    .mgr_ports_rsp_i({ mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[143:72]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[73:37]),
    .sbr_port_select_i(sbr_port_select[5:3])
  );
  /* src = "../rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode  \gen_demux[2].i_addr_decode  (
    .addr_i(sbr_ports_req_i[215:184]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[8:6]),
    .en_default_idx_i(en_default_idx_i[2]),
    .idx_o(sbr_port_select[8:6])
  );
  /* src = "../rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux  \gen_demux[2].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144] }),
    .mgr_ports_rsp_i({ mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[215:144]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[110:74]),
    .sbr_port_select_i(sbr_port_select[8:6])
  );
  /* src = "../rtl/obi/obi_xbar.sv:71.7" */
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode  \gen_demux[3].i_addr_decode  (
    .addr_i(sbr_ports_req_i[287:256]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[11:9]),
    .en_default_idx_i(en_default_idx_i[3]),
    .idx_o(sbr_port_select[11:9])
  );
  /* src = "../rtl/obi/obi_xbar.sv:87.7" */
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux  \gen_demux[3].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216] }),
    .mgr_ports_rsp_i({ mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[287:216]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[147:111]),
    .sbr_port_select_i(sbr_port_select[11:9])
  );
  /* src = "../rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux  \gen_mux[0].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[73:0]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[38:0]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[287:0]),
    .sbr_ports_rsp_o(mgr_rsps[147:0]),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux  \gen_mux[1].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[147:74]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[77:39]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[575:288]),
    .sbr_ports_rsp_o(mgr_rsps[295:148]),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux  \gen_mux[2].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[221:148]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[116:78]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[863:576]),
    .sbr_ports_rsp_o(mgr_rsps[443:296]),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux  \gen_mux[3].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[295:222]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[155:117]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1151:864]),
    .sbr_ports_rsp_o(mgr_rsps[591:444]),
    .testmode_i(testmode_i)
  );
  /* src = "../rtl/obi/obi_xbar.sv:145.7" */
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux  \gen_mux[4].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[369:296]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[194:156]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1439:1152]),
    .sbr_ports_rsp_o(mgr_rsps[739:592]),
    .testmode_i(testmode_i)
  );
  assign sbr_reqs = { mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216], mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144], mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72], mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] };
  assign sbr_rsps = { mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111], mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74], mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37], mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] };
endmodule

/* src = "../rtl/register_interface/periph_to_reg.sv:13.8" */
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate (clk_i, rst_ni, req_i, wen_i, gnt_o, r_valid_o, r_opc_o, wdata_i, be_i, add_i, id_i, r_rdata_o, r_id_o, reg_req_o, reg_rsp_i);
  /* src = "../rtl/register_interface/periph_to_reg.sv:25.28" */
  input [31:0] add_i;
  wire [31:0] add_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:28.28" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:21.28" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:30.28" */
  output gnt_o;
  wire gnt_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:29.28" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:40.18" */
  wire [2:0] r_id_d;
  /* src = "../rtl/register_interface/periph_to_reg.sv:33.28" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:40.26" */
  wire [2:0] r_id_q;
  /* src = "../rtl/register_interface/periph_to_reg.sv:41.18" */
  wire r_opc_d;
  /* src = "../rtl/register_interface/periph_to_reg.sv:32.28" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:41.27" */
  wire r_opc_q;
  /* src = "../rtl/register_interface/periph_to_reg.sv:43.18" */
  wire [31:0] r_rdata_d;
  /* src = "../rtl/register_interface/periph_to_reg.sv:31.28" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:43.29" */
  wire [31:0] r_rdata_q;
  /* src = "../rtl/register_interface/periph_to_reg.sv:42.18" */
  wire r_valid_d;
  /* src = "../rtl/register_interface/periph_to_reg.sv:34.28" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:42.29" */
  wire r_valid_q;
  /* src = "../rtl/register_interface/periph_to_reg.sv:36.28" */
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:37.28" */
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:24.28" */
  input req_i;
  wire req_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:22.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/register_interface/periph_to_reg.sv:27.28" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:26.28" */
  input wen_i;
  wire wen_i;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1153  (
    .A(req_i),
    .B(reg_rsp_i[0]),
    .Y(r_valid_d)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1151  (
    .A(wen_i),
    .Y(reg_req_o[37])
  );
  /* src = "../rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_q)
  );
  /* src = "../rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_opc_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[1]),
    .Q(r_opc_q)
  );
  /* src = "../rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$r_rdata_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[33:2]),
    .Q(r_rdata_q)
  );
  /* src = "../rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(r_valid_d),
    .Q(r_valid_q)
  );
  assign gnt_o = r_valid_d;
  assign r_id_d = id_i;
  assign r_id_o = r_id_q;
  assign r_opc_d = reg_rsp_i[1];
  assign r_opc_o = r_opc_q;
  assign r_rdata_d = reg_rsp_i[33:2];
  assign r_rdata_o = r_rdata_q;
  assign r_valid_o = r_valid_q;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

/* src = "../rtl/register_interface/periph_to_reg.sv:13.8" */
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate (clk_i, rst_ni, req_i, wen_i, gnt_o, r_valid_o, r_opc_o, wdata_i, be_i, add_i, id_i, r_rdata_o, r_id_o, reg_req_o, reg_rsp_i);
  /* src = "../rtl/register_interface/periph_to_reg.sv:25.28" */
  input [31:0] add_i;
  wire [31:0] add_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:28.28" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:21.28" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:30.28" */
  output gnt_o;
  wire gnt_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:29.28" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:40.18" */
  wire [2:0] r_id_d;
  /* src = "../rtl/register_interface/periph_to_reg.sv:33.28" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:40.26" */
  wire [2:0] r_id_q;
  /* src = "../rtl/register_interface/periph_to_reg.sv:41.18" */
  wire r_opc_d;
  /* src = "../rtl/register_interface/periph_to_reg.sv:32.28" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:41.27" */
  wire r_opc_q;
  /* src = "../rtl/register_interface/periph_to_reg.sv:43.18" */
  wire [31:0] r_rdata_d;
  /* src = "../rtl/register_interface/periph_to_reg.sv:31.28" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:43.29" */
  wire [31:0] r_rdata_q;
  /* src = "../rtl/register_interface/periph_to_reg.sv:42.18" */
  wire r_valid_d;
  /* src = "../rtl/register_interface/periph_to_reg.sv:34.28" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:42.29" */
  wire r_valid_q;
  /* src = "../rtl/register_interface/periph_to_reg.sv:36.28" */
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  /* src = "../rtl/register_interface/periph_to_reg.sv:37.28" */
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:24.28" */
  input req_i;
  wire req_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:22.28" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/register_interface/periph_to_reg.sv:27.28" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "../rtl/register_interface/periph_to_reg.sv:26.28" */
  input wen_i;
  wire wen_i;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1281  (
    .A(req_i),
    .B(reg_rsp_i[0]),
    .Y(r_valid_d)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1279  (
    .A(wen_i),
    .Y(reg_req_o[37])
  );
  /* src = "../rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$r_id_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(id_i),
    .Q(r_id_q)
  );
  /* src = "../rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_opc_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[1]),
    .Q(r_opc_q)
  );
  /* src = "../rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$driver$r_rdata_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(reg_rsp_i[33:2]),
    .Q(r_rdata_q)
  );
  /* src = "../rtl/register_interface/periph_to_reg.sv:52.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$r_valid_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(r_valid_d),
    .Q(r_valid_q)
  );
  assign gnt_o = r_valid_d;
  assign r_id_d = id_i;
  assign r_id_o = r_id_q;
  assign r_opc_d = reg_rsp_i[1];
  assign r_opc_o = r_opc_q;
  assign r_rdata_d = reg_rsp_i[33:2];
  assign r_rdata_o = r_rdata_q;
  assign r_valid_o = r_valid_q;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output [31:0] q;
  wire [31:0] q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output [31:0] qs;
  wire [31:0] qs;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire [31:0] wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd268435456),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17874  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17875  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output [31:0] q;
  wire [31:0] q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output [31:0] qs;
  wire [31:0] qs;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire [31:0] wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(32'd0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd32)
  ) \$auto$ff.cc:266:slice$17876  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17877  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" */
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" */
  input d;
  wire d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" */
  output q;
  wire q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" */
  output qe;
  wire qe;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" */
  output qs;
  wire qs;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" */
  input wd;
  wire wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" */
  wire wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" */
  wire wr_en;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17878  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(wr_data),
    .EN(wr_en),
    .Q(q)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$qe  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(we),
    .Q(qe)
  );
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" */
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_w.unused_q ;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input [31:0] q;
  wire [31:0] q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output [31:0] wr_data;
  wire [31:0] wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8059  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$auto$slang_frontend.cc:2041:operator()$8065  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8083  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$8089  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input [31:0] d;
  wire [31:0] d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \gen_w.unused_q ;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input [31:0] q;
  wire [31:0] q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input [31:0] wd;
  wire [31:0] wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output [31:0] wr_data;
  wire [31:0] wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8075  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd32)
  ) \$auto$slang_frontend.cc:2041:operator()$8081  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8067  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$8073  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" */
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" */
  input d;
  wire d;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" */
  input de;
  wire de;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:32.20" */
  /* unused_bits = "0" */
  wire \gen_w.unused_q ;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" */
  input q;
  wire q;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" */
  input wd;
  wire wd;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" */
  input we;
  wire we;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" */
  output wr_data;
  wire wr_data;
  /* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" */
  output wr_en;
  wire wr_en;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8091  (
    .A(we),
    .B(de),
    .Y(wr_en)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$8097  (
    .A(d),
    .B(wd),
    .S(we),
    .Y(wr_data)
  );
  assign \gen_w.unused_q  = q;
endmodule

/* src = "../rtl/register_interface/reg_to_apb.sv:7.8" */
module \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb (clk_i, rst_ni, reg_req_i, reg_rsp_o, apb_req_o, apb_rsp_i);
  /* src = "../rtl/register_interface/reg_to_apb.sv:59.9-59.47" */
  wire \$auto$slang_frontend.cc:694:finish$\state_d$4213 ;
  /* src = "../rtl/register_interface/reg_to_apb.sv:26.20" */
  output [73:0] apb_req_o;
  wire [73:0] apb_req_o;
  /* src = "../rtl/register_interface/reg_to_apb.sv:27.20" */
  input [33:0] apb_rsp_i;
  wire [33:0] apb_rsp_i;
  /* src = "../rtl/register_interface/reg_to_apb.sv:18.20" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/register_interface/reg_to_apb.sv:22.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "../rtl/register_interface/reg_to_apb.sv:23.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "../rtl/register_interface/reg_to_apb.sv:19.20" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/register_interface/reg_to_apb.sv:32.11" */
  wire state_d;
  /* src = "../rtl/register_interface/reg_to_apb.sv:32.20" */
  wire state_q;
  /* src = "../rtl/register_interface/reg_to_apb.sv:66.3" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$state_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(state_d),
    .Q(state_q)
  );
  /* src = "../rtl/register_interface/reg_to_apb.sv:59.31-59.47|../rtl/register_interface/reg_to_apb.sv:59.9-59.47" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14759  (
    .A(apb_rsp_i[33]),
    .Y(\$auto$slang_frontend.cc:694:finish$\state_d$4213 )
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/register_interface/reg_to_apb.sv:56.15-60.10|../rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$14764  (
    .A(reg_req_i[0]),
    .B(\$auto$slang_frontend.cc:694:finish$\state_d$4213 ),
    .S(state_q),
    .Y(state_d)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/register_interface/reg_to_apb.sv:56.15-60.10|../rtl/register_interface/reg_to_apb.sv:52.5-63.12" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$14777  (
    .A(state_q),
    .B(apb_rsp_i[33]),
    .Y(reg_rsp_o[0])
  );
  assign apb_req_o = { reg_req_i[69:38], 3'h2, reg_req_i[0], state_q, reg_req_i[37:1] };
  assign reg_rsp_o[33:1] = apb_rsp_i[32:0];
endmodule

/* src = "../rtl/apb_uart/reg_uart_wrap.sv:31.8" */
module \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart (clk_i, rst_ni, reg_req_i, reg_rsp_o, intr_o, cts_ni, dsr_ni, dcd_ni, rin_ni, sin_i, sout_o, out1_no, out2_no, rts_no, dtr_no);
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:36.16" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:49.16" */
  input cts_ni;
  wire cts_ni;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:51.16" */
  input dcd_ni;
  wire dcd_ni;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:50.16" */
  input dsr_ni;
  wire dsr_ni;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:48.16" */
  output dtr_no;
  wire dtr_no;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:44.16" */
  output intr_o;
  wire intr_o;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:45.16" */
  output out1_no;
  wire out1_no;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:46.16" */
  output out2_no;
  wire out2_no;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:40.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:41.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:52.16" */
  input rin_ni;
  wire rin_ni;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:37.16" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:47.16" */
  output rts_no;
  wire rts_no;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:53.16" */
  input sin_i;
  wire sin_i;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:54.16" */
  output sout_o;
  wire sout_o;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:59.22" */
  /* unused_bits = "0 1 2 3 39 40 41 42 43 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" */
  wire [73:0] uart_apb_req;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:60.22" */
  wire [33:0] uart_apb_rsp;
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:76.12" */
  \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart  i_apb_uart (
    .CLK(clk_i),
    .CTSN(cts_ni),
    .DCDN(dcd_ni),
    .DSRN(dsr_ni),
    .DTRN(dtr_no),
    .INT(intr_o),
    .OUT1N(out1_no),
    .OUT2N(out2_no),
    .PADDR(uart_apb_req[46:44]),
    .PENABLE(uart_apb_req[37]),
    .PRDATA(uart_apb_rsp[32:1]),
    .PREADY(uart_apb_rsp[33]),
    .PSEL(uart_apb_req[38]),
    .PSLVERR(uart_apb_rsp[0]),
    .PWDATA(uart_apb_req[35:4]),
    .PWRITE(uart_apb_req[36]),
    .RIN(rin_ni),
    .RSTN(rst_ni),
    .RTSN(rts_no),
    .SIN(sin_i),
    .SOUT(sout_o)
  );
  /* src = "../rtl/apb_uart/reg_uart_wrap.sv:67.5" */
  \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb  i_reg_uart_reg_to_apb (
    .apb_req_o(uart_apb_req),
    .apb_rsp_i(uart_apb_rsp),
    .clk_i(clk_i),
    .reg_req_i(reg_req_i),
    .reg_rsp_o(reg_rsp_o),
    .rst_ni(rst_ni)
  );
endmodule

/* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$6727 ;
  wire \$auto$builder.cc:338:Biop$6733 ;
  wire \$auto$builder.cc:338:Biop$6751 ;
  wire \$auto$builder.cc:338:Biop$6757 ;
  wire \$auto$builder.cc:338:Biop$6767 ;
  wire \$auto$builder.cc:338:Biop$6785 ;
  wire \$auto$builder.cc:338:Biop$6807 ;
  wire \$auto$builder.cc:338:Biop$6833 ;
  wire \$auto$builder.cc:364:Unop$6695 ;
  wire \$auto$builder.cc:364:Unop$6783 ;
  wire \$auto$builder.cc:364:Unop$6797 ;
  wire \$auto$builder.cc:364:Unop$6805 ;
  wire \$auto$builder.cc:364:Unop$6819 ;
  wire \$auto$builder.cc:364:Unop$6831 ;
  wire \$auto$builder.cc:364:Unop$6845 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17880 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6709 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6717 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$6779 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6696  (
    .A(req_o),
    .B(\$auto$builder.cc:364:Unop$6695 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6750  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$6751 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6756  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$6757 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6766  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$auto$builder.cc:338:Biop$6767 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6780  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6784  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$auto$builder.cc:338:Biop$6785 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6786  (
    .A(\$auto$builder.cc:364:Unop$6783 ),
    .B(\$auto$builder.cc:338:Biop$6785 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6798  (
    .A(gnt_i),
    .B(\$auto$builder.cc:364:Unop$6797 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6800  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6802  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6806  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$6807 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6808  (
    .A(\$auto$builder.cc:364:Unop$6805 ),
    .B(\$auto$builder.cc:338:Biop$6807 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6820  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$auto$builder.cc:364:Unop$6819 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6826  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6828  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6832  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$6833 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6834  (
    .A(\$auto$builder.cc:364:Unop$6831 ),
    .B(\$auto$builder.cc:338:Biop$6833 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6846  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$auto$builder.cc:364:Unop$6845 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6852  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6694  (
    .A(gnt_i),
    .Y(\$auto$builder.cc:364:Unop$6695 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6782  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$auto$builder.cc:364:Unop$6783 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6796  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$6797 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6804  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$auto$builder.cc:364:Unop$6805 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6818  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$6819 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6830  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$auto$builder.cc:364:Unop$6831 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6844  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$builder.cc:364:Unop$6845 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17879  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$6779 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17880 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17881  (
    .A({ \$auto$builder.cc:338:Biop$6767 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17880 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2133:replace_const_cells$17370  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$6727 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2140:replace_const_cells$17371  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$6733 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$auto$slang_frontend.cc:2041:operator()$6700  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6730  (
    .A(\$auto$builder.cc:338:Biop$6727 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6736  (
    .A(\$auto$builder.cc:338:Biop$6733 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6742  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6748  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6754  (
    .A(\$auto$builder.cc:338:Biop$6751 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$6760  (
    .A(\$auto$builder.cc:338:Biop$6757 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$6764  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$6790  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$6794  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$6812  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$6838  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6709 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6717 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13768  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$6779 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$13771  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6717 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13774  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6709 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$7000 ;
  wire \$auto$builder.cc:338:Biop$7006 ;
  wire \$auto$builder.cc:338:Biop$7024 ;
  wire \$auto$builder.cc:338:Biop$7030 ;
  wire \$auto$builder.cc:338:Biop$7040 ;
  wire \$auto$builder.cc:338:Biop$7058 ;
  wire \$auto$builder.cc:338:Biop$7080 ;
  wire \$auto$builder.cc:338:Biop$7106 ;
  wire \$auto$builder.cc:364:Unop$6968 ;
  wire \$auto$builder.cc:364:Unop$7056 ;
  wire \$auto$builder.cc:364:Unop$7070 ;
  wire \$auto$builder.cc:364:Unop$7078 ;
  wire \$auto$builder.cc:364:Unop$7092 ;
  wire \$auto$builder.cc:364:Unop$7104 ;
  wire \$auto$builder.cc:364:Unop$7118 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17883 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6982 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6990 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7052 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$6969  (
    .A(req_o),
    .B(\$auto$builder.cc:364:Unop$6968 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7023  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7024 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7029  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7030 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7039  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$auto$builder.cc:338:Biop$7040 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7053  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7057  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$auto$builder.cc:338:Biop$7058 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7059  (
    .A(\$auto$builder.cc:364:Unop$7056 ),
    .B(\$auto$builder.cc:338:Biop$7058 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7071  (
    .A(gnt_i),
    .B(\$auto$builder.cc:364:Unop$7070 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7073  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7075  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7079  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$7080 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7081  (
    .A(\$auto$builder.cc:364:Unop$7078 ),
    .B(\$auto$builder.cc:338:Biop$7080 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7093  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$auto$builder.cc:364:Unop$7092 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7099  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7101  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7105  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$7106 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7107  (
    .A(\$auto$builder.cc:364:Unop$7104 ),
    .B(\$auto$builder.cc:338:Biop$7106 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7119  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$auto$builder.cc:364:Unop$7118 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7125  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$6967  (
    .A(gnt_i),
    .Y(\$auto$builder.cc:364:Unop$6968 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7055  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$auto$builder.cc:364:Unop$7056 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7069  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$7070 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7077  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$auto$builder.cc:364:Unop$7078 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7091  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$7092 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7103  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$auto$builder.cc:364:Unop$7104 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7117  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$builder.cc:364:Unop$7118 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17882  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7052 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17883 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17884  (
    .A({ \$auto$builder.cc:338:Biop$7040 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17883 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2133:replace_const_cells$17374  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7000 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2140:replace_const_cells$17375  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7006 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$auto$slang_frontend.cc:2041:operator()$6973  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7003  (
    .A(\$auto$builder.cc:338:Biop$7000 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7009  (
    .A(\$auto$builder.cc:338:Biop$7006 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7015  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7021  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7027  (
    .A(\$auto$builder.cc:338:Biop$7024 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7033  (
    .A(\$auto$builder.cc:338:Biop$7030 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$7037  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$7063  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7067  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7085  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7111  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6982 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6990 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13701  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7052 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$13704  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6990 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13707  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6982 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$7273 ;
  wire \$auto$builder.cc:338:Biop$7279 ;
  wire \$auto$builder.cc:338:Biop$7297 ;
  wire \$auto$builder.cc:338:Biop$7303 ;
  wire \$auto$builder.cc:338:Biop$7313 ;
  wire \$auto$builder.cc:338:Biop$7331 ;
  wire \$auto$builder.cc:338:Biop$7353 ;
  wire \$auto$builder.cc:338:Biop$7379 ;
  wire \$auto$builder.cc:364:Unop$7241 ;
  wire \$auto$builder.cc:364:Unop$7329 ;
  wire \$auto$builder.cc:364:Unop$7343 ;
  wire \$auto$builder.cc:364:Unop$7351 ;
  wire \$auto$builder.cc:364:Unop$7365 ;
  wire \$auto$builder.cc:364:Unop$7377 ;
  wire \$auto$builder.cc:364:Unop$7391 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17886 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7255 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7263 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7325 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7242  (
    .A(req_o),
    .B(\$auto$builder.cc:364:Unop$7241 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7296  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7297 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7302  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7303 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7312  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$auto$builder.cc:338:Biop$7313 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7326  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7330  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$auto$builder.cc:338:Biop$7331 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7332  (
    .A(\$auto$builder.cc:364:Unop$7329 ),
    .B(\$auto$builder.cc:338:Biop$7331 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7344  (
    .A(gnt_i),
    .B(\$auto$builder.cc:364:Unop$7343 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7346  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7348  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7352  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$7353 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7354  (
    .A(\$auto$builder.cc:364:Unop$7351 ),
    .B(\$auto$builder.cc:338:Biop$7353 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7366  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$auto$builder.cc:364:Unop$7365 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7372  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7374  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7378  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$7379 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7380  (
    .A(\$auto$builder.cc:364:Unop$7377 ),
    .B(\$auto$builder.cc:338:Biop$7379 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7392  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$auto$builder.cc:364:Unop$7391 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7398  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7240  (
    .A(gnt_i),
    .Y(\$auto$builder.cc:364:Unop$7241 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7328  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$auto$builder.cc:364:Unop$7329 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7342  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$7343 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7350  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$auto$builder.cc:364:Unop$7351 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7364  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$7365 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7376  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$auto$builder.cc:364:Unop$7377 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7390  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$builder.cc:364:Unop$7391 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17885  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7325 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17886 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17887  (
    .A({ \$auto$builder.cc:338:Biop$7313 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17886 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2133:replace_const_cells$17378  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7273 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2140:replace_const_cells$17379  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7279 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$auto$slang_frontend.cc:2041:operator()$7246  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7276  (
    .A(\$auto$builder.cc:338:Biop$7273 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7282  (
    .A(\$auto$builder.cc:338:Biop$7279 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7288  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7294  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7300  (
    .A(\$auto$builder.cc:338:Biop$7297 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7306  (
    .A(\$auto$builder.cc:338:Biop$7303 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$7310  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$7336  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7340  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7358  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7384  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7255 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7263 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13634  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7325 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$13637  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7263 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13640  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7255 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$7546 ;
  wire \$auto$builder.cc:338:Biop$7552 ;
  wire \$auto$builder.cc:338:Biop$7570 ;
  wire \$auto$builder.cc:338:Biop$7576 ;
  wire \$auto$builder.cc:338:Biop$7586 ;
  wire \$auto$builder.cc:338:Biop$7604 ;
  wire \$auto$builder.cc:338:Biop$7626 ;
  wire \$auto$builder.cc:338:Biop$7652 ;
  wire \$auto$builder.cc:364:Unop$7514 ;
  wire \$auto$builder.cc:364:Unop$7602 ;
  wire \$auto$builder.cc:364:Unop$7616 ;
  wire \$auto$builder.cc:364:Unop$7624 ;
  wire \$auto$builder.cc:364:Unop$7638 ;
  wire \$auto$builder.cc:364:Unop$7650 ;
  wire \$auto$builder.cc:364:Unop$7664 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17889 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7528 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7536 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7598 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7515  (
    .A(req_o),
    .B(\$auto$builder.cc:364:Unop$7514 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7569  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7570 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7575  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7576 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7585  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$auto$builder.cc:338:Biop$7586 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7599  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7603  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$auto$builder.cc:338:Biop$7604 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7605  (
    .A(\$auto$builder.cc:364:Unop$7602 ),
    .B(\$auto$builder.cc:338:Biop$7604 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7617  (
    .A(gnt_i),
    .B(\$auto$builder.cc:364:Unop$7616 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7619  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7621  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7625  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$7626 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7627  (
    .A(\$auto$builder.cc:364:Unop$7624 ),
    .B(\$auto$builder.cc:338:Biop$7626 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7639  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$auto$builder.cc:364:Unop$7638 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7645  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7647  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7651  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$7652 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7653  (
    .A(\$auto$builder.cc:364:Unop$7650 ),
    .B(\$auto$builder.cc:338:Biop$7652 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7665  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$auto$builder.cc:364:Unop$7664 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7671  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7513  (
    .A(gnt_i),
    .Y(\$auto$builder.cc:364:Unop$7514 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7601  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$auto$builder.cc:364:Unop$7602 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7615  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$7616 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7623  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$auto$builder.cc:364:Unop$7624 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7637  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$7638 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7649  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$auto$builder.cc:364:Unop$7650 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7663  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$builder.cc:364:Unop$7664 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17888  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7598 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17889 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17890  (
    .A({ \$auto$builder.cc:338:Biop$7586 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17889 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2133:replace_const_cells$17382  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7546 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2140:replace_const_cells$17383  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7552 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$auto$slang_frontend.cc:2041:operator()$7519  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7549  (
    .A(\$auto$builder.cc:338:Biop$7546 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7555  (
    .A(\$auto$builder.cc:338:Biop$7552 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7561  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7567  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7573  (
    .A(\$auto$builder.cc:338:Biop$7570 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7579  (
    .A(\$auto$builder.cc:338:Biop$7576 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$7583  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$7609  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7613  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7631  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7657  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7528 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7536 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13567  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7598 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$13570  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7536 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13573  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7528 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" */
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$7819 ;
  wire \$auto$builder.cc:338:Biop$7825 ;
  wire \$auto$builder.cc:338:Biop$7843 ;
  wire \$auto$builder.cc:338:Biop$7849 ;
  wire \$auto$builder.cc:338:Biop$7859 ;
  wire \$auto$builder.cc:338:Biop$7877 ;
  wire \$auto$builder.cc:338:Biop$7899 ;
  wire \$auto$builder.cc:338:Biop$7925 ;
  wire \$auto$builder.cc:364:Unop$7787 ;
  wire \$auto$builder.cc:364:Unop$7875 ;
  wire \$auto$builder.cc:364:Unop$7889 ;
  wire \$auto$builder.cc:364:Unop$7897 ;
  wire \$auto$builder.cc:364:Unop$7911 ;
  wire \$auto$builder.cc:364:Unop$7923 ;
  wire \$auto$builder.cc:364:Unop$7937 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17892 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7801 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7809 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7871 ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" */
  input [283:0] data_i;
  wire [283:0] data_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" */
  output [70:0] data_o;
  wire [70:0] data_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" */
  input flush_i;
  wire flush_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" */
  wire [212:0] \gen_arbiter.data_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" */
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" */
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" */
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" */
  wire [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:142.13" */
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" */
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" */
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [4:0] \gen_arbiter.index_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" */
  wire [3:0] \gen_arbiter.req_d ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" */
  wire [2:0] \gen_arbiter.req_nodes ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" */
  wire [1:0] \gen_arbiter.rr_q ;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" */
  input gnt_i;
  wire gnt_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" */
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" */
  output [1:0] idx_o;
  wire [1:0] idx_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" */
  input [3:0] req_i;
  wire [3:0] req_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" */
  output req_o;
  wire req_o;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" */
  input [1:0] rr_i;
  wire [1:0] rr_i;
  /* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" */
  input rst_ni;
  wire rst_ni;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7788  (
    .A(req_o),
    .B(\$auto$builder.cc:364:Unop$7787 ),
    .Y(\gen_arbiter.gen_int_rr.gen_lock.lock_d )
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7842  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7843 )
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7848  (
    .A(2'h3),
    .B(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7849 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7858  (
    .A(gnt_i),
    .B(req_o),
    .Y(\$auto$builder.cc:338:Biop$7859 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7872  (
    .A(\gen_arbiter.req_nodes [1]),
    .B(\gen_arbiter.req_nodes [2]),
    .Y(req_o)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7876  (
    .A(\gen_arbiter.req_nodes [2]),
    .B(\gen_arbiter.rr_q [1]),
    .Y(\$auto$builder.cc:338:Biop$7877 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7878  (
    .A(\$auto$builder.cc:364:Unop$7875 ),
    .B(\$auto$builder.cc:338:Biop$7877 ),
    .Y(\gen_arbiter.gen_levels[0].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7890  (
    .A(gnt_i),
    .B(\$auto$builder.cc:364:Unop$7889 ),
    .Y(\gen_arbiter.gnt_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7892  (
    .A(gnt_i),
    .B(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\gen_arbiter.gnt_nodes [2])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7894  (
    .A(\gen_arbiter.req_d [0]),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.req_nodes [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7898  (
    .A(\gen_arbiter.req_d [1]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$7899 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7900  (
    .A(\$auto$builder.cc:364:Unop$7897 ),
    .B(\$auto$builder.cc:338:Biop$7899 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[0].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7912  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\$auto$builder.cc:364:Unop$7911 ),
    .Y(gnt_o[0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7918  (
    .A(\gen_arbiter.gnt_nodes [1]),
    .B(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(gnt_o[1])
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7920  (
    .A(\gen_arbiter.req_d [2]),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.req_nodes [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7924  (
    .A(\gen_arbiter.req_d [3]),
    .B(\gen_arbiter.rr_q [0]),
    .Y(\$auto$builder.cc:338:Biop$7925 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7926  (
    .A(\$auto$builder.cc:364:Unop$7923 ),
    .B(\$auto$builder.cc:338:Biop$7925 ),
    .Y(\gen_arbiter.gen_levels[1].gen_level[1].sel )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7938  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\$auto$builder.cc:364:Unop$7937 ),
    .Y(gnt_o[2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$7944  (
    .A(\gen_arbiter.gnt_nodes [2]),
    .B(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(gnt_o[3])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7786  (
    .A(gnt_i),
    .Y(\$auto$builder.cc:364:Unop$7787 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7874  (
    .A(\gen_arbiter.req_nodes [1]),
    .Y(\$auto$builder.cc:364:Unop$7875 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7888  (
    .A(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$7889 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7896  (
    .A(\gen_arbiter.req_d [0]),
    .Y(\$auto$builder.cc:364:Unop$7897 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7910  (
    .A(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\$auto$builder.cc:364:Unop$7911 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7922  (
    .A(\gen_arbiter.req_d [2]),
    .Y(\$auto$builder.cc:364:Unop$7923 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$7936  (
    .A(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\$auto$builder.cc:364:Unop$7937 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$17891  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7871 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17892 ),
    .Q(\gen_arbiter.rr_q )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17893  (
    .A({ \$auto$builder.cc:338:Biop$7859 , flush_i }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17892 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2133:replace_const_cells$17386  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7819 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2140:replace_const_cells$17387  (
    .A(\gen_arbiter.rr_q ),
    .Y(\$auto$builder.cc:338:Biop$7825 )
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) \$auto$slang_frontend.cc:2041:operator()$7792  (
    .A(req_i),
    .B(\gen_arbiter.gen_int_rr.gen_lock.req_q ),
    .S(\gen_arbiter.gen_int_rr.gen_lock.lock_q ),
    .Y(\gen_arbiter.req_d )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7822  (
    .A(\$auto$builder.cc:338:Biop$7819 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7828  (
    .A(\$auto$builder.cc:338:Biop$7825 ),
    .B(\gen_arbiter.req_d [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1])
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7834  (
    .A(\gen_arbiter.req_d [2]),
    .B(1'h0),
    .S(\gen_arbiter.rr_q [1]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7840  (
    .A(\gen_arbiter.rr_q [1]),
    .B(\gen_arbiter.req_d [2]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7846  (
    .A(\$auto$builder.cc:338:Biop$7843 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$7852  (
    .A(\$auto$builder.cc:338:Biop$7849 ),
    .B(\gen_arbiter.req_d [3]),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3])
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$7856  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .B(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .S(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .Y(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx )
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) \$auto$slang_frontend.cc:2041:operator()$7882  (
    .A({ 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  }),
    .B({ 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  }),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(idx_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7886  (
    .A(\gen_arbiter.data_nodes [141:71]),
    .B(\gen_arbiter.data_nodes [212:142]),
    .S(\gen_arbiter.gen_levels[0].gen_level[0].sel ),
    .Y(data_o)
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7904  (
    .A(data_i[70:0]),
    .B(data_i[141:71]),
    .S(\gen_arbiter.gen_levels[1].gen_level[0].sel ),
    .Y(\gen_arbiter.data_nodes [141:71])
  );
  \$mux  #(
    .WIDTH(32'd71)
  ) \$auto$slang_frontend.cc:2041:operator()$7930  (
    .A(data_i[212:142]),
    .B(data_i[283:213]),
    .S(\gen_arbiter.gen_levels[1].gen_level[1].sel ),
    .Y(\gen_arbiter.data_nodes [212:142])
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.lock_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7801 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.lock_q )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$gen_arbiter.gen_int_rr.gen_lock.req_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7809 ),
    .Q(\gen_arbiter.gen_int_rr.gen_lock.req_q )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13500  (
    .A(\gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ),
    .B(2'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7871 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$13503  (
    .A(\gen_arbiter.req_d ),
    .B(4'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7809 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13506  (
    .A(\gen_arbiter.gen_int_rr.gen_lock.lock_d ),
    .B(1'h0),
    .S(flush_i),
    .Y(\$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7801 )
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  /* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" */
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gen_int_rr.rr_d  = \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

/* src = "../rtl/common_cells/rstgen.sv:13.8" */
module \rstgen$croc_chip.i_croc_soc.i_rstgen (clk_i, rst_ni, test_mode_i, rst_no, init_no);
  /* src = "../rtl/common_cells/rstgen.sv:14.18" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/rstgen.sv:18.18" */
  output init_no;
  wire init_no;
  /* src = "../rtl/common_cells/rstgen.sv:15.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/rstgen.sv:17.18" */
  output rst_no;
  wire rst_no;
  /* src = "../rtl/common_cells/rstgen.sv:16.18" */
  input test_mode_i;
  wire test_mode_i;
  /* src = "../rtl/common_cells/rstgen.sv:21.19" */
  \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass  i_rstgen_bypass (
    .clk_i(clk_i),
    .init_no(init_no),
    .rst_ni(rst_ni),
    .rst_no(rst_no),
    .rst_test_mode_ni(rst_ni),
    .test_mode_i(test_mode_i)
  );
endmodule

/* src = "../rtl/common_cells/rstgen_bypass.sv:15.8" */
module \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass (clk_i, rst_ni, test_mode_i, rst_no, init_no, rst_test_mode_ni);
  /* src = "../rtl/common_cells/rstgen_bypass.sv:18.18" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/common_cells/rstgen_bypass.sv:23.18" */
  output init_no;
  wire init_no;
  /* src = "../rtl/common_cells/rstgen_bypass.sv:27.11" */
  wire rst_n;
  /* src = "../rtl/common_cells/rstgen_bypass.sv:19.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/rstgen_bypass.sv:22.18" */
  output rst_no;
  wire rst_no;
  /* src = "../rtl/common_cells/rstgen_bypass.sv:20.18" */
  input rst_test_mode_ni;
  wire rst_test_mode_ni;
  /* src = "../rtl/common_cells/rstgen_bypass.sv:29.25" */
  wire [3:0] synch_regs_q;
  /* src = "../rtl/common_cells/rstgen_bypass.sv:21.18" */
  input test_mode_i;
  wire test_mode_i;
  /* src = "../rtl/common_cells/rstgen_bypass.sv:53.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$synch_regs_q  (
    .ARST(rst_n),
    .CLK(clk_i),
    .D({ synch_regs_q[2:0], 1'h1 }),
    .Q(synch_regs_q)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/rstgen_bypass.sv:46.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no  i_tc_clk_mux2_init_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(1'h1),
    .clk_o(init_no),
    .clk_sel_i(test_mode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/rstgen_bypass.sv:32.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n  i_tc_clk_mux2_rst_n (
    .clk0_i(rst_ni),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_n),
    .clk_sel_i(test_mode_i)
  );
  /* keep_hierarchy = 32'd1 */
  /* src = "../rtl/common_cells/rstgen_bypass.sv:39.17" */
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no  i_tc_clk_mux2_rst_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_no),
    .clk_sel_i(test_mode_i)
  );
endmodule

/* src = "../rtl/apb_uart/slib_clock_div.sv:35.8" */
module \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2 (CLK, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8545 ;
  wire [2:0] \$auto$builder.cc:338:Biop$8549 ;
  /* src = "../rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\iCounter$8550 ;
  /* src = "../rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  wire \$auto$slang_frontend.cc:694:finish$\iQ$8553 ;
  /* src = "../rtl/apb_uart/slib_clock_div.sv:38.14" */
  input CE;
  wire CE;
  /* src = "../rtl/apb_uart/slib_clock_div.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_clock_div.sv:39.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_clock_div.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_clock_div.sv:44.27" */
  wire [2:0] iCounter;
  /* src = "../rtl/apb_uart/slib_clock_div.sv:43.5" */
  wire iQ;
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8544  (
    .A(iCounter),
    .B(3'h7),
    .Y(\$auto$builder.cc:338:Biop$8545 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd3)
  ) \$auto$builder.cc:330:Biop$8548  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$8549 )
  );
  /* src = "../rtl/apb_uart/slib_clock_div.sv:46.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$17894  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iCounter$8550 ),
    .EN(CE),
    .Q(iCounter)
  );
  /* src = "../rtl/apb_uart/slib_clock_div.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iQ  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iQ$8553 ),
    .Q(iQ)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_clock_div.sv:59.19-62.26|../rtl/apb_uart/slib_clock_div.sv:58.7-66.26" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13259  (
    .A(\$auto$builder.cc:338:Biop$8549 ),
    .B(3'h0),
    .S(\$auto$builder.cc:338:Biop$8545 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCounter$8550 )
  );
  /* src = "../rtl/apb_uart/slib_clock_div.sv:58.7-66.26|../rtl/apb_uart/slib_clock_div.sv:56.5-67.20" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13264  (
    .A(CE),
    .B(\$auto$builder.cc:338:Biop$8545 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iQ$8553 )
  );
  assign Q = iQ;
endmodule

/* src = "../rtl/apb_uart/slib_counter.sv:35.8" */
module \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC (CLK, D, Q, RST, CLEAR, LOAD, ENABLE, DOWN, OVERFLOW);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17896 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17899 ;
  wire [4:0] \$auto$opt_share.cc:222:merge_operators$17439 ;
  wire [4:0] \$auto$rtlil.cc:2874:Mux$17441 ;
  /* src = "../rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\iCounter$10038 ;
  /* src = "../rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\iCounter$10039 ;
  /* src = "../rtl/apb_uart/slib_counter.sv:80.6-83.11" */
  wire \$auto$slang_frontend.cc:694:finish$\iCounter[4]$10044 ;
  /* src = "../rtl/apb_uart/slib_counter.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "../rtl/apb_uart/slib_counter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_counter.sv:42.28" */
  input [3:0] D;
  wire [3:0] D;
  /* src = "../rtl/apb_uart/slib_counter.sv:41.14" */
  input DOWN;
  wire DOWN;
  /* src = "../rtl/apb_uart/slib_counter.sv:40.14" */
  input ENABLE;
  wire ENABLE;
  /* src = "../rtl/apb_uart/slib_counter.sv:39.14" */
  input LOAD;
  wire LOAD;
  /* src = "../rtl/apb_uart/slib_counter.sv:44.16" */
  output OVERFLOW;
  wire OVERFLOW;
  /* src = "../rtl/apb_uart/slib_counter.sv:43.30" */
  output [3:0] Q;
  wire [3:0] Q;
  /* src = "../rtl/apb_uart/slib_counter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_counter.sv:48.15" */
  wire [4:0] iCounter;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd5)
  ) \$auto$builder.cc:330:Biop$10034  (
    .A(iCounter),
    .B({ \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$17439 )
  );
  /* src = "../rtl/apb_uart/slib_counter.sv:50.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$17895  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iCounter[4]$10044 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17896 ),
    .Q(iCounter[4])
  );
  /* src = "../rtl/apb_uart/slib_counter.sv:50.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$17898  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iCounter$10039 [3:0]),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17899 ),
    .Q(iCounter[3:0])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17897  (
    .A({ ENABLE, LOAD, iCounter[4], CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17896 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17900  (
    .A({ ENABLE, LOAD, CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17899 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$17440  (
    .A(DOWN),
    .Y(\$auto$rtlil.cc:2874:Mux$17441 [4])
  );
  /* src = "../rtl/apb_uart/slib_counter.sv:82.11-82.32|../rtl/apb_uart/slib_counter.sv:80.6-83.11" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12633  (
    .A(\$auto$slang_frontend.cc:694:finish$\iCounter$10039 [4]),
    .B(1'h0),
    .S(iCounter[4]),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCounter[4]$10044 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_counter.sv:65.11-65.45|../rtl/apb_uart/slib_counter.sv:63.11-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$12658  (
    .A(\$auto$opt_share.cc:222:merge_operators$17439 ),
    .B({ 1'h0, D }),
    .S(LOAD),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCounter$10038 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_counter.sv:61.11-61.25|../rtl/apb_uart/slib_counter.sv:58.6-78.11" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$12665  (
    .A(\$auto$slang_frontend.cc:694:finish$\iCounter$10038 ),
    .B(5'h00),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCounter$10039 )
  );
  assign \$auto$rtlil.cc:2874:Mux$17441 [3:0] = { \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], 1'h1 };
  assign OVERFLOW = iCounter[4];
  assign Q = iCounter[3:0];
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8403 ;
  wire \$auto$builder.cc:338:Biop$8415 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8402  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8403 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8406  (
    .A(\$auto$builder.cc:338:Biop$8403 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8414  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8415 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8416  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8415 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8426 ;
  wire \$auto$builder.cc:338:Biop$8438 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8425  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8426 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8429  (
    .A(\$auto$builder.cc:338:Biop$8426 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8437  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8438 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8439  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8438 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8495 ;
  wire \$auto$builder.cc:338:Biop$8507 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8494  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8495 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8498  (
    .A(\$auto$builder.cc:338:Biop$8495 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8506  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8507 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8508  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8507 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8449 ;
  wire \$auto$builder.cc:338:Biop$8461 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8448  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8449 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8452  (
    .A(\$auto$builder.cc:338:Biop$8449 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8460  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8461 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8462  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8461 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8472 ;
  wire \$auto$builder.cc:338:Biop$8484 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8471  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8472 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8475  (
    .A(\$auto$builder.cc:338:Biop$8472 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8483  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8484 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8485  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8484 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8380 ;
  wire \$auto$builder.cc:338:Biop$8392 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8379  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8380 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8383  (
    .A(\$auto$builder.cc:338:Biop$8380 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8391  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8392 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8393  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8392 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8334 ;
  wire \$auto$builder.cc:338:Biop$8346 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8333  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8334 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8337  (
    .A(\$auto$builder.cc:338:Biop$8334 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8345  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8346 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8347  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8346 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8357 ;
  wire \$auto$builder.cc:338:Biop$8369 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8356  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8357 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8360  (
    .A(\$auto$builder.cc:338:Biop$8357 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8368  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8369 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8370  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8369 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" */
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8558 ;
  wire \$auto$builder.cc:338:Biop$8570 ;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" */
  output RE;
  wire RE;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" */
  wire iDd;
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8557  (
    .A(iDd),
    .Y(\$auto$builder.cc:338:Biop$8558 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8561  (
    .A(\$auto$builder.cc:338:Biop$8558 ),
    .B(D),
    .Y(RE)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8569  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8570 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8571  (
    .A(iDd),
    .B(\$auto$builder.cc:338:Biop$8570 ),
    .Y(FE)
  );
  /* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iDd  (
    .ARST(RST),
    .CLK(CLK),
    .D(D),
    .Q(iDd)
  );
endmodule

/* src = "../rtl/apb_uart/slib_fifo.sv:35.8" */
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$auto$builder.cc:338:Biop$8763 ;
  wire \$auto$builder.cc:338:Biop$8765 ;
  wire \$auto$builder.cc:338:Biop$8778 ;
  wire \$auto$builder.cc:338:Biop$8780 ;
  wire [6:0] \$auto$builder.cc:338:Biop$8784 ;
  wire \$auto$builder.cc:338:Biop$8789 ;
  wire \$auto$builder.cc:338:Biop$8791 ;
  /* unused_bits = "7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$auto$builder.cc:338:Biop$8795 ;
  wire \$auto$builder.cc:338:Biop$8804 ;
  wire \$auto$builder.cc:338:Biop$8917 ;
  wire \$auto$builder.cc:338:Biop$8921 ;
  wire \$auto$builder.cc:338:Biop$8925 ;
  wire \$auto$builder.cc:338:Biop$8932 ;
  wire \$auto$builder.cc:338:Biop$8936 ;
  wire \$auto$builder.cc:338:Biop$8940 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17902 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17905 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17908 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17390 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17394 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$18159 ;
  wire \$auto$rtlil.cc:2797:Ge$8889 ;
  wire [5:0] \$auto$rtlil.cc:2874:Mux$18161 ;
  wire [10:0] \$auto$rtlil.cc:2874:Mux$8906 ;
  wire [703:0] \$auto$rtlil.cc:2875:Bwmux$8897 ;
  wire [703:0] \$auto$rtlil.cc:2896:Demux$8895 ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iRDAddr$8802 ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\iUSAGE$8946 ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iWRAddr$8801 ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "../rtl/apb_uart/slib_fifo.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_fifo.sv:41.28" */
  input [10:0] D;
  wire [10:0] D;
  /* src = "../rtl/apb_uart/slib_fifo.sv:43.16" */
  output EMPTY;
  wire EMPTY;
  /* src = "../rtl/apb_uart/slib_fifo.sv:44.16" */
  output FULL;
  wire FULL;
  /* src = "../rtl/apb_uart/slib_fifo.sv:42.30" */
  output [10:0] Q;
  wire [10:0] Q;
  /* src = "../rtl/apb_uart/slib_fifo.sv:40.14" */
  input READ;
  wire READ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_fifo.sv:45.31" */
  output [5:0] USAGE;
  wire [5:0] USAGE;
  /* src = "../rtl/apb_uart/slib_fifo.sv:39.14" */
  input WRITE;
  wire WRITE;
  /* src = "../rtl/apb_uart/slib_fifo.sv:49.5" */
  wire iEMPTY;
  /* src = "../rtl/apb_uart/slib_fifo.sv:55.17" */
  wire [703:0] iFIFOMem;
  /* src = "../rtl/apb_uart/slib_fifo.sv:50.5" */
  wire iFULL;
  /* src = "../rtl/apb_uart/slib_fifo.sv:52.16" */
  wire [6:0] iRDAddr;
  /* src = "../rtl/apb_uart/slib_fifo.sv:54.20" */
  wire [5:0] iUSAGE;
  /* src = "../rtl/apb_uart/slib_fifo.sv:51.16" */
  wire [6:0] iWRAddr;
  \$bwmux  #(
    .WIDTH(32'd704)
  ) \$auto$builder.cc:128:Bwmux$8896  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10] }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$8897 )
  );
  \$bmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd11)
  ) \$auto$builder.cc:195:Bmux$8903  (
    .A(iFIFOMem),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17394 ),
    .Y(\$auto$rtlil.cc:2874:Mux$8906 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8762  (
    .A(iRDAddr[5:0]),
    .B(iWRAddr[5:0]),
    .Y(\$auto$builder.cc:338:Biop$8763 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8764  (
    .A(iRDAddr[6]),
    .B(iWRAddr[6]),
    .Y(\$auto$builder.cc:338:Biop$8765 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8766  (
    .A(\$auto$builder.cc:338:Biop$8763 ),
    .B(\$auto$builder.cc:338:Biop$8765 ),
    .Y(iFULL)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8777  (
    .A(iFULL),
    .Y(\$auto$builder.cc:338:Biop$8778 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8779  (
    .A(WRITE),
    .B(\$auto$builder.cc:338:Biop$8778 ),
    .Y(\$auto$builder.cc:338:Biop$8780 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$auto$builder.cc:330:Biop$8783  (
    .A(iWRAddr),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$8784 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8788  (
    .A(iEMPTY),
    .Y(\$auto$builder.cc:338:Biop$8789 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8790  (
    .A(READ),
    .B(\$auto$builder.cc:338:Biop$8789 ),
    .Y(\$auto$builder.cc:338:Biop$8791 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$auto$builder.cc:330:Biop$8794  (
    .A(iRDAddr),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$8795 [6:0])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8803  (
    .A(iRDAddr),
    .B(iWRAddr),
    .Y(\$auto$builder.cc:338:Biop$8804 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8916  (
    .A(READ),
    .Y(\$auto$builder.cc:338:Biop$8917 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8920  (
    .A(\$auto$builder.cc:338:Biop$8917 ),
    .B(WRITE),
    .Y(\$auto$builder.cc:338:Biop$8921 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8924  (
    .A(\$auto$builder.cc:338:Biop$8921 ),
    .B(\$auto$builder.cc:338:Biop$8778 ),
    .Y(\$auto$builder.cc:338:Biop$8925 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8931  (
    .A(WRITE),
    .Y(\$auto$builder.cc:338:Biop$8932 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8935  (
    .A(\$auto$builder.cc:338:Biop$8932 ),
    .B(READ),
    .Y(\$auto$builder.cc:338:Biop$8936 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8939  (
    .A(\$auto$builder.cc:338:Biop$8936 ),
    .B(\$auto$builder.cc:338:Biop$8789 ),
    .Y(\$auto$builder.cc:338:Biop$8940 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$builder.cc:330:Biop$8943  (
    .A(iUSAGE),
    .B({ \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18159 )
  );
  \$demux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$8894  (
    .A(\$auto$rtlil.cc:2797:Ge$8889 ),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17390 ),
    .Y({ \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [10] })
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:50:Ge$8888  (
    .A({ 1'h1, \$auto$opt_expr.cc:205:group_cell_inputs$17390  }),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:2797:Ge$8889 )
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17901  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iWRAddr$8801 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17902 ),
    .Q(iWRAddr)
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:124.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$17904  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iUSAGE$8946 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17905 ),
    .Q(iUSAGE)
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17907  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iRDAddr$8802 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17908 ),
    .Q(iRDAddr)
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17910  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [604:594]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[604:594])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17911  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [615:605]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[615:605])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17912  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [626:616]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[626:616])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17913  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [637:627]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[637:627])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17914  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [10:0]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[10:0])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17915  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [21:11]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[21:11])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17916  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [32:22]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[32:22])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17917  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [43:33]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[43:33])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17918  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [648:638]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[648:638])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17919  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [54:44]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[54:44])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17920  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [65:55]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[65:55])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17921  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [76:66]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[76:66])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17922  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [87:77]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[87:77])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17923  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [98:88]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[98:88])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17924  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [109:99]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[109:99])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17925  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [120:110]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[120:110])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17926  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [131:121]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[131:121])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17927  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [142:132]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[142:132])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17928  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [153:143]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[153:143])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17929  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [659:649]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[659:649])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17930  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [164:154]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[164:154])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17931  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [175:165]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[175:165])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17932  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [186:176]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[186:176])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17933  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [197:187]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[197:187])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17934  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [208:198]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[208:198])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17935  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [219:209]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[219:209])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17936  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [230:220]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[230:220])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17937  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [241:231]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[241:231])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17938  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [252:242]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[252:242])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17939  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [263:253]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[263:253])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17940  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [670:660]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[670:660])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17941  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [274:264]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[274:264])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17942  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [285:275]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[285:275])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17943  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [296:286]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[296:286])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17944  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [307:297]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[307:297])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17945  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [318:308]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[318:308])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17946  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [329:319]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[329:319])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17947  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [340:330]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[340:330])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17948  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [351:341]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[351:341])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17949  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [362:352]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[362:352])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17950  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [373:363]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[373:363])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17951  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [681:671]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[681:671])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17952  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [384:374]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[384:374])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17953  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [395:385]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[395:385])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17954  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [406:396]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[406:396])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17955  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [417:407]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[417:407])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17956  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [428:418]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[428:418])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17957  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [439:429]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[439:429])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17958  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [450:440]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[450:440])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17959  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [461:451]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[461:451])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17960  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [472:462]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[472:462])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17961  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [483:473]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[483:473])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17962  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [692:682]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[692:682])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17963  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [494:484]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[494:484])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17964  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [505:495]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[505:495])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17965  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [516:506]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[516:506])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17966  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [527:517]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[527:517])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17967  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [538:528]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[538:528])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17968  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [549:539]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[549:539])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17969  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [560:550]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[560:550])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17970  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [571:561]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[571:561])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17971  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [582:572]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[582:572])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17972  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [593:583]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[593:583])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$auto$ff.cc:266:slice$17973  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8897 [703:693]),
    .EN(\$auto$builder.cc:338:Biop$8780 ),
    .Q(iFIFOMem[703:693])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17903  (
    .A({ \$auto$builder.cc:338:Biop$8780 , CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17902 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17906  (
    .A({ \$auto$builder.cc:338:Biop$8940 , \$auto$builder.cc:338:Biop$8925 , CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17905 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17909  (
    .A({ \$auto$builder.cc:338:Biop$8791 , CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17908 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17391  (
    .A(iWRAddr[5:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17390 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17395  (
    .A(iRDAddr[5:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17394 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18160  (
    .A(\$auto$builder.cc:338:Biop$8940 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18161 [5])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(11'h000),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd11)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2874:Mux$8906 ),
    .Q(Q)
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iEMPTY  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$8804 ),
    .Q(iEMPTY)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_fifo.sv:136.1-136.13|../rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$13193  (
    .A(\$auto$opt_share.cc:222:merge_operators$18159 ),
    .B(6'h00),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iUSAGE$8946 )
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:82.11-87.10|../rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13203  (
    .A(\$auto$builder.cc:338:Biop$8795 [6:0]),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRDAddr$8802 )
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:82.11-87.10|../rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13207  (
    .A(\$auto$builder.cc:338:Biop$8784 ),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iWRAddr$8801 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18161 [4:0] = { \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], 1'h1 };
  assign { \$auto$rtlil.cc:2896:Demux$8895 [702:693], \$auto$rtlil.cc:2896:Demux$8895 [691:682], \$auto$rtlil.cc:2896:Demux$8895 [680:671], \$auto$rtlil.cc:2896:Demux$8895 [669:660], \$auto$rtlil.cc:2896:Demux$8895 [658:649], \$auto$rtlil.cc:2896:Demux$8895 [647:638], \$auto$rtlil.cc:2896:Demux$8895 [636:627], \$auto$rtlil.cc:2896:Demux$8895 [625:616], \$auto$rtlil.cc:2896:Demux$8895 [614:605], \$auto$rtlil.cc:2896:Demux$8895 [603:594], \$auto$rtlil.cc:2896:Demux$8895 [592:583], \$auto$rtlil.cc:2896:Demux$8895 [581:572], \$auto$rtlil.cc:2896:Demux$8895 [570:561], \$auto$rtlil.cc:2896:Demux$8895 [559:550], \$auto$rtlil.cc:2896:Demux$8895 [548:539], \$auto$rtlil.cc:2896:Demux$8895 [537:528], \$auto$rtlil.cc:2896:Demux$8895 [526:517], \$auto$rtlil.cc:2896:Demux$8895 [515:506], \$auto$rtlil.cc:2896:Demux$8895 [504:495], \$auto$rtlil.cc:2896:Demux$8895 [493:484], \$auto$rtlil.cc:2896:Demux$8895 [482:473], \$auto$rtlil.cc:2896:Demux$8895 [471:462], \$auto$rtlil.cc:2896:Demux$8895 [460:451], \$auto$rtlil.cc:2896:Demux$8895 [449:440], \$auto$rtlil.cc:2896:Demux$8895 [438:429], \$auto$rtlil.cc:2896:Demux$8895 [427:418], \$auto$rtlil.cc:2896:Demux$8895 [416:407], \$auto$rtlil.cc:2896:Demux$8895 [405:396], \$auto$rtlil.cc:2896:Demux$8895 [394:385], \$auto$rtlil.cc:2896:Demux$8895 [383:374], \$auto$rtlil.cc:2896:Demux$8895 [372:363], \$auto$rtlil.cc:2896:Demux$8895 [361:352], \$auto$rtlil.cc:2896:Demux$8895 [350:341], \$auto$rtlil.cc:2896:Demux$8895 [339:330], \$auto$rtlil.cc:2896:Demux$8895 [328:319], \$auto$rtlil.cc:2896:Demux$8895 [317:308], \$auto$rtlil.cc:2896:Demux$8895 [306:297], \$auto$rtlil.cc:2896:Demux$8895 [295:286], \$auto$rtlil.cc:2896:Demux$8895 [284:275], \$auto$rtlil.cc:2896:Demux$8895 [273:264], \$auto$rtlil.cc:2896:Demux$8895 [262:253], \$auto$rtlil.cc:2896:Demux$8895 [251:242], \$auto$rtlil.cc:2896:Demux$8895 [240:231], \$auto$rtlil.cc:2896:Demux$8895 [229:220], \$auto$rtlil.cc:2896:Demux$8895 [218:209], \$auto$rtlil.cc:2896:Demux$8895 [207:198], \$auto$rtlil.cc:2896:Demux$8895 [196:187], \$auto$rtlil.cc:2896:Demux$8895 [185:176], \$auto$rtlil.cc:2896:Demux$8895 [174:165], \$auto$rtlil.cc:2896:Demux$8895 [163:154], \$auto$rtlil.cc:2896:Demux$8895 [152:143], \$auto$rtlil.cc:2896:Demux$8895 [141:132], \$auto$rtlil.cc:2896:Demux$8895 [130:121], \$auto$rtlil.cc:2896:Demux$8895 [119:110], \$auto$rtlil.cc:2896:Demux$8895 [108:99], \$auto$rtlil.cc:2896:Demux$8895 [97:88], \$auto$rtlil.cc:2896:Demux$8895 [86:77], \$auto$rtlil.cc:2896:Demux$8895 [75:66], \$auto$rtlil.cc:2896:Demux$8895 [64:55], \$auto$rtlil.cc:2896:Demux$8895 [53:44], \$auto$rtlil.cc:2896:Demux$8895 [42:33], \$auto$rtlil.cc:2896:Demux$8895 [31:22], \$auto$rtlil.cc:2896:Demux$8895 [20:11], \$auto$rtlil.cc:2896:Demux$8895 [9:0] } = { \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10] };
  assign EMPTY = iEMPTY;
  assign FULL = iFULL;
  assign USAGE = iUSAGE;
endmodule

/* src = "../rtl/apb_uart/slib_fifo.sv:35.8" */
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire \$auto$builder.cc:338:Biop$8578 ;
  wire \$auto$builder.cc:338:Biop$8580 ;
  wire \$auto$builder.cc:338:Biop$8593 ;
  wire \$auto$builder.cc:338:Biop$8595 ;
  wire [6:0] \$auto$builder.cc:338:Biop$8599 ;
  wire \$auto$builder.cc:338:Biop$8604 ;
  wire \$auto$builder.cc:338:Biop$8606 ;
  /* unused_bits = "7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$auto$builder.cc:338:Biop$8610 ;
  wire \$auto$builder.cc:338:Biop$8619 ;
  wire \$auto$builder.cc:338:Biop$8732 ;
  wire \$auto$builder.cc:338:Biop$8736 ;
  wire \$auto$builder.cc:338:Biop$8740 ;
  wire \$auto$builder.cc:338:Biop$8747 ;
  wire \$auto$builder.cc:338:Biop$8751 ;
  wire \$auto$builder.cc:338:Biop$8755 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17975 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17978 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17981 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17398 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17402 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$18164 ;
  wire \$auto$rtlil.cc:2797:Ge$8704 ;
  wire [5:0] \$auto$rtlil.cc:2874:Mux$18166 ;
  wire [7:0] \$auto$rtlil.cc:2874:Mux$8721 ;
  wire [511:0] \$auto$rtlil.cc:2875:Bwmux$8712 ;
  wire [511:0] \$auto$rtlil.cc:2896:Demux$8710 ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iRDAddr$8617 ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\iUSAGE$8761 ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iWRAddr$8616 ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:38.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "../rtl/apb_uart/slib_fifo.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_fifo.sv:41.28" */
  input [7:0] D;
  wire [7:0] D;
  /* src = "../rtl/apb_uart/slib_fifo.sv:43.16" */
  output EMPTY;
  wire EMPTY;
  /* src = "../rtl/apb_uart/slib_fifo.sv:44.16" */
  output FULL;
  wire FULL;
  /* src = "../rtl/apb_uart/slib_fifo.sv:42.30" */
  output [7:0] Q;
  wire [7:0] Q;
  /* src = "../rtl/apb_uart/slib_fifo.sv:40.14" */
  input READ;
  wire READ;
  /* src = "../rtl/apb_uart/slib_fifo.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_fifo.sv:45.31" */
  output [5:0] USAGE;
  wire [5:0] USAGE;
  /* src = "../rtl/apb_uart/slib_fifo.sv:39.14" */
  input WRITE;
  wire WRITE;
  /* src = "../rtl/apb_uart/slib_fifo.sv:49.5" */
  wire iEMPTY;
  /* src = "../rtl/apb_uart/slib_fifo.sv:55.17" */
  wire [511:0] iFIFOMem;
  /* src = "../rtl/apb_uart/slib_fifo.sv:50.5" */
  wire iFULL;
  /* src = "../rtl/apb_uart/slib_fifo.sv:52.16" */
  wire [6:0] iRDAddr;
  /* src = "../rtl/apb_uart/slib_fifo.sv:54.20" */
  wire [5:0] iUSAGE;
  /* src = "../rtl/apb_uart/slib_fifo.sv:51.16" */
  wire [6:0] iWRAddr;
  \$bwmux  #(
    .WIDTH(32'd512)
  ) \$auto$builder.cc:128:Bwmux$8711  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7] }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$8712 )
  );
  \$bmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd8)
  ) \$auto$builder.cc:195:Bmux$8718  (
    .A(iFIFOMem),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17402 ),
    .Y(\$auto$rtlil.cc:2874:Mux$8721 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8577  (
    .A(iRDAddr[5:0]),
    .B(iWRAddr[5:0]),
    .Y(\$auto$builder.cc:338:Biop$8578 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8579  (
    .A(iRDAddr[6]),
    .B(iWRAddr[6]),
    .Y(\$auto$builder.cc:338:Biop$8580 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8581  (
    .A(\$auto$builder.cc:338:Biop$8578 ),
    .B(\$auto$builder.cc:338:Biop$8580 ),
    .Y(iFULL)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8592  (
    .A(iFULL),
    .Y(\$auto$builder.cc:338:Biop$8593 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8594  (
    .A(WRITE),
    .B(\$auto$builder.cc:338:Biop$8593 ),
    .Y(\$auto$builder.cc:338:Biop$8595 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$auto$builder.cc:330:Biop$8598  (
    .A(iWRAddr),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$8599 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8603  (
    .A(iEMPTY),
    .Y(\$auto$builder.cc:338:Biop$8604 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8605  (
    .A(READ),
    .B(\$auto$builder.cc:338:Biop$8604 ),
    .Y(\$auto$builder.cc:338:Biop$8606 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd7)
  ) \$auto$builder.cc:330:Biop$8609  (
    .A(iRDAddr),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$8610 [6:0])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8618  (
    .A(iRDAddr),
    .B(iWRAddr),
    .Y(\$auto$builder.cc:338:Biop$8619 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8731  (
    .A(READ),
    .Y(\$auto$builder.cc:338:Biop$8732 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8735  (
    .A(\$auto$builder.cc:338:Biop$8732 ),
    .B(WRITE),
    .Y(\$auto$builder.cc:338:Biop$8736 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8739  (
    .A(\$auto$builder.cc:338:Biop$8736 ),
    .B(\$auto$builder.cc:338:Biop$8593 ),
    .Y(\$auto$builder.cc:338:Biop$8740 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8746  (
    .A(WRITE),
    .Y(\$auto$builder.cc:338:Biop$8747 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8750  (
    .A(\$auto$builder.cc:338:Biop$8747 ),
    .B(READ),
    .Y(\$auto$builder.cc:338:Biop$8751 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8754  (
    .A(\$auto$builder.cc:338:Biop$8751 ),
    .B(\$auto$builder.cc:338:Biop$8604 ),
    .Y(\$auto$builder.cc:338:Biop$8755 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$builder.cc:330:Biop$8758  (
    .A(iUSAGE),
    .B({ \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18164 )
  );
  \$demux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$8709  (
    .A(\$auto$rtlil.cc:2797:Ge$8704 ),
    .S(\$auto$opt_expr.cc:205:group_cell_inputs$17398 ),
    .Y({ \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [7] })
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd7),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:50:Ge$8703  (
    .A({ 1'h1, \$auto$opt_expr.cc:205:group_cell_inputs$17398  }),
    .B(7'h40),
    .Y(\$auto$rtlil.cc:2797:Ge$8704 )
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17974  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iWRAddr$8616 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17975 ),
    .Q(iWRAddr)
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:124.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(6'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd6)
  ) \$auto$ff.cc:266:slice$17977  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iUSAGE$8761 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17978 ),
    .Q(iUSAGE)
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(7'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd7)
  ) \$auto$ff.cc:266:slice$17980  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iRDAddr$8617 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$17981 ),
    .Q(iRDAddr)
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17983  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [439:432]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[439:432])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17984  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [447:440]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[447:440])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17985  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [455:448]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[455:448])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17986  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [463:456]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[463:456])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17987  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [7:0]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[7:0])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17988  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [15:8]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[15:8])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17989  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [23:16]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[23:16])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17990  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [31:24]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[31:24])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17991  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [471:464]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[471:464])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17992  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [39:32]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[39:32])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17993  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [47:40]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[47:40])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17994  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [55:48]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[55:48])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17995  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [63:56]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[63:56])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17996  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [71:64]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[71:64])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17997  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [79:72]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[79:72])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17998  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [87:80]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[87:80])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$17999  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [95:88]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[95:88])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18000  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [103:96]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[103:96])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18001  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [111:104]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[111:104])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18002  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [479:472]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[479:472])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18003  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [119:112]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[119:112])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18004  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [127:120]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[127:120])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18005  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [135:128]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[135:128])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18006  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [143:136]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[143:136])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18007  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [151:144]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[151:144])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18008  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [159:152]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[159:152])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18009  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [167:160]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[167:160])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18010  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [175:168]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[175:168])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18011  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [183:176]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[183:176])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18012  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [191:184]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[191:184])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18013  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [487:480]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[487:480])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18014  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [199:192]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[199:192])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18015  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [207:200]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[207:200])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18016  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [215:208]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[215:208])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18017  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [223:216]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[223:216])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18018  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [231:224]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[231:224])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18019  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [239:232]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[239:232])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18020  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [247:240]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[247:240])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18021  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [255:248]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[255:248])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18022  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [263:256]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[263:256])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18023  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [271:264]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[271:264])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18024  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [495:488]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[495:488])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18025  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [279:272]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[279:272])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18026  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [287:280]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[287:280])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18027  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [295:288]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[295:288])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18028  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [303:296]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[303:296])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18029  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [311:304]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[311:304])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18030  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [319:312]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[319:312])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18031  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [327:320]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[327:320])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18032  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [335:328]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[335:328])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18033  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [343:336]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[343:336])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18034  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [351:344]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[351:344])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18035  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [503:496]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[503:496])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18036  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [359:352]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[359:352])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18037  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [367:360]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[367:360])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18038  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [375:368]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[375:368])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18039  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [383:376]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[383:376])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18040  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [391:384]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[391:384])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18041  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [399:392]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[399:392])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18042  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [407:400]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[407:400])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18043  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [415:408]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[415:408])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18044  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [423:416]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[423:416])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18045  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [431:424]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[431:424])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18046  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2875:Bwmux$8712 [511:504]),
    .EN(\$auto$builder.cc:338:Biop$8595 ),
    .Q(iFIFOMem[511:504])
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17976  (
    .A({ \$auto$builder.cc:338:Biop$8595 , CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17975 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17979  (
    .A({ \$auto$builder.cc:338:Biop$8755 , \$auto$builder.cc:338:Biop$8740 , CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17978 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$17982  (
    .A({ \$auto$builder.cc:338:Biop$8606 , CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$17981 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17399  (
    .A(iWRAddr[5:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17398 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .Y_WIDTH(32'd6)
  ) \$auto$opt_expr.cc:276:group_cell_inputs$17403  (
    .A(iRDAddr[5:0]),
    .Y(\$auto$opt_expr.cc:205:group_cell_inputs$17402 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18165  (
    .A(\$auto$builder.cc:338:Biop$8755 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18166 [5])
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$rtlil.cc:2874:Mux$8721 ),
    .Q(Q)
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:59.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iEMPTY  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$8619 ),
    .Q(iEMPTY)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_fifo.sv:136.1-136.13|../rtl/apb_uart/slib_fifo.sv:133.3-150.10" */
  \$mux  #(
    .WIDTH(32'd6)
  ) \$procmux$13230  (
    .A(\$auto$opt_share.cc:222:merge_operators$18164 ),
    .B(6'h00),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iUSAGE$8761 )
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:82.11-87.10|../rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13240  (
    .A(\$auto$builder.cc:338:Biop$8610 [6:0]),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iRDAddr$8617 )
  );
  /* src = "../rtl/apb_uart/slib_fifo.sv:82.11-87.10|../rtl/apb_uart/slib_fifo.sv:81.1-87.10" */
  \$mux  #(
    .WIDTH(32'd7)
  ) \$procmux$13244  (
    .A(\$auto$builder.cc:338:Biop$8599 ),
    .B(7'h00),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iWRAddr$8616 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18166 [4:0] = { \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], 1'h1 };
  assign { \$auto$rtlil.cc:2896:Demux$8710 [510:504], \$auto$rtlil.cc:2896:Demux$8710 [502:496], \$auto$rtlil.cc:2896:Demux$8710 [494:488], \$auto$rtlil.cc:2896:Demux$8710 [486:480], \$auto$rtlil.cc:2896:Demux$8710 [478:472], \$auto$rtlil.cc:2896:Demux$8710 [470:464], \$auto$rtlil.cc:2896:Demux$8710 [462:456], \$auto$rtlil.cc:2896:Demux$8710 [454:448], \$auto$rtlil.cc:2896:Demux$8710 [446:440], \$auto$rtlil.cc:2896:Demux$8710 [438:432], \$auto$rtlil.cc:2896:Demux$8710 [430:424], \$auto$rtlil.cc:2896:Demux$8710 [422:416], \$auto$rtlil.cc:2896:Demux$8710 [414:408], \$auto$rtlil.cc:2896:Demux$8710 [406:400], \$auto$rtlil.cc:2896:Demux$8710 [398:392], \$auto$rtlil.cc:2896:Demux$8710 [390:384], \$auto$rtlil.cc:2896:Demux$8710 [382:376], \$auto$rtlil.cc:2896:Demux$8710 [374:368], \$auto$rtlil.cc:2896:Demux$8710 [366:360], \$auto$rtlil.cc:2896:Demux$8710 [358:352], \$auto$rtlil.cc:2896:Demux$8710 [350:344], \$auto$rtlil.cc:2896:Demux$8710 [342:336], \$auto$rtlil.cc:2896:Demux$8710 [334:328], \$auto$rtlil.cc:2896:Demux$8710 [326:320], \$auto$rtlil.cc:2896:Demux$8710 [318:312], \$auto$rtlil.cc:2896:Demux$8710 [310:304], \$auto$rtlil.cc:2896:Demux$8710 [302:296], \$auto$rtlil.cc:2896:Demux$8710 [294:288], \$auto$rtlil.cc:2896:Demux$8710 [286:280], \$auto$rtlil.cc:2896:Demux$8710 [278:272], \$auto$rtlil.cc:2896:Demux$8710 [270:264], \$auto$rtlil.cc:2896:Demux$8710 [262:256], \$auto$rtlil.cc:2896:Demux$8710 [254:248], \$auto$rtlil.cc:2896:Demux$8710 [246:240], \$auto$rtlil.cc:2896:Demux$8710 [238:232], \$auto$rtlil.cc:2896:Demux$8710 [230:224], \$auto$rtlil.cc:2896:Demux$8710 [222:216], \$auto$rtlil.cc:2896:Demux$8710 [214:208], \$auto$rtlil.cc:2896:Demux$8710 [206:200], \$auto$rtlil.cc:2896:Demux$8710 [198:192], \$auto$rtlil.cc:2896:Demux$8710 [190:184], \$auto$rtlil.cc:2896:Demux$8710 [182:176], \$auto$rtlil.cc:2896:Demux$8710 [174:168], \$auto$rtlil.cc:2896:Demux$8710 [166:160], \$auto$rtlil.cc:2896:Demux$8710 [158:152], \$auto$rtlil.cc:2896:Demux$8710 [150:144], \$auto$rtlil.cc:2896:Demux$8710 [142:136], \$auto$rtlil.cc:2896:Demux$8710 [134:128], \$auto$rtlil.cc:2896:Demux$8710 [126:120], \$auto$rtlil.cc:2896:Demux$8710 [118:112], \$auto$rtlil.cc:2896:Demux$8710 [110:104], \$auto$rtlil.cc:2896:Demux$8710 [102:96], \$auto$rtlil.cc:2896:Demux$8710 [94:88], \$auto$rtlil.cc:2896:Demux$8710 [86:80], \$auto$rtlil.cc:2896:Demux$8710 [78:72], \$auto$rtlil.cc:2896:Demux$8710 [70:64], \$auto$rtlil.cc:2896:Demux$8710 [62:56], \$auto$rtlil.cc:2896:Demux$8710 [54:48], \$auto$rtlil.cc:2896:Demux$8710 [46:40], \$auto$rtlil.cc:2896:Demux$8710 [38:32], \$auto$rtlil.cc:2896:Demux$8710 [30:24], \$auto$rtlil.cc:2896:Demux$8710 [22:16], \$auto$rtlil.cc:2896:Demux$8710 [14:8], \$auto$rtlil.cc:2896:Demux$8710 [6:0] } = { \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7] };
  assign EMPTY = iEMPTY;
  assign FULL = iFULL;
  assign USAGE = iUSAGE;
endmodule

/* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8124 ;
  wire \$auto$builder.cc:338:Biop$8126 ;
  wire \$auto$builder.cc:338:Biop$8132 ;
  wire \$auto$builder.cc:338:Biop$8134 ;
  wire \$auto$builder.cc:338:Biop$8136 ;
  wire \$auto$builder.cc:338:Biop$8145 ;
  wire \$auto$builder.cc:338:Biop$8149 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18048 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18050 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18169 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18171 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$8152 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$8153 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8123  (
    .A(iCount),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$8124 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8125  (
    .A(D),
    .B(\$auto$builder.cc:338:Biop$8124 ),
    .Y(\$auto$builder.cc:338:Biop$8126 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$8129  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:2874:Mux$18171 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18169 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8131  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8132 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8133  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$8134 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8135  (
    .A(\$auto$builder.cc:338:Biop$8132 ),
    .B(\$auto$builder.cc:338:Biop$8134 ),
    .Y(\$auto$builder.cc:338:Biop$8136 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8144  (
    .A(iCount),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$8145 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8148  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$8149 )
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18047  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18169 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18050 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18049  (
    .A({ \$auto$builder.cc:338:Biop$8136 , \$auto$builder.cc:338:Biop$8126  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18048 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18051  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18048 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18050 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18170  (
    .A(\$auto$builder.cc:338:Biop$8126 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18171 [1])
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\Q$8153 ),
    .Q(Q)
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13414  (
    .A(Q),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$8149 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$8152 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13422  (
    .A(\$auto$slang_frontend.cc:694:finish$\Q$8152 ),
    .B(\$auto$builder.cc:338:Biop$8145 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$8153 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18171 [0] = 1'h1;
endmodule

/* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8204 ;
  wire \$auto$builder.cc:338:Biop$8206 ;
  wire \$auto$builder.cc:338:Biop$8212 ;
  wire \$auto$builder.cc:338:Biop$8214 ;
  wire \$auto$builder.cc:338:Biop$8216 ;
  wire \$auto$builder.cc:338:Biop$8225 ;
  wire \$auto$builder.cc:338:Biop$8229 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18053 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18055 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18174 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18176 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$8232 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$8233 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8203  (
    .A(iCount),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$8204 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8205  (
    .A(D),
    .B(\$auto$builder.cc:338:Biop$8204 ),
    .Y(\$auto$builder.cc:338:Biop$8206 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$8209  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:2874:Mux$18176 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18174 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8211  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8212 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8213  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$8214 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8215  (
    .A(\$auto$builder.cc:338:Biop$8212 ),
    .B(\$auto$builder.cc:338:Biop$8214 ),
    .Y(\$auto$builder.cc:338:Biop$8216 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8224  (
    .A(iCount),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$8225 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8228  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$8229 )
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18052  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18174 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18055 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18054  (
    .A({ \$auto$builder.cc:338:Biop$8216 , \$auto$builder.cc:338:Biop$8206  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18053 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18056  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18053 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18055 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18175  (
    .A(\$auto$builder.cc:338:Biop$8206 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18176 [1])
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\Q$8233 ),
    .Q(Q)
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13360  (
    .A(Q),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$8229 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$8232 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13368  (
    .A(\$auto$slang_frontend.cc:694:finish$\Q$8232 ),
    .B(\$auto$builder.cc:338:Biop$8225 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$8233 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18176 [0] = 1'h1;
endmodule

/* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8164 ;
  wire \$auto$builder.cc:338:Biop$8166 ;
  wire \$auto$builder.cc:338:Biop$8172 ;
  wire \$auto$builder.cc:338:Biop$8174 ;
  wire \$auto$builder.cc:338:Biop$8176 ;
  wire \$auto$builder.cc:338:Biop$8185 ;
  wire \$auto$builder.cc:338:Biop$8189 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18058 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18060 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18179 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18181 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$8192 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$8193 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8163  (
    .A(iCount),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$8164 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8165  (
    .A(D),
    .B(\$auto$builder.cc:338:Biop$8164 ),
    .Y(\$auto$builder.cc:338:Biop$8166 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$8169  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:2874:Mux$18181 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18179 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8171  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8172 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8173  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$8174 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8175  (
    .A(\$auto$builder.cc:338:Biop$8172 ),
    .B(\$auto$builder.cc:338:Biop$8174 ),
    .Y(\$auto$builder.cc:338:Biop$8176 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8184  (
    .A(iCount),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$8185 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8188  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$8189 )
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18057  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18179 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18060 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18059  (
    .A({ \$auto$builder.cc:338:Biop$8176 , \$auto$builder.cc:338:Biop$8166  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18058 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18061  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18058 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18060 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18180  (
    .A(\$auto$builder.cc:338:Biop$8166 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18181 [1])
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\Q$8193 ),
    .Q(Q)
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13387  (
    .A(Q),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$8189 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$8192 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13395  (
    .A(\$auto$slang_frontend.cc:694:finish$\Q$8192 ),
    .B(\$auto$builder.cc:338:Biop$8185 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$8193 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18181 [0] = 1'h1;
endmodule

/* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8244 ;
  wire \$auto$builder.cc:338:Biop$8246 ;
  wire \$auto$builder.cc:338:Biop$8252 ;
  wire \$auto$builder.cc:338:Biop$8254 ;
  wire \$auto$builder.cc:338:Biop$8256 ;
  wire \$auto$builder.cc:338:Biop$8265 ;
  wire \$auto$builder.cc:338:Biop$8269 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18063 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18065 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18184 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18186 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$8272 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$8273 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [1:0] iCount;
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8243  (
    .A(iCount),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$8244 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8245  (
    .A(D),
    .B(\$auto$builder.cc:338:Biop$8244 ),
    .Y(\$auto$builder.cc:338:Biop$8246 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd2)
  ) \$auto$builder.cc:330:Biop$8249  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:2874:Mux$18186 [1], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18184 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8251  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$8252 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8253  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$8254 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8255  (
    .A(\$auto$builder.cc:338:Biop$8252 ),
    .B(\$auto$builder.cc:338:Biop$8254 ),
    .Y(\$auto$builder.cc:338:Biop$8256 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8264  (
    .A(iCount),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$8265 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8268  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$8269 )
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$auto$ff.cc:266:slice$18062  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18184 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18065 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18064  (
    .A({ \$auto$builder.cc:338:Biop$8256 , \$auto$builder.cc:338:Biop$8246  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18063 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18066  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18063 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18065 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18185  (
    .A(\$auto$builder.cc:338:Biop$8246 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18186 [1])
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\Q$8273 ),
    .Q(Q)
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13333  (
    .A(Q),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$8269 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$8272 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13341  (
    .A(\$auto$slang_frontend.cc:694:finish$\Q$8272 ),
    .B(\$auto$builder.cc:338:Biop$8265 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$8273 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18186 [0] = 1'h1;
endmodule

/* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" */
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$10081 ;
  wire \$auto$builder.cc:338:Biop$10083 ;
  wire \$auto$builder.cc:338:Biop$10089 ;
  wire \$auto$builder.cc:338:Biop$10091 ;
  wire \$auto$builder.cc:338:Biop$10093 ;
  wire \$auto$builder.cc:338:Biop$10102 ;
  wire \$auto$builder.cc:338:Biop$10106 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18068 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18070 ;
  wire [2:0] \$auto$opt_share.cc:222:merge_operators$18189 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$18191 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$10109 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  wire \$auto$slang_frontend.cc:694:finish$\Q$10110 ;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" */
  input CE;
  wire CE;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" */
  wire [2:0] iCount;
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10080  (
    .A(iCount),
    .B(3'h4),
    .Y(\$auto$builder.cc:338:Biop$10081 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10082  (
    .A(D),
    .B(\$auto$builder.cc:338:Biop$10081 ),
    .Y(\$auto$builder.cc:338:Biop$10083 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd3)
  ) \$auto$builder.cc:330:Biop$10086  (
    .A(iCount),
    .B({ \$auto$rtlil.cc:2874:Mux$18191 [2], \$auto$rtlil.cc:2874:Mux$18191 [2], 1'h1 }),
    .Y(\$auto$opt_share.cc:222:merge_operators$18189 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10088  (
    .A(D),
    .Y(\$auto$builder.cc:338:Biop$10089 )
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10090  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$10091 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10092  (
    .A(\$auto$builder.cc:338:Biop$10089 ),
    .B(\$auto$builder.cc:338:Biop$10091 ),
    .Y(\$auto$builder.cc:338:Biop$10093 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10101  (
    .A(iCount),
    .B(3'h4),
    .Y(\$auto$builder.cc:338:Biop$10102 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10105  (
    .A(iCount),
    .Y(\$auto$builder.cc:338:Biop$10106 )
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$auto$ff.cc:266:slice$18067  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$opt_share.cc:222:merge_operators$18189 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18070 ),
    .Q(iCount)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18069  (
    .A({ \$auto$builder.cc:338:Biop$10093 , \$auto$builder.cc:338:Biop$10083  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18068 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18071  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18068 , CE }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18070 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_share.cc:244:merge_operators$18190  (
    .A(\$auto$builder.cc:338:Biop$10083 ),
    .Y(\$auto$rtlil.cc:2874:Mux$18191 [2])
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$Q  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\Q$10110 ),
    .Q(Q)
  );
  /* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12587  (
    .A(Q),
    .B(1'h0),
    .S(\$auto$builder.cc:338:Biop$10106 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$10109 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12595  (
    .A(\$auto$slang_frontend.cc:694:finish$\Q$10109 ),
    .B(\$auto$builder.cc:338:Biop$10102 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\Q$10110 )
  );
  assign \$auto$rtlil.cc:2874:Mux$18191 [1:0] = { \$auto$rtlil.cc:2874:Mux$18191 [2], 1'h1 };
endmodule

/* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS (CLK, D, Q, RST);
  /* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD (CLK, D, Q, RST);
  /* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR (CLK, D, Q, RST);
  /* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI (CLK, D, Q, RST);
  /* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" */
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN (CLK, D, Q, RST);
  /* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" */
  wire [1:0] iD;
  /* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$iD  (
    .ARST(RST),
    .CLK(CLK),
    .D({ iD[0], D }),
    .Q(iD)
  );
  assign Q = iD[1];
endmodule

/* src = "../rtl/apb_uart/slib_mv_filter.sv:35.8" */
module \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF (CLK, D, Q, RST, CLEAR, SAMPLE);
  wire \$auto$builder.cc:338:Biop$10049 ;
  wire \$auto$builder.cc:338:Biop$10057 ;
  wire [4:0] \$auto$builder.cc:338:Biop$10061 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18073 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18075 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18077 ;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\iCounter$10069 ;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iQ$10064 ;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  wire \$auto$slang_frontend.cc:694:finish$\iQ$10070 ;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:39.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:40.14" */
  input D;
  wire D;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:41.16" */
  output Q;
  wire Q;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:38.14" */
  input SAMPLE;
  wire SAMPLE;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:45.15" */
  wire [4:0] iCounter;
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:46.5" */
  wire iQ;
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10048  (
    .A(iCounter),
    .B(4'ha),
    .Y(\$auto$builder.cc:338:Biop$10049 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$10056  (
    .A(SAMPLE),
    .B(D),
    .Y(\$auto$builder.cc:338:Biop$10057 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd5)
  ) \$auto$builder.cc:330:Biop$10060  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$10061 )
  );
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:48.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(5'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd5)
  ) \$auto$ff.cc:266:slice$18072  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iCounter$10069 ),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18077 ),
    .Q(iCounter)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18074  (
    .A({ \$auto$builder.cc:338:Biop$10057 , \$auto$builder.cc:338:Biop$10049 , CLEAR }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18073 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18076  (
    .A({ \$auto$builder.cc:338:Biop$10049 , CLEAR }),
    .B(2'h2),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18075 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18078  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18075 , \$auto$opt_dff.cc:194:make_patterns_logic$18073  }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18077 )
  );
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:48.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iQ  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iQ$10070 ),
    .Q(iQ)
  );
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|../rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12614  (
    .A(\$auto$slang_frontend.cc:694:finish$\iQ$10064 ),
    .B(1'h0),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iQ$10070 )
  );
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|../rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" */
  \$mux  #(
    .WIDTH(32'd5)
  ) \$procmux$12617  (
    .A(\$auto$builder.cc:338:Biop$10061 ),
    .B(5'h00),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCounter$10069 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|../rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" */
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12627  (
    .A(iQ),
    .B(\$auto$builder.cc:338:Biop$10049 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iQ$10064 )
  );
  assign Q = iQ;
endmodule

/* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:10.8" */
module \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl (clk_i, rst_ni, reg_req_i, reg_rsp_o, reg2hw, hw2reg, devmode_i);
  wire \$auto$builder.cc:338:Biop$1162 ;
  wire \$auto$builder.cc:338:Biop$1177 ;
  wire [3:0] \$auto$builder.cc:338:Biop$1190 ;
  wire \$auto$builder.cc:338:Biop$1194 ;
  wire \$auto$builder.cc:338:Biop$1202 ;
  wire \$auto$builder.cc:338:Biop$1204 ;
  wire \$auto$builder.cc:338:Biop$1212 ;
  wire \$auto$builder.cc:338:Biop$1214 ;
  wire \$auto$builder.cc:338:Biop$1222 ;
  wire \$auto$builder.cc:338:Biop$1224 ;
  wire \$auto$builder.cc:338:Biop$1232 ;
  wire \$auto$builder.cc:338:Biop$1234 ;
  wire \$auto$builder.cc:338:Biop$1238 ;
  wire \$auto$builder.cc:338:Biop$1244 ;
  wire \$auto$builder.cc:338:Biop$1250 ;
  wire \$auto$builder.cc:338:Biop$1256 ;
  wire \$auto$builder.cc:338:Biop$1262 ;
  wire \$auto$builder.cc:364:Unop$1158 ;
  wire \$auto$builder.cc:364:Unop$1181 ;
  wire \$auto$builder.cc:364:Unop$1192 ;
  wire \$auto$builder.cc:364:Unop$1240 ;
  wire \$auto$rtlil.cc:2747:LogicNot$1183 ;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:226.15" */
  wire [4:0] addr_hit;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.18" */
  wire addrmiss;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:72.16" */
  wire [31:0] bootaddr_qs;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:73.16" */
  wire [31:0] bootaddr_wd;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:74.9" */
  wire bootaddr_we;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:81.9" */
  wire bootmode_qs;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:82.9" */
  wire bootmode_wd;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:83.9" */
  wire bootmode_we;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:16.15" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:78.16" */
  wire [31:0] corestatus_qs;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:79.16" */
  wire [31:0] corestatus_wd;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:80.9" */
  wire corestatus_we;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:26.9" */
  input devmode_i;
  wire devmode_i;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:75.9" */
  wire fetchen_qs;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:76.9" */
  wire fetchen_wd;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:77.9" */
  wire fetchen_we;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:22.46" */
  input [3:0] hw2reg;
  wire [3:0] hw2reg;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:21.46" */
  output [66:0] reg2hw;
  wire [66:0] reg2hw;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:37.24" */
  wire [4:0] reg_addr;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:39.19" */
  wire [3:0] reg_be;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:41.19" */
  wire reg_error;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:48.14" */
  /* unused_bits = "43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69" */
  wire [69:0] reg_intf_req;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:49.14" */
  wire [33:0] reg_intf_rsp;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:40.19" */
  wire [31:0] reg_rdata;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:45.18" */
  wire [31:0] reg_rdata_next;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:36.19" */
  wire reg_re;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:18.20" */
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:19.20" */
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:38.19" */
  wire [31:0] reg_wdata;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:35.19" */
  wire reg_we;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:17.15" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:84.9" */
  wire sram_dly_qs;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:85.9" */
  wire sram_dly_wd;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:86.9" */
  wire sram_dly_we;
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.28" */
  wire wr_err;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:102:LogicNot$1182  (
    .A(\$auto$builder.cc:364:Unop$1181 ),
    .Y(\$auto$rtlil.cc:2747:LogicNot$1183 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1155  (
    .A(reg_req_i[0]),
    .B(reg_req_i[37]),
    .Y(reg_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1159  (
    .A(reg_req_i[0]),
    .B(\$auto$builder.cc:364:Unop$1158 ),
    .Y(reg_re)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1161  (
    .A(devmode_i),
    .B(addrmiss),
    .Y(\$auto$builder.cc:338:Biop$1162 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1163  (
    .A(\$auto$builder.cc:338:Biop$1162 ),
    .B(wr_err),
    .Y(reg_error)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1166  (
    .A(reg_req_i[42:38]),
    .Y(addr_hit[0])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1168  (
    .A(reg_req_i[42:38]),
    .B(3'h4),
    .Y(addr_hit[1])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1170  (
    .A(reg_req_i[42:38]),
    .B(4'h8),
    .Y(addr_hit[2])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1172  (
    .A(reg_req_i[42:38]),
    .B(4'hc),
    .Y(addr_hit[3])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1174  (
    .A(reg_req_i[42:38]),
    .B(5'h10),
    .Y(addr_hit[4])
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1176  (
    .A(reg_re),
    .B(reg_we),
    .Y(\$auto$builder.cc:338:Biop$1177 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1193  (
    .A(addr_hit[0]),
    .B(\$auto$builder.cc:364:Unop$1192 ),
    .Y(\$auto$builder.cc:338:Biop$1194 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1201  (
    .A(addr_hit[1]),
    .B(\$auto$builder.cc:338:Biop$1190 [0]),
    .Y(\$auto$builder.cc:338:Biop$1202 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1203  (
    .A(\$auto$builder.cc:338:Biop$1194 ),
    .B(\$auto$builder.cc:338:Biop$1202 ),
    .Y(\$auto$builder.cc:338:Biop$1204 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1211  (
    .A(addr_hit[2]),
    .B(\$auto$builder.cc:364:Unop$1192 ),
    .Y(\$auto$builder.cc:338:Biop$1212 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1213  (
    .A(\$auto$builder.cc:338:Biop$1204 ),
    .B(\$auto$builder.cc:338:Biop$1212 ),
    .Y(\$auto$builder.cc:338:Biop$1214 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1221  (
    .A(addr_hit[3]),
    .B(\$auto$builder.cc:338:Biop$1190 [0]),
    .Y(\$auto$builder.cc:338:Biop$1222 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1223  (
    .A(\$auto$builder.cc:338:Biop$1214 ),
    .B(\$auto$builder.cc:338:Biop$1222 ),
    .Y(\$auto$builder.cc:338:Biop$1224 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1231  (
    .A(addr_hit[4]),
    .B(\$auto$builder.cc:338:Biop$1190 [0]),
    .Y(\$auto$builder.cc:338:Biop$1232 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1233  (
    .A(\$auto$builder.cc:338:Biop$1224 ),
    .B(\$auto$builder.cc:338:Biop$1232 ),
    .Y(\$auto$builder.cc:338:Biop$1234 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1235  (
    .A(reg_we),
    .B(\$auto$builder.cc:338:Biop$1234 ),
    .Y(wr_err)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1237  (
    .A(addr_hit[0]),
    .B(reg_we),
    .Y(\$auto$builder.cc:338:Biop$1238 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1241  (
    .A(\$auto$builder.cc:338:Biop$1238 ),
    .B(\$auto$builder.cc:364:Unop$1240 ),
    .Y(bootaddr_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1243  (
    .A(addr_hit[1]),
    .B(reg_we),
    .Y(\$auto$builder.cc:338:Biop$1244 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1247  (
    .A(\$auto$builder.cc:338:Biop$1244 ),
    .B(\$auto$builder.cc:364:Unop$1240 ),
    .Y(fetchen_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1249  (
    .A(addr_hit[2]),
    .B(reg_we),
    .Y(\$auto$builder.cc:338:Biop$1250 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1253  (
    .A(\$auto$builder.cc:338:Biop$1250 ),
    .B(\$auto$builder.cc:364:Unop$1240 ),
    .Y(corestatus_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1255  (
    .A(addr_hit[3]),
    .B(reg_we),
    .Y(\$auto$builder.cc:338:Biop$1256 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1259  (
    .A(\$auto$builder.cc:338:Biop$1256 ),
    .B(\$auto$builder.cc:364:Unop$1240 ),
    .Y(bootmode_we)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1261  (
    .A(addr_hit[4]),
    .B(reg_we),
    .Y(\$auto$builder.cc:338:Biop$1262 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1265  (
    .A(\$auto$builder.cc:338:Biop$1262 ),
    .B(\$auto$builder.cc:364:Unop$1240 ),
    .Y(sram_dly_we)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1157  (
    .A(reg_req_i[37]),
    .Y(\$auto$builder.cc:364:Unop$1158 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1180  (
    .A(addr_hit),
    .Y(\$auto$builder.cc:364:Unop$1181 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd4)
  ) \$auto$builder.cc:359:Unop$1187  (
    .A(reg_req_i[4:1]),
    .Y(\$auto$builder.cc:338:Biop$1190 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1191  (
    .A(\$auto$builder.cc:338:Biop$1190 ),
    .Y(\$auto$builder.cc:364:Unop$1192 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1239  (
    .A(reg_error),
    .Y(\$auto$builder.cc:364:Unop$1240 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$1184  (
    .A(\$auto$builder.cc:338:Biop$1177 ),
    .B(\$auto$rtlil.cc:2747:LogicNot$1183 ),
    .Y(addrmiss)
  );
  /* full_case = 32'd1 */
  /* parallel_case = 32'd1 */
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|../rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" */
  \$pmux  #(
    .S_WIDTH(32'd5),
    .WIDTH(32'd32)
  ) \$procmux$15364  (
    .A(32'd4294967295),
    .B({ bootaddr_qs, 31'h00000000, fetchen_qs, corestatus_qs, 31'h00000000, bootmode_qs, 31'h00000000, sram_dly_qs }),
    .S({ addr_hit[0], addr_hit[1], addr_hit[2], addr_hit[3], addr_hit[4] }),
    .Y(reg_rdata)
  );
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:95.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr  u_bootaddr (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[66:35]),
    .qs(bootaddr_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(bootaddr_we)
  );
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:176.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode  u_bootmode (
    .clk_i(clk_i),
    .d(hw2reg[1]),
    .de(hw2reg[0]),
    .q(reg2hw[1]),
    .qs(bootmode_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(bootmode_we)
  );
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:149.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus  u_corestatus (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[33:2]),
    .qs(corestatus_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(corestatus_we)
  );
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:122.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen  u_fetchen (
    .clk_i(clk_i),
    .d(hw2reg[3]),
    .de(hw2reg[2]),
    .q(reg2hw[34]),
    .qs(fetchen_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(fetchen_we)
  );
  /* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:203.5" */
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly  u_sram_dly (
    .clk_i(clk_i),
    .d(1'h0),
    .de(1'h0),
    .q(reg2hw[0]),
    .qs(sram_dly_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(sram_dly_we)
  );
  assign bootaddr_wd = reg_req_i[36:5];
  assign bootmode_wd = reg_req_i[5];
  assign corestatus_wd = reg_req_i[36:5];
  assign fetchen_wd = reg_req_i[5];
  assign reg_addr = reg_req_i[42:38];
  assign reg_be = reg_req_i[4:1];
  assign reg_intf_req = reg_req_i;
  assign reg_intf_rsp = { reg_rdata, reg_error, 1'h1 };
  assign reg_rdata_next = reg_rdata;
  assign reg_rsp_o = { reg_rdata, reg_error, 1'h1 };
  assign reg_wdata = reg_req_i[36:5];
  assign sram_dly_wd = reg_req_i[5];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [2:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[1:0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[2];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../rtl/common_cells/sync.sv:13.8" */
module \sync$croc_chip.i_croc_soc.i_ext_intr_sync (clk_i, rst_ni, serial_i, serial_o);
  /* src = "../rtl/common_cells/sync.sv:17.18" */
  input clk_i;
  wire clk_i;
  /* async_reg = "true" */
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:25.23" */
  wire [1:0] reg_q;
  /* src = "../rtl/common_cells/sync.sv:18.18" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/common_cells/sync.sv:19.18" */
  input serial_i;
  wire serial_i;
  /* src = "../rtl/common_cells/sync.sv:20.18" */
  output serial_o;
  wire serial_o;
  /* keep = "true" */
  /* src = "../rtl/common_cells/sync.sv:27.5" */
  \$adff  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(2'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd2)
  ) \$driver$reg_q  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D({ reg_q[0], serial_i }),
    .Q(reg_q)
  );
  assign serial_o = reg_q[1];
endmodule

/* src = "../ihp13/tc_clk.sv:9.8" */
module \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv (clk_i, clk_o);
  /* src = "../ihp13/tc_clk.sv:10.18" */
  input clk_i;
  wire clk_i;
  /* src = "../ihp13/tc_clk.sv:11.18" */
  output clk_o;
  wire clk_o;
  /* keep = 1'h1 */
  /* src = "../ihp13/tc_clk.sv:14.16" */
  sg13g2_inv_1 i_inv (
    .A(clk_i),
    .Y(clk_o)
  );
endmodule

/* src = "../ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "../ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "../ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "../ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "../ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "../ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "../ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "../ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "../ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "../ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "../ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "../ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "../ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "../ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "../ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "../ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "../ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "../ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "../ihp13/tc_clk.sv:33.8" */
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  /* src = "../ihp13/tc_clk.sv:34.18" */
  input clk0_i;
  wire clk0_i;
  /* src = "../ihp13/tc_clk.sv:35.18" */
  input clk1_i;
  wire clk1_i;
  /* src = "../ihp13/tc_clk.sv:37.18" */
  output clk_o;
  wire clk_o;
  /* src = "../ihp13/tc_clk.sv:36.18" */
  input clk_sel_i;
  wire clk_sel_i;
  /* keep = 1'h1 */
  /* src = "../ihp13/tc_clk.sv:40.17" */
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

/* src = "../ihp13/tc_sram_impl.sv:73.8" */
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram (clk_i, rst_ni, req_i, impl_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$auto$builder.cc:338:Biop$606 ;
  wire \$auto$builder.cc:364:Unop$216 ;
  wire \$auto$builder.cc:364:Unop$604 ;
  /* src = "../ihp13/tc_sram_impl.sv:100.32" */
  input [8:0] addr_i;
  wire [8:0] addr_i;
  /* src = "../ihp13/tc_sram_impl.sv:102.32" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "../ihp13/tc_sram_impl.sv:110.25" */
  wire [31:0] bm;
  /* src = "../ihp13/tc_sram_impl.sv:92.32" */
  input clk_i;
  wire clk_i;
  /* src = "../ihp13/tc_sram_impl.sv:223.36" */
  wire [63:0] \gen_512x32xBx1.bm64 ;
  /* src = "../ihp13/tc_sram_impl.sv:223.27" */
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  /* src = "../ihp13/tc_sram_impl.sv:224.11" */
  wire \gen_512x32xBx1.sel_d ;
  /* src = "../ihp13/tc_sram_impl.sv:224.18" */
  wire \gen_512x32xBx1.sel_q ;
  /* src = "../ihp13/tc_sram_impl.sv:223.18" */
  wire [63:0] \gen_512x32xBx1.wdata64 ;
  /* src = "../ihp13/tc_sram_impl.sv:95.32" */
  input impl_i;
  wire impl_i;
  /* src = "../ihp13/tc_sram_impl.sv:96.32" */
  output impl_o;
  wire impl_o;
  /* src = "../ihp13/tc_sram_impl.sv:104.32" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "../ihp13/tc_sram_impl.sv:98.32" */
  input req_i;
  wire req_i;
  /* src = "../ihp13/tc_sram_impl.sv:93.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "../ihp13/tc_sram_impl.sv:101.32" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "../ihp13/tc_sram_impl.sv:99.32" */
  input we_i;
  wire we_i;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$219  (
    .A(be_i[0]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [15])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$265  (
    .A(be_i[0]),
    .B(\$auto$builder.cc:364:Unop$216 ),
    .Y(\gen_512x32xBx1.bm64 [14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$315  (
    .A(be_i[1]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$337  (
    .A(be_i[1]),
    .B(\$auto$builder.cc:364:Unop$216 ),
    .Y(\gen_512x32xBx1.bm64 [30])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$409  (
    .A(be_i[2]),
    .B(\$auto$builder.cc:364:Unop$216 ),
    .Y(\gen_512x32xBx1.bm64 [46])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$411  (
    .A(be_i[2]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [47])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$507  (
    .A(be_i[3]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [63])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$517  (
    .A(be_i[3]),
    .B(\$auto$builder.cc:364:Unop$216 ),
    .Y(\gen_512x32xBx1.bm64 [62])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$605  (
    .A(req_i),
    .B(\$auto$builder.cc:364:Unop$604 ),
    .Y(\$auto$builder.cc:338:Biop$606 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$215  (
    .A(addr_i[0]),
    .Y(\$auto$builder.cc:364:Unop$216 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$603  (
    .A(we_i),
    .Y(\$auto$builder.cc:364:Unop$604 )
  );
  /* src = "../ihp13/tc_sram_impl.sv:246.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18079  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[0]),
    .EN(\$auto$builder.cc:338:Biop$606 ),
    .Q(\gen_512x32xBx1.sel_q )
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15987  (
    .A(\gen_512x32xBx1.rdata64 [62]),
    .B(\gen_512x32xBx1.rdata64 [63]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[31])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16021  (
    .A(\gen_512x32xBx1.rdata64 [60]),
    .B(\gen_512x32xBx1.rdata64 [61]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[30])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16054  (
    .A(\gen_512x32xBx1.rdata64 [58]),
    .B(\gen_512x32xBx1.rdata64 [59]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[29])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16086  (
    .A(\gen_512x32xBx1.rdata64 [56]),
    .B(\gen_512x32xBx1.rdata64 [57]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[28])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16117  (
    .A(\gen_512x32xBx1.rdata64 [54]),
    .B(\gen_512x32xBx1.rdata64 [55]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[27])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16147  (
    .A(\gen_512x32xBx1.rdata64 [52]),
    .B(\gen_512x32xBx1.rdata64 [53]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[26])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16176  (
    .A(\gen_512x32xBx1.rdata64 [50]),
    .B(\gen_512x32xBx1.rdata64 [51]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[25])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16204  (
    .A(\gen_512x32xBx1.rdata64 [48]),
    .B(\gen_512x32xBx1.rdata64 [49]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[24])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16231  (
    .A(\gen_512x32xBx1.rdata64 [46]),
    .B(\gen_512x32xBx1.rdata64 [47]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[23])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16257  (
    .A(\gen_512x32xBx1.rdata64 [44]),
    .B(\gen_512x32xBx1.rdata64 [45]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[22])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16282  (
    .A(\gen_512x32xBx1.rdata64 [42]),
    .B(\gen_512x32xBx1.rdata64 [43]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[21])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16306  (
    .A(\gen_512x32xBx1.rdata64 [40]),
    .B(\gen_512x32xBx1.rdata64 [41]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[20])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16329  (
    .A(\gen_512x32xBx1.rdata64 [38]),
    .B(\gen_512x32xBx1.rdata64 [39]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[19])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16351  (
    .A(\gen_512x32xBx1.rdata64 [36]),
    .B(\gen_512x32xBx1.rdata64 [37]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[18])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16372  (
    .A(\gen_512x32xBx1.rdata64 [34]),
    .B(\gen_512x32xBx1.rdata64 [35]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[17])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16392  (
    .A(\gen_512x32xBx1.rdata64 [32]),
    .B(\gen_512x32xBx1.rdata64 [33]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[16])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16411  (
    .A(\gen_512x32xBx1.rdata64 [30]),
    .B(\gen_512x32xBx1.rdata64 [31]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[15])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16429  (
    .A(\gen_512x32xBx1.rdata64 [28]),
    .B(\gen_512x32xBx1.rdata64 [29]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[14])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16446  (
    .A(\gen_512x32xBx1.rdata64 [26]),
    .B(\gen_512x32xBx1.rdata64 [27]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[13])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16462  (
    .A(\gen_512x32xBx1.rdata64 [24]),
    .B(\gen_512x32xBx1.rdata64 [25]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[12])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16477  (
    .A(\gen_512x32xBx1.rdata64 [22]),
    .B(\gen_512x32xBx1.rdata64 [23]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[11])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16491  (
    .A(\gen_512x32xBx1.rdata64 [20]),
    .B(\gen_512x32xBx1.rdata64 [21]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[10])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16504  (
    .A(\gen_512x32xBx1.rdata64 [18]),
    .B(\gen_512x32xBx1.rdata64 [19]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[9])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16516  (
    .A(\gen_512x32xBx1.rdata64 [16]),
    .B(\gen_512x32xBx1.rdata64 [17]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[8])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16527  (
    .A(\gen_512x32xBx1.rdata64 [14]),
    .B(\gen_512x32xBx1.rdata64 [15]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[7])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16537  (
    .A(\gen_512x32xBx1.rdata64 [12]),
    .B(\gen_512x32xBx1.rdata64 [13]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[6])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16546  (
    .A(\gen_512x32xBx1.rdata64 [10]),
    .B(\gen_512x32xBx1.rdata64 [11]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[5])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16554  (
    .A(\gen_512x32xBx1.rdata64 [8]),
    .B(\gen_512x32xBx1.rdata64 [9]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[4])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16561  (
    .A(\gen_512x32xBx1.rdata64 [6]),
    .B(\gen_512x32xBx1.rdata64 [7]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[3])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16567  (
    .A(\gen_512x32xBx1.rdata64 [4]),
    .B(\gen_512x32xBx1.rdata64 [5]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[2])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16572  (
    .A(\gen_512x32xBx1.rdata64 [2]),
    .B(\gen_512x32xBx1.rdata64 [3]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[1])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$16576  (
    .A(\gen_512x32xBx1.rdata64 [0]),
    .B(\gen_512x32xBx1.rdata64 [1]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[0])
  );
  /* src = "../ihp13/tc_sram_impl.sv:251.37" */
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$auto$builder.cc:364:Unop$604 ),
    .A_WEN(we_i)
  );
  assign bm = { be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3:2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2:1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1:0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0] };
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign \gen_512x32xBx1.sel_d  = addr_i[0];
  assign \gen_512x32xBx1.wdata64  = { wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] };
  assign impl_o = 1'hx;
endmodule

/* src = "../ihp13/tc_sram_impl.sv:73.8" */
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram (clk_i, rst_ni, req_i, impl_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$auto$builder.cc:338:Biop$1015 ;
  wire \$auto$builder.cc:364:Unop$1013 ;
  wire \$auto$builder.cc:364:Unop$625 ;
  /* src = "../ihp13/tc_sram_impl.sv:100.32" */
  input [8:0] addr_i;
  wire [8:0] addr_i;
  /* src = "../ihp13/tc_sram_impl.sv:102.32" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "../ihp13/tc_sram_impl.sv:110.25" */
  wire [31:0] bm;
  /* src = "../ihp13/tc_sram_impl.sv:92.32" */
  input clk_i;
  wire clk_i;
  /* src = "../ihp13/tc_sram_impl.sv:223.36" */
  wire [63:0] \gen_512x32xBx1.bm64 ;
  /* src = "../ihp13/tc_sram_impl.sv:223.27" */
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  /* src = "../ihp13/tc_sram_impl.sv:224.11" */
  wire \gen_512x32xBx1.sel_d ;
  /* src = "../ihp13/tc_sram_impl.sv:224.18" */
  wire \gen_512x32xBx1.sel_q ;
  /* src = "../ihp13/tc_sram_impl.sv:223.18" */
  wire [63:0] \gen_512x32xBx1.wdata64 ;
  /* src = "../ihp13/tc_sram_impl.sv:95.32" */
  input impl_i;
  wire impl_i;
  /* src = "../ihp13/tc_sram_impl.sv:96.32" */
  output impl_o;
  wire impl_o;
  /* src = "../ihp13/tc_sram_impl.sv:104.32" */
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  /* src = "../ihp13/tc_sram_impl.sv:98.32" */
  input req_i;
  wire req_i;
  /* src = "../ihp13/tc_sram_impl.sv:93.32" */
  input rst_ni;
  wire rst_ni;
  /* src = "../ihp13/tc_sram_impl.sv:101.32" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "../ihp13/tc_sram_impl.sv:99.32" */
  input we_i;
  wire we_i;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1000  (
    .A(be_i[3]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [63])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$1014  (
    .A(req_i),
    .B(\$auto$builder.cc:364:Unop$1013 ),
    .Y(\$auto$builder.cc:338:Biop$1015 )
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$628  (
    .A(be_i[0]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [15])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$650  (
    .A(be_i[0]),
    .B(\$auto$builder.cc:364:Unop$625 ),
    .Y(\gen_512x32xBx1.bm64 [14])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$724  (
    .A(be_i[1]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [31])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$734  (
    .A(be_i[1]),
    .B(\$auto$builder.cc:364:Unop$625 ),
    .Y(\gen_512x32xBx1.bm64 [30])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$818  (
    .A(be_i[2]),
    .B(\$auto$builder.cc:364:Unop$625 ),
    .Y(\gen_512x32xBx1.bm64 [46])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$820  (
    .A(be_i[2]),
    .B(addr_i[0]),
    .Y(\gen_512x32xBx1.bm64 [47])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$914  (
    .A(be_i[3]),
    .B(\$auto$builder.cc:364:Unop$625 ),
    .Y(\gen_512x32xBx1.bm64 [62])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$1012  (
    .A(we_i),
    .Y(\$auto$builder.cc:364:Unop$1013 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$624  (
    .A(addr_i[0]),
    .Y(\$auto$builder.cc:364:Unop$625 )
  );
  /* src = "../ihp13/tc_sram_impl.sv:246.5" */
  \$adffe  #(
    .ARST_POLARITY(32'd0),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18080  (
    .ARST(rst_ni),
    .CLK(clk_i),
    .D(addr_i[0]),
    .EN(\$auto$builder.cc:338:Biop$1015 ),
    .Q(\gen_512x32xBx1.sel_q )
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15393  (
    .A(\gen_512x32xBx1.rdata64 [62]),
    .B(\gen_512x32xBx1.rdata64 [63]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[31])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15427  (
    .A(\gen_512x32xBx1.rdata64 [60]),
    .B(\gen_512x32xBx1.rdata64 [61]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[30])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15460  (
    .A(\gen_512x32xBx1.rdata64 [58]),
    .B(\gen_512x32xBx1.rdata64 [59]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[29])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15492  (
    .A(\gen_512x32xBx1.rdata64 [56]),
    .B(\gen_512x32xBx1.rdata64 [57]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[28])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15523  (
    .A(\gen_512x32xBx1.rdata64 [54]),
    .B(\gen_512x32xBx1.rdata64 [55]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[27])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15553  (
    .A(\gen_512x32xBx1.rdata64 [52]),
    .B(\gen_512x32xBx1.rdata64 [53]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[26])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15582  (
    .A(\gen_512x32xBx1.rdata64 [50]),
    .B(\gen_512x32xBx1.rdata64 [51]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[25])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15610  (
    .A(\gen_512x32xBx1.rdata64 [48]),
    .B(\gen_512x32xBx1.rdata64 [49]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[24])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15637  (
    .A(\gen_512x32xBx1.rdata64 [46]),
    .B(\gen_512x32xBx1.rdata64 [47]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[23])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15663  (
    .A(\gen_512x32xBx1.rdata64 [44]),
    .B(\gen_512x32xBx1.rdata64 [45]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[22])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15688  (
    .A(\gen_512x32xBx1.rdata64 [42]),
    .B(\gen_512x32xBx1.rdata64 [43]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[21])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15712  (
    .A(\gen_512x32xBx1.rdata64 [40]),
    .B(\gen_512x32xBx1.rdata64 [41]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[20])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15735  (
    .A(\gen_512x32xBx1.rdata64 [38]),
    .B(\gen_512x32xBx1.rdata64 [39]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[19])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15757  (
    .A(\gen_512x32xBx1.rdata64 [36]),
    .B(\gen_512x32xBx1.rdata64 [37]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[18])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15778  (
    .A(\gen_512x32xBx1.rdata64 [34]),
    .B(\gen_512x32xBx1.rdata64 [35]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[17])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15798  (
    .A(\gen_512x32xBx1.rdata64 [32]),
    .B(\gen_512x32xBx1.rdata64 [33]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[16])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15817  (
    .A(\gen_512x32xBx1.rdata64 [30]),
    .B(\gen_512x32xBx1.rdata64 [31]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[15])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15835  (
    .A(\gen_512x32xBx1.rdata64 [28]),
    .B(\gen_512x32xBx1.rdata64 [29]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[14])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15852  (
    .A(\gen_512x32xBx1.rdata64 [26]),
    .B(\gen_512x32xBx1.rdata64 [27]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[13])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15868  (
    .A(\gen_512x32xBx1.rdata64 [24]),
    .B(\gen_512x32xBx1.rdata64 [25]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[12])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15883  (
    .A(\gen_512x32xBx1.rdata64 [22]),
    .B(\gen_512x32xBx1.rdata64 [23]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[11])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15897  (
    .A(\gen_512x32xBx1.rdata64 [20]),
    .B(\gen_512x32xBx1.rdata64 [21]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[10])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15910  (
    .A(\gen_512x32xBx1.rdata64 [18]),
    .B(\gen_512x32xBx1.rdata64 [19]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[9])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15922  (
    .A(\gen_512x32xBx1.rdata64 [16]),
    .B(\gen_512x32xBx1.rdata64 [17]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[8])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15933  (
    .A(\gen_512x32xBx1.rdata64 [14]),
    .B(\gen_512x32xBx1.rdata64 [15]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[7])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15943  (
    .A(\gen_512x32xBx1.rdata64 [12]),
    .B(\gen_512x32xBx1.rdata64 [13]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[6])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15952  (
    .A(\gen_512x32xBx1.rdata64 [10]),
    .B(\gen_512x32xBx1.rdata64 [11]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[5])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15960  (
    .A(\gen_512x32xBx1.rdata64 [8]),
    .B(\gen_512x32xBx1.rdata64 [9]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[4])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15967  (
    .A(\gen_512x32xBx1.rdata64 [6]),
    .B(\gen_512x32xBx1.rdata64 [7]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[3])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15973  (
    .A(\gen_512x32xBx1.rdata64 [4]),
    .B(\gen_512x32xBx1.rdata64 [5]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[2])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15978  (
    .A(\gen_512x32xBx1.rdata64 [2]),
    .B(\gen_512x32xBx1.rdata64 [3]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[1])
  );
  /* full_case = 32'd1 */
  /* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$15982  (
    .A(\gen_512x32xBx1.rdata64 [0]),
    .B(\gen_512x32xBx1.rdata64 [1]),
    .S(\gen_512x32xBx1.sel_q ),
    .Y(rdata_o[0])
  );
  /* src = "../ihp13/tc_sram_impl.sv:251.37" */
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$auto$builder.cc:364:Unop$1013 ),
    .A_WEN(we_i)
  );
  assign bm = { be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3], be_i[3:2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2], be_i[2:1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1], be_i[1:0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0], be_i[0] };
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign \gen_512x32xBx1.sel_d  = addr_i[0];
  assign \gen_512x32xBx1.wdata64  = { wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] };
  assign impl_o = 1'hx;
endmodule

/* src = "../rtl/timer_unit/timer_unit_blackbox.sv:37.8" */
module \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer (clk_i, rst_ni, ref_clk_i, req_i, wen_i, gnt_o, r_valid_o, r_opc_o, event_lo_i, event_hi_i, irq_lo_o, irq_hi_o, busy_o, addr_i, wdata_i, be_i, id_i, r_rdata_o, r_id_o);
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:48.39" */
  input [31:0] addr_i;
  wire [31:0] addr_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:51.39" */
  input [3:0] be_i;
  wire [3:0] be_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:66.39" */
  output busy_o;
  wire busy_o;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:42.39" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:61.39" */
  input event_hi_i;
  wire event_hi_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:60.39" */
  input event_lo_i;
  wire event_lo_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:53.39" */
  output gnt_o;
  wire gnt_o;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:52.39" */
  input [2:0] id_i;
  wire [2:0] id_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:64.39" */
  output irq_hi_o;
  wire irq_hi_o;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:63.39" */
  output irq_lo_o;
  wire irq_lo_o;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:57.39" */
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:56.39" */
  output r_opc_o;
  wire r_opc_o;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:58.39" */
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:55.39" */
  output r_valid_o;
  wire r_valid_o;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:45.39" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:47.39" */
  input req_i;
  wire req_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:43.39" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:50.39" */
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  /* src = "../rtl/timer_unit/timer_unit_blackbox.sv:49.39" */
  input wen_i;
  wire wen_i;
  assign busy_o = 1'hx;
  assign gnt_o = 1'hx;
  assign irq_hi_o = 1'hx;
  assign irq_lo_o = 1'hx;
  assign r_id_o = 3'hx;
  assign r_opc_o = 1'hx;
  assign r_rdata_o = 32'hxxxxxxxx;
  assign r_valid_o = 1'hx;
endmodule

/* src = "../rtl/apb_uart/uart_baudgen.sv:35.8" */
module \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16 (CLK, RST, CE, CLEAR, DIVIDER, BAUDTICK);
  wire [15:0] \$auto$builder.cc:338:Biop$8526 ;
  wire \$auto$builder.cc:338:Biop$8530 ;
  /* unused_bits = "16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" */
  wire [31:0] \$auto$builder.cc:338:Biop$8534 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18082 ;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  wire [15:0] \$auto$slang_frontend.cc:694:finish$\iCounter$8528 ;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  wire [15:0] \$auto$slang_frontend.cc:694:finish$\iCounter$8536 ;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:41.16" */
  output BAUDTICK;
  wire BAUDTICK;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:38.14" */
  input CE;
  wire CE;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:39.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:40.21" */
  input [15:0] DIVIDER;
  wire [15:0] DIVIDER;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/uart_baudgen.sv:45.12" */
  wire [15:0] iCounter;
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd16)
  ) \$auto$builder.cc:330:Biop$8525  (
    .A(iCounter),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$8526 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8529  (
    .A(iCounter),
    .Y(\$auto$builder.cc:338:Biop$8530 )
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd16)
  ) \$auto$builder.cc:330:Biop$8533  (
    .A(DIVIDER),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$8534 [15:0])
  );
  /* src = "../rtl/apb_uart/uart_baudgen.sv:47.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(16'h0000),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd16)
  ) \$auto$ff.cc:266:slice$18081  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iCounter$8536 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18082 ),
    .Q(iCounter)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18083  (
    .A({ \$auto$builder.cc:338:Biop$8530 , CLEAR, CE }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18082 )
  );
  /* src = "../rtl/apb_uart/uart_baudgen.sv:47.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$BAUDTICK  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$8530 ),
    .Q(BAUDTICK)
  );
  /* src = "../rtl/apb_uart/uart_baudgen.sv:68.11-72.18|../rtl/apb_uart/uart_baudgen.sv:67.5-72.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$13269  (
    .A(\$auto$slang_frontend.cc:694:finish$\iCounter$8528 ),
    .B(\$auto$builder.cc:338:Biop$8534 [15:0]),
    .S(\$auto$builder.cc:338:Biop$8530 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCounter$8536 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_baudgen.sv:60.1-60.131|../rtl/apb_uart/uart_baudgen.sv:57.3-65.18" */
  \$mux  #(
    .WIDTH(32'd16)
  ) \$procmux$13282  (
    .A(\$auto$builder.cc:338:Biop$8526 ),
    .B(16'h0000),
    .S(CLEAR),
    .Y(\$auto$slang_frontend.cc:694:finish$\iCounter$8528 )
  );
endmodule

/* src = "../rtl/apb_uart/uart_interrupt.sv:35.8" */
module \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC (CLK, INT, RST, IER, LSR, THI, RDA, CTI, AFE, MSR, IIR);
  wire \$auto$builder.cc:338:Biop$8275 ;
  wire \$auto$builder.cc:338:Biop$8277 ;
  wire \$auto$builder.cc:338:Biop$8279 ;
  wire \$auto$builder.cc:338:Biop$8291 ;
  wire \$auto$builder.cc:338:Biop$8293 ;
  wire \$auto$builder.cc:338:Biop$8295 ;
  wire \$auto$builder.cc:338:Biop$8297 ;
  wire \$auto$builder.cc:364:Unop$8289 ;
  wire \$auto$slang_frontend.cc:694:finish$\iIIR$8323 ;
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\iIIR$8324 ;
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\iIIR$8325 ;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\iIIR$8326 ;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\iIIR$8327 ;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:43.14" */
  input AFE;
  wire AFE;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:42.14" */
  input CTI;
  wire CTI;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:38.20" */
  input [3:0] IER;
  wire [3:0] IER;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:45.22" */
  output [3:0] IIR;
  wire [3:0] IIR;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:46.16" */
  output INT;
  wire INT;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:39.20" */
  input [4:0] LSR;
  wire [4:0] LSR;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:44.20" */
  input [3:0] MSR;
  wire [3:0] MSR;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:41.14" */
  input RDA;
  wire RDA;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:40.14" */
  input THI;
  wire THI;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:52.5" */
  wire iCTIInterrupt;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:55.11" */
  wire [3:0] iIIR;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:54.5" */
  wire iMSRInterrupt;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:51.5" */
  wire iRDAInterrupt;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:50.5" */
  wire iRLSInterrupt;
  /* src = "../rtl/apb_uart/uart_interrupt.sv:53.5" */
  wire iTHRInterrupt;
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8274  (
    .A(LSR[1]),
    .B(LSR[2]),
    .Y(\$auto$builder.cc:338:Biop$8275 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8276  (
    .A(\$auto$builder.cc:338:Biop$8275 ),
    .B(LSR[3]),
    .Y(\$auto$builder.cc:338:Biop$8277 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8278  (
    .A(\$auto$builder.cc:338:Biop$8277 ),
    .B(LSR[4]),
    .Y(\$auto$builder.cc:338:Biop$8279 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8280  (
    .A(IER[2]),
    .B(\$auto$builder.cc:338:Biop$8279 ),
    .Y(iRLSInterrupt)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8282  (
    .A(IER[0]),
    .B(RDA),
    .Y(iRDAInterrupt)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8284  (
    .A(IER[0]),
    .B(CTI),
    .Y(iCTIInterrupt)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8286  (
    .A(IER[1]),
    .B(THI),
    .Y(iTHRInterrupt)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8290  (
    .A(MSR[0]),
    .B(\$auto$builder.cc:364:Unop$8289 ),
    .Y(\$auto$builder.cc:338:Biop$8291 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8292  (
    .A(\$auto$builder.cc:338:Biop$8291 ),
    .B(MSR[1]),
    .Y(\$auto$builder.cc:338:Biop$8293 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8294  (
    .A(\$auto$builder.cc:338:Biop$8293 ),
    .B(MSR[2]),
    .Y(\$auto$builder.cc:338:Biop$8295 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8296  (
    .A(\$auto$builder.cc:338:Biop$8295 ),
    .B(MSR[3]),
    .Y(\$auto$builder.cc:338:Biop$8297 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8298  (
    .A(IER[3]),
    .B(\$auto$builder.cc:338:Biop$8297 ),
    .Y(iMSRInterrupt)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$8288  (
    .A(AFE),
    .Y(\$auto$builder.cc:364:Unop$8289 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$8328  (
    .A(iIIR[0]),
    .Y(INT)
  );
  /* src = "../rtl/apb_uart/uart_interrupt.sv:62.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h1),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$driver$iIIR  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iIIR$8327 ),
    .Q(iIIR)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_interrupt.sv:87.13-87.29|../rtl/apb_uart/uart_interrupt.sv:85.13-92.13" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13285  (
    .A(iMSRInterrupt),
    .Y(\$auto$slang_frontend.cc:694:finish$\iIIR$8323 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_interrupt.sv:83.13-83.29|../rtl/apb_uart/uart_interrupt.sv:81.13-92.13" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13301  (
    .A({ 1'h0, \$auto$slang_frontend.cc:694:finish$\iIIR$8323  }),
    .B(2'h2),
    .S(iTHRInterrupt),
    .Y(\$auto$slang_frontend.cc:694:finish$\iIIR$8324 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_interrupt.sv:79.13-79.29|../rtl/apb_uart/uart_interrupt.sv:77.13-92.13" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13314  (
    .A({ 1'h0, \$auto$slang_frontend.cc:694:finish$\iIIR$8324  }),
    .B(3'h4),
    .S(iRDAInterrupt),
    .Y(\$auto$slang_frontend.cc:694:finish$\iIIR$8325 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_interrupt.sv:75.13-75.29|../rtl/apb_uart/uart_interrupt.sv:73.13-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$13324  (
    .A({ 1'h0, \$auto$slang_frontend.cc:694:finish$\iIIR$8325  }),
    .B(4'hc),
    .S(iCTIInterrupt),
    .Y(\$auto$slang_frontend.cc:694:finish$\iIIR$8326 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_interrupt.sv:71.13-71.29|../rtl/apb_uart/uart_interrupt.sv:69.8-92.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$13331  (
    .A(\$auto$slang_frontend.cc:694:finish$\iIIR$8326 ),
    .B(4'h6),
    .S(iRLSInterrupt),
    .Y(\$auto$slang_frontend.cc:694:finish$\iIIR$8327 )
  );
  assign IIR = iIIR;
endmodule

/* src = "../rtl/apb_uart/uart_receiver.sv:35.8" */
module \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX (BI, CLK, SIN, RST, FE, WLS, STB, PEN, EPS, SP, RXCLK, RXCLEAR, PE, DOUT, RXFINISHED);
  wire \$auto$builder.cc:338:Biop$9097 ;
  wire \$auto$builder.cc:338:Biop$9099 ;
  wire \$auto$builder.cc:338:Biop$9101 ;
  wire \$auto$builder.cc:338:Biop$9103 ;
  wire \$auto$builder.cc:338:Biop$9105 ;
  wire \$auto$builder.cc:338:Biop$9107 ;
  wire \$auto$builder.cc:338:Biop$9109 ;
  wire \$auto$builder.cc:338:Biop$9124 ;
  wire \$auto$builder.cc:338:Biop$9126 ;
  wire [3:0] \$auto$builder.cc:338:Biop$9144 ;
  wire \$auto$builder.cc:338:Biop$9150 ;
  wire \$auto$builder.cc:338:Biop$9152 ;
  wire \$auto$builder.cc:338:Biop$9154 ;
  wire \$auto$builder.cc:338:Biop$9156 ;
  wire \$auto$builder.cc:338:Biop$9158 ;
  wire \$auto$builder.cc:338:Biop$9160 ;
  wire \$auto$builder.cc:338:Biop$9162 ;
  wire \$auto$builder.cc:338:Biop$9164 ;
  wire \$auto$builder.cc:338:Biop$9166 ;
  wire \$auto$builder.cc:338:Biop$9168 ;
  wire \$auto$builder.cc:338:Biop$9170 ;
  wire \$auto$builder.cc:338:Biop$9172 ;
  wire \$auto$builder.cc:338:Biop$9174 ;
  wire \$auto$builder.cc:338:Biop$9176 ;
  wire \$auto$builder.cc:338:Biop$9222 ;
  wire \$auto$builder.cc:338:Biop$9242 ;
  wire \$auto$builder.cc:338:Biop$9246 ;
  wire \$auto$builder.cc:338:Biop$9259 ;
  wire \$auto$builder.cc:338:Biop$9266 ;
  wire \$auto$builder.cc:338:Biop$9276 ;
  wire \$auto$builder.cc:338:Biop$9284 ;
  wire \$auto$builder.cc:338:Biop$9286 ;
  wire \$auto$builder.cc:338:Biop$9288 ;
  wire \$auto$builder.cc:364:Unop$9111 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18085 ;
  wire \$auto$rtlil.cc:2791:Lt$9130 ;
  wire [7:0] \$auto$rtlil.cc:2875:Bwmux$9142 ;
  wire [7:0] \$auto$rtlil.cc:2896:Demux$9138 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:169.3-172.18" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9191 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:183.7-186.26" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9200 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9201 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:199.7-206.26" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9210 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9211 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:216.3-223.18" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9216 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9228 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:284.11-287.34" */
  wire \$auto$slang_frontend.cc:694:finish$\PE$9264 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  wire \$auto$slang_frontend.cc:694:finish$\PE$9270 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  wire \$auto$slang_frontend.cc:694:finish$\PE$9271 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  wire [7:0] \$auto$slang_frontend.cc:694:finish$\iDOUT$9148 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\iDataCount$9147 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:274.3-277.18" */
  wire \$auto$slang_frontend.cc:694:finish$\iParityReceived$9249 ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  wire \$auto$slang_frontend.cc:694:finish$\iParityReceived$9272 ;
  wire \$procmux$12747_CMP ;
  wire \$procmux$12800_CMP ;
  wire \$procmux$12823_CMP ;
  /* src = "../rtl/apb_uart/uart_receiver.sv:48.16" */
  output BI;
  wire BI;
  /* src = "../rtl/apb_uart/uart_receiver.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/uart_receiver.sv:60.12" */
  wire [2:0] CState;
  /* src = "../rtl/apb_uart/uart_receiver.sv:49.22" */
  output [7:0] DOUT;
  wire [7:0] DOUT;
  /* src = "../rtl/apb_uart/uart_receiver.sv:43.14" */
  input EPS;
  wire EPS;
  /* src = "../rtl/apb_uart/uart_receiver.sv:47.16" */
  output FE;
  wire FE;
  /* src = "../rtl/apb_uart/uart_receiver.sv:60.20" */
  wire [2:0] NState;
  /* src = "../rtl/apb_uart/uart_receiver.sv:46.16" */
  output PE;
  wire PE;
  /* src = "../rtl/apb_uart/uart_receiver.sv:42.14" */
  input PEN;
  wire PEN;
  /* src = "../rtl/apb_uart/uart_receiver.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/uart_receiver.sv:39.14" */
  input RXCLEAR;
  wire RXCLEAR;
  /* src = "../rtl/apb_uart/uart_receiver.sv:38.14" */
  input RXCLK;
  wire RXCLK;
  /* src = "../rtl/apb_uart/uart_receiver.sv:50.16" */
  output RXFINISHED;
  wire RXFINISHED;
  /* src = "../rtl/apb_uart/uart_receiver.sv:45.14" */
  input SIN;
  wire SIN;
  /* src = "../rtl/apb_uart/uart_receiver.sv:44.14" */
  input SP;
  wire SP;
  /* src = "../rtl/apb_uart/uart_receiver.sv:41.14" */
  input STB;
  wire STB;
  /* src = "../rtl/apb_uart/uart_receiver.sv:40.20" */
  input [1:0] WLS;
  wire [1:0] WLS;
  /* src = "../rtl/apb_uart/uart_receiver.sv:75.5" */
  wire iBI;
  /* src = "../rtl/apb_uart/uart_receiver.sv:61.11" */
  /* unused_bits = "0 1 2" */
  wire [3:0] iBaudCount;
  /* src = "../rtl/apb_uart/uart_receiver.sv:62.5" */
  wire iBaudCountClear;
  /* src = "../rtl/apb_uart/uart_receiver.sv:63.5" */
  wire iBaudStep;
  /* src = "../rtl/apb_uart/uart_receiver.sv:64.5" */
  wire iBaudStepD;
  /* src = "../rtl/apb_uart/uart_receiver.sv:77.11" */
  wire [7:0] iDOUT;
  /* src = "../rtl/apb_uart/uart_receiver.sv:70.11" */
  wire [3:0] iDataCount;
  /* src = "../rtl/apb_uart/uart_receiver.sv:72.5" */
  wire iDataCountFinish;
  /* src = "../rtl/apb_uart/uart_receiver.sv:71.5" */
  wire iDataCountInit;
  /* src = "../rtl/apb_uart/uart_receiver.sv:74.5" */
  wire iFE;
  /* src = "../rtl/apb_uart/uart_receiver.sv:66.5" */
  wire iFSIN;
  /* src = "../rtl/apb_uart/uart_receiver.sv:67.5" */
  wire iFStopBit;
  /* src = "../rtl/apb_uart/uart_receiver.sv:65.5" */
  wire iFilterClear;
  /* src = "../rtl/apb_uart/uart_receiver.sv:76.5" */
  wire iNoStopReceived;
  /* src = "../rtl/apb_uart/uart_receiver.sv:68.5" */
  wire iParity;
  /* src = "../rtl/apb_uart/uart_receiver.sv:69.5" */
  wire iParityReceived;
  /* src = "../rtl/apb_uart/uart_receiver.sv:73.5" */
  wire iRXFinished;
  \$bwmux  #(
    .WIDTH(32'd8)
  ) \$auto$builder.cc:128:Bwmux$9141  (
    .A(iDOUT),
    .B({ iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN }),
    .S(\$auto$rtlil.cc:2896:Demux$9138 ),
    .Y(\$auto$rtlil.cc:2875:Bwmux$9142 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9093  (
    .A(iBaudStepD),
    .B(iBaudCountClear),
    .Y(iFilterClear)
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9096  (
    .A(iDOUT[7]),
    .B(iDOUT[6]),
    .Y(\$auto$builder.cc:338:Biop$9097 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9098  (
    .A(\$auto$builder.cc:338:Biop$9097 ),
    .B(iDOUT[5]),
    .Y(\$auto$builder.cc:338:Biop$9099 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9100  (
    .A(\$auto$builder.cc:338:Biop$9099 ),
    .B(iDOUT[4]),
    .Y(\$auto$builder.cc:338:Biop$9101 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9102  (
    .A(\$auto$builder.cc:338:Biop$9101 ),
    .B(iDOUT[3]),
    .Y(\$auto$builder.cc:338:Biop$9103 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9104  (
    .A(\$auto$builder.cc:338:Biop$9103 ),
    .B(iDOUT[2]),
    .Y(\$auto$builder.cc:338:Biop$9105 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9106  (
    .A(\$auto$builder.cc:338:Biop$9105 ),
    .B(iDOUT[1]),
    .Y(\$auto$builder.cc:338:Biop$9107 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9108  (
    .A(\$auto$builder.cc:338:Biop$9107 ),
    .B(iDOUT[0]),
    .Y(\$auto$builder.cc:338:Biop$9109 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9112  (
    .A(\$auto$builder.cc:338:Biop$9109 ),
    .B(\$auto$builder.cc:364:Unop$9111 ),
    .Y(iParity)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9123  (
    .A(iDataCountFinish),
    .Y(\$auto$builder.cc:338:Biop$9124 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9125  (
    .A(iBaudStep),
    .B(\$auto$builder.cc:338:Biop$9124 ),
    .Y(\$auto$builder.cc:338:Biop$9126 )
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd4)
  ) \$auto$builder.cc:330:Biop$9143  (
    .A(iDataCount),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$9144 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9149  (
    .A(WLS),
    .Y(\$auto$builder.cc:338:Biop$9150 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9151  (
    .A(iDataCount),
    .B(3'h5),
    .Y(\$auto$builder.cc:338:Biop$9152 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9153  (
    .A(\$auto$builder.cc:338:Biop$9150 ),
    .B(\$auto$builder.cc:338:Biop$9152 ),
    .Y(\$auto$builder.cc:338:Biop$9154 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9155  (
    .A(WLS),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$9156 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9157  (
    .A(iDataCount),
    .B(3'h6),
    .Y(\$auto$builder.cc:338:Biop$9158 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9159  (
    .A(\$auto$builder.cc:338:Biop$9156 ),
    .B(\$auto$builder.cc:338:Biop$9158 ),
    .Y(\$auto$builder.cc:338:Biop$9160 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9161  (
    .A(\$auto$builder.cc:338:Biop$9154 ),
    .B(\$auto$builder.cc:338:Biop$9160 ),
    .Y(\$auto$builder.cc:338:Biop$9162 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9163  (
    .A(WLS),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$9164 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9165  (
    .A(iDataCount),
    .B(3'h7),
    .Y(\$auto$builder.cc:338:Biop$9166 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9167  (
    .A(\$auto$builder.cc:338:Biop$9164 ),
    .B(\$auto$builder.cc:338:Biop$9166 ),
    .Y(\$auto$builder.cc:338:Biop$9168 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9169  (
    .A(\$auto$builder.cc:338:Biop$9162 ),
    .B(\$auto$builder.cc:338:Biop$9168 ),
    .Y(\$auto$builder.cc:338:Biop$9170 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9171  (
    .A(WLS),
    .B(2'h3),
    .Y(\$auto$builder.cc:338:Biop$9172 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9173  (
    .A(iDataCount),
    .B(4'h8),
    .Y(\$auto$builder.cc:338:Biop$9174 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9175  (
    .A(\$auto$builder.cc:338:Biop$9172 ),
    .B(\$auto$builder.cc:338:Biop$9174 ),
    .Y(\$auto$builder.cc:338:Biop$9176 )
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9177  (
    .A(\$auto$builder.cc:338:Biop$9170 ),
    .B(\$auto$builder.cc:338:Biop$9176 ),
    .Y(iDataCountFinish)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9221  (
    .A(iFStopBit),
    .Y(\$auto$builder.cc:338:Biop$9222 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9241  (
    .A(CState),
    .B(2'h3),
    .Y(\$auto$builder.cc:338:Biop$9242 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9245  (
    .A(\$auto$builder.cc:338:Biop$9242 ),
    .B(iBaudStep),
    .Y(\$auto$builder.cc:338:Biop$9246 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9258  (
    .A(EPS),
    .B(iParityReceived),
    .Y(\$auto$builder.cc:338:Biop$9259 )
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9265  (
    .A(iParity),
    .B(iParityReceived),
    .Y(\$auto$builder.cc:338:Biop$9266 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9275  (
    .A(CState),
    .B(3'h4),
    .Y(\$auto$builder.cc:338:Biop$9276 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9277  (
    .A(\$auto$builder.cc:338:Biop$9222 ),
    .B(\$auto$builder.cc:338:Biop$9276 ),
    .Y(iNoStopReceived)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9283  (
    .A(iDOUT),
    .Y(\$auto$builder.cc:338:Biop$9284 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9285  (
    .A(iParityReceived),
    .Y(\$auto$builder.cc:338:Biop$9286 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9287  (
    .A(\$auto$builder.cc:338:Biop$9284 ),
    .B(\$auto$builder.cc:338:Biop$9286 ),
    .Y(\$auto$builder.cc:338:Biop$9288 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9291  (
    .A(\$auto$builder.cc:338:Biop$9288 ),
    .B(iNoStopReceived),
    .Y(BI)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9110  (
    .A(EPS),
    .Y(\$auto$builder.cc:364:Unop$9111 )
  );
  \$demux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$auto$builder.cc:38:Demux$9137  (
    .A(\$auto$rtlil.cc:2791:Lt$9130 ),
    .S(iDataCount[2:0]),
    .Y(\$auto$rtlil.cc:2896:Demux$9138 )
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:123.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$18084  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iDataCount$9147 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18085 ),
    .Q(iDataCount)
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:123.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(8'h00),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd8)
  ) \$auto$ff.cc:266:slice$18087  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iDOUT$9148 ),
    .EN(\$auto$opt_dff.cc:194:make_patterns_logic$18085 ),
    .Q(iDOUT)
  );
  \$reduce_bool  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18086  (
    .A({ iDataCountInit, \$auto$builder.cc:338:Biop$9126  }),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18085 )
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_expr.cc:2133:replace_const_cells$17406  (
    .A(iDataCount[3]),
    .Y(\$auto$rtlil.cc:2791:Lt$9130 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17206  (
    .A({ \$procmux$12823_CMP , iBaudCountClear }),
    .Y(iDataCountInit)
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:150.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(3'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd3)
  ) \$driver$CState  (
    .ARST(RST),
    .CLK(CLK),
    .D(NState),
    .Q(CState)
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:265.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$PE  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\PE$9271 ),
    .Q(PE)
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:102.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iBaudStepD  (
    .ARST(RST),
    .CLK(CLK),
    .D(iBaudStep),
    .Q(iBaudStepD)
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:265.1" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iParityReceived  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iParityReceived$9272 ),
    .Q(iParityReceived)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:133.10-137.13|../rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd8)
  ) \$procmux$12737  (
    .A(\$auto$rtlil.cc:2875:Bwmux$9142 ),
    .B(8'h00),
    .S(iDataCountInit),
    .Y(\$auto$slang_frontend.cc:694:finish$\iDOUT$9148 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:133.10-137.13|../rtl/apb_uart/uart_receiver.sv:132.8-145.13" */
  \$mux  #(
    .WIDTH(32'd4)
  ) \$procmux$12741  (
    .A(\$auto$builder.cc:338:Biop$9144 ),
    .B(4'h0),
    .S(iDataCountInit),
    .Y(\$auto$slang_frontend.cc:694:finish$\iDataCount$9147 )
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:251.7-251.23|../rtl/apb_uart/uart_receiver.sv:249.3-252.18" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12744  (
    .A(SIN),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$9191 [0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:249.3-252.18|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12747_CMP0  (
    .A(CState),
    .B(3'h5),
    .Y(\$procmux$12747_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:230.7-239.26|../rtl/apb_uart/uart_receiver.sv:228.3-244.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12752  (
    .A(2'h2),
    .B({ \$auto$builder.cc:338:Biop$9222 , \$auto$builder.cc:338:Biop$9222  }),
    .S(iBaudCount[3]),
    .Y({ \$auto$slang_frontend.cc:694:finish$\NState$9228 [2], \$auto$slang_frontend.cc:694:finish$\NState$9228 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:218.7-218.22|../rtl/apb_uart/uart_receiver.sv:216.3-223.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12787  (
    .A(2'h1),
    .B(2'h2),
    .S(iBaudStep),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$9216 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:199.7-206.26|../rtl/apb_uart/uart_receiver.sv:197.3-211.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$12797  (
    .A(3'h2),
    .B({ \$auto$slang_frontend.cc:694:finish$\NState$9210 [2:1], \$auto$slang_frontend.cc:694:finish$\NState$9210 [1] }),
    .S(iDataCountFinish),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$9211 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:197.3-211.18|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$12800_CMP0  (
    .A(CState),
    .B(2'h2),
    .Y(\$procmux$12800_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:201.11-201.25|../rtl/apb_uart/uart_receiver.sv:199.7-206.26" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12807  (
    .A(2'h2),
    .B(2'h1),
    .S(PEN),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$9210 [2:1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:183.7-186.26|../rtl/apb_uart/uart_receiver.sv:181.5-192.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12820  (
    .A(2'h1),
    .B({ \$auto$slang_frontend.cc:694:finish$\NState$9200 [1], 1'h0 }),
    .S(iBaudStep),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$9201 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:179.5-193.12|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12823_CMP0  (
    .A(CState),
    .B(1'h1),
    .Y(\$procmux$12823_CMP )
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:185.11-185.26|../rtl/apb_uart/uart_receiver.sv:183.7-186.26" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12830  (
    .A(iFSIN),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$9200 [1])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:168.5-176.10|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$12849_CMP0  (
    .A(CState),
    .Y(iBaudCountClear)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:249.3-252.18|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$pmux  #(
    .S_WIDTH(32'd6),
    .WIDTH(32'd3)
  ) \$procmux$12866  (
    .A(3'h0),
    .B({ 2'h0, \$auto$slang_frontend.cc:694:finish$\NState$9191 [0], 1'h0, \$auto$slang_frontend.cc:694:finish$\NState$9201 [1:0], \$auto$slang_frontend.cc:694:finish$\NState$9211 , \$auto$slang_frontend.cc:694:finish$\NState$9216 [2:1], \$auto$slang_frontend.cc:694:finish$\NState$9216 [1], \$auto$slang_frontend.cc:694:finish$\NState$9228 [2], 1'h0, \$auto$slang_frontend.cc:694:finish$\NState$9228 [0], \$auto$slang_frontend.cc:694:finish$\NState$9191 [0], 1'h0, \$auto$slang_frontend.cc:694:finish$\NState$9191 [0] }),
    .S({ iBaudCountClear, \$procmux$12823_CMP , \$procmux$12800_CMP , \$auto$builder.cc:338:Biop$9242 , \$auto$builder.cc:338:Biop$9276 , \$procmux$12747_CMP  }),
    .Y(NState)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:228.3-244.18|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12892  (
    .A(\$auto$builder.cc:338:Biop$9276 ),
    .B(iBaudCount[3]),
    .Y(RXFINISHED)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:280.11-298.20|../rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12896  (
    .A(PEN),
    .B(\$auto$slang_frontend.cc:694:finish$\PE$9270 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\PE$9271 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:284.11-287.34|../rtl/apb_uart/uart_receiver.sv:282.9-297.14" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12912  (
    .A(\$auto$builder.cc:338:Biop$9266 ),
    .B(\$auto$slang_frontend.cc:694:finish$\PE$9264 ),
    .S(SP),
    .Y(\$auto$slang_frontend.cc:694:finish$\PE$9270 )
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:286.15-286.27|../rtl/apb_uart/uart_receiver.sv:284.11-287.34" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12919  (
    .A(\$auto$builder.cc:338:Biop$9259 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\PE$9264 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_receiver.sv:280.11-298.20|../rtl/apb_uart/uart_receiver.sv:279.1-303.18" */
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12927  (
    .A(PEN),
    .B(\$auto$slang_frontend.cc:694:finish$\iParityReceived$9249 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iParityReceived$9272 )
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:276.7-276.32|../rtl/apb_uart/uart_receiver.sv:274.3-277.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12930  (
    .A(iParityReceived),
    .B(iFSIN),
    .S(\$auto$builder.cc:338:Biop$9246 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\iParityReceived$9249 )
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:78.27" */
  \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC  RX_BRC (
    .CLEAR(iBaudCountClear),
    .CLK(CLK),
    .D(4'h0),
    .DOWN(1'h0),
    .ENABLE(RXCLK),
    .LOAD(1'h0),
    .OVERFLOW(iBaudStep),
    .Q(iBaudCount),
    .RST(RST)
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:95.31" */
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB  RX_IFSB (
    .CE(RXCLK),
    .CLK(CLK),
    .D(SIN),
    .Q(iFStopBit),
    .RST(RST)
  );
  /* src = "../rtl/apb_uart/uart_receiver.sv:88.44" */
  \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF  RX_MVF (
    .CLEAR(iFilterClear),
    .CLK(CLK),
    .D(SIN),
    .Q(iFSIN),
    .RST(RST),
    .SAMPLE(RXCLK)
  );
  assign \$auto$slang_frontend.cc:694:finish$\NState$9191 [2:1] = 2'h0;
  assign { \$auto$slang_frontend.cc:694:finish$\NState$9200 [2], \$auto$slang_frontend.cc:694:finish$\NState$9200 [0] } = 2'h0;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9201 [2] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9210 [0] = \$auto$slang_frontend.cc:694:finish$\NState$9210 [1];
  assign \$auto$slang_frontend.cc:694:finish$\NState$9216 [0] = \$auto$slang_frontend.cc:694:finish$\NState$9216 [1];
  assign \$auto$slang_frontend.cc:694:finish$\NState$9228 [1] = 1'h0;
  assign DOUT = iDOUT;
  assign FE = iNoStopReceived;
  assign iBI = BI;
  assign iFE = iNoStopReceived;
  assign iRXFinished = RXFINISHED;
endmodule

/* src = "../rtl/apb_uart/uart_transmitter.sv:35.8" */
module \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX (CLK, SOUT, RST, CLEAR, TXCLK, TXSTART, WLS, STB, PEN, EPS, SP, BC, DIN, TXFINISHED);
  wire \$auto$builder.cc:338:Biop$8959 ;
  wire \$auto$builder.cc:338:Biop$8963 ;
  wire \$auto$builder.cc:338:Biop$8965 ;
  wire \$auto$builder.cc:338:Biop$8967 ;
  wire \$auto$builder.cc:338:Biop$8993 ;
  wire \$auto$builder.cc:338:Biop$9003 ;
  wire \$auto$builder.cc:338:Biop$9053 ;
  wire \$auto$builder.cc:338:Biop$9055 ;
  wire \$auto$builder.cc:338:Biop$9057 ;
  wire \$auto$builder.cc:338:Biop$9071 ;
  wire \$auto$builder.cc:338:Biop$9073 ;
  wire \$auto$builder.cc:338:Biop$9075 ;
  wire \$auto$builder.cc:364:Unop$9031 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18092 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18094 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17219 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:152.18-159.23" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\NState$8990 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\NState$8991 ;
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\NState$9001 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\NState$9011 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\NState$9043 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:224.18-231.23" */
  wire \$auto$slang_frontend.cc:694:finish$\iSout$9025 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:235.18-242.23" */
  wire \$auto$slang_frontend.cc:694:finish$\iSout$9032 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  wire \$auto$slang_frontend.cc:694:finish$\iSout$9033 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  wire \$auto$slang_frontend.cc:694:finish$\iTx2$8973 ;
  wire \$procmux$12975_CMP ;
  wire \$procmux$13005_CMP ;
  wire \$procmux$13016_CMP ;
  wire \$procmux$13041_CMP ;
  wire \$procmux$13068_CMP ;
  wire \$procmux$13100_CMP ;
  wire \$procmux$13101_CMP ;
  wire \$procmux$13102_CMP ;
  wire \$procmux$13103_CMP ;
  wire \$procmux$13104_CMP ;
  wire \$procmux$13106_CMP ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:46.14" */
  input BC;
  wire BC;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:40.14" */
  input CLEAR;
  wire CLEAR;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:36.14" */
  input CLK;
  wire CLK;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:66.12" */
  wire [3:0] CState;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:47.20" */
  input [7:0] DIN;
  wire [7:0] DIN;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:44.14" */
  input EPS;
  wire EPS;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:66.20" */
  wire [3:0] NState;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:43.14" */
  input PEN;
  wire PEN;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:37.14" */
  input RST;
  wire RST;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:49.16" */
  output SOUT;
  wire SOUT;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:45.14" */
  input SP;
  wire SP;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:42.14" */
  input STB;
  wire STB;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:38.14" */
  input TXCLK;
  wire TXCLK;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:48.16" */
  output TXFINISHED;
  wire TXFINISHED;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:39.14" */
  input TXSTART;
  wire TXSTART;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:283.15" */
  wire \TX_PAR.iP40 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:283.21" */
  wire \TX_PAR.iP50 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:283.27" */
  wire \TX_PAR.iP60 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:283.33" */
  wire \TX_PAR.iP70 ;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:41.20" */
  input [1:0] WLS;
  wire [1:0] WLS;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:70.5" */
  wire iFinished;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:297.9" */
  wire iLast;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:69.5" */
  wire iParity;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:68.5" */
  wire iSout;
  /* src = "../rtl/apb_uart/uart_transmitter.sv:67.5" */
  wire iTx2;
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8958  (
    .A(WLS),
    .Y(\$auto$builder.cc:338:Biop$8959 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8962  (
    .A(\$auto$builder.cc:338:Biop$8959 ),
    .B(STB),
    .Y(\$auto$builder.cc:338:Biop$8963 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8964  (
    .A(CState),
    .B(4'hc),
    .Y(\$auto$builder.cc:338:Biop$8965 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8966  (
    .A(\$auto$builder.cc:338:Biop$8963 ),
    .B(\$auto$builder.cc:338:Biop$8965 ),
    .Y(\$auto$builder.cc:338:Biop$8967 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$8992  (
    .A(WLS),
    .B(1'h1),
    .Y(\$auto$builder.cc:338:Biop$8993 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9002  (
    .A(WLS),
    .B(2'h2),
    .Y(\$auto$builder.cc:338:Biop$9003 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9052  (
    .A(DIN[4]),
    .B(DIN[3]),
    .Y(\$auto$builder.cc:338:Biop$9053 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9054  (
    .A(\$auto$builder.cc:338:Biop$9053 ),
    .B(DIN[2]),
    .Y(\$auto$builder.cc:338:Biop$9055 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9056  (
    .A(\$auto$builder.cc:338:Biop$9055 ),
    .B(DIN[1]),
    .Y(\$auto$builder.cc:338:Biop$9057 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9058  (
    .A(\$auto$builder.cc:338:Biop$9057 ),
    .B(DIN[0]),
    .Y(\TX_PAR.iP40 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9060  (
    .A(DIN[5]),
    .B(\TX_PAR.iP40 ),
    .Y(\TX_PAR.iP50 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9062  (
    .A(DIN[6]),
    .B(\TX_PAR.iP50 ),
    .Y(\TX_PAR.iP60 )
  );
  \$xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9064  (
    .A(DIN[7]),
    .B(\TX_PAR.iP60 ),
    .Y(\TX_PAR.iP70 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9070  (
    .A(iLast),
    .Y(\$auto$builder.cc:338:Biop$9071 )
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9072  (
    .A(CState),
    .B(4'hb),
    .Y(\$auto$builder.cc:338:Biop$9073 )
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:330:Biop$9074  (
    .A(\$auto$builder.cc:338:Biop$9071 ),
    .B(\$auto$builder.cc:338:Biop$9073 ),
    .Y(\$auto$builder.cc:338:Biop$9075 )
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$auto$builder.cc:359:Unop$9030  (
    .A(iParity),
    .Y(\$auto$builder.cc:364:Unop$9031 )
  );
  /* src = "../rtl/apb_uart/uart_transmitter.sv:72.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$auto$ff.cc:266:slice$18090  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$slang_frontend.cc:694:finish$\iTx2$8973 ),
    .EN(TXCLK),
    .Q(iTx2)
  );
  /* src = "../rtl/apb_uart/uart_transmitter.sv:72.1" */
  \$adffe  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(4'h0),
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd4)
  ) \$auto$ff.cc:266:slice$18091  (
    .ARST(RST),
    .CLK(CLK),
    .D(NState),
    .EN(\$auto$opt_dff.cc:219:make_patterns_logic$18094 ),
    .Q(CState)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:195:make_patterns_logic$18093  (
    .A({ \$auto$builder.cc:338:Biop$8967 , iTx2 }),
    .B(2'h1),
    .Y(\$auto$opt_dff.cc:194:make_patterns_logic$18092 )
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_dff.cc:220:make_patterns_logic$18095  (
    .A({ \$auto$opt_dff.cc:194:make_patterns_logic$18092 , TXCLK }),
    .Y(\$auto$opt_dff.cc:219:make_patterns_logic$18094 )
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$auto$opt_reduce.cc:131:opt_pmux$17218  (
    .A({ \$procmux$13106_CMP , \$auto$builder.cc:338:Biop$8965  }),
    .Y(\$auto$opt_reduce.cc:137:opt_pmux$17219 )
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) \$auto$slang_frontend.cc:2041:operator()$9088  (
    .A(iSout),
    .B(1'h0),
    .S(BC),
    .Y(SOUT)
  );
  /* src = "../rtl/apb_uart/uart_transmitter.sv:298.5" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iFinished  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$9075 ),
    .Q(iFinished)
  );
  /* src = "../rtl/apb_uart/uart_transmitter.sv:298.5" */
  \$adff  #(
    .ARST_POLARITY(32'd1),
    .ARST_VALUE(1'h0),
    .CLK_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \$driver$iLast  (
    .ARST(RST),
    .CLK(CLK),
    .D(\$auto$builder.cc:338:Biop$9073 ),
    .Q(iLast)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:292.20-292.36|../rtl/apb_uart/uart_transmitter.sv:289.9-294.16" */
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd1)
  ) \$procmux$12939  (
    .A(\TX_PAR.iP70 ),
    .B({ \TX_PAR.iP40 , \TX_PAR.iP50 , \TX_PAR.iP60  }),
    .S({ \$auto$builder.cc:338:Biop$8959 , \$auto$builder.cc:338:Biop$8993 , \$auto$builder.cc:338:Biop$9003  }),
    .Y(iParity)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:251.18-251.34|../rtl/apb_uart/uart_transmitter.sv:249.13-260.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$12961  (
    .A({ 1'h0, TXSTART }),
    .B(2'h2),
    .S(STB),
    .Y({ \$auto$slang_frontend.cc:694:finish$\NState$9043 [3], \$auto$slang_frontend.cc:694:finish$\NState$9043 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:237.23-237.40|../rtl/apb_uart/uart_transmitter.sv:235.18-242.23" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12969  (
    .A(\$auto$builder.cc:364:Unop$9031 ),
    .B(iParity),
    .S(EPS),
    .Y(\$auto$slang_frontend.cc:694:finish$\iSout$9032 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:221.10-245.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$12975_CMP0  (
    .A(CState),
    .B(4'ha),
    .Y(\$procmux$12975_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:224.18-231.23|../rtl/apb_uart/uart_transmitter.sv:222.13-243.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$12982  (
    .A(\$auto$slang_frontend.cc:694:finish$\iSout$9032 ),
    .B(\$auto$slang_frontend.cc:694:finish$\iSout$9025 ),
    .S(SP),
    .Y(\$auto$slang_frontend.cc:694:finish$\iSout$9033 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:226.23-226.38|../rtl/apb_uart/uart_transmitter.sv:224.18-231.23" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$12991  (
    .A(EPS),
    .Y(\$auto$slang_frontend.cc:694:finish$\iSout$9025 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:208.10-218.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$13005_CMP0  (
    .A(CState),
    .B(4'h9),
    .Y(\$procmux$13005_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:192.18-199.23|../rtl/apb_uart/uart_transmitter.sv:190.13-204.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13013  (
    .A(2'h1),
    .B({ 1'h1, \$auto$slang_frontend.cc:694:finish$\NState$8990 [0] }),
    .S(\$auto$builder.cc:338:Biop$9003 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$9011 [1:0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:188.10-205.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$13016_CMP0  (
    .A(CState),
    .B(4'h8),
    .Y(\$procmux$13016_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:194.23-194.37|../rtl/apb_uart/uart_transmitter.sv:192.18-199.23" */
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13024  (
    .A(PEN),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$8990 [0])
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:172.18-179.23|../rtl/apb_uart/uart_transmitter.sv:170.13-184.18" */
  \$mux  #(
    .WIDTH(32'd2)
  ) \$procmux$13038  (
    .A(2'h0),
    .B({ 1'h1, \$auto$slang_frontend.cc:694:finish$\NState$8990 [0] }),
    .S(\$auto$builder.cc:338:Biop$8993 ),
    .Y(\$auto$slang_frontend.cc:694:finish$\NState$9001 )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:168.10-185.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13041_CMP0  (
    .A(CState),
    .B(3'h7),
    .Y(\$procmux$13041_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:152.18-159.23|../rtl/apb_uart/uart_transmitter.sv:150.13-164.18" */
  \$mux  #(
    .WIDTH(32'd3)
  ) \$procmux$13065  (
    .A(3'h3),
    .B({ 2'h2, \$auto$slang_frontend.cc:694:finish$\NState$8990 [0] }),
    .S(\$auto$builder.cc:338:Biop$8959 ),
    .Y({ \$auto$slang_frontend.cc:694:finish$\NState$8991 [3:2], \$auto$slang_frontend.cc:694:finish$\NState$8991 [0] })
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:148.10-165.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13068_CMP0  (
    .A(CState),
    .B(3'h6),
    .Y(\$procmux$13068_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:265.8-268.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$pmux  #(
    .S_WIDTH(32'd12),
    .WIDTH(32'd4)
  ) \$procmux$13086  (
    .A(4'h0),
    .B({ 20'h23456, \$auto$slang_frontend.cc:694:finish$\NState$8991 [3:2], 1'h1, \$auto$slang_frontend.cc:694:finish$\NState$8991 [0], 2'h2, \$auto$slang_frontend.cc:694:finish$\NState$9001 , 2'h2, \$auto$slang_frontend.cc:694:finish$\NState$9011 [1:0], 3'h5, \$auto$slang_frontend.cc:694:finish$\NState$8990 [0], 4'hb, \$auto$slang_frontend.cc:694:finish$\NState$9043 [3], \$auto$slang_frontend.cc:694:finish$\NState$9043 [3], 1'h0, \$auto$slang_frontend.cc:694:finish$\NState$9043 [0], 3'h0, TXSTART }),
    .S({ \$procmux$13104_CMP , \$procmux$13103_CMP , \$procmux$13102_CMP , \$procmux$13101_CMP , \$procmux$13100_CMP , \$procmux$13068_CMP , \$procmux$13041_CMP , \$procmux$13016_CMP , \$procmux$13005_CMP , \$procmux$12975_CMP , \$auto$builder.cc:338:Biop$9073 , \$auto$opt_reduce.cc:137:opt_pmux$17219  }),
    .Y(NState)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:142.10-145.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13100_CMP0  (
    .A(CState),
    .B(3'h5),
    .Y(\$procmux$13100_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:136.10-139.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) \$procmux$13101_CMP0  (
    .A(CState),
    .B(3'h4),
    .Y(\$procmux$13101_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:130.10-133.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13102_CMP0  (
    .A(CState),
    .B(2'h3),
    .Y(\$procmux$13102_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:124.10-127.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) \$procmux$13103_CMP0  (
    .A(CState),
    .B(2'h2),
    .Y(\$procmux$13103_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:118.10-121.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) \$procmux$13104_CMP0  (
    .A(CState),
    .B(1'h1),
    .Y(\$procmux$13104_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:110.13-113.18|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) \$procmux$13106_CMP0  (
    .A(CState),
    .Y(\$procmux$13106_CMP )
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:221.10-245.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" */
  \$pmux  #(
    .S_WIDTH(32'd10),
    .WIDTH(32'd1)
  ) \$procmux$13130  (
    .A(1'h1),
    .B({ 1'h0, DIN[0], DIN[1], DIN[2], DIN[3], DIN[4], DIN[5], DIN[6], DIN[7], \$auto$slang_frontend.cc:694:finish$\iSout$9033  }),
    .S({ \$procmux$13104_CMP , \$procmux$13103_CMP , \$procmux$13102_CMP , \$procmux$13101_CMP , \$procmux$13100_CMP , \$procmux$13068_CMP , \$procmux$13041_CMP , \$procmux$13016_CMP , \$procmux$13005_CMP , \$procmux$12975_CMP  }),
    .Y(iSout)
  );
  /* full_case = 32'd1 */
  /* src = "../rtl/apb_uart/uart_transmitter.sv:83.15-86.18|../rtl/apb_uart/uart_transmitter.sv:82.13-99.18" */
  \$mux  #(
    .WIDTH(32'd1)
  ) \$procmux$13163  (
    .A(1'h1),
    .B(\$auto$builder.cc:338:Biop$8967 ),
    .S(iTx2),
    .Y(\$auto$slang_frontend.cc:694:finish$\iTx2$8973 )
  );
  assign \$auto$slang_frontend.cc:694:finish$\NState$8990 [3:1] = 3'h5;
  assign \$auto$slang_frontend.cc:694:finish$\NState$8991 [1] = 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9011 [3:2] = 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9043 [2:1] = { \$auto$slang_frontend.cc:694:finish$\NState$9043 [3], 1'h0 };
  assign TXFINISHED = iFinished;
endmodule

/* src = "../rtl/user_domain.sv:8.8" */
module \user_domain$croc_chip.i_croc_soc.i_user (clk_i, rst_ni, testmode_i, ref_clk_i, user_sbr_obi_req_i, user_sbr_obi_rsp_o, user_mgr_obi_req_o, user_mgr_obi_rsp_i, gpio_in_sync_i, interrupts_o);
  /* src = "../rtl/user_domain.sv:46.35" */
  wire [73:0] all_user_sbr_obi_req;
  /* src = "../rtl/user_domain.sv:47.35" */
  wire [38:0] all_user_sbr_obi_rsp;
  /* src = "../rtl/user_domain.sv:11.21" */
  input clk_i;
  wire clk_i;
  /* src = "../rtl/user_domain.sv:22.38" */
  input [31:0] gpio_in_sync_i;
  wire [31:0] gpio_in_sync_i;
  /* src = "../rtl/user_domain.sv:23.38" */
  output [3:0] interrupts_o;
  wire [3:0] interrupts_o;
  /* src = "../rtl/user_domain.sv:12.21" */
  input ref_clk_i;
  wire ref_clk_i;
  /* src = "../rtl/user_domain.sv:13.21" */
  input rst_ni;
  wire rst_ni;
  /* src = "../rtl/user_domain.sv:14.21" */
  input testmode_i;
  wire testmode_i;
  /* src = "../rtl/user_domain.sv:50.17" */
  wire [73:0] user_error_obi_req;
  /* src = "../rtl/user_domain.sv:51.17" */
  wire [38:0] user_error_obi_rsp;
  /* src = "../rtl/user_domain.sv:62.51" */
  wire user_idx;
  /* src = "../rtl/user_domain.sv:19.24" */
  output [71:0] user_mgr_obi_req_o;
  wire [71:0] user_mgr_obi_req_o;
  /* src = "../rtl/user_domain.sv:20.24" */
  input [36:0] user_mgr_obi_rsp_i;
  wire [36:0] user_mgr_obi_rsp_i;
  /* src = "../rtl/user_domain.sv:16.24" */
  input [73:0] user_sbr_obi_req_i;
  wire [73:0] user_sbr_obi_req_i;
  /* src = "../rtl/user_domain.sv:17.24" */
  output [38:0] user_sbr_obi_rsp_o;
  wire [38:0] user_sbr_obi_rsp_o;
  /* src = "../rtl/user_domain.sv:70.5" */
  \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(user_sbr_obi_req_i[73:42]),
    .addr_map_i(192'h000000000000000000000000000000000000000000000000),
    .default_idx_i(1'h0),
    .en_default_idx_i(1'h1),
    .idx_o(user_idx)
  );
  /* src = "../rtl/user_domain.sv:86.5" */
  \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_user_sbr_obi_req),
    .mgr_ports_rsp_i(all_user_sbr_obi_rsp),
    .rst_ni(rst_ni),
    .sbr_port_req_i(user_sbr_obi_req_i),
    .sbr_port_rsp_o(user_sbr_obi_rsp_o),
    .sbr_port_select_i(user_idx)
  );
  /* src = "../rtl/user_domain.sv:110.5" */
  \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err  i_user_err (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req),
    .obi_rsp_o(all_user_sbr_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign interrupts_o = 4'h0;
  assign user_error_obi_req = all_user_sbr_obi_req;
  assign user_error_obi_rsp = all_user_sbr_obi_rsp;
  assign user_mgr_obi_req_o = 72'h000000000000000000;
endmodule
