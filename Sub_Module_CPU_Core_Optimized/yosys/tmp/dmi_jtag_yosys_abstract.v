/* Generated by Yosys 0.51 (git sha1 c4b519022, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:54.8" *)
module \cdc_2phase_clearable$dmi_jtag.i_dmi_cdc.i_cdc_req (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$auto$builder.cc:338:Biop$326 ;
  wire \$auto$builder.cc:338:Biop$334 ;
  wire \$auto$builder.cc:364:Unop$324 ;
  wire \$auto$builder.cc:364:Unop$332 ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:88.35" *)
  wire async_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:89.31" *)
  wire [40:0] async_data;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:87.35" *)
  wire async_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:69.16" *)
  input dst_clear_i;
  wire dst_clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:70.16" *)
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:68.16" *)
  input dst_clk_i;
  wire dst_clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:71.16" *)
  output [40:0] dst_data_o;
  wire [40:0] dst_data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:73.16" *)
  input dst_ready_i;
  wire dst_ready_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:67.16" *)
  input dst_rst_ni;
  wire dst_rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:72.16" *)
  output dst_valid_o;
  wire dst_valid_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:81.16" *)
  reg s_dst_clear_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:80.16" *)
  wire s_dst_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:84.16" *)
  reg s_dst_isolate_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:82.16" *)
  wire s_dst_valid;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:76.16" *)
  reg s_src_clear_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:75.16" *)
  wire s_src_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:79.16" *)
  reg s_src_isolate_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:77.16" *)
  wire s_src_ready;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:61.16" *)
  input src_clear_i;
  wire src_clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:62.16" *)
  output src_clear_pending_o;
  wire src_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:60.16" *)
  input src_clk_i;
  wire src_clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:63.16" *)
  input [40:0] src_data_i;
  wire [40:0] src_data_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:65.16" *)
  output src_ready_o;
  wire src_ready_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:59.16" *)
  input src_rst_ni;
  wire src_rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:64.16" *)
  input src_valid_i;
  wire src_valid_i;
  assign \$auto$builder.cc:338:Biop$326  = src_valid_i & \$auto$builder.cc:364:Unop$324 ;
  assign src_ready_o = s_src_ready & \$auto$builder.cc:364:Unop$324 ;
  assign \$auto$builder.cc:338:Biop$334  = dst_ready_i & \$auto$builder.cc:364:Unop$332 ;
  assign dst_valid_o = s_dst_valid & \$auto$builder.cc:364:Unop$332 ;
  assign \$auto$builder.cc:364:Unop$324  = ! src_clear_pending_o;
  assign \$auto$builder.cc:364:Unop$332  = ! dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_clear_ack_q <= 1'h0;
    else s_dst_clear_ack_q <= s_dst_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_isolate_ack_q <= 1'h0;
    else s_dst_isolate_ack_q <= dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_clear_ack_q <= 1'h0;
    else s_src_clear_ack_q <= s_src_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_isolate_ack_q <= 1'h0;
    else s_src_isolate_ack_q <= src_clear_pending_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:143.5" *)
  \cdc_reset_ctrlr$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(src_clear_pending_o),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(dst_clear_pending_o),
    .b_rst_ni(dst_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:125.5" *)
  \cdc_2phase_dst_clearable$dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$auto$builder.cc:338:Biop$334 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:106.5" *)
  \cdc_2phase_src_clearable$dmi_jtag.i_dmi_cdc.i_cdc_req.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$auto$builder.cc:338:Biop$326 )
  );
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:54.8" *)
module \cdc_2phase_clearable$dmi_jtag.i_dmi_cdc.i_cdc_resp (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$auto$builder.cc:338:Biop$352 ;
  wire \$auto$builder.cc:338:Biop$360 ;
  wire \$auto$builder.cc:364:Unop$350 ;
  wire \$auto$builder.cc:364:Unop$358 ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:88.35" *)
  wire async_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:89.31" *)
  wire [33:0] async_data;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:87.35" *)
  wire async_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:69.16" *)
  input dst_clear_i;
  wire dst_clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:70.16" *)
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:68.16" *)
  input dst_clk_i;
  wire dst_clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:71.16" *)
  output [33:0] dst_data_o;
  wire [33:0] dst_data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:73.16" *)
  input dst_ready_i;
  wire dst_ready_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:67.16" *)
  input dst_rst_ni;
  wire dst_rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:72.16" *)
  output dst_valid_o;
  wire dst_valid_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:81.16" *)
  reg s_dst_clear_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:80.16" *)
  wire s_dst_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:84.16" *)
  reg s_dst_isolate_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:82.16" *)
  wire s_dst_valid;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:76.16" *)
  reg s_src_clear_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:75.16" *)
  wire s_src_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:79.16" *)
  reg s_src_isolate_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:77.16" *)
  wire s_src_ready;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:61.16" *)
  input src_clear_i;
  wire src_clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:62.16" *)
  output src_clear_pending_o;
  wire src_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:60.16" *)
  input src_clk_i;
  wire src_clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:63.16" *)
  input [33:0] src_data_i;
  wire [33:0] src_data_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:65.16" *)
  output src_ready_o;
  wire src_ready_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:59.16" *)
  input src_rst_ni;
  wire src_rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:64.16" *)
  input src_valid_i;
  wire src_valid_i;
  assign \$auto$builder.cc:338:Biop$352  = src_valid_i & \$auto$builder.cc:364:Unop$350 ;
  assign src_ready_o = s_src_ready & \$auto$builder.cc:364:Unop$350 ;
  assign \$auto$builder.cc:338:Biop$360  = dst_ready_i & \$auto$builder.cc:364:Unop$358 ;
  assign dst_valid_o = s_dst_valid & \$auto$builder.cc:364:Unop$358 ;
  assign \$auto$builder.cc:364:Unop$350  = ! src_clear_pending_o;
  assign \$auto$builder.cc:364:Unop$358  = ! dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_clear_ack_q <= 1'h0;
    else s_dst_clear_ack_q <= s_dst_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_isolate_ack_q <= 1'h0;
    else s_dst_isolate_ack_q <= dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_clear_ack_q <= 1'h0;
    else s_src_clear_ack_q <= s_src_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_isolate_ack_q <= 1'h0;
    else s_src_isolate_ack_q <= src_clear_pending_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:143.5" *)
  \cdc_reset_ctrlr$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(src_clear_pending_o),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(dst_clear_pending_o),
    .b_rst_ni(dst_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:125.5" *)
  \cdc_2phase_dst_clearable$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$auto$builder.cc:338:Biop$360 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:106.5" *)
  \cdc_2phase_src_clearable$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$auto$builder.cc:338:Biop$352 )
  );
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:269.8" *)
module \cdc_2phase_dst_clearable$dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst (clk_i, rst_ni, clear_i, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$builder.cc:338:Biop$400 ;
  wire \$auto$builder.cc:338:Biop$409 ;
  wire \$auto$builder.cc:338:Biop$413 ;
  wire \$auto$builder.cc:364:Unop$404 ;
  wire \$auto$builder.cc:364:Unop$411 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3797 ;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.8" *)
  wire ack_dst_d;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.19" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:280.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:281.16" *)
  input [40:0] async_data_i;
  wire [40:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:279.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:275.16" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:274.16" *)
  input clk_i;
  wire clk_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" *)
  wire [40:0] data_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.17" *)
  wire [40:0] data_dst_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:276.16" *)
  output [40:0] data_o;
  reg [40:0] data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:278.16" *)
  input ready_i;
  wire ready_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.30" *)
  wire req_synced;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.42" *)
  reg req_synced_q1;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:273.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:277.16" *)
  output valid_o;
  wire valid_o;
  assign \$auto$builder.cc:338:Biop$400  = valid_o && ready_i;
  assign \$auto$builder.cc:338:Biop$409  = req_synced != req_synced_q1;
  assign \$auto$builder.cc:338:Biop$413  = \$auto$builder.cc:338:Biop$409  && \$auto$builder.cc:364:Unop$411 ;
  assign valid_o = async_ack_o != req_synced_q1;
  assign \$auto$builder.cc:364:Unop$404  = ~ async_ack_o;
  assign \$auto$builder.cc:364:Unop$411  = ! valid_o;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$413 ) data_o[33:32] <= async_data_i[33:32];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$413 ) data_o[31:0] <= async_data_i[31:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$413 ) data_o[40:34] <= async_data_i[40:34];
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$3797 ) async_ack_o <= ack_dst_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3797  = | { \$auto$builder.cc:338:Biop$400 , clear_i };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_synced_q1 <= 1'h0;
    else req_synced_q1 <= req_synced;
  assign data_dst_d = \$auto$builder.cc:338:Biop$413  ? (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|../rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" *) async_data_i : data_o;
  assign ack_dst_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|../rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" *) 1'h0 : \$auto$builder.cc:364:Unop$404 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:294.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_dst_q = data_o;
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:269.8" *)
module \cdc_2phase_dst_clearable$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst (clk_i, rst_ni, clear_i, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$builder.cc:338:Biop$450 ;
  wire \$auto$builder.cc:338:Biop$459 ;
  wire \$auto$builder.cc:338:Biop$463 ;
  wire \$auto$builder.cc:364:Unop$454 ;
  wire \$auto$builder.cc:364:Unop$461 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3802 ;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.8" *)
  wire ack_dst_d;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.19" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:280.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:281.16" *)
  input [33:0] async_data_i;
  wire [33:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:279.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:275.16" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:274.16" *)
  input clk_i;
  wire clk_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] data_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.17" *)
  wire [33:0] data_dst_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:276.16" *)
  output [33:0] data_o;
  reg [33:0] data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:278.16" *)
  input ready_i;
  wire ready_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.30" *)
  wire req_synced;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.42" *)
  reg req_synced_q1;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:273.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:277.16" *)
  output valid_o;
  wire valid_o;
  assign \$auto$builder.cc:338:Biop$450  = valid_o && ready_i;
  assign \$auto$builder.cc:338:Biop$459  = req_synced != req_synced_q1;
  assign \$auto$builder.cc:338:Biop$463  = \$auto$builder.cc:338:Biop$459  && \$auto$builder.cc:364:Unop$461 ;
  assign valid_o = async_ack_o != req_synced_q1;
  assign \$auto$builder.cc:364:Unop$454  = ~ async_ack_o;
  assign \$auto$builder.cc:364:Unop$461  = ! valid_o;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$463 ) data_o[1:0] <= async_data_i[1:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$463 ) data_o[33:2] <= async_data_i[33:2];
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$3802 ) async_ack_o <= ack_dst_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3802  = | { \$auto$builder.cc:338:Biop$450 , clear_i };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_synced_q1 <= 1'h0;
    else req_synced_q1 <= req_synced;
  assign data_dst_d = \$auto$builder.cc:338:Biop$463  ? (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|../rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" *) async_data_i : data_o;
  assign ack_dst_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|../rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" *) 1'h0 : \$auto$builder.cc:364:Unop$454 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:294.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_dst_q = data_o;
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:199.8" *)
module \cdc_2phase_src_clearable$dmi_jtag.i_dmi_cdc.i_cdc_req.i_src (clk_i, rst_ni, clear_i, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$builder.cc:338:Biop$379 ;
  wire \$auto$builder.cc:364:Unop$383 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3805 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3810 ;
  wire \$auto$rtlil.cc:2739:Not$3809 ;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$385 ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.32" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:210.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:211.16" *)
  output [40:0] async_data_o;
  reg [40:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:209.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:205.16" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:204.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:206.16" *)
  input [40:0] data_i;
  wire [40:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" *)
  wire [40:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.17" *)
  wire [40:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:208.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:203.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:207.16" *)
  input valid_i;
  wire valid_i;
  assign \$auto$builder.cc:338:Biop$379  = valid_i && ready_o;
  assign ready_o = async_req_o == ack_synced;
  assign \$auto$builder.cc:364:Unop$383  = ~ async_req_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:245.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$3805 ) async_req_o <= req_src_d;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$3810 ) async_data_o[33:32] <= data_i[33:32];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$3810 ) async_data_o[31:0] <= data_i[31:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$3810 ) async_data_o[40:34] <= data_i[40:34];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3805  = | { \$auto$builder.cc:338:Biop$379 , clear_i };
  assign \$auto$rtlil.cc:2739:Not$3809  = ~ clear_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3810  = & { \$auto$rtlil.cc:2739:Not$3809 , \$auto$builder.cc:338:Biop$379  };
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$385  = \$auto$builder.cc:338:Biop$379  ? (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *) data_i : async_data_o;
  assign req_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) 1'h0 : \$auto$builder.cc:364:Unop$383 ;
  assign data_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) async_data_o : \$auto$slang_frontend.cc:694:finish$\data_src_d$385 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:222.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:199.8" *)
module \cdc_2phase_src_clearable$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src (clk_i, rst_ni, clear_i, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$builder.cc:338:Biop$429 ;
  wire \$auto$builder.cc:364:Unop$433 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3823 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3828 ;
  wire \$auto$rtlil.cc:2739:Not$3827 ;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *)
  wire [33:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$435 ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.32" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:210.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:211.16" *)
  output [33:0] async_data_o;
  reg [33:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:209.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:205.16" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:204.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:206.16" *)
  input [33:0] data_i;
  wire [33:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.17" *)
  wire [33:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:208.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:203.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:207.16" *)
  input valid_i;
  wire valid_i;
  assign \$auto$builder.cc:338:Biop$429  = valid_i && ready_o;
  assign ready_o = async_req_o == ack_synced;
  assign \$auto$builder.cc:364:Unop$433  = ~ async_req_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:245.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$3823 ) async_req_o <= req_src_d;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$3828 ) async_data_o[1:0] <= data_i[1:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$3828 ) async_data_o[33:2] <= data_i[33:2];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3823  = | { \$auto$builder.cc:338:Biop$429 , clear_i };
  assign \$auto$rtlil.cc:2739:Not$3827  = ~ clear_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3828  = & { \$auto$rtlil.cc:2739:Not$3827 , \$auto$builder.cc:338:Biop$429  };
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$435  = \$auto$builder.cc:338:Biop$429  ? (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *) data_i : async_data_o;
  assign req_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) 1'h0 : \$auto$builder.cc:364:Unop$433 ;
  assign data_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) async_data_o : \$auto$slang_frontend.cc:694:finish$\data_src_d$435 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:222.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3836 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3838 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3840 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3842 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$864 ;
  wire \$procmux$1617_CMP ;
  wire \$procmux$1628_CMP ;
  wire \$procmux$1642_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3842 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3836  = { \$procmux$1628_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3838  = { \$procmux$1642_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3840  = { \$procmux$1617_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3842  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3838 , \$auto$opt_dff.cc:194:make_patterns_logic$3840 , \$auto$opt_dff.cc:194:make_patterns_logic$3836  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$1617_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$1628_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [0:0] \$procmux$1639 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1639  = b[0:0];
      2'b1?:
        \$procmux$1639  = b[1:1];
      default:
        \$procmux$1639  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$1639 (1'h0, { req_synced, 1'h1 }, { \$procmux$1642_CMP , \$procmux$1628_CMP  });
  assign \$procmux$1642_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  function [1:0] \$procmux$1645 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1645  = b[1:0];
      2'b1?:
        \$procmux$1645  = b[3:2];
      default:
        \$procmux$1645  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1645 (2'h0, { \$auto$slang_frontend.cc:694:finish$\state_d$864 , 2'h2 }, { \$procmux$1642_CMP , \$procmux$1628_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$864  = ready_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$1679 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1679  = b[0:0];
      2'b1?:
        \$procmux$1679  = b[1:1];
      default:
        \$procmux$1679  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$1679 (1'h0, { ready_i, req_synced }, { \$procmux$1628_CMP , \$procmux$1617_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3845 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3847 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3849 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3851 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$937 ;
  wire \$procmux$1463_CMP ;
  wire \$procmux$1474_CMP ;
  wire \$procmux$1488_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3851 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3845  = { \$procmux$1474_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3847  = { \$procmux$1488_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3849  = { \$procmux$1463_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3851  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3845 , \$auto$opt_dff.cc:194:make_patterns_logic$3849 , \$auto$opt_dff.cc:194:make_patterns_logic$3847  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$1463_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$1474_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [0:0] \$procmux$1485 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1485  = b[0:0];
      2'b1?:
        \$procmux$1485  = b[1:1];
      default:
        \$procmux$1485  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$1485 (1'h0, { req_synced, 1'h1 }, { \$procmux$1488_CMP , \$procmux$1474_CMP  });
  assign \$procmux$1488_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  function [1:0] \$procmux$1491 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1491  = b[1:0];
      2'b1?:
        \$procmux$1491  = b[3:2];
      default:
        \$procmux$1491  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1491 (2'h0, { \$auto$slang_frontend.cc:694:finish$\state_d$937 , 2'h2 }, { \$procmux$1488_CMP , \$procmux$1474_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$937  = ready_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$1525 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1525  = b[0:0];
      2'b1?:
        \$procmux$1525  = b[1:1];
      default:
        \$procmux$1525  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$1525 (1'h0, { ready_i, req_synced }, { \$procmux$1474_CMP , \$procmux$1463_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3854 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3856 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3858 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3860 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$1010 ;
  wire \$procmux$1309_CMP ;
  wire \$procmux$1320_CMP ;
  wire \$procmux$1334_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3860 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3854  = { \$procmux$1320_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3856  = { \$procmux$1334_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3858  = { \$procmux$1309_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3860  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3854 , \$auto$opt_dff.cc:194:make_patterns_logic$3858 , \$auto$opt_dff.cc:194:make_patterns_logic$3856  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$1309_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$1320_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [0:0] \$procmux$1331 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1331  = b[0:0];
      2'b1?:
        \$procmux$1331  = b[1:1];
      default:
        \$procmux$1331  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$1331 (1'h0, { req_synced, 1'h1 }, { \$procmux$1334_CMP , \$procmux$1320_CMP  });
  assign \$procmux$1334_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  function [1:0] \$procmux$1337 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1337  = b[1:0];
      2'b1?:
        \$procmux$1337  = b[3:2];
      default:
        \$procmux$1337  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1337 (2'h0, { \$auto$slang_frontend.cc:694:finish$\state_d$1010 , 2'h2 }, { \$procmux$1334_CMP , \$procmux$1320_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$1010  = ready_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$1371 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1371  = b[0:0];
      2'b1?:
        \$procmux$1371  = b[1:1];
      default:
        \$procmux$1371  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$1371 (1'h0, { ready_i, req_synced }, { \$procmux$1320_CMP , \$procmux$1309_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3863 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3865 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3867 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3869 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$1083 ;
  wire \$procmux$1155_CMP ;
  wire \$procmux$1166_CMP ;
  wire \$procmux$1180_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3869 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3863  = { req_synced, \$procmux$1155_CMP  } != 2'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3865  = { \$procmux$1166_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3867  = { \$procmux$1180_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3869  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3865 , \$auto$opt_dff.cc:194:make_patterns_logic$3863 , \$auto$opt_dff.cc:194:make_patterns_logic$3867  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$1155_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$1166_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [0:0] \$procmux$1177 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1177  = b[0:0];
      2'b1?:
        \$procmux$1177  = b[1:1];
      default:
        \$procmux$1177  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$1177 (1'h0, { req_synced, 1'h1 }, { \$procmux$1180_CMP , \$procmux$1166_CMP  });
  assign \$procmux$1180_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  function [1:0] \$procmux$1183 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1183  = b[1:0];
      2'b1?:
        \$procmux$1183  = b[3:2];
      default:
        \$procmux$1183  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1183 (2'h0, { \$auto$slang_frontend.cc:694:finish$\state_d$1083 , 2'h2 }, { \$procmux$1180_CMP , \$procmux$1166_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$1083  = ready_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$1217 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1217  = b[0:0];
      2'b1?:
        \$procmux$1217  = b[1:1];
      default:
        \$procmux$1217  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$1217 (1'h0, { ready_i, req_synced }, { \$procmux$1166_CMP , \$procmux$1155_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3875 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3877 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3879 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3872 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3881 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$825 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$838 ;
  wire \$procmux$1687_CMP ;
  wire \$procmux$1703_CMP ;
  wire \$procmux$1717_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3872 ) async_data_o <= data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3881 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3875  = { \$procmux$1717_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3877  = { \$procmux$1703_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3879  = { \$procmux$1687_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3872  = & { \$procmux$1717_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3881  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3877 , \$auto$opt_dff.cc:194:make_patterns_logic$3875 , \$auto$opt_dff.cc:194:make_patterns_logic$3879  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$1687_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\ready_o$838  = ~ (* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *) ack_synced;
  assign \$procmux$1703_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign data_src_d = \$procmux$1717_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\data_src_d$825  : async_data_o;
  assign \$procmux$1717_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  function [0:0] \$procmux$1722 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1722  = b[0:0];
      2'b1?:
        \$procmux$1722  = b[1:1];
      default:
        \$procmux$1722  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$1722 (1'h0, { valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$838  }, { \$procmux$1717_CMP , \$procmux$1703_CMP  });
  assign ready_o = \$procmux$1687_CMP  & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\ready_o$838 ;
  function [1:0] \$procmux$1735 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1735  = b[1:0];
      2'b1?:
        \$procmux$1735  = b[3:2];
      default:
        \$procmux$1735  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1735 (2'h0, 4'h6, { \$procmux$1717_CMP , \$procmux$1703_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$825  = valid_i ? (* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3887 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3889 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3891 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3884 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3893 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$898 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$911 ;
  wire \$procmux$1533_CMP ;
  wire \$procmux$1549_CMP ;
  wire \$procmux$1563_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3884 ) async_data_o <= data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3893 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3887  = { \$procmux$1563_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3889  = { \$procmux$1549_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3891  = { \$procmux$1533_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3884  = & { \$procmux$1563_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3893  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3891 , \$auto$opt_dff.cc:194:make_patterns_logic$3889 , \$auto$opt_dff.cc:194:make_patterns_logic$3887  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$1533_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\ready_o$911  = ~ (* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *) ack_synced;
  assign \$procmux$1549_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign data_src_d = \$procmux$1563_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\data_src_d$898  : async_data_o;
  assign \$procmux$1563_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  function [0:0] \$procmux$1568 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1568  = b[0:0];
      2'b1?:
        \$procmux$1568  = b[1:1];
      default:
        \$procmux$1568  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$1568 (1'h0, { valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$911  }, { \$procmux$1563_CMP , \$procmux$1549_CMP  });
  assign ready_o = \$procmux$1533_CMP  & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\ready_o$911 ;
  function [1:0] \$procmux$1581 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1581  = b[1:0];
      2'b1?:
        \$procmux$1581  = b[3:2];
      default:
        \$procmux$1581  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1581 (2'h0, 4'h6, { \$procmux$1563_CMP , \$procmux$1549_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$898  = valid_i ? (* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3899 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3901 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3903 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3896 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3905 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$971 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$984 ;
  wire \$procmux$1379_CMP ;
  wire \$procmux$1395_CMP ;
  wire \$procmux$1409_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3896 ) async_data_o <= data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3905 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3899  = { \$procmux$1409_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3901  = { \$procmux$1395_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3903  = { \$procmux$1379_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3896  = & { \$procmux$1409_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3905  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3903 , \$auto$opt_dff.cc:194:make_patterns_logic$3901 , \$auto$opt_dff.cc:194:make_patterns_logic$3899  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$1379_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\ready_o$984  = ~ (* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *) ack_synced;
  assign \$procmux$1395_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign data_src_d = \$procmux$1409_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\data_src_d$971  : async_data_o;
  assign \$procmux$1409_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  function [0:0] \$procmux$1414 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1414  = b[0:0];
      2'b1?:
        \$procmux$1414  = b[1:1];
      default:
        \$procmux$1414  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$1414 (1'h0, { valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$984  }, { \$procmux$1409_CMP , \$procmux$1395_CMP  });
  assign ready_o = \$procmux$1379_CMP  & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\ready_o$984 ;
  function [1:0] \$procmux$1427 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1427  = b[1:0];
      2'b1?:
        \$procmux$1427  = b[3:2];
      default:
        \$procmux$1427  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1427 (2'h0, 4'h6, { \$procmux$1409_CMP , \$procmux$1395_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$971  = valid_i ? (* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3911 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3913 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3915 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3908 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3917 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$1044 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$1057 ;
  wire \$procmux$1225_CMP ;
  wire \$procmux$1241_CMP ;
  wire \$procmux$1255_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3908 ) async_data_o <= data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3917 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3911  = { \$procmux$1255_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3913  = { \$procmux$1241_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3915  = { \$procmux$1225_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3908  = & { \$procmux$1255_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3917  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3913 , \$auto$opt_dff.cc:194:make_patterns_logic$3911 , \$auto$opt_dff.cc:194:make_patterns_logic$3915  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$1225_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\ready_o$1057  = ~ (* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *) ack_synced;
  assign \$procmux$1241_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign data_src_d = \$procmux$1255_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\data_src_d$1044  : async_data_o;
  assign \$procmux$1255_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  function [0:0] \$procmux$1260 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1260  = b[0:0];
      2'b1?:
        \$procmux$1260  = b[1:1];
      default:
        \$procmux$1260  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$1260 (1'h0, { valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$1057  }, { \$procmux$1255_CMP , \$procmux$1241_CMP  });
  assign ready_o = \$procmux$1225_CMP  & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\ready_o$1057 ;
  function [1:0] \$procmux$1273 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1273  = b[1:0];
      2'b1?:
        \$procmux$1273  = b[3:2];
      default:
        \$procmux$1273  = a;
    endcase
  endfunction
  assign state_d = \$procmux$1273 (2'h0, 4'h6, { \$procmux$1255_CMP , \$procmux$1241_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$1044  = valid_i ? (* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:109.8" *)
module \cdc_reset_ctrlr$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:125.15" *)
  input a_clear_ack_i;
  wire a_clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:123.16" *)
  input a_clear_i;
  wire a_clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:124.16" *)
  output a_clear_o;
  wire a_clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:121.16" *)
  input a_clk_i;
  wire a_clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:127.16" *)
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:126.16" *)
  output a_isolate_o;
  wire a_isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:122.16" *)
  input a_rst_ni;
  wire a_rst_ni;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.31" *)
  wire async_a2b_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:141.21" *)
  wire [1:0] async_a2b_next_phase;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.16" *)
  wire async_a2b_req;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.31" *)
  wire async_b2a_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:145.21" *)
  wire [1:0] async_b2a_next_phase;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.16" *)
  wire async_b2a_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:133.16" *)
  input b_clear_ack_i;
  wire b_clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:131.16" *)
  input b_clear_i;
  wire b_clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:132.16" *)
  output b_clear_o;
  wire b_clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:129.16" *)
  input b_clk_i;
  wire b_clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:135.16" *)
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:134.16" *)
  output b_isolate_o;
  wire b_isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:130.16" *)
  input b_rst_ni;
  wire b_rst_ni;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:150.5" *)
  \cdc_reset_ctrlr_half$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:169.5" *)
  \cdc_reset_ctrlr_half$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:109.8" *)
module \cdc_reset_ctrlr$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:125.15" *)
  input a_clear_ack_i;
  wire a_clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:123.16" *)
  input a_clear_i;
  wire a_clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:124.16" *)
  output a_clear_o;
  wire a_clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:121.16" *)
  input a_clk_i;
  wire a_clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:127.16" *)
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:126.16" *)
  output a_isolate_o;
  wire a_isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:122.16" *)
  input a_rst_ni;
  wire a_rst_ni;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.31" *)
  wire async_a2b_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:141.21" *)
  wire [1:0] async_a2b_next_phase;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.16" *)
  wire async_a2b_req;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.31" *)
  wire async_b2a_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:145.21" *)
  wire [1:0] async_b2a_next_phase;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.16" *)
  wire async_b2a_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:133.16" *)
  input b_clear_ack_i;
  wire b_clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:131.16" *)
  input b_clear_i;
  wire b_clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:132.16" *)
  output b_clear_o;
  wire b_clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:129.16" *)
  input b_clk_i;
  wire b_clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:135.16" *)
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:134.16" *)
  output b_isolate_o;
  wire b_isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:130.16" *)
  input b_rst_ni;
  wire b_rst_ni;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:150.5" *)
  \cdc_reset_ctrlr_half$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:169.5" *)
  \cdc_reset_ctrlr_half$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$490 ;
  wire \$auto$builder.cc:338:Biop$507 ;
  wire \$auto$builder.cc:338:Biop$546 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3921 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3923 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3925 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3927 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3929 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3931 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3933 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3935 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3937 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3939 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3691 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3693 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3699 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3703 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3705 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3709 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$4046 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$4048 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$499 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$515 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$516 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$555 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$558 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$553 ;
  wire \$procmux$2656_CMP ;
  wire \$procmux$2657_CMP ;
  wire \$procmux$2658_CMP ;
  wire \$procmux$2659_CMP ;
  wire \$procmux$2691_CMP ;
  wire \$procmux$2692_CMP ;
  wire \$procmux$2693_CMP ;
  wire \$procmux$2694_CMP ;
  wire \$procmux$2719_CMP ;
  wire \$procmux$2725_CMP ;
  wire \$procmux$2732_CMP ;
  wire \$procmux$2740_CMP ;
  wire \$procmux$2755_CMP ;
  wire \$procmux$2790_CMP ;
  wire \$procmux$2801_CMP ;
  wire \$procmux$2819_CMP ;
  wire \$procmux$2870_CMP ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$490  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$auto$builder.cc:338:Biop$507  = initiator_phase_transition_ack && clear_ack_i;
  assign \$auto$builder.cc:338:Biop$546  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$546 ) receiver_phase_q <= receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3939 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3921  = { \$procmux$2870_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3923  = { \$procmux$2819_CMP , \$auto$builder.cc:338:Biop$490 , initiator_phase_transition_ack, isolate_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3925  = { \$procmux$2801_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3927  = { \$procmux$2755_CMP , \$auto$builder.cc:338:Biop$507 , initiator_phase_transition_ack, clear_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3929  = { \$procmux$2740_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3931  = { \$procmux$2719_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3933  = { \$procmux$2725_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3935  = { \$procmux$2732_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3937  = { \$procmux$2790_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3939  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3927 , \$auto$opt_dff.cc:194:make_patterns_logic$3935 , \$auto$opt_dff.cc:194:make_patterns_logic$3937 , \$auto$opt_dff.cc:194:make_patterns_logic$3923 , \$auto$opt_dff.cc:194:make_patterns_logic$3921 , \$auto$opt_dff.cc:194:make_patterns_logic$3929 , \$auto$opt_dff.cc:194:make_patterns_logic$3925 , \$auto$opt_dff.cc:194:make_patterns_logic$3931 , \$auto$opt_dff.cc:194:make_patterns_logic$3933  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3691  = | { \$procmux$2658_CMP , \$procmux$2657_CMP , \$procmux$2656_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3693  = | { \$procmux$2694_CMP , \$procmux$2693_CMP , \$procmux$2691_CMP  };
  assign initiator_isolate_out = | { \$procmux$2819_CMP , \$procmux$2801_CMP , \$procmux$2790_CMP , \$procmux$2755_CMP , \$procmux$2740_CMP , \$procmux$2732_CMP , \$procmux$2725_CMP , \$procmux$2719_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3699  = | { \$procmux$2693_CMP , \$procmux$2692_CMP , \$procmux$2691_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$2819_CMP , \$procmux$2790_CMP , \$procmux$2755_CMP , \$procmux$2732_CMP , \$procmux$2725_CMP , \$procmux$2719_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3703  = | { \$procmux$2694_CMP , \$procmux$2691_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3705  = | { \$procmux$2659_CMP , \$procmux$2658_CMP , \$procmux$2656_CMP  };
  assign initiator_clear_out = | { \$procmux$2755_CMP , \$procmux$2740_CMP , \$procmux$2732_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3709  = | { \$procmux$2819_CMP , \$procmux$2801_CMP , \$procmux$2790_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$4046  = | { \$procmux$2740_CMP , \$procmux$2732_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$4048  = | { \$procmux$2801_CMP , \$procmux$2790_CMP  };
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$558  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$3705 ;
  assign \$procmux$2656_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$2657_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$2658_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$2659_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$555  : \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$558 ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$3699  : \$auto$opt_reduce.cc:137:opt_pmux$3691 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$553 ;
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$555  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$3693 ;
  assign \$procmux$2691_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$2692_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$2693_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$2694_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$2706 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2706  = b[0:0];
      2'b1?:
        \$procmux$2706  = b[1:1];
      default:
        \$procmux$2706  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$553  = \$procmux$2706 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$2692_CMP , \$auto$opt_reduce.cc:137:opt_pmux$3703  });
  assign \$procmux$2719_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$2725_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$2732_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$2740_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$2755_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$515 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$516 [1:0] = \$auto$builder.cc:338:Biop$507  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$auto$slang_frontend.cc:694:finish$\initiator_state_d$515 [1:0];
  assign \$procmux$2790_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$2801_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$2819_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$499 [2:0] = \$auto$builder.cc:338:Biop$490  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$2853 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$2853  = b[3:0];
      6'b????1?:
        \$procmux$2853  = b[7:4];
      6'b???1??:
        \$procmux$2853  = b[11:8];
      6'b??1???:
        \$procmux$2853  = b[15:12];
      6'b?1????:
        \$procmux$2853  = b[19:16];
      6'b1?????:
        \$procmux$2853  = b[23:20];
      default:
        \$procmux$2853  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$2853 (4'h1, { 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$499 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$516 [1:0], 12'h780 }, { \$procmux$2819_CMP , \$auto$opt_reduce.cc:137:opt_pmux$4048 , \$procmux$2755_CMP , \$auto$opt_reduce.cc:137:opt_pmux$4046 , \$procmux$2725_CMP , \$procmux$2719_CMP  });
  assign \$procmux$2870_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$2937 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$2937  = b[1:0];
      3'b?1?:
        \$procmux$2937  = b[3:2];
      3'b1??:
        \$procmux$2937  = b[5:4];
      default:
        \$procmux$2937  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$2937 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$3709 , initiator_clear_out, \$procmux$2725_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$499 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$515 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$516 [3:2] = 2'h1;
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$571 ;
  wire \$auto$builder.cc:338:Biop$588 ;
  wire \$auto$builder.cc:338:Biop$627 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3943 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3945 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3947 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3949 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3951 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3953 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3955 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3957 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3959 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3961 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3711 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3713 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3719 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3723 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3725 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3729 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$4050 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$4052 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$580 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$596 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$597 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$636 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$639 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$634 ;
  wire \$procmux$2360_CMP ;
  wire \$procmux$2361_CMP ;
  wire \$procmux$2362_CMP ;
  wire \$procmux$2363_CMP ;
  wire \$procmux$2395_CMP ;
  wire \$procmux$2396_CMP ;
  wire \$procmux$2397_CMP ;
  wire \$procmux$2398_CMP ;
  wire \$procmux$2423_CMP ;
  wire \$procmux$2429_CMP ;
  wire \$procmux$2436_CMP ;
  wire \$procmux$2444_CMP ;
  wire \$procmux$2459_CMP ;
  wire \$procmux$2494_CMP ;
  wire \$procmux$2505_CMP ;
  wire \$procmux$2523_CMP ;
  wire \$procmux$2574_CMP ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$571  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$auto$builder.cc:338:Biop$588  = initiator_phase_transition_ack && clear_ack_i;
  assign \$auto$builder.cc:338:Biop$627  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$627 ) receiver_phase_q <= receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3961 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3943  = { \$procmux$2574_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3945  = { \$procmux$2523_CMP , \$auto$builder.cc:338:Biop$571 , initiator_phase_transition_ack, isolate_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3947  = { \$procmux$2505_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3949  = { \$procmux$2459_CMP , \$auto$builder.cc:338:Biop$588 , initiator_phase_transition_ack, clear_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3951  = { \$procmux$2444_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3953  = { \$procmux$2423_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3955  = { \$procmux$2429_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3957  = { \$procmux$2436_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3959  = { \$procmux$2494_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3961  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3959 , \$auto$opt_dff.cc:194:make_patterns_logic$3957 , \$auto$opt_dff.cc:194:make_patterns_logic$3955 , \$auto$opt_dff.cc:194:make_patterns_logic$3953 , \$auto$opt_dff.cc:194:make_patterns_logic$3951 , \$auto$opt_dff.cc:194:make_patterns_logic$3949 , \$auto$opt_dff.cc:194:make_patterns_logic$3947 , \$auto$opt_dff.cc:194:make_patterns_logic$3945 , \$auto$opt_dff.cc:194:make_patterns_logic$3943  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3711  = | { \$procmux$2362_CMP , \$procmux$2361_CMP , \$procmux$2360_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3713  = | { \$procmux$2398_CMP , \$procmux$2397_CMP , \$procmux$2395_CMP  };
  assign initiator_isolate_out = | { \$procmux$2523_CMP , \$procmux$2505_CMP , \$procmux$2494_CMP , \$procmux$2459_CMP , \$procmux$2444_CMP , \$procmux$2436_CMP , \$procmux$2429_CMP , \$procmux$2423_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3719  = | { \$procmux$2397_CMP , \$procmux$2396_CMP , \$procmux$2395_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$2523_CMP , \$procmux$2494_CMP , \$procmux$2459_CMP , \$procmux$2436_CMP , \$procmux$2429_CMP , \$procmux$2423_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3723  = | { \$procmux$2398_CMP , \$procmux$2395_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3725  = | { \$procmux$2363_CMP , \$procmux$2362_CMP , \$procmux$2360_CMP  };
  assign initiator_clear_out = | { \$procmux$2459_CMP , \$procmux$2444_CMP , \$procmux$2436_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3729  = | { \$procmux$2523_CMP , \$procmux$2505_CMP , \$procmux$2494_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$4050  = | { \$procmux$2444_CMP , \$procmux$2436_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$4052  = | { \$procmux$2505_CMP , \$procmux$2494_CMP  };
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$639  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$3725 ;
  assign \$procmux$2360_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$2361_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$2362_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$2363_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$636  : \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$639 ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$3719  : \$auto$opt_reduce.cc:137:opt_pmux$3711 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$634 ;
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$636  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$3713 ;
  assign \$procmux$2395_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$2396_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$2397_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$2398_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$2410 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2410  = b[0:0];
      2'b1?:
        \$procmux$2410  = b[1:1];
      default:
        \$procmux$2410  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$634  = \$procmux$2410 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$2396_CMP , \$auto$opt_reduce.cc:137:opt_pmux$3723  });
  assign \$procmux$2423_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$2429_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$2436_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$2444_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$2459_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$596 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$597 [1:0] = \$auto$builder.cc:338:Biop$588  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$auto$slang_frontend.cc:694:finish$\initiator_state_d$596 [1:0];
  assign \$procmux$2494_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$2505_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$2523_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$580 [2:0] = \$auto$builder.cc:338:Biop$571  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$2557 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$2557  = b[3:0];
      6'b????1?:
        \$procmux$2557  = b[7:4];
      6'b???1??:
        \$procmux$2557  = b[11:8];
      6'b??1???:
        \$procmux$2557  = b[15:12];
      6'b?1????:
        \$procmux$2557  = b[19:16];
      6'b1?????:
        \$procmux$2557  = b[23:20];
      default:
        \$procmux$2557  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$2557 (4'h1, { 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$580 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$597 [1:0], 12'h780 }, { \$procmux$2523_CMP , \$auto$opt_reduce.cc:137:opt_pmux$4052 , \$procmux$2459_CMP , \$auto$opt_reduce.cc:137:opt_pmux$4050 , \$procmux$2429_CMP , \$procmux$2423_CMP  });
  assign \$procmux$2574_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$2641 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$2641  = b[1:0];
      3'b?1?:
        \$procmux$2641  = b[3:2];
      3'b1??:
        \$procmux$2641  = b[5:4];
      default:
        \$procmux$2641  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$2641 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$3729 , initiator_clear_out, \$procmux$2429_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$580 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$596 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$597 [3:2] = 2'h1;
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$662 ;
  wire \$auto$builder.cc:338:Biop$679 ;
  wire \$auto$builder.cc:338:Biop$718 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3965 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3967 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3969 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3971 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3973 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3975 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3977 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3979 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3981 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$3983 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3731 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3733 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3739 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3743 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3745 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3749 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$4054 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$4056 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$671 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$687 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$688 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$727 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$730 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$725 ;
  wire \$procmux$2064_CMP ;
  wire \$procmux$2065_CMP ;
  wire \$procmux$2066_CMP ;
  wire \$procmux$2067_CMP ;
  wire \$procmux$2099_CMP ;
  wire \$procmux$2100_CMP ;
  wire \$procmux$2101_CMP ;
  wire \$procmux$2102_CMP ;
  wire \$procmux$2127_CMP ;
  wire \$procmux$2133_CMP ;
  wire \$procmux$2140_CMP ;
  wire \$procmux$2148_CMP ;
  wire \$procmux$2163_CMP ;
  wire \$procmux$2198_CMP ;
  wire \$procmux$2209_CMP ;
  wire \$procmux$2227_CMP ;
  wire \$procmux$2278_CMP ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$662  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$auto$builder.cc:338:Biop$679  = initiator_phase_transition_ack && clear_ack_i;
  assign \$auto$builder.cc:338:Biop$718  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$718 ) receiver_phase_q <= receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$3983 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3965  = { \$procmux$2278_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3967  = { \$procmux$2227_CMP , \$auto$builder.cc:338:Biop$662 , initiator_phase_transition_ack, isolate_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3969  = { \$procmux$2209_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3971  = { \$procmux$2163_CMP , \$auto$builder.cc:338:Biop$679 , initiator_phase_transition_ack, clear_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3973  = { \$procmux$2148_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3975  = { \$procmux$2127_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3977  = { \$procmux$2133_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3979  = { \$procmux$2140_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3981  = { \$procmux$2198_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$3983  = & { \$auto$opt_dff.cc:194:make_patterns_logic$3981 , \$auto$opt_dff.cc:194:make_patterns_logic$3979 , \$auto$opt_dff.cc:194:make_patterns_logic$3977 , \$auto$opt_dff.cc:194:make_patterns_logic$3975 , \$auto$opt_dff.cc:194:make_patterns_logic$3973 , \$auto$opt_dff.cc:194:make_patterns_logic$3971 , \$auto$opt_dff.cc:194:make_patterns_logic$3969 , \$auto$opt_dff.cc:194:make_patterns_logic$3967 , \$auto$opt_dff.cc:194:make_patterns_logic$3965  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3731  = | { \$procmux$2066_CMP , \$procmux$2065_CMP , \$procmux$2064_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3733  = | { \$procmux$2102_CMP , \$procmux$2101_CMP , \$procmux$2099_CMP  };
  assign initiator_isolate_out = | { \$procmux$2227_CMP , \$procmux$2209_CMP , \$procmux$2198_CMP , \$procmux$2163_CMP , \$procmux$2148_CMP , \$procmux$2140_CMP , \$procmux$2133_CMP , \$procmux$2127_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3739  = | { \$procmux$2101_CMP , \$procmux$2100_CMP , \$procmux$2099_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$2227_CMP , \$procmux$2198_CMP , \$procmux$2163_CMP , \$procmux$2140_CMP , \$procmux$2133_CMP , \$procmux$2127_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3743  = | { \$procmux$2102_CMP , \$procmux$2099_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3745  = | { \$procmux$2067_CMP , \$procmux$2066_CMP , \$procmux$2064_CMP  };
  assign initiator_clear_out = | { \$procmux$2163_CMP , \$procmux$2148_CMP , \$procmux$2140_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3749  = | { \$procmux$2227_CMP , \$procmux$2209_CMP , \$procmux$2198_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$4054  = | { \$procmux$2148_CMP , \$procmux$2140_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$4056  = | { \$procmux$2209_CMP , \$procmux$2198_CMP  };
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$730  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$3745 ;
  assign \$procmux$2064_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$2065_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$2066_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$2067_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$727  : \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$730 ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$3739  : \$auto$opt_reduce.cc:137:opt_pmux$3731 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$725 ;
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$727  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$3733 ;
  assign \$procmux$2099_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$2100_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$2101_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$2102_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$2114 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$2114  = b[0:0];
      2'b1?:
        \$procmux$2114  = b[1:1];
      default:
        \$procmux$2114  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$725  = \$procmux$2114 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$2100_CMP , \$auto$opt_reduce.cc:137:opt_pmux$3743  });
  assign \$procmux$2127_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$2133_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$2140_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$2148_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$2163_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$687 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$688 [1:0] = \$auto$builder.cc:338:Biop$679  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$auto$slang_frontend.cc:694:finish$\initiator_state_d$687 [1:0];
  assign \$procmux$2198_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$2209_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$2227_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$671 [2:0] = \$auto$builder.cc:338:Biop$662  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$2261 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$2261  = b[3:0];
      6'b????1?:
        \$procmux$2261  = b[7:4];
      6'b???1??:
        \$procmux$2261  = b[11:8];
      6'b??1???:
        \$procmux$2261  = b[15:12];
      6'b?1????:
        \$procmux$2261  = b[19:16];
      6'b1?????:
        \$procmux$2261  = b[23:20];
      default:
        \$procmux$2261  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$2261 (4'h1, { 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$671 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$688 [1:0], 12'h780 }, { \$procmux$2227_CMP , \$auto$opt_reduce.cc:137:opt_pmux$4056 , \$procmux$2163_CMP , \$auto$opt_reduce.cc:137:opt_pmux$4054 , \$procmux$2133_CMP , \$procmux$2127_CMP  });
  assign \$procmux$2278_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$2345 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$2345  = b[1:0];
      3'b?1?:
        \$procmux$2345  = b[3:2];
      3'b1??:
        \$procmux$2345  = b[5:4];
      default:
        \$procmux$2345  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$2345 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$3749 , initiator_clear_out, \$procmux$2133_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$671 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$687 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$688 [3:2] = 2'h1;
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$743 ;
  wire \$auto$builder.cc:338:Biop$760 ;
  wire \$auto$builder.cc:338:Biop$799 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3987 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3989 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3991 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3993 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3995 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3997 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$3999 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4001 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4003 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$4005 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3751 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3753 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3759 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3763 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3765 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3769 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$4058 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$4060 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$752 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$768 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$769 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$808 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$811 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$806 ;
  wire \$procmux$1768_CMP ;
  wire \$procmux$1769_CMP ;
  wire \$procmux$1770_CMP ;
  wire \$procmux$1771_CMP ;
  wire \$procmux$1803_CMP ;
  wire \$procmux$1804_CMP ;
  wire \$procmux$1805_CMP ;
  wire \$procmux$1806_CMP ;
  wire \$procmux$1831_CMP ;
  wire \$procmux$1837_CMP ;
  wire \$procmux$1844_CMP ;
  wire \$procmux$1852_CMP ;
  wire \$procmux$1867_CMP ;
  wire \$procmux$1902_CMP ;
  wire \$procmux$1913_CMP ;
  wire \$procmux$1931_CMP ;
  wire \$procmux$1982_CMP ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$743  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$auto$builder.cc:338:Biop$760  = initiator_phase_transition_ack && clear_ack_i;
  assign \$auto$builder.cc:338:Biop$799  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$799 ) receiver_phase_q <= receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$4005 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3987  = { \$procmux$1982_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3989  = { \$procmux$1931_CMP , \$auto$builder.cc:338:Biop$743 , initiator_phase_transition_ack, isolate_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3991  = { \$procmux$1913_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3993  = { \$procmux$1867_CMP , \$auto$builder.cc:338:Biop$760 , initiator_phase_transition_ack, clear_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3995  = { \$procmux$1852_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3997  = { \$procmux$1831_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$3999  = { \$procmux$1837_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4001  = { \$procmux$1844_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4003  = { \$procmux$1902_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$4005  = & { \$auto$opt_dff.cc:194:make_patterns_logic$4003 , \$auto$opt_dff.cc:194:make_patterns_logic$4001 , \$auto$opt_dff.cc:194:make_patterns_logic$3999 , \$auto$opt_dff.cc:194:make_patterns_logic$3997 , \$auto$opt_dff.cc:194:make_patterns_logic$3995 , \$auto$opt_dff.cc:194:make_patterns_logic$3993 , \$auto$opt_dff.cc:194:make_patterns_logic$3991 , \$auto$opt_dff.cc:194:make_patterns_logic$3989 , \$auto$opt_dff.cc:194:make_patterns_logic$3987  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3751  = | { \$procmux$1770_CMP , \$procmux$1769_CMP , \$procmux$1768_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3753  = | { \$procmux$1806_CMP , \$procmux$1805_CMP , \$procmux$1803_CMP  };
  assign initiator_isolate_out = | { \$procmux$1931_CMP , \$procmux$1913_CMP , \$procmux$1902_CMP , \$procmux$1867_CMP , \$procmux$1852_CMP , \$procmux$1844_CMP , \$procmux$1837_CMP , \$procmux$1831_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3759  = | { \$procmux$1805_CMP , \$procmux$1804_CMP , \$procmux$1803_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$1931_CMP , \$procmux$1902_CMP , \$procmux$1867_CMP , \$procmux$1844_CMP , \$procmux$1837_CMP , \$procmux$1831_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3763  = | { \$procmux$1806_CMP , \$procmux$1803_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3765  = | { \$procmux$1771_CMP , \$procmux$1770_CMP , \$procmux$1768_CMP  };
  assign initiator_clear_out = | { \$procmux$1867_CMP , \$procmux$1852_CMP , \$procmux$1844_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3769  = | { \$procmux$1931_CMP , \$procmux$1913_CMP , \$procmux$1902_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$4058  = | { \$procmux$1852_CMP , \$procmux$1844_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$4060  = | { \$procmux$1913_CMP , \$procmux$1902_CMP  };
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$811  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$3765 ;
  assign \$procmux$1768_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$1769_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$1770_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$1771_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$808  : \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$811 ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$3759  : \$auto$opt_reduce.cc:137:opt_pmux$3751 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$806 ;
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$808  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$3753 ;
  assign \$procmux$1803_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$1804_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$1805_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$1806_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$1818 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$1818  = b[0:0];
      2'b1?:
        \$procmux$1818  = b[1:1];
      default:
        \$procmux$1818  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$806  = \$procmux$1818 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$1804_CMP , \$auto$opt_reduce.cc:137:opt_pmux$3763  });
  assign \$procmux$1831_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$1837_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$1844_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$1852_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$1867_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$768 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$769 [1:0] = \$auto$builder.cc:338:Biop$760  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$auto$slang_frontend.cc:694:finish$\initiator_state_d$768 [1:0];
  assign \$procmux$1902_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$1913_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$1931_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$752 [2:0] = \$auto$builder.cc:338:Biop$743  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$1965 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$1965  = b[3:0];
      6'b????1?:
        \$procmux$1965  = b[7:4];
      6'b???1??:
        \$procmux$1965  = b[11:8];
      6'b??1???:
        \$procmux$1965  = b[15:12];
      6'b?1????:
        \$procmux$1965  = b[19:16];
      6'b1?????:
        \$procmux$1965  = b[23:20];
      default:
        \$procmux$1965  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$1965 (4'h1, { 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$752 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$769 [1:0], 12'h780 }, { \$procmux$1931_CMP , \$auto$opt_reduce.cc:137:opt_pmux$4060 , \$procmux$1867_CMP , \$auto$opt_reduce.cc:137:opt_pmux$4058 , \$procmux$1837_CMP , \$procmux$1831_CMP  });
  assign \$procmux$1982_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$2049 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$2049  = b[1:0];
      3'b?1?:
        \$procmux$2049  = b[3:2];
      3'b1??:
        \$procmux$2049  = b[5:4];
      default:
        \$procmux$2049  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$2049 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$3769 , initiator_clear_out, \$procmux$1837_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$752 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$768 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$769 [3:2] = 2'h1;
endmodule

(* src = "../rtl/riscv-dbg/dmi_cdc.sv:19.8" *)
module \dmi_cdc$dmi_jtag.i_dmi_cdc (clk_i, rst_ni, tck_i, trst_ni, jtag_dmi_req_i, jtag_dmi_ready_o, jtag_dmi_valid_i, jtag_dmi_cdc_clear_i, jtag_dmi_resp_o, jtag_dmi_valid_o, jtag_dmi_ready_i, core_dmi_rst_no, core_dmi_req_o, core_dmi_valid_o, core_dmi_ready_i, core_dmi_resp_i, core_dmi_ready_o, core_dmi_valid_i);
  wire \$auto$builder.cc:364:Unop$313 ;
  wire \$auto$builder.cc:364:Unop$322 ;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:98.28" *)
  wire clear_pending_rise_edge_detect;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:35.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:48.28" *)
  wire core_clear_pending;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:96.28" *)
  reg core_clear_pending_q;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:41.28" *)
  input core_dmi_ready_i;
  wire core_dmi_ready_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:44.28" *)
  output core_dmi_ready_o;
  wire core_dmi_ready_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:39.28" *)
  output [40:0] core_dmi_req_o;
  wire [40:0] core_dmi_req_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:43.28" *)
  input [33:0] core_dmi_resp_i;
  wire [33:0] core_dmi_resp_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:38.28" *)
  output core_dmi_rst_no;
  reg core_dmi_rst_no;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:45.28" *)
  input core_dmi_valid_i;
  wire core_dmi_valid_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:40.28" *)
  output core_dmi_valid_o;
  wire core_dmi_valid_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:26.28" *)
  input jtag_dmi_cdc_clear_i;
  wire jtag_dmi_cdc_clear_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:32.28" *)
  input jtag_dmi_ready_i;
  wire jtag_dmi_ready_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:24.28" *)
  output jtag_dmi_ready_o;
  wire jtag_dmi_ready_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:23.28" *)
  input [40:0] jtag_dmi_req_i;
  wire [40:0] jtag_dmi_req_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:30.28" *)
  output [33:0] jtag_dmi_resp_o;
  wire [33:0] jtag_dmi_resp_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:25.28" *)
  input jtag_dmi_valid_i;
  wire jtag_dmi_valid_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:31.28" *)
  output jtag_dmi_valid_o;
  wire jtag_dmi_valid_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:36.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:21.28" *)
  input tck_i;
  wire tck_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:22.28" *)
  input trst_ni;
  wire trst_ni;
  assign clear_pending_rise_edge_detect = \$auto$builder.cc:364:Unop$313  && core_clear_pending;
  assign \$auto$builder.cc:364:Unop$313  = ! core_clear_pending_q;
  assign \$auto$builder.cc:364:Unop$322  = ~ clear_pending_rise_edge_detect;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:102.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_clear_pending_q <= 1'h0;
    else core_clear_pending_q <= core_clear_pending;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:102.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_dmi_rst_no <= 1'h1;
    else core_dmi_rst_no <= \$auto$builder.cc:364:Unop$322 ;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:50.45" *)
  \cdc_2phase_clearable$dmi_jtag.i_dmi_cdc.i_cdc_req  i_cdc_req (
    .dst_clear_i(1'h0),
    .dst_clear_pending_o(core_clear_pending),
    .dst_clk_i(clk_i),
    .dst_data_o(core_dmi_req_o),
    .dst_ready_i(core_dmi_ready_i),
    .dst_rst_ni(rst_ni),
    .dst_valid_o(core_dmi_valid_o),
    .src_clear_i(jtag_dmi_cdc_clear_i),
    .src_clk_i(tck_i),
    .src_data_i(jtag_dmi_req_i),
    .src_ready_o(jtag_dmi_ready_o),
    .src_rst_ni(trst_ni),
    .src_valid_i(jtag_dmi_valid_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:72.46" *)
  \cdc_2phase_clearable$dmi_jtag.i_dmi_cdc.i_cdc_resp  i_cdc_resp (
    .dst_clear_i(jtag_dmi_cdc_clear_i),
    .dst_clk_i(tck_i),
    .dst_data_o(jtag_dmi_resp_o),
    .dst_ready_i(jtag_dmi_ready_i),
    .dst_rst_ni(trst_ni),
    .dst_valid_o(jtag_dmi_valid_o),
    .src_clear_i(1'h0),
    .src_clk_i(clk_i),
    .src_data_i(core_dmi_resp_i),
    .src_ready_o(core_dmi_ready_o),
    .src_rst_ni(rst_ni),
    .src_valid_i(core_dmi_valid_i)
  );
endmodule

(* top =  1  *)
(* src = "../rtl/riscv-dbg/dmi_jtag.sv:19.8" *)
module dmi_jtag(clk_i, rst_ni, testmode_i, dmi_rst_no, dmi_req_o, dmi_req_valid_o, dmi_req_ready_i, dmi_resp_i, dmi_resp_ready_o, dmi_resp_valid_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o);
  wire \$auto$builder.cc:338:Biop$102 ;
  wire \$auto$builder.cc:338:Biop$107 ;
  wire \$auto$builder.cc:338:Biop$109 ;
  wire \$auto$builder.cc:338:Biop$116 ;
  wire \$auto$builder.cc:338:Biop$121 ;
  wire \$auto$builder.cc:338:Biop$123 ;
  wire \$auto$builder.cc:338:Biop$146 ;
  wire \$auto$builder.cc:338:Biop$150 ;
  wire \$auto$builder.cc:338:Biop$152 ;
  wire \$auto$builder.cc:338:Biop$2 ;
  wire \$auto$builder.cc:338:Biop$28 ;
  wire \$auto$builder.cc:338:Biop$37 ;
  wire \$auto$builder.cc:338:Biop$4 ;
  wire \$auto$builder.cc:338:Biop$41 ;
  wire \$auto$builder.cc:338:Biop$45 ;
  wire \$auto$builder.cc:338:Biop$49 ;
  wire \$auto$builder.cc:338:Biop$89 ;
  wire \$auto$builder.cc:338:Biop$91 ;
  wire \$auto$builder.cc:364:Unop$144 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4008 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4010 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4012 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4014 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4016 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4021 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4024 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4028 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4035 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$4018 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$4030 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$4037 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3771 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3777 ;
  wire \$auto$rtlil.cc:2746:ReduceBool$100 ;
  wire \$auto$rtlil.cc:2793:Eq$96 ;
  wire \$auto$rtlil.cc:2793:Eq$98 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\data_d$62 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\data_d$85 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:271.20-273.14" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$155 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$156 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$157 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:266.7-275.10" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$158 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$163 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:277.7-281.10" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$164 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$12 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:72.5-85.8" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$13 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$20 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:247.7-249.10" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\error_d$119 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:252.7-254.10" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\error_d$126 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:239.7-241.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$105 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$63 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$67 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$86 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:232.7-234.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$94 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$64 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$68 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$87 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:163.13-167.16" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\state_d$53 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\state_d$83 ;
  wire \$procmux$3236_CMP ;
  wire \$procmux$3240_CMP ;
  wire \$procmux$3310_CMP ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:125.15" *)
  wire [6:0] address_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:125.26" *)
  reg [6:0] address_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:56.9" *)
  wire capture;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:22.24" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:126.16" *)
  wire [31:0] data_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:126.24" *)
  reg [31:0] data_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:128.10" *)
  reg [40:0] dmi;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:54.9" *)
  wire dmi_clear;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:107.18" *)
  wire [40:0] dmi_req;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:29.24" *)
  output [40:0] dmi_req_o;
  wire [40:0] dmi_req_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:108.18" *)
  wire dmi_req_ready;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:31.24" *)
  input dmi_req_ready_i;
  wire dmi_req_ready_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:109.18" *)
  wire dmi_req_valid;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:30.24" *)
  output dmi_req_valid_o;
  wire dmi_req_valid_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:111.18" *)
  wire [33:0] dmi_resp;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:33.24" *)
  input [33:0] dmi_resp_i;
  wire [33:0] dmi_resp_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:34.24" *)
  output dmi_resp_ready_o;
  wire dmi_resp_ready_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:112.18" *)
  wire dmi_resp_valid;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:35.24" *)
  input dmi_resp_valid_i;
  wire dmi_resp_valid_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:28.24" *)
  output dmi_rst_no;
  wire dmi_rst_no;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:104.16" *)
  wire dmi_select;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:124.28" *)
  wire [40:0] dr_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:68.15" *)
  wire [31:0] dtmcs_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:68.24" *)
  reg [31:0] dtmcs_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:60.9" *)
  wire dtmcs_select;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:49.15" *)
  wire [1:0] error_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:136.9" *)
  wire error_dmi_busy;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:49.24" *)
  reg [1:0] error_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:52.9" *)
  wire jtag_dmi_clear;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:23.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:57.9" *)
  wire shift;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:122.11" *)
  wire [2:0] state_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:122.20" *)
  reg [2:0] state_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:51.9" *)
  wire tck;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:37.24" *)
  input tck_i;
  wire tck_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:40.24" *)
  input td_i;
  wire td_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:41.24" *)
  output td_o;
  wire td_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:58.9" *)
  wire tdi;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:42.24" *)
  output tdo_oe_o;
  wire tdo_oe_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:24.24" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:38.24" *)
  input tms_i;
  wire tms_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:39.24" *)
  input trst_ni;
  wire trst_ni;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:55.9" *)
  wire update;
  assign \$auto$rtlil.cc:2746:ReduceBool$100  = | { \$auto$rtlil.cc:2793:Eq$98 , \$auto$rtlil.cc:2793:Eq$96  };
  assign \$auto$builder.cc:338:Biop$2  = dtmcs_select && update;
  assign \$auto$builder.cc:338:Biop$102  = capture && \$auto$rtlil.cc:2746:ReduceBool$100 ;
  assign \$auto$builder.cc:338:Biop$107  = ! error_q;
  assign \$auto$builder.cc:338:Biop$109  = \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$105  && \$auto$builder.cc:338:Biop$107 ;
  assign \$auto$builder.cc:338:Biop$116  = \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$87  && \$auto$builder.cc:338:Biop$107 ;
  assign \$auto$builder.cc:338:Biop$121  = update && dtmcs_q[16];
  assign \$auto$builder.cc:338:Biop$123  = \$auto$builder.cc:338:Biop$121  && dtmcs_select;
  assign \$auto$builder.cc:338:Biop$146  = \$auto$builder.cc:338:Biop$107  && \$auto$builder.cc:364:Unop$144 ;
  assign \$auto$builder.cc:338:Biop$150  = error_q == 2'h3;
  assign \$auto$builder.cc:338:Biop$152  = \$auto$builder.cc:338:Biop$150  || error_dmi_busy;
  assign \$auto$builder.cc:338:Biop$28  = state_q == 2'h3;
  assign \$auto$builder.cc:338:Biop$4  = \$auto$builder.cc:338:Biop$2  && dtmcs_q[17];
  assign \$auto$builder.cc:338:Biop$37  = dmi_select && update;
  assign \$auto$builder.cc:338:Biop$41  = \$auto$builder.cc:338:Biop$37  && \$auto$builder.cc:338:Biop$107 ;
  assign \$auto$builder.cc:338:Biop$45  = dmi[1:0] == 1'h1;
  assign \$auto$builder.cc:338:Biop$49  = dmi[1:0] == 2'h2;
  assign dmi_clear = jtag_dmi_clear || \$auto$builder.cc:338:Biop$4 ;
  assign \$auto$builder.cc:338:Biop$89  = | state_q;
  assign \$auto$builder.cc:338:Biop$91  = update && \$auto$builder.cc:338:Biop$89 ;
  assign \$auto$builder.cc:364:Unop$144  = ! error_dmi_busy;
  assign \$auto$rtlil.cc:2793:Eq$96  = state_q == 1'h1;
  assign \$auto$rtlil.cc:2793:Eq$98  = state_q == 2'h2;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) state_q <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$4018 ) state_q <= state_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) error_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$4021 ) error_q <= error_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) data_q <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$4030 ) data_q <= data_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) address_q <= 7'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$4037 ) address_q <= address_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4008  = { \$auto$builder.cc:338:Biop$28 , dmi_req_ready, dmi_clear } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4010  = { \$auto$rtlil.cc:2793:Eq$96 , dmi_req_ready, dmi_clear } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4012  = | { \$procmux$3240_CMP , \$auto$rtlil.cc:2793:Eq$96 , \$auto$builder.cc:338:Biop$28 , dmi_resp_valid, dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4014  = { \$procmux$3240_CMP , \$auto$builder.cc:338:Biop$41 , dmi_clear } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4016  = { \$procmux$3240_CMP , \$auto$builder.cc:338:Biop$49 , \$auto$builder.cc:338:Biop$45 , \$auto$builder.cc:338:Biop$41 , dmi_clear } != 5'h12;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4021  = | { \$auto$builder.cc:338:Biop$123 , \$auto$builder.cc:338:Biop$116 , \$auto$builder.cc:338:Biop$109 , dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4024  = { \$auto$rtlil.cc:2793:Eq$98 , dmi_resp_valid, dmi_clear } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4028  = | { \$procmux$3240_CMP , \$auto$rtlil.cc:2793:Eq$98 , dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4035  = | { \$procmux$3240_CMP , dmi_clear };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$4018  = & { \$auto$opt_dff.cc:194:make_patterns_logic$4016 , \$auto$opt_dff.cc:194:make_patterns_logic$4014 , \$auto$opt_dff.cc:194:make_patterns_logic$4012 , \$auto$opt_dff.cc:194:make_patterns_logic$4010 , \$auto$opt_dff.cc:194:make_patterns_logic$4008  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$4030  = & { \$auto$opt_dff.cc:194:make_patterns_logic$4028 , \$auto$opt_dff.cc:194:make_patterns_logic$4024 , \$auto$opt_dff.cc:194:make_patterns_logic$4014  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$4037  = & { \$auto$opt_dff.cc:194:make_patterns_logic$4014 , \$auto$opt_dff.cc:194:make_patterns_logic$4035  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3771  = | { \$auto$rtlil.cc:2793:Eq$96 , \$auto$builder.cc:338:Biop$28  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3777  = | { \$procmux$3236_CMP , \$auto$rtlil.cc:2793:Eq$98  };
  assign dmi_req[33:32] = \$auto$builder.cc:338:Biop$28  ? 2'h2 : 2'h1;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dmi <= 41'h00000000000;
    else dmi <= dr_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[9:4] <= 6'h00;
    else dtmcs_q[9:4] <= dtmcs_d[9:4];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[17] <= 1'h0;
    else dtmcs_q[17] <= dtmcs_d[17];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[16] <= 1'h0;
    else dtmcs_q[16] <= dtmcs_d[16];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[11:10] <= 2'h0;
    else dtmcs_q[11:10] <= dtmcs_d[11:10];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[14:12] <= 3'h0;
    else dtmcs_q[14:12] <= dtmcs_d[14:12];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[3:0] <= 4'h0;
    else dtmcs_q[3:0] <= dtmcs_d[3:0];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[15] <= 1'h0;
    else dtmcs_q[15] <= dtmcs_d[15];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[31:18] <= 14'h0000;
    else dtmcs_q[31:18] <= dtmcs_d[31:18];
  assign \$auto$slang_frontend.cc:694:finish$\error_d$126  = \$auto$builder.cc:338:Biop$123  ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:253.9-253.30|../rtl/riscv-dbg/dmi_jtag.sv:252.7-254.10" *) 2'h0 : { 1'h1, \$auto$slang_frontend.cc:694:finish$\error_d$119 [0] };
  assign \$auto$slang_frontend.cc:694:finish$\error_d$119 [0] = ~ (* src = "../rtl/riscv-dbg/dmi_jtag.sv:248.9-248.31|../rtl/riscv-dbg/dmi_jtag.sv:247.7-249.10" *) \$auto$builder.cc:338:Biop$116 ;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$105  = \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$94  | (* src = "../rtl/riscv-dbg/dmi_jtag.sv:240.9-240.31|../rtl/riscv-dbg/dmi_jtag.sv:239.7-241.10" *) \$auto$builder.cc:338:Biop$102 ;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$94  = \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$86  | (* src = "../rtl/riscv-dbg/dmi_jtag.sv:233.9-233.31|../rtl/riscv-dbg/dmi_jtag.sv:232.7-234.10" *) \$auto$builder.cc:338:Biop$91 ;
  assign \$procmux$3236_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) 3'h4;
  assign \$procmux$3240_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:159.11-169.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) state_q;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$64  = dmi_resp[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:214.28-214.55|../rtl/riscv-dbg/dmi_jtag.sv:213.13-217.20" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$63  = dmi_resp[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:215.29-215.51|../rtl/riscv-dbg/dmi_jtag.sv:213.13-217.20" *) 2'h3;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$67  = dmi_resp_valid & (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.31-219.14|../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14" *) \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$63 ;
  function [31:0] \$procmux$3307 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/riscv-dbg/dmi_jtag.sv:190.29-193.18|../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3307  = b[31:0];
      3'b?1?:
        \$procmux$3307  = b[63:32];
      3'b1??:
        \$procmux$3307  = b[95:64];
      default:
        \$procmux$3307  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\data_d$62  = \$procmux$3307 (32'd3131949278, { dmi_resp[33:2], 64'hdeadbeefb051b051 }, { \$procmux$3310_CMP , \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$64 , \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$63  });
  assign \$procmux$3310_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:184.17-184.40|../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *) dmi_resp[1:0];
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$68  = dmi_resp_valid & (* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.31-199.14|../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" *) \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$64 ;
  assign \$auto$slang_frontend.cc:694:finish$\data_d$85  = \$auto$rtlil.cc:2793:Eq$98  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) \$auto$slang_frontend.cc:694:finish$\data_d$62  : dmi[33:2];
  function [2:0] \$procmux$3434 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3434  = b[2:0];
      3'b?1?:
        \$procmux$3434  = b[5:3];
      3'b1??:
        \$procmux$3434  = b[8:6];
      default:
        \$procmux$3434  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\state_d$83  = \$procmux$3434 (3'h0, { 1'h0, \$auto$slang_frontend.cc:694:finish$\state_d$53 [1], 7'h54 }, { \$procmux$3240_CMP , \$auto$rtlil.cc:2793:Eq$96 , \$auto$builder.cc:338:Biop$28  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$53 [1] = ~ (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:164.15-164.30|../rtl/riscv-dbg/dmi_jtag.sv:163.13-167.16" *) \$auto$builder.cc:338:Biop$45 ;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$87  = \$auto$opt_reduce.cc:137:opt_pmux$3777  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$68 ;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$86  = \$auto$opt_reduce.cc:137:opt_pmux$3777  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$67 ;
  assign data_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 32'd0 : \$auto$slang_frontend.cc:694:finish$\data_d$85 ;
  assign address_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 7'h00 : dmi[40:34];
  assign state_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 3'h0 : \$auto$slang_frontend.cc:694:finish$\state_d$83 ;
  assign error_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\error_d$126 ;
  assign error_dmi_busy = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$105 ;
  assign dmi_req_valid = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$3771 ;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$163  = dmi_select ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:279.11-279.47|../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12" *) { tdi, dmi[40:1] } : \$auto$slang_frontend.cc:694:finish$\dr_d$158 ;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$164  = shift ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12|../rtl/riscv-dbg/dmi_jtag.sv:277.7-281.10" *) \$auto$slang_frontend.cc:694:finish$\dr_d$163  : \$auto$slang_frontend.cc:694:finish$\dr_d$158 ;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$155  = \$auto$builder.cc:338:Biop$152  ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:272.13-272.49|../rtl/riscv-dbg/dmi_jtag.sv:271.20-273.14" *) { address_q, data_q, 2'h3 } : dmi;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$156  = \$auto$builder.cc:338:Biop$146  ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:269.13-269.52|../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14" *) { address_q, data_q, 2'h0 } : \$auto$slang_frontend.cc:694:finish$\dr_d$155 ;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$157  = dmi_select ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14|../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12" *) \$auto$slang_frontend.cc:694:finish$\dr_d$156  : dmi;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$158  = capture ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12|../rtl/riscv-dbg/dmi_jtag.sv:266.7-275.10" *) \$auto$slang_frontend.cc:694:finish$\dr_d$157  : dmi;
  assign dr_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:264.7-264.17|../rtl/riscv-dbg/dmi_jtag.sv:263.5-282.8" *) 41'h00000000000 : \$auto$slang_frontend.cc:694:finish$\dr_d$164 ;
  assign \$auto$slang_frontend.cc:694:finish$\dtmcs_d$20  = dtmcs_select ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.25-88.61|../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61" *) { tdi, dtmcs_q[31:1] } : \$auto$slang_frontend.cc:694:finish$\dtmcs_d$13 ;
  assign dtmcs_d = shift ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61|../rtl/riscv-dbg/dmi_jtag.sv:87.5-89.8" *) \$auto$slang_frontend.cc:694:finish$\dtmcs_d$20  : \$auto$slang_frontend.cc:694:finish$\dtmcs_d$13 ;
  assign \$auto$slang_frontend.cc:694:finish$\dtmcs_d$12  = dtmcs_select ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:74.9-83.23|../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10" *) { 20'h00001, error_q, 10'h071 } : dtmcs_q;
  assign \$auto$slang_frontend.cc:694:finish$\dtmcs_d$13  = capture ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10|../rtl/riscv-dbg/dmi_jtag.sv:72.5-85.8" *) \$auto$slang_frontend.cc:694:finish$\dtmcs_d$12  : dtmcs_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:330.11" *)
  \dmi_cdc$dmi_jtag.i_dmi_cdc  i_dmi_cdc (
    .clk_i(clk_i),
    .core_dmi_ready_i(dmi_req_ready_i),
    .core_dmi_ready_o(dmi_resp_ready_o),
    .core_dmi_req_o(dmi_req_o),
    .core_dmi_resp_i(dmi_resp_i),
    .core_dmi_rst_no(dmi_rst_no),
    .core_dmi_valid_i(dmi_resp_valid_i),
    .core_dmi_valid_o(dmi_req_valid_o),
    .jtag_dmi_cdc_clear_i(dmi_clear),
    .jtag_dmi_ready_i(1'h1),
    .jtag_dmi_ready_o(dmi_req_ready),
    .jtag_dmi_req_i({ address_q, dmi_req[33:32], data_q }),
    .jtag_dmi_resp_o(dmi_resp),
    .jtag_dmi_valid_i(dmi_req_valid),
    .jtag_dmi_valid_o(dmi_resp_valid),
    .rst_ni(rst_ni),
    .tck_i(tck),
    .trst_ni(trst_ni)
  );
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:307.5" *)
  \dmi_jtag_tap$dmi_jtag.i_dmi_jtag_tap  i_dmi_jtag_tap (
    .capture_o(capture),
    .dmi_clear_o(jtag_dmi_clear),
    .dmi_select_o(dmi_select),
    .dmi_tdo_i(dmi[0]),
    .dtmcs_select_o(dtmcs_select),
    .dtmcs_tdo_i(dtmcs_q[0]),
    .shift_o(shift),
    .tck_i(tck_i),
    .tck_o(tck),
    .td_i(td_i),
    .td_o(td_o),
    .tdi_o(tdi),
    .tdo_oe_o(tdo_oe_o),
    .testmode_i(testmode_i),
    .tms_i(tms_i),
    .trst_ni(trst_ni),
    .update_o(update)
  );
  assign \$auto$slang_frontend.cc:694:finish$\error_d$119 [1] = 1'h1;
  assign { \$auto$slang_frontend.cc:694:finish$\state_d$53 [2], \$auto$slang_frontend.cc:694:finish$\state_d$53 [0] } = 2'h1;
  assign { dmi_req[40:34], dmi_req[31:0] } = { address_q, data_q };
endmodule

(* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:19.8" *)
module \dmi_jtag_tap$dmi_jtag.i_dmi_jtag_tap (testmode_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o, tck_o, dmi_clear_o, update_o, capture_o, shift_o, tdi_o, dtmcs_select_o, dtmcs_tdo_i, dmi_select_o, dmi_tdo_i);
  wire \$auto$builder.cc:338:Biop$233 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4040 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$4043 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3773 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3775 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3781 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3783 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$3785 ;
  wire \$auto$rtlil.cc:2874:Mux$238 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$242 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" *)
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$198 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$200 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" *)
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$210 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$212 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$195 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$199 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$207 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$211 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" *)
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$177 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\tdo_mux$225 ;
  wire \$procmux$3090_CMP ;
  wire \$procmux$3091_CMP ;
  wire \$procmux$3092_CMP ;
  wire \$procmux$3095_CMP ;
  wire \$procmux$3097_CMP ;
  wire \$procmux$3098_CMP ;
  wire \$procmux$3099_CMP ;
  wire \$procmux$3102_CMP ;
  wire \$procmux$3103_CMP ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:124.16" *)
  wire bypass_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:124.26" *)
  reg bypass_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.9" *)
  wire capture_ir;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:40.23" *)
  output capture_o;
  wire capture_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:38.23" *)
  output dmi_clear_o;
  wire dmi_clear_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:46.23" *)
  output dmi_select_o;
  wire dmi_select_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:47.23" *)
  input dmi_tdo_i;
  wire dmi_tdo_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:43.23" *)
  output dtmcs_select_o;
  wire dtmcs_select_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:44.23" *)
  input dtmcs_tdo_i;
  wire dtmcs_tdo_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:120.16" *)
  wire [31:0] idcode_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:120.26" *)
  reg [31:0] idcode_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:121.16" *)
  wire idcode_select;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:75.25" *)
  wire [4:0] jtag_ir_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:75.36" *)
  reg [4:0] jtag_ir_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:73.25" *)
  wire [4:0] jtag_ir_shift_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:73.42" *)
  reg [4:0] jtag_ir_shift_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.21" *)
  wire shift_ir;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:41.23" *)
  output shift_o;
  wire shift_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:57.28" *)
  wire [3:0] tap_state_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:57.15" *)
  reg [3:0] tap_state_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:28.23" *)
  input tck_i;
  wire tck_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:188.9" *)
  wire tck_n;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:188.16" *)
  wire tck_ni;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:36.23" *)
  output tck_o;
  wire tck_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:31.23" *)
  input td_i;
  wire td_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:32.23" *)
  output td_o;
  reg td_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:42.23" *)
  output tdi_o;
  wire tdi_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:168.9" *)
  wire tdo_mux;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:33.23" *)
  output tdo_oe_o;
  reg tdo_oe_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:34.23" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:29.23" *)
  input tms_i;
  wire tms_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:30.23" *)
  input trst_ni;
  wire trst_ni;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.31" *)
  wire update_ir;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:39.23" *)
  output update_o;
  wire update_o;
  assign \$auto$builder.cc:338:Biop$233  = shift_ir | shift_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) jtag_ir_shift_q <= 5'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$4040 ) jtag_ir_shift_q <= jtag_ir_shift_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) jtag_ir_q <= 5'h01;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$4043 ) jtag_ir_q <= jtag_ir_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4040  = { capture_ir, shift_ir, \$auto$opt_reduce.cc:137:opt_pmux$3775  } != 3'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$4043  = { update_ir, \$auto$opt_reduce.cc:137:opt_pmux$3775  } != 2'h1;
  assign \$auto$opt_reduce.cc:137:opt_pmux$3773  = | { idcode_select, dmi_select_o, dtmcs_select_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3775  = | { \$procmux$3103_CMP , \$procmux$3102_CMP , \$procmux$3099_CMP , \$procmux$3098_CMP , \$procmux$3097_CMP , \$procmux$3095_CMP , \$procmux$3092_CMP , \$procmux$3091_CMP , \$procmux$3090_CMP , update_ir, shift_ir, capture_ir, shift_o, capture_o, update_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3781  = | { \$procmux$3103_CMP , update_ir, update_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3783  = | { shift_ir, capture_ir };
  assign \$auto$opt_reduce.cc:137:opt_pmux$3785  = | { shift_o, capture_o };
  assign \$auto$rtlil.cc:2874:Mux$238  = ~ tms_i;
  assign \$auto$rtlil.cc:2874:Mux$242  = tms_i ? 2'h2 : 2'h1;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) bypass_q <= 1'h0;
    else bypass_q <= bypass_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) idcode_q <= 32'd3507;
    else idcode_q <= idcode_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) tap_state_q <= 4'h1;
    else tap_state_q <= tap_state_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" *)
  always @(posedge tck_n, negedge trst_ni)
    if (!trst_ni) td_o <= 1'h0;
    else td_o <= tdo_mux;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" *)
  always @(posedge tck_n, negedge trst_ni)
    if (!trst_ni) tdo_oe_o <= 1'h0;
    else tdo_oe_o <= \$auto$builder.cc:338:Biop$233 ;
  function [0:0] \$procmux$3010 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$3010  = b[0:0];
      3'b?1?:
        \$procmux$3010  = b[1:1];
      3'b1??:
        \$procmux$3010  = b[2:2];
      default:
        \$procmux$3010  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\tdo_mux$225  = \$procmux$3010 (bypass_q, { idcode_q[0], dtmcs_tdo_i, dmi_tdo_i }, { idcode_select, dtmcs_select_o, dmi_select_o });
  assign dmi_select_o = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 5'h11;
  assign dtmcs_select_o = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:178.25-178.47|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 5'h10;
  assign idcode_select = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:177.25-177.47|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 1'h1;
  assign tdo_mux = shift_ir ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|../rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" *) jtag_ir_shift_q[0] : \$auto$slang_frontend.cc:694:finish$\tdo_mux$225 ;
  assign bypass_d = \$auto$opt_reduce.cc:137:opt_pmux$3775  & (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" *) \$auto$slang_frontend.cc:694:finish$\bypass_d$212 ;
  assign idcode_d = \$auto$opt_reduce.cc:137:opt_pmux$3775  ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" *) \$auto$slang_frontend.cc:694:finish$\idcode_d$211  : 32'd3507;
  assign \$auto$slang_frontend.cc:694:finish$\bypass_d$210  = \$auto$opt_reduce.cc:137:opt_pmux$3773  ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:137.27-137.43|../rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" *) \$auto$slang_frontend.cc:694:finish$\bypass_d$200  : td_i;
  assign \$auto$slang_frontend.cc:694:finish$\idcode_d$207  = idcode_select ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:136.27-136.65|../rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" *) { td_i, idcode_q[31:1] } : \$auto$slang_frontend.cc:694:finish$\idcode_d$199 ;
  assign \$auto$slang_frontend.cc:694:finish$\bypass_d$212  = shift_o ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *) \$auto$slang_frontend.cc:694:finish$\bypass_d$210  : \$auto$slang_frontend.cc:694:finish$\bypass_d$200 ;
  assign \$auto$slang_frontend.cc:694:finish$\idcode_d$211  = shift_o ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *) \$auto$slang_frontend.cc:694:finish$\idcode_d$207  : \$auto$slang_frontend.cc:694:finish$\idcode_d$199 ;
  assign \$auto$slang_frontend.cc:694:finish$\bypass_d$198  = \$auto$opt_reduce.cc:137:opt_pmux$3773  & (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:132.26-132.42|../rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" *) bypass_q;
  assign \$auto$slang_frontend.cc:694:finish$\idcode_d$195  = idcode_select ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:131.26-131.49|../rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" *) 32'd3507 : idcode_q;
  assign \$auto$slang_frontend.cc:694:finish$\bypass_d$200  = capture_o ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *) \$auto$slang_frontend.cc:694:finish$\bypass_d$198  : bypass_q;
  assign \$auto$slang_frontend.cc:694:finish$\idcode_d$199  = capture_o ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *) \$auto$slang_frontend.cc:694:finish$\idcode_d$195  : idcode_q;
  assign dmi_clear_o = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) \$auto$opt_reduce.cc:137:opt_pmux$3775 ;
  assign update_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hf;
  assign \$procmux$3090_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:290.9-290.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'he;
  assign \$procmux$3091_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:287.9-287.51|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hd;
  assign \$procmux$3092_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:283.9-283.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hc;
  assign shift_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hb;
  assign capture_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'ha;
  assign \$procmux$3095_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:264.9-264.60|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'h9;
  assign update_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'h8;
  assign \$procmux$3097_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:256.9-256.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h7;
  assign \$procmux$3098_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:253.9-253.51|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h6;
  assign \$procmux$3099_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:250.9-250.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h5;
  assign shift_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h4;
  assign capture_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 2'h3;
  assign \$procmux$3102_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:239.9-239.58|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 2'h2;
  assign \$procmux$3103_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:235.9-235.60|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 1'h1;
  function [3:0] \$procmux$3105 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *)
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \$procmux$3105  = b[3:0];
      11'b?????????1?:
        \$procmux$3105  = b[7:4];
      11'b????????1??:
        \$procmux$3105  = b[11:8];
      11'b???????1???:
        \$procmux$3105  = b[15:12];
      11'b??????1????:
        \$procmux$3105  = b[19:16];
      11'b?????1?????:
        \$procmux$3105  = b[23:20];
      11'b????1??????:
        \$procmux$3105  = b[27:24];
      11'b???1???????:
        \$procmux$3105  = b[31:28];
      11'b??1????????:
        \$procmux$3105  = b[35:32];
      11'b?1?????????:
        \$procmux$3105  = b[39:36];
      11'b1??????????:
        \$procmux$3105  = b[43:40];
      default:
        \$procmux$3105  = a;
    endcase
  endfunction
  assign tap_state_d = \$procmux$3105 ({ 3'h0, \$auto$rtlil.cc:2874:Mux$238  }, { \$auto$rtlil.cc:2874:Mux$242 [1], 1'h0, \$auto$rtlil.cc:2874:Mux$242 [0], 4'ha, tms_i, \$auto$rtlil.cc:2874:Mux$242 , \$auto$rtlil.cc:2874:Mux$242 [0], 4'h3, tms_i, \$auto$rtlil.cc:2874:Mux$242 , 2'h0, \$auto$rtlil.cc:2874:Mux$238 , 1'h0, \$auto$rtlil.cc:2874:Mux$238 , 2'h1, \$auto$rtlil.cc:2874:Mux$242 , \$auto$rtlil.cc:2874:Mux$242 [0], 2'h3, tms_i, 3'h7, \$auto$rtlil.cc:2874:Mux$242 , 1'h1, tms_i, 4'hc, \$auto$rtlil.cc:2874:Mux$242  }, { \$procmux$3102_CMP , \$auto$opt_reduce.cc:137:opt_pmux$3785 , \$procmux$3099_CMP , \$procmux$3098_CMP , \$procmux$3097_CMP , \$procmux$3095_CMP , \$auto$opt_reduce.cc:137:opt_pmux$3783 , \$procmux$3092_CMP , \$procmux$3091_CMP , \$procmux$3090_CMP , \$auto$opt_reduce.cc:137:opt_pmux$3781  });
  assign jtag_ir_d = \$auto$opt_reduce.cc:137:opt_pmux$3775  ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" *) jtag_ir_shift_q : 5'h01;
  assign jtag_ir_shift_d = \$auto$opt_reduce.cc:137:opt_pmux$3775  ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" *) \$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$177  : 5'h00;
  assign \$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$177  = capture_ir ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:89.7-89.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" *) 5'h05 : { td_i, jtag_ir_shift_q[4:1] };
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:195.15" *)
  \tc_clk_mux2$dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux  i_dft_tck_mux (
    .clk0_i(tck_ni),
    .clk1_i(tck_i),
    .clk_o(tck_n),
    .clk_sel_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:190.19" *)
  \tc_clk_inverter$dmi_jtag.i_dmi_jtag_tap.i_tck_inv  i_tck_inv (
    .clk_i(tck_i),
    .clk_o(tck_ni)
  );
  assign tck_o = tck_i;
  assign tdi_o = td_i;
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "../ihp13/tc_clk.sv:9.8" *)
module \tc_clk_inverter$dmi_jtag.i_dmi_jtag_tap.i_tck_inv (clk_i, clk_o);
  (* src = "../ihp13/tc_clk.sv:10.18" *)
  input clk_i;
  wire clk_i;
  (* src = "../ihp13/tc_clk.sv:11.18" *)
  output clk_o;
  wire clk_o;
  (* keep = 1'h1 *)
  (* src = "../ihp13/tc_clk.sv:14.16" *)
  sg13g2_inv_1 i_inv (
    .A(clk_i),
    .Y(clk_o)
  );
endmodule

(* src = "../ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux (clk_o, clk0_i, clk1_i, clk_sel_i);
  (* src = "../ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "../ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "../ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "../ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "../ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule
