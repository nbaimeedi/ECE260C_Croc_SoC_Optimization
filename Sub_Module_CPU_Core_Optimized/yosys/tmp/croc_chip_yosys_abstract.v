/* Generated by Yosys 0.51 (git sha1 c4b519022, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

(* src = "../rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "../rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode.sv:74.31" *)
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "../rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "../rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "../rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "../rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "../rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "../rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "../rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "../rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "../rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "../rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "../rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "../rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode.sv:74.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode.sv:90.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:76.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  (* src = "../rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "../rtl/common_cells/addr_decode.sv:35.8" *)
module \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o);
  (* src = "../rtl/common_cells/addr_decode.sv:72.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode.sv:74.31" *)
  input [191:0] addr_map_i;
  wire [191:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode.sv:80.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode.sv:78.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode.sv:90.31" *)
  input default_idx_i;
  wire default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:84.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode.sv:76.31" *)
  output idx_o;
  wire idx_o;
  (* src = "../rtl/common_cells/addr_decode.sv:100.5" *)
  \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync  i_addr_decode_dync (
    .addr_i(addr_i),
    .addr_map_i(addr_map_i),
    .config_ongoing_i(1'h0),
    .dec_error_o(dec_error_o),
    .dec_valid_o(dec_valid_o),
    .default_idx_i(default_idx_i),
    .en_default_idx_i(en_default_idx_i),
    .idx_o(idx_o)
  );
endmodule

(* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$3870 ;
  wire \$auto$builder.cc:338:Biop$3874 ;
  wire \$auto$builder.cc:338:Biop$3876 ;
  wire \$auto$builder.cc:338:Biop$3878 ;
  wire \$auto$builder.cc:338:Biop$3880 ;
  wire \$auto$builder.cc:338:Biop$3899 ;
  wire \$auto$builder.cc:338:Biop$3903 ;
  wire \$auto$builder.cc:338:Biop$3905 ;
  wire \$auto$builder.cc:338:Biop$3907 ;
  wire \$auto$builder.cc:338:Biop$3909 ;
  wire \$auto$builder.cc:338:Biop$3928 ;
  wire \$auto$builder.cc:338:Biop$3932 ;
  wire \$auto$builder.cc:338:Biop$3934 ;
  wire \$auto$builder.cc:338:Biop$3936 ;
  wire \$auto$builder.cc:338:Biop$3938 ;
  wire \$auto$builder.cc:338:Biop$3957 ;
  wire \$auto$builder.cc:338:Biop$3961 ;
  wire \$auto$builder.cc:338:Biop$3963 ;
  wire \$auto$builder.cc:338:Biop$3965 ;
  wire \$auto$builder.cc:338:Biop$3967 ;
  wire \$auto$builder.cc:338:Biop$3986 ;
  wire \$auto$builder.cc:338:Biop$3990 ;
  wire \$auto$builder.cc:338:Biop$3992 ;
  wire \$auto$builder.cc:338:Biop$3994 ;
  wire \$auto$builder.cc:338:Biop$3996 ;
  wire \$auto$builder.cc:364:Unop$3886 ;
  wire \$auto$rtlil.cc:2874:Mux$3861 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3865 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3892 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3921 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3950 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$3979 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$4008 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$3895 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$3924 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$3953 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$3982 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3894 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3923 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3952 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3981 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$3893 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$3922 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$3951 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$3980 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [479:0] addr_map_i;
  wire [479:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$builder.cc:338:Biop$3870  = addr_i >= addr_map_i[63:32];
  assign \$auto$builder.cc:338:Biop$3874  = addr_i < addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$3876  = ! addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$3878  = \$auto$builder.cc:338:Biop$3874  || \$auto$builder.cc:338:Biop$3876 ;
  assign \$auto$builder.cc:338:Biop$3880  = \$auto$builder.cc:338:Biop$3870  && \$auto$builder.cc:338:Biop$3878 ;
  assign \$auto$builder.cc:338:Biop$3899  = addr_i >= addr_map_i[159:128];
  assign \$auto$builder.cc:338:Biop$3903  = addr_i < addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$3905  = ! addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$3907  = \$auto$builder.cc:338:Biop$3903  || \$auto$builder.cc:338:Biop$3905 ;
  assign \$auto$builder.cc:338:Biop$3909  = \$auto$builder.cc:338:Biop$3899  && \$auto$builder.cc:338:Biop$3907 ;
  assign \$auto$builder.cc:338:Biop$3928  = addr_i >= addr_map_i[255:224];
  assign \$auto$builder.cc:338:Biop$3932  = addr_i < addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$3934  = ! addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$3936  = \$auto$builder.cc:338:Biop$3932  || \$auto$builder.cc:338:Biop$3934 ;
  assign \$auto$builder.cc:338:Biop$3938  = \$auto$builder.cc:338:Biop$3928  && \$auto$builder.cc:338:Biop$3936 ;
  assign \$auto$builder.cc:338:Biop$3957  = addr_i >= addr_map_i[351:320];
  assign \$auto$builder.cc:338:Biop$3961  = addr_i < addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$3963  = ! addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$3965  = \$auto$builder.cc:338:Biop$3961  || \$auto$builder.cc:338:Biop$3963 ;
  assign \$auto$builder.cc:338:Biop$3967  = \$auto$builder.cc:338:Biop$3957  && \$auto$builder.cc:338:Biop$3965 ;
  assign \$auto$builder.cc:338:Biop$3986  = addr_i >= addr_map_i[447:416];
  assign \$auto$builder.cc:338:Biop$3990  = addr_i < addr_map_i[415:384];
  assign \$auto$builder.cc:338:Biop$3992  = ! addr_map_i[415:384];
  assign \$auto$builder.cc:338:Biop$3994  = \$auto$builder.cc:338:Biop$3990  || \$auto$builder.cc:338:Biop$3992 ;
  assign \$auto$builder.cc:338:Biop$3996  = \$auto$builder.cc:338:Biop$3986  && \$auto$builder.cc:338:Biop$3994 ;
  assign \$auto$builder.cc:364:Unop$3886  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:2874:Mux$3861  = ~ en_default_idx_i;
  assign \$auto$rtlil.cc:2874:Mux$3865  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:2874:Mux$3892  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$auto$rtlil.cc:2874:Mux$3921  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$auto$rtlil.cc:2874:Mux$3950  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$auto$rtlil.cc:2874:Mux$3979  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign \$auto$rtlil.cc:2874:Mux$4008  = config_ongoing_i ? default_idx_i : addr_map_i[450:448];
  assign dec_error_o = \$auto$builder.cc:338:Biop$3996  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$3982 ;
  assign dec_valid_o = \$auto$builder.cc:338:Biop$3996  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$3886  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3981 ;
  assign idx_o = \$auto$builder.cc:338:Biop$3996  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$4008  : \$auto$slang_frontend.cc:694:finish$\idx_o$3980 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$3982  = \$auto$builder.cc:338:Biop$3967  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$3953 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3981  = \$auto$builder.cc:338:Biop$3967  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$3886  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3952 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$3980  = \$auto$builder.cc:338:Biop$3967  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$3979  : \$auto$slang_frontend.cc:694:finish$\idx_o$3951 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$3953  = \$auto$builder.cc:338:Biop$3938  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$3924 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3952  = \$auto$builder.cc:338:Biop$3938  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$3886  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3923 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$3951  = \$auto$builder.cc:338:Biop$3938  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$3950  : \$auto$slang_frontend.cc:694:finish$\idx_o$3922 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$3924  = \$auto$builder.cc:338:Biop$3909  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$3895 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3923  = \$auto$builder.cc:338:Biop$3909  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$3886  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3894 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$3922  = \$auto$builder.cc:338:Biop$3909  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$3921  : \$auto$slang_frontend.cc:694:finish$\idx_o$3893 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$3895  = \$auto$builder.cc:338:Biop$3880  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:2874:Mux$3861 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$3894  = \$auto$builder.cc:338:Biop$3880  & (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$3886 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$3893  = \$auto$builder.cc:338:Biop$3880  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$3892  : \$auto$rtlil.cc:2874:Mux$3865 ;
endmodule

(* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$6111 ;
  wire \$auto$builder.cc:338:Biop$6115 ;
  wire \$auto$builder.cc:338:Biop$6117 ;
  wire \$auto$builder.cc:338:Biop$6119 ;
  wire \$auto$builder.cc:338:Biop$6121 ;
  wire \$auto$builder.cc:338:Biop$6140 ;
  wire \$auto$builder.cc:338:Biop$6144 ;
  wire \$auto$builder.cc:338:Biop$6146 ;
  wire \$auto$builder.cc:338:Biop$6148 ;
  wire \$auto$builder.cc:338:Biop$6150 ;
  wire \$auto$builder.cc:338:Biop$6169 ;
  wire \$auto$builder.cc:338:Biop$6173 ;
  wire \$auto$builder.cc:338:Biop$6175 ;
  wire \$auto$builder.cc:338:Biop$6177 ;
  wire \$auto$builder.cc:338:Biop$6179 ;
  wire \$auto$builder.cc:338:Biop$6198 ;
  wire \$auto$builder.cc:338:Biop$6202 ;
  wire \$auto$builder.cc:338:Biop$6204 ;
  wire \$auto$builder.cc:338:Biop$6206 ;
  wire \$auto$builder.cc:338:Biop$6208 ;
  wire \$auto$builder.cc:364:Unop$6127 ;
  wire \$auto$rtlil.cc:2874:Mux$6102 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6106 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6133 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6162 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6191 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6220 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6136 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6165 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6194 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6135 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6164 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6193 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6134 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6163 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6192 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$builder.cc:338:Biop$6111  = addr_i >= addr_map_i[63:32];
  assign \$auto$builder.cc:338:Biop$6115  = addr_i < addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$6117  = ! addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$6119  = \$auto$builder.cc:338:Biop$6115  || \$auto$builder.cc:338:Biop$6117 ;
  assign \$auto$builder.cc:338:Biop$6121  = \$auto$builder.cc:338:Biop$6111  && \$auto$builder.cc:338:Biop$6119 ;
  assign \$auto$builder.cc:338:Biop$6140  = addr_i >= addr_map_i[159:128];
  assign \$auto$builder.cc:338:Biop$6144  = addr_i < addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$6146  = ! addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$6148  = \$auto$builder.cc:338:Biop$6144  || \$auto$builder.cc:338:Biop$6146 ;
  assign \$auto$builder.cc:338:Biop$6150  = \$auto$builder.cc:338:Biop$6140  && \$auto$builder.cc:338:Biop$6148 ;
  assign \$auto$builder.cc:338:Biop$6169  = addr_i >= addr_map_i[255:224];
  assign \$auto$builder.cc:338:Biop$6173  = addr_i < addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$6175  = ! addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$6177  = \$auto$builder.cc:338:Biop$6173  || \$auto$builder.cc:338:Biop$6175 ;
  assign \$auto$builder.cc:338:Biop$6179  = \$auto$builder.cc:338:Biop$6169  && \$auto$builder.cc:338:Biop$6177 ;
  assign \$auto$builder.cc:338:Biop$6198  = addr_i >= addr_map_i[351:320];
  assign \$auto$builder.cc:338:Biop$6202  = addr_i < addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$6204  = ! addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$6206  = \$auto$builder.cc:338:Biop$6202  || \$auto$builder.cc:338:Biop$6204 ;
  assign \$auto$builder.cc:338:Biop$6208  = \$auto$builder.cc:338:Biop$6198  && \$auto$builder.cc:338:Biop$6206 ;
  assign \$auto$builder.cc:364:Unop$6127  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:2874:Mux$6102  = ~ en_default_idx_i;
  assign \$auto$rtlil.cc:2874:Mux$6106  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:2874:Mux$6133  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$auto$rtlil.cc:2874:Mux$6162  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$auto$rtlil.cc:2874:Mux$6191  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$auto$rtlil.cc:2874:Mux$6220  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign dec_error_o = \$auto$builder.cc:338:Biop$6208  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6194 ;
  assign dec_valid_o = \$auto$builder.cc:338:Biop$6208  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6127  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6193 ;
  assign idx_o = \$auto$builder.cc:338:Biop$6208  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6220  : \$auto$slang_frontend.cc:694:finish$\idx_o$6192 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6194  = \$auto$builder.cc:338:Biop$6179  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6165 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6193  = \$auto$builder.cc:338:Biop$6179  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6127  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6164 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6192  = \$auto$builder.cc:338:Biop$6179  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6191  : \$auto$slang_frontend.cc:694:finish$\idx_o$6163 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6165  = \$auto$builder.cc:338:Biop$6150  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6136 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6164  = \$auto$builder.cc:338:Biop$6150  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6127  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6135 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6163  = \$auto$builder.cc:338:Biop$6150  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6162  : \$auto$slang_frontend.cc:694:finish$\idx_o$6134 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6136  = \$auto$builder.cc:338:Biop$6121  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:2874:Mux$6102 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6135  = \$auto$builder.cc:338:Biop$6121  & (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6127 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6134  = \$auto$builder.cc:338:Biop$6121  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6133  : \$auto$rtlil.cc:2874:Mux$6106 ;
endmodule

(* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$6260 ;
  wire \$auto$builder.cc:338:Biop$6264 ;
  wire \$auto$builder.cc:338:Biop$6266 ;
  wire \$auto$builder.cc:338:Biop$6268 ;
  wire \$auto$builder.cc:338:Biop$6270 ;
  wire \$auto$builder.cc:338:Biop$6289 ;
  wire \$auto$builder.cc:338:Biop$6293 ;
  wire \$auto$builder.cc:338:Biop$6295 ;
  wire \$auto$builder.cc:338:Biop$6297 ;
  wire \$auto$builder.cc:338:Biop$6299 ;
  wire \$auto$builder.cc:338:Biop$6318 ;
  wire \$auto$builder.cc:338:Biop$6322 ;
  wire \$auto$builder.cc:338:Biop$6324 ;
  wire \$auto$builder.cc:338:Biop$6326 ;
  wire \$auto$builder.cc:338:Biop$6328 ;
  wire \$auto$builder.cc:338:Biop$6347 ;
  wire \$auto$builder.cc:338:Biop$6351 ;
  wire \$auto$builder.cc:338:Biop$6353 ;
  wire \$auto$builder.cc:338:Biop$6355 ;
  wire \$auto$builder.cc:338:Biop$6357 ;
  wire \$auto$builder.cc:364:Unop$6276 ;
  wire \$auto$rtlil.cc:2874:Mux$6251 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6255 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6282 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6311 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6340 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6369 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6285 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6314 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6343 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6284 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6313 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6342 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6283 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6312 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6341 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$builder.cc:338:Biop$6260  = addr_i >= addr_map_i[63:32];
  assign \$auto$builder.cc:338:Biop$6264  = addr_i < addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$6266  = ! addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$6268  = \$auto$builder.cc:338:Biop$6264  || \$auto$builder.cc:338:Biop$6266 ;
  assign \$auto$builder.cc:338:Biop$6270  = \$auto$builder.cc:338:Biop$6260  && \$auto$builder.cc:338:Biop$6268 ;
  assign \$auto$builder.cc:338:Biop$6289  = addr_i >= addr_map_i[159:128];
  assign \$auto$builder.cc:338:Biop$6293  = addr_i < addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$6295  = ! addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$6297  = \$auto$builder.cc:338:Biop$6293  || \$auto$builder.cc:338:Biop$6295 ;
  assign \$auto$builder.cc:338:Biop$6299  = \$auto$builder.cc:338:Biop$6289  && \$auto$builder.cc:338:Biop$6297 ;
  assign \$auto$builder.cc:338:Biop$6318  = addr_i >= addr_map_i[255:224];
  assign \$auto$builder.cc:338:Biop$6322  = addr_i < addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$6324  = ! addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$6326  = \$auto$builder.cc:338:Biop$6322  || \$auto$builder.cc:338:Biop$6324 ;
  assign \$auto$builder.cc:338:Biop$6328  = \$auto$builder.cc:338:Biop$6318  && \$auto$builder.cc:338:Biop$6326 ;
  assign \$auto$builder.cc:338:Biop$6347  = addr_i >= addr_map_i[351:320];
  assign \$auto$builder.cc:338:Biop$6351  = addr_i < addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$6353  = ! addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$6355  = \$auto$builder.cc:338:Biop$6351  || \$auto$builder.cc:338:Biop$6353 ;
  assign \$auto$builder.cc:338:Biop$6357  = \$auto$builder.cc:338:Biop$6347  && \$auto$builder.cc:338:Biop$6355 ;
  assign \$auto$builder.cc:364:Unop$6276  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:2874:Mux$6251  = ~ en_default_idx_i;
  assign \$auto$rtlil.cc:2874:Mux$6255  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:2874:Mux$6282  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$auto$rtlil.cc:2874:Mux$6311  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$auto$rtlil.cc:2874:Mux$6340  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$auto$rtlil.cc:2874:Mux$6369  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign dec_error_o = \$auto$builder.cc:338:Biop$6357  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6343 ;
  assign dec_valid_o = \$auto$builder.cc:338:Biop$6357  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6276  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6342 ;
  assign idx_o = \$auto$builder.cc:338:Biop$6357  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6369  : \$auto$slang_frontend.cc:694:finish$\idx_o$6341 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6343  = \$auto$builder.cc:338:Biop$6328  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6314 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6342  = \$auto$builder.cc:338:Biop$6328  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6276  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6313 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6341  = \$auto$builder.cc:338:Biop$6328  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6340  : \$auto$slang_frontend.cc:694:finish$\idx_o$6312 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6314  = \$auto$builder.cc:338:Biop$6299  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6285 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6313  = \$auto$builder.cc:338:Biop$6299  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6276  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6284 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6312  = \$auto$builder.cc:338:Biop$6299  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6311  : \$auto$slang_frontend.cc:694:finish$\idx_o$6283 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6285  = \$auto$builder.cc:338:Biop$6270  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:2874:Mux$6251 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6284  = \$auto$builder.cc:338:Biop$6270  & (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6276 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6283  = \$auto$builder.cc:338:Biop$6270  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6282  : \$auto$rtlil.cc:2874:Mux$6255 ;
endmodule

(* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$6409 ;
  wire \$auto$builder.cc:338:Biop$6413 ;
  wire \$auto$builder.cc:338:Biop$6415 ;
  wire \$auto$builder.cc:338:Biop$6417 ;
  wire \$auto$builder.cc:338:Biop$6419 ;
  wire \$auto$builder.cc:338:Biop$6438 ;
  wire \$auto$builder.cc:338:Biop$6442 ;
  wire \$auto$builder.cc:338:Biop$6444 ;
  wire \$auto$builder.cc:338:Biop$6446 ;
  wire \$auto$builder.cc:338:Biop$6448 ;
  wire \$auto$builder.cc:338:Biop$6467 ;
  wire \$auto$builder.cc:338:Biop$6471 ;
  wire \$auto$builder.cc:338:Biop$6473 ;
  wire \$auto$builder.cc:338:Biop$6475 ;
  wire \$auto$builder.cc:338:Biop$6477 ;
  wire \$auto$builder.cc:338:Biop$6496 ;
  wire \$auto$builder.cc:338:Biop$6500 ;
  wire \$auto$builder.cc:338:Biop$6502 ;
  wire \$auto$builder.cc:338:Biop$6504 ;
  wire \$auto$builder.cc:338:Biop$6506 ;
  wire \$auto$builder.cc:364:Unop$6425 ;
  wire \$auto$rtlil.cc:2874:Mux$6400 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6404 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6431 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6460 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6489 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6518 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6434 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6463 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6492 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6433 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6462 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6491 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6432 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6461 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6490 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$builder.cc:338:Biop$6409  = addr_i >= addr_map_i[63:32];
  assign \$auto$builder.cc:338:Biop$6413  = addr_i < addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$6415  = ! addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$6417  = \$auto$builder.cc:338:Biop$6413  || \$auto$builder.cc:338:Biop$6415 ;
  assign \$auto$builder.cc:338:Biop$6419  = \$auto$builder.cc:338:Biop$6409  && \$auto$builder.cc:338:Biop$6417 ;
  assign \$auto$builder.cc:338:Biop$6438  = addr_i >= addr_map_i[159:128];
  assign \$auto$builder.cc:338:Biop$6442  = addr_i < addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$6444  = ! addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$6446  = \$auto$builder.cc:338:Biop$6442  || \$auto$builder.cc:338:Biop$6444 ;
  assign \$auto$builder.cc:338:Biop$6448  = \$auto$builder.cc:338:Biop$6438  && \$auto$builder.cc:338:Biop$6446 ;
  assign \$auto$builder.cc:338:Biop$6467  = addr_i >= addr_map_i[255:224];
  assign \$auto$builder.cc:338:Biop$6471  = addr_i < addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$6473  = ! addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$6475  = \$auto$builder.cc:338:Biop$6471  || \$auto$builder.cc:338:Biop$6473 ;
  assign \$auto$builder.cc:338:Biop$6477  = \$auto$builder.cc:338:Biop$6467  && \$auto$builder.cc:338:Biop$6475 ;
  assign \$auto$builder.cc:338:Biop$6496  = addr_i >= addr_map_i[351:320];
  assign \$auto$builder.cc:338:Biop$6500  = addr_i < addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$6502  = ! addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$6504  = \$auto$builder.cc:338:Biop$6500  || \$auto$builder.cc:338:Biop$6502 ;
  assign \$auto$builder.cc:338:Biop$6506  = \$auto$builder.cc:338:Biop$6496  && \$auto$builder.cc:338:Biop$6504 ;
  assign \$auto$builder.cc:364:Unop$6425  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:2874:Mux$6400  = ~ en_default_idx_i;
  assign \$auto$rtlil.cc:2874:Mux$6404  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:2874:Mux$6431  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$auto$rtlil.cc:2874:Mux$6460  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$auto$rtlil.cc:2874:Mux$6489  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$auto$rtlil.cc:2874:Mux$6518  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign dec_error_o = \$auto$builder.cc:338:Biop$6506  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6492 ;
  assign dec_valid_o = \$auto$builder.cc:338:Biop$6506  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6425  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6491 ;
  assign idx_o = \$auto$builder.cc:338:Biop$6506  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6518  : \$auto$slang_frontend.cc:694:finish$\idx_o$6490 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6492  = \$auto$builder.cc:338:Biop$6477  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6463 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6491  = \$auto$builder.cc:338:Biop$6477  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6425  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6462 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6490  = \$auto$builder.cc:338:Biop$6477  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6489  : \$auto$slang_frontend.cc:694:finish$\idx_o$6461 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6463  = \$auto$builder.cc:338:Biop$6448  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6434 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6462  = \$auto$builder.cc:338:Biop$6448  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6425  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6433 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6461  = \$auto$builder.cc:338:Biop$6448  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6460  : \$auto$slang_frontend.cc:694:finish$\idx_o$6432 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6434  = \$auto$builder.cc:338:Biop$6419  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:2874:Mux$6400 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6433  = \$auto$builder.cc:338:Biop$6419  & (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6425 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6432  = \$auto$builder.cc:338:Biop$6419  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6431  : \$auto$rtlil.cc:2874:Mux$6404 ;
endmodule

(* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  wire \$auto$builder.cc:338:Biop$6558 ;
  wire \$auto$builder.cc:338:Biop$6562 ;
  wire \$auto$builder.cc:338:Biop$6564 ;
  wire \$auto$builder.cc:338:Biop$6566 ;
  wire \$auto$builder.cc:338:Biop$6568 ;
  wire \$auto$builder.cc:338:Biop$6587 ;
  wire \$auto$builder.cc:338:Biop$6591 ;
  wire \$auto$builder.cc:338:Biop$6593 ;
  wire \$auto$builder.cc:338:Biop$6595 ;
  wire \$auto$builder.cc:338:Biop$6597 ;
  wire \$auto$builder.cc:338:Biop$6616 ;
  wire \$auto$builder.cc:338:Biop$6620 ;
  wire \$auto$builder.cc:338:Biop$6622 ;
  wire \$auto$builder.cc:338:Biop$6624 ;
  wire \$auto$builder.cc:338:Biop$6626 ;
  wire \$auto$builder.cc:338:Biop$6645 ;
  wire \$auto$builder.cc:338:Biop$6649 ;
  wire \$auto$builder.cc:338:Biop$6651 ;
  wire \$auto$builder.cc:338:Biop$6653 ;
  wire \$auto$builder.cc:338:Biop$6655 ;
  wire \$auto$builder.cc:364:Unop$6574 ;
  wire \$auto$rtlil.cc:2874:Mux$6549 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6553 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6580 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6609 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6638 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$6667 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6583 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6612 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_error_o$6641 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6582 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6611 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6640 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6581 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6610 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\idx_o$6639 ;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input [2:0] default_idx_i;
  wire [2:0] default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output [2:0] idx_o;
  wire [2:0] idx_o;
  assign \$auto$builder.cc:338:Biop$6558  = addr_i >= addr_map_i[63:32];
  assign \$auto$builder.cc:338:Biop$6562  = addr_i < addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$6564  = ! addr_map_i[31:0];
  assign \$auto$builder.cc:338:Biop$6566  = \$auto$builder.cc:338:Biop$6562  || \$auto$builder.cc:338:Biop$6564 ;
  assign \$auto$builder.cc:338:Biop$6568  = \$auto$builder.cc:338:Biop$6558  && \$auto$builder.cc:338:Biop$6566 ;
  assign \$auto$builder.cc:338:Biop$6587  = addr_i >= addr_map_i[159:128];
  assign \$auto$builder.cc:338:Biop$6591  = addr_i < addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$6593  = ! addr_map_i[127:96];
  assign \$auto$builder.cc:338:Biop$6595  = \$auto$builder.cc:338:Biop$6591  || \$auto$builder.cc:338:Biop$6593 ;
  assign \$auto$builder.cc:338:Biop$6597  = \$auto$builder.cc:338:Biop$6587  && \$auto$builder.cc:338:Biop$6595 ;
  assign \$auto$builder.cc:338:Biop$6616  = addr_i >= addr_map_i[255:224];
  assign \$auto$builder.cc:338:Biop$6620  = addr_i < addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$6622  = ! addr_map_i[223:192];
  assign \$auto$builder.cc:338:Biop$6624  = \$auto$builder.cc:338:Biop$6620  || \$auto$builder.cc:338:Biop$6622 ;
  assign \$auto$builder.cc:338:Biop$6626  = \$auto$builder.cc:338:Biop$6616  && \$auto$builder.cc:338:Biop$6624 ;
  assign \$auto$builder.cc:338:Biop$6645  = addr_i >= addr_map_i[351:320];
  assign \$auto$builder.cc:338:Biop$6649  = addr_i < addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$6651  = ! addr_map_i[319:288];
  assign \$auto$builder.cc:338:Biop$6653  = \$auto$builder.cc:338:Biop$6649  || \$auto$builder.cc:338:Biop$6651 ;
  assign \$auto$builder.cc:338:Biop$6655  = \$auto$builder.cc:338:Biop$6645  && \$auto$builder.cc:338:Biop$6653 ;
  assign \$auto$builder.cc:364:Unop$6574  = ~ config_ongoing_i;
  assign \$auto$rtlil.cc:2874:Mux$6549  = ~ en_default_idx_i;
  assign \$auto$rtlil.cc:2874:Mux$6553  = en_default_idx_i ? default_idx_i : 3'h0;
  assign \$auto$rtlil.cc:2874:Mux$6580  = config_ongoing_i ? default_idx_i : addr_map_i[66:64];
  assign \$auto$rtlil.cc:2874:Mux$6609  = config_ongoing_i ? default_idx_i : addr_map_i[162:160];
  assign \$auto$rtlil.cc:2874:Mux$6638  = config_ongoing_i ? default_idx_i : addr_map_i[258:256];
  assign \$auto$rtlil.cc:2874:Mux$6667  = config_ongoing_i ? default_idx_i : addr_map_i[354:352];
  assign dec_error_o = \$auto$builder.cc:338:Biop$6655  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6641 ;
  assign dec_valid_o = \$auto$builder.cc:338:Biop$6655  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6574  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6640 ;
  assign idx_o = \$auto$builder.cc:338:Biop$6655  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6667  : \$auto$slang_frontend.cc:694:finish$\idx_o$6639 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6641  = \$auto$builder.cc:338:Biop$6626  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6612 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6640  = \$auto$builder.cc:338:Biop$6626  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6574  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6611 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6639  = \$auto$builder.cc:338:Biop$6626  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6638  : \$auto$slang_frontend.cc:694:finish$\idx_o$6610 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6612  = \$auto$builder.cc:338:Biop$6597  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\dec_error_o$6583 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6611  = \$auto$builder.cc:338:Biop$6597  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6574  : \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6582 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6610  = \$auto$builder.cc:338:Biop$6597  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6609  : \$auto$slang_frontend.cc:694:finish$\idx_o$6581 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_error_o$6583  = \$auto$builder.cc:338:Biop$6568  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) 1'h0 : \$auto$rtlil.cc:2874:Mux$6549 ;
  assign \$auto$slang_frontend.cc:694:finish$\dec_valid_o$6582  = \$auto$builder.cc:338:Biop$6568  & (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$builder.cc:364:Unop$6574 ;
  assign \$auto$slang_frontend.cc:694:finish$\idx_o$6581  = \$auto$builder.cc:338:Biop$6568  ? (* src = "../rtl/common_cells/addr_decode_dync.sv:117.9-122.10|../rtl/common_cells/addr_decode_dync.sv:112.7-122.10" *) \$auto$rtlil.cc:2874:Mux$6580  : \$auto$rtlil.cc:2874:Mux$6553 ;
endmodule

(* src = "../rtl/common_cells/addr_decode_dync.sv:40.8" *)
module \addr_decode_dync$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs.i_addr_decode_dync (addr_map_i, en_default_idx_i, default_idx_i, addr_i, idx_o, dec_valid_o, dec_error_o, config_ongoing_i);
  (* src = "../rtl/common_cells/addr_decode_dync.sv:77.31" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:79.31" *)
  input [191:0] addr_map_i;
  wire [191:0] addr_map_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:98.31" *)
  input config_ongoing_i;
  wire config_ongoing_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:85.31" *)
  output dec_error_o;
  wire dec_error_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:83.31" *)
  output dec_valid_o;
  wire dec_valid_o;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:95.31" *)
  input default_idx_i;
  wire default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:89.31" *)
  input en_default_idx_i;
  wire en_default_idx_i;
  (* src = "../rtl/common_cells/addr_decode_dync.sv:81.31" *)
  output idx_o;
  wire idx_o;
  assign dec_error_o = ~ en_default_idx_i;
  assign idx_o = en_default_idx_i & default_idx_i;
  assign dec_valid_o = 1'h0;
endmodule

(* src = "../rtl/apb_uart/apb_uart.sv:35.8" *)
module \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart (CLK, RSTN, PSEL, PENABLE, PWRITE, PADDR, PWDATA, PRDATA, PREADY, PSLVERR, INT, OUT1N, OUT2N, RTSN, DTRN, CTSN, DSRN, DCDN, RIN, SIN, SOUT
);
  wire \$auto$builder.cc:338:Biop$4227 ;
  wire \$auto$builder.cc:338:Biop$4243 ;
  wire \$auto$builder.cc:338:Biop$4259 ;
  wire \$auto$builder.cc:338:Biop$4261 ;
  wire \$auto$builder.cc:338:Biop$4263 ;
  wire \$auto$builder.cc:338:Biop$4275 ;
  wire \$auto$builder.cc:338:Biop$4301 ;
  wire \$auto$builder.cc:338:Biop$4303 ;
  wire \$auto$builder.cc:338:Biop$4329 ;
  wire \$auto$builder.cc:338:Biop$4349 ;
  wire \$auto$builder.cc:338:Biop$4359 ;
  wire \$auto$builder.cc:338:Biop$4369 ;
  wire \$auto$builder.cc:338:Biop$4379 ;
  wire \$auto$builder.cc:338:Biop$4389 ;
  wire \$auto$builder.cc:338:Biop$4425 ;
  wire \$auto$builder.cc:338:Biop$4431 ;
  wire \$auto$builder.cc:338:Biop$4435 ;
  wire \$auto$builder.cc:338:Biop$4437 ;
  wire \$auto$builder.cc:338:Biop$4443 ;
  wire \$auto$builder.cc:338:Biop$4445 ;
  wire \$auto$builder.cc:338:Biop$4449 ;
  wire \$auto$builder.cc:338:Biop$4455 ;
  wire \$auto$builder.cc:338:Biop$4459 ;
  wire \$auto$builder.cc:338:Biop$4465 ;
  wire \$auto$builder.cc:338:Biop$4484 ;
  wire \$auto$builder.cc:338:Biop$4488 ;
  wire \$auto$builder.cc:338:Biop$4492 ;
  wire \$auto$builder.cc:338:Biop$4496 ;
  wire \$auto$builder.cc:338:Biop$4498 ;
  wire \$auto$builder.cc:338:Biop$4500 ;
  wire [5:0] \$auto$builder.cc:338:Biop$4504 ;
  wire \$auto$builder.cc:338:Biop$4541 ;
  wire \$auto$builder.cc:338:Biop$4543 ;
  wire \$auto$builder.cc:338:Biop$4547 ;
  wire \$auto$builder.cc:338:Biop$4549 ;
  wire \$auto$builder.cc:338:Biop$4551 ;
  wire \$auto$builder.cc:338:Biop$4564 ;
  wire \$auto$builder.cc:338:Biop$4572 ;
  wire \$auto$builder.cc:338:Biop$4610 ;
  wire \$auto$builder.cc:338:Biop$4616 ;
  wire \$auto$builder.cc:338:Biop$4620 ;
  wire \$auto$builder.cc:338:Biop$4622 ;
  wire \$auto$builder.cc:338:Biop$4662 ;
  wire \$auto$builder.cc:338:Biop$4668 ;
  wire \$auto$builder.cc:338:Biop$4670 ;
  wire \$auto$builder.cc:338:Biop$4682 ;
  wire \$auto$builder.cc:338:Biop$4684 ;
  wire \$auto$builder.cc:338:Biop$4690 ;
  wire \$auto$builder.cc:338:Biop$4694 ;
  wire \$auto$builder.cc:338:Biop$4735 ;
  wire \$auto$builder.cc:338:Biop$4747 ;
  wire \$auto$builder.cc:338:Biop$4753 ;
  wire \$auto$builder.cc:338:Biop$4757 ;
  wire \$auto$builder.cc:338:Biop$4783 ;
  wire \$auto$builder.cc:338:Biop$4797 ;
  wire \$auto$builder.cc:338:Biop$4799 ;
  wire \$auto$builder.cc:338:Biop$4801 ;
  wire \$auto$builder.cc:338:Biop$4803 ;
  wire \$auto$builder.cc:338:Biop$4815 ;
  wire \$auto$builder.cc:338:Biop$4819 ;
  wire \$auto$builder.cc:338:Biop$4821 ;
  wire \$auto$builder.cc:338:Biop$4833 ;
  wire \$auto$builder.cc:338:Biop$4837 ;
  wire \$auto$builder.cc:338:Biop$4839 ;
  wire \$auto$builder.cc:338:Biop$4851 ;
  wire \$auto$builder.cc:338:Biop$4855 ;
  wire \$auto$builder.cc:338:Biop$4857 ;
  wire \$auto$builder.cc:338:Biop$4872 ;
  wire \$auto$builder.cc:338:Biop$4886 ;
  wire \$auto$builder.cc:338:Biop$4910 ;
  wire \$auto$builder.cc:338:Biop$4938 ;
  wire \$auto$builder.cc:338:Biop$4942 ;
  wire \$auto$builder.cc:338:Biop$4944 ;
  wire \$auto$builder.cc:338:Biop$4946 ;
  wire \$auto$builder.cc:338:Biop$4974 ;
  wire \$auto$builder.cc:338:Biop$4978 ;
  wire \$auto$builder.cc:338:Biop$4980 ;
  wire \$auto$builder.cc:338:Biop$4986 ;
  wire \$auto$builder.cc:338:Biop$4988 ;
  wire \$auto$builder.cc:338:Biop$4990 ;
  wire \$auto$builder.cc:338:Biop$4992 ;
  wire \$auto$builder.cc:338:Biop$4996 ;
  wire \$auto$builder.cc:338:Biop$4998 ;
  wire \$auto$builder.cc:338:Biop$5000 ;
  wire \$auto$builder.cc:338:Biop$5004 ;
  wire \$auto$builder.cc:338:Biop$5008 ;
  wire \$auto$builder.cc:338:Biop$5012 ;
  wire \$auto$builder.cc:338:Biop$5014 ;
  wire \$auto$builder.cc:338:Biop$5036 ;
  wire \$auto$builder.cc:338:Biop$5038 ;
  wire \$auto$builder.cc:338:Biop$5040 ;
  wire \$auto$builder.cc:338:Biop$5046 ;
  wire \$auto$builder.cc:338:Biop$5048 ;
  wire \$auto$builder.cc:338:Biop$5054 ;
  wire \$auto$builder.cc:338:Biop$5058 ;
  wire \$auto$builder.cc:338:Biop$5062 ;
  wire \$auto$builder.cc:338:Biop$5064 ;
  wire \$auto$builder.cc:338:Biop$5086 ;
  wire \$auto$builder.cc:338:Biop$5088 ;
  wire \$auto$builder.cc:338:Biop$5094 ;
  wire \$auto$builder.cc:338:Biop$5096 ;
  wire \$auto$builder.cc:338:Biop$5155 ;
  wire \$auto$builder.cc:338:Biop$5161 ;
  wire \$auto$builder.cc:338:Biop$5163 ;
  wire \$auto$builder.cc:338:Biop$5175 ;
  wire \$auto$builder.cc:338:Biop$5177 ;
  wire \$auto$builder.cc:338:Biop$5179 ;
  wire \$auto$builder.cc:338:Biop$5195 ;
  wire \$auto$builder.cc:338:Biop$5197 ;
  wire \$auto$builder.cc:338:Biop$5204 ;
  wire \$auto$builder.cc:338:Biop$5206 ;
  wire \$auto$builder.cc:338:Biop$5213 ;
  wire \$auto$builder.cc:338:Biop$5215 ;
  wire \$auto$builder.cc:338:Biop$5222 ;
  wire \$auto$builder.cc:338:Biop$5224 ;
  wire \$auto$builder.cc:338:Biop$5233 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17443 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17458 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17450 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17463 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17115 ;
  wire [6:0] \$auto$opt_share.cc:222:merge_operators$18114 ;
  wire \$auto$rtlil.cc:2739:Not$17449 ;
  wire [6:0] \$auto$rtlil.cc:2874:Mux$18116 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:883.13-890.18" *)
  wire [7:0] \$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5242 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:895.13-902.18" *)
  wire [7:0] \$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5247 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:847.8-850.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iBAUDOUTN$5191 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:344.18-347.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4519 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:340.13-347.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4520 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:338.8-352.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4521 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:370.8-389.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iFCR_RXFIFOReset$4577 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:370.8-389.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iFCR_TXFIFOReset$4578 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:495.8-509.13" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iFECounter$4701 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:483.13-486.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_BI$4659 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:479.8-486.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_BI$4660 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:475.13-478.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_FE$4649 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:471.8-478.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_FE$4650 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:491.13-494.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4673 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:487.8-494.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4674 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:459.13-462.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_OE$4629 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:455.8-462.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_OE$4630 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:467.13-470.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_PE$4639 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:463.8-470.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iLSR_PE$4640 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:591.13-594.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4903 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:587.8-594.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4904 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:575.13-578.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4879 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:571.8-578.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4880 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:599.13-602.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4917 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:595.8-602.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4918 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:583.13-586.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4893 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:579.8-586.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4894 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:823.13-826.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iRTS$5182 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:819.8-826.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iRTS$5183 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:793.27-794.50" *)
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5133 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:790.22-798.43" *)
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5134 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:787.13-809.21" *)
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5147 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:804.27-805.45" *)
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5145 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:802.22-805.45" *)
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5146 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:787.13-809.21" *)
  wire \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5148 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:303.13-306.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4452 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:299.8-306.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4453 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\iTXStart$5119 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:329.8-337.13" *)
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\iTimeoutCount$4506 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:787.13-809.21" *)
  wire \$auto$slang_frontend.cc:694:finish$\rx_State$5150 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\tx_State$5121 ;
  wire \$procmux$14471_CMP ;
  (* src = "../rtl/apb_uart/apb_uart.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/apb_uart.sv:51.14" *)
  input CTSN;
  wire CTSN;
  (* src = "../rtl/apb_uart/apb_uart.sv:53.14" *)
  input DCDN;
  wire DCDN;
  (* src = "../rtl/apb_uart/apb_uart.sv:52.14" *)
  input DSRN;
  wire DSRN;
  (* src = "../rtl/apb_uart/apb_uart.sv:50.16" *)
  output DTRN;
  reg DTRN;
  (* src = "../rtl/apb_uart/apb_uart.sv:46.16" *)
  output INT;
  wire INT;
  (* src = "../rtl/apb_uart/apb_uart.sv:47.16" *)
  output OUT1N;
  reg OUT1N;
  (* src = "../rtl/apb_uart/apb_uart.sv:48.16" *)
  output OUT2N;
  reg OUT2N;
  (* src = "../rtl/apb_uart/apb_uart.sv:41.20" *)
  input [2:0] PADDR;
  wire [2:0] PADDR;
  (* src = "../rtl/apb_uart/apb_uart.sv:39.14" *)
  input PENABLE;
  wire PENABLE;
  (* src = "../rtl/apb_uart/apb_uart.sv:43.23" *)
  output [31:0] PRDATA;
  wire [31:0] PRDATA;
  (* src = "../rtl/apb_uart/apb_uart.sv:44.16" *)
  output PREADY;
  wire PREADY;
  (* src = "../rtl/apb_uart/apb_uart.sv:38.14" *)
  input PSEL;
  wire PSEL;
  (* src = "../rtl/apb_uart/apb_uart.sv:45.16" *)
  output PSLVERR;
  wire PSLVERR;
  (* src = "../rtl/apb_uart/apb_uart.sv:42.21" *)
  input [31:0] PWDATA;
  wire [31:0] PWDATA;
  (* src = "../rtl/apb_uart/apb_uart.sv:40.14" *)
  input PWRITE;
  wire PWRITE;
  (* src = "../rtl/apb_uart/apb_uart.sv:54.14" *)
  input RIN;
  wire RIN;
  (* src = "../rtl/apb_uart/apb_uart.sv:37.14" *)
  input RSTN;
  wire RSTN;
  (* src = "../rtl/apb_uart/apb_uart.sv:49.16" *)
  output RTSN;
  reg RTSN;
  (* src = "../rtl/apb_uart/apb_uart.sv:55.14" *)
  input SIN;
  wire SIN;
  (* src = "../rtl/apb_uart/apb_uart.sv:56.16" *)
  output SOUT;
  reg SOUT;
  (* src = "../rtl/apb_uart/apb_uart.sv:157.5" *)
  reg iBAUDOUTN;
  (* src = "../rtl/apb_uart/apb_uart.sv:198.5" *)
  wire iBIRE;
  (* src = "../rtl/apb_uart/apb_uart.sv:154.5" *)
  wire iBaudtick16x;
  (* src = "../rtl/apb_uart/apb_uart.sv:155.5" *)
  wire iBaudtick2x;
  (* src = "../rtl/apb_uart/apb_uart.sv:137.5" *)
  wire iCTSNs;
  (* src = "../rtl/apb_uart/apb_uart.sv:141.5" *)
  wire iCTSn;
  (* src = "../rtl/apb_uart/apb_uart.sv:146.5" *)
  wire iCTSnFE;
  (* src = "../rtl/apb_uart/apb_uart.sv:145.5" *)
  wire iCTSnRE;
  (* src = "../rtl/apb_uart/apb_uart.sv:204.5" *)
  reg iCharTimeout;
  (* src = "../rtl/apb_uart/apb_uart.sv:139.5" *)
  wire iDCDNs;
  (* src = "../rtl/apb_uart/apb_uart.sv:143.5" *)
  wire iDCDn;
  (* src = "../rtl/apb_uart/apb_uart.sv:150.5" *)
  wire iDCDnFE;
  (* src = "../rtl/apb_uart/apb_uart.sv:149.5" *)
  wire iDCDnRE;
  (* src = "../rtl/apb_uart/apb_uart.sv:83.11" *)
  reg [7:0] iDLL;
  (* src = "../rtl/apb_uart/apb_uart.sv:71.5" *)
  wire iDLLWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:84.11" *)
  reg [7:0] iDLM;
  (* src = "../rtl/apb_uart/apb_uart.sv:72.5" *)
  wire iDLMWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:138.5" *)
  wire iDSRNs;
  (* src = "../rtl/apb_uart/apb_uart.sv:142.5" *)
  wire iDSRn;
  (* src = "../rtl/apb_uart/apb_uart.sv:148.5" *)
  wire iDSRnFE;
  (* src = "../rtl/apb_uart/apb_uart.sv:147.5" *)
  wire iDSRnRE;
  (* src = "../rtl/apb_uart/apb_uart.sv:75.5" *)
  wire iFCRWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:106.5" *)
  reg iFCR_FIFO64E;
  (* src = "../rtl/apb_uart/apb_uart.sv:102.5" *)
  reg iFCR_FIFOEnable;
  (* src = "../rtl/apb_uart/apb_uart.sv:103.5" *)
  reg iFCR_RXFIFOReset;
  (* src = "../rtl/apb_uart/apb_uart.sv:107.11" *)
  reg [1:0] iFCR_RXTrigger;
  (* src = "../rtl/apb_uart/apb_uart.sv:104.5" *)
  reg iFCR_TXFIFOReset;
  (* src = "../rtl/apb_uart/apb_uart.sv:199.11" *)
  reg [6:0] iFECounter;
  (* src = "../rtl/apb_uart/apb_uart.sv:201.5" *)
  wire iFEDecrement;
  (* src = "../rtl/apb_uart/apb_uart.sv:200.5" *)
  wire iFEIncrement;
  (* src = "../rtl/apb_uart/apb_uart.sv:196.5" *)
  wire iFERE;
  (* src = "../rtl/apb_uart/apb_uart.sv:85.11" *)
  wire [7:0] iIER;
  (* src = "../rtl/apb_uart/apb_uart.sv:73.5" *)
  wire iIERWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:86.11" *)
  wire [7:0] iIIR;
  (* src = "../rtl/apb_uart/apb_uart.sv:74.5" *)
  wire iIIRRead;
  (* src = "../rtl/apb_uart/apb_uart.sv:101.5" *)
  wire iIIR_FIFO64;
  (* src = "../rtl/apb_uart/apb_uart.sv:88.11" *)
  reg [7:0] iLCR;
  (* src = "../rtl/apb_uart/apb_uart.sv:76.5" *)
  wire iLCRWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:90.11" *)
  wire [7:0] iLSR;
  (* src = "../rtl/apb_uart/apb_uart.sv:78.5" *)
  wire iLSRRead;
  (* src = "../rtl/apb_uart/apb_uart.sv:125.5" *)
  reg iLSR_BI;
  (* src = "../rtl/apb_uart/apb_uart.sv:121.5" *)
  wire iLSR_DR;
  (* src = "../rtl/apb_uart/apb_uart.sv:124.5" *)
  reg iLSR_FE;
  (* src = "../rtl/apb_uart/apb_uart.sv:128.5" *)
  reg iLSR_FIFOERR;
  (* src = "../rtl/apb_uart/apb_uart.sv:122.5" *)
  reg iLSR_OE;
  (* src = "../rtl/apb_uart/apb_uart.sv:123.5" *)
  reg iLSR_PE;
  (* src = "../rtl/apb_uart/apb_uart.sv:127.5" *)
  wire iLSR_TEMT;
  (* src = "../rtl/apb_uart/apb_uart.sv:126.5" *)
  wire iLSR_THRE;
  (* src = "../rtl/apb_uart/apb_uart.sv:205.5" *)
  wire iLSR_THRERE;
  (* src = "../rtl/apb_uart/apb_uart.sv:89.11" *)
  wire [7:0] iMCR;
  (* src = "../rtl/apb_uart/apb_uart.sv:77.5" *)
  wire iMCRWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:79.5" *)
  wire iMSRRead;
  (* src = "../rtl/apb_uart/apb_uart.sv:133.5" *)
  wire iMSR_CTS;
  (* src = "../rtl/apb_uart/apb_uart.sv:136.5" *)
  wire iMSR_DCD;
  (* src = "../rtl/apb_uart/apb_uart.sv:134.5" *)
  wire iMSR_DSR;
  (* src = "../rtl/apb_uart/apb_uart.sv:135.5" *)
  wire iMSR_RI;
  (* src = "../rtl/apb_uart/apb_uart.sv:131.5" *)
  reg iMSR_TERI;
  (* src = "../rtl/apb_uart/apb_uart.sv:129.5" *)
  reg iMSR_dCTS;
  (* src = "../rtl/apb_uart/apb_uart.sv:132.5" *)
  reg iMSR_dDCD;
  (* src = "../rtl/apb_uart/apb_uart.sv:130.5" *)
  reg iMSR_dDSR;
  (* src = "../rtl/apb_uart/apb_uart.sv:197.5" *)
  wire iPERE;
  (* src = "../rtl/apb_uart/apb_uart.sv:69.5" *)
  wire iRBRRead;
  (* src = "../rtl/apb_uart/apb_uart.sv:156.5" *)
  wire iRCLK;
  (* src = "../rtl/apb_uart/apb_uart.sv:202.5" *)
  wire iRDAInterrupt;
  (* src = "../rtl/apb_uart/apb_uart.sv:140.5" *)
  wire iRINs;
  (* src = "../rtl/apb_uart/apb_uart.sv:144.5" *)
  wire iRIn;
  (* src = "../rtl/apb_uart/apb_uart.sv:152.5" *)
  wire iRInFE;
  (* src = "../rtl/apb_uart/apb_uart.sv:151.5" *)
  (* unused_bits = "0" *)
  wire iRInRE;
  (* src = "../rtl/apb_uart/apb_uart.sv:68.5" *)
  wire iRST;
  (* src = "../rtl/apb_uart/apb_uart.sv:208.5" *)
  reg iRTS;
  (* src = "../rtl/apb_uart/apb_uart.sv:195.5" *)
  wire iRXBI;
  (* src = "../rtl/apb_uart/apb_uart.sv:192.11" *)
  wire [7:0] iRXData;
  (* src = "../rtl/apb_uart/apb_uart.sv:194.5" *)
  wire iRXFE;
  (* src = "../rtl/apb_uart/apb_uart.sv:178.5" *)
  wire iRXFIFO16Trigger;
  (* src = "../rtl/apb_uart/apb_uart.sv:173.5" *)
  wire iRXFIFO64Full;
  (* src = "../rtl/apb_uart/apb_uart.sv:179.5" *)
  wire iRXFIFO64Trigger;
  (* src = "../rtl/apb_uart/apb_uart.sv:182.5" *)
  wire iRXFIFOBI;
  (* src = "../rtl/apb_uart/apb_uart.sv:167.5" *)
  reg iRXFIFOClear;
  (* src = "../rtl/apb_uart/apb_uart.sv:174.12" *)
  reg [10:0] iRXFIFOD;
  (* src = "../rtl/apb_uart/apb_uart.sv:170.5" *)
  wire iRXFIFOEmpty;
  (* src = "../rtl/apb_uart/apb_uart.sv:181.5" *)
  wire iRXFIFOFE;
  (* src = "../rtl/apb_uart/apb_uart.sv:171.5" *)
  wire iRXFIFOFull;
  (* src = "../rtl/apb_uart/apb_uart.sv:180.5" *)
  wire iRXFIFOPE;
  (* src = "../rtl/apb_uart/apb_uart.sv:175.12" *)
  wire [10:0] iRXFIFOQ;
  (* src = "../rtl/apb_uart/apb_uart.sv:177.5" *)
  wire iRXFIFOTrigger;
  (* src = "../rtl/apb_uart/apb_uart.sv:176.11" *)
  (* unused_bits = "0" *)
  wire [5:0] iRXFIFOUsage;
  (* src = "../rtl/apb_uart/apb_uart.sv:168.5" *)
  reg iRXFIFOWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:190.5" *)
  wire iRXFinished;
  (* src = "../rtl/apb_uart/apb_uart.sv:193.5" *)
  wire iRXPE;
  (* src = "../rtl/apb_uart/apb_uart.sv:67.5" *)
  wire iRead;
  (* src = "../rtl/apb_uart/apb_uart.sv:92.11" *)
  reg [7:0] iSCR;
  (* src = "../rtl/apb_uart/apb_uart.sv:80.5" *)
  wire iSCRWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:189.5" *)
  wire iSIN;
  (* src = "../rtl/apb_uart/apb_uart.sv:188.5" *)
  wire iSINr;
  (* src = "../rtl/apb_uart/apb_uart.sv:183.5" *)
  wire iSOUT;
  (* src = "../rtl/apb_uart/apb_uart.sv:206.5" *)
  reg iTHRInterrupt;
  (* src = "../rtl/apb_uart/apb_uart.sv:70.5" *)
  wire iTHRWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:81.11" *)
  reg [7:0] iTSR;
  (* src = "../rtl/apb_uart/apb_uart.sv:207.5" *)
  wire iTXEnable;
  (* src = "../rtl/apb_uart/apb_uart.sv:164.5" *)
  wire iTXFIFO64Full;
  (* src = "../rtl/apb_uart/apb_uart.sv:162.5" *)
  wire iTXFIFOFull;
  (* src = "../rtl/apb_uart/apb_uart.sv:166.11" *)
  wire [7:0] iTXFIFOQ;
  (* src = "../rtl/apb_uart/apb_uart.sv:160.5" *)
  reg iTXFIFORead;
  (* src = "../rtl/apb_uart/apb_uart.sv:165.11" *)
  (* unused_bits = "0 1 2 3 5" *)
  wire [5:0] iTXFIFOUsage;
  (* src = "../rtl/apb_uart/apb_uart.sv:159.5" *)
  wire iTXFIFOWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:186.5" *)
  wire iTXFinished;
  (* src = "../rtl/apb_uart/apb_uart.sv:187.5" *)
  reg iTXRunning;
  (* src = "../rtl/apb_uart/apb_uart.sv:184.5" *)
  reg iTXStart;
  (* src = "../rtl/apb_uart/apb_uart.sv:203.11" *)
  reg [5:0] iTimeoutCount;
  (* src = "../rtl/apb_uart/apb_uart.sv:66.5" *)
  wire iWrite;
  (* src = "../rtl/apb_uart/apb_uart.sv:720.18" *)
  reg rx_State;
  (* src = "../rtl/apb_uart/apb_uart.sv:721.18" *)
  reg [1:0] tx_State;
  assign \$auto$builder.cc:338:Biop$4227  = PSEL && PENABLE;
  assign iWrite = \$auto$builder.cc:338:Biop$4227  && PWRITE;
  assign \$auto$builder.cc:338:Biop$4243  = ~ PWRITE;
  assign iRead = \$auto$builder.cc:338:Biop$4227  && \$auto$builder.cc:338:Biop$4243 ;
  assign \$auto$builder.cc:338:Biop$4259  = ! PADDR;
  assign \$auto$builder.cc:338:Biop$4261  = iRead && \$auto$builder.cc:338:Biop$4259 ;
  assign \$auto$builder.cc:338:Biop$4263  = ~ iLCR[7];
  assign iRBRRead = \$auto$builder.cc:338:Biop$4261  && \$auto$builder.cc:338:Biop$4263 ;
  assign \$auto$builder.cc:338:Biop$4275  = iWrite && \$auto$builder.cc:338:Biop$4259 ;
  assign iTHRWrite = \$auto$builder.cc:338:Biop$4275  && \$auto$builder.cc:338:Biop$4263 ;
  assign iDLLWrite = \$auto$builder.cc:338:Biop$4275  && iLCR[7];
  assign \$auto$builder.cc:338:Biop$4301  = PADDR == 1'h1;
  assign \$auto$builder.cc:338:Biop$4303  = iWrite && \$auto$builder.cc:338:Biop$4301 ;
  assign iDLMWrite = \$auto$builder.cc:338:Biop$4303  && iLCR[7];
  assign iIERWrite = \$auto$builder.cc:338:Biop$4303  && \$auto$builder.cc:338:Biop$4263 ;
  assign \$auto$builder.cc:338:Biop$4329  = PADDR == 2'h2;
  assign iIIRRead = iRead && \$auto$builder.cc:338:Biop$4329 ;
  assign iFCRWrite = iWrite && \$auto$builder.cc:338:Biop$4329 ;
  assign \$auto$builder.cc:338:Biop$4349  = PADDR == 2'h3;
  assign iLCRWrite = iWrite && \$auto$builder.cc:338:Biop$4349 ;
  assign \$auto$builder.cc:338:Biop$4359  = PADDR == 3'h4;
  assign iMCRWrite = iWrite && \$auto$builder.cc:338:Biop$4359 ;
  assign \$auto$builder.cc:338:Biop$4369  = PADDR == 3'h5;
  assign iLSRRead = iRead && \$auto$builder.cc:338:Biop$4369 ;
  assign \$auto$builder.cc:338:Biop$4379  = PADDR == 3'h6;
  assign iMSRRead = iRead && \$auto$builder.cc:338:Biop$4379 ;
  assign \$auto$builder.cc:338:Biop$4389  = PADDR == 3'h7;
  assign iSCRWrite = iWrite && \$auto$builder.cc:338:Biop$4389 ;
  assign \$auto$builder.cc:338:Biop$4425  = iLSR_THRERE | iFCR_TXFIFOReset;
  assign \$auto$builder.cc:338:Biop$4431  = iIERWrite && PWDATA[1];
  assign \$auto$builder.cc:338:Biop$4435  = \$auto$builder.cc:338:Biop$4431  && iLSR_THRE;
  assign \$auto$builder.cc:338:Biop$4437  = \$auto$builder.cc:338:Biop$4425  | \$auto$builder.cc:338:Biop$4435 ;
  assign \$auto$builder.cc:338:Biop$4443  = iIIR[3:1] == 1'h1;
  assign \$auto$builder.cc:338:Biop$4445  = iIIRRead && \$auto$builder.cc:338:Biop$4443 ;
  assign \$auto$builder.cc:338:Biop$4449  = \$auto$builder.cc:338:Biop$4445  | iTHRWrite;
  assign \$auto$builder.cc:338:Biop$4455  = ~ iFCR_FIFOEnable;
  assign \$auto$builder.cc:338:Biop$4459  = \$auto$builder.cc:338:Biop$4455  && iLSR_DR;
  assign \$auto$builder.cc:338:Biop$4465  = iFCR_FIFOEnable && iRXFIFOTrigger;
  assign iRDAInterrupt = \$auto$builder.cc:338:Biop$4459  | \$auto$builder.cc:338:Biop$4465 ;
  assign \$auto$builder.cc:338:Biop$4484  = iRXFIFOEmpty | iRBRRead;
  assign \$auto$builder.cc:338:Biop$4488  = \$auto$builder.cc:338:Biop$4484  | iRXFIFOWrite;
  assign \$auto$builder.cc:338:Biop$4492  = ~ iRXFIFOEmpty;
  assign \$auto$builder.cc:338:Biop$4496  = \$auto$builder.cc:338:Biop$4492  && iBaudtick2x;
  assign \$auto$builder.cc:338:Biop$4498  = ~ iTimeoutCount[5];
  assign \$auto$builder.cc:338:Biop$4500  = \$auto$builder.cc:338:Biop$4496  && \$auto$builder.cc:338:Biop$4498 ;
  assign \$auto$builder.cc:338:Biop$4504  = iTimeoutCount + 1'h1;
  assign \$auto$builder.cc:338:Biop$4541  = \$auto$builder.cc:338:Biop$4455  && PWDATA[0];
  assign \$auto$builder.cc:338:Biop$4543  = PWDATA[1] | \$auto$builder.cc:338:Biop$4541 ;
  assign \$auto$builder.cc:338:Biop$4547  = ~ PWDATA[0];
  assign \$auto$builder.cc:338:Biop$4549  = iFCR_FIFOEnable && \$auto$builder.cc:338:Biop$4547 ;
  assign \$auto$builder.cc:338:Biop$4551  = \$auto$builder.cc:338:Biop$4543  | \$auto$builder.cc:338:Biop$4549 ;
  assign \$auto$builder.cc:338:Biop$4564  = PWDATA[2] | \$auto$builder.cc:338:Biop$4541 ;
  assign \$auto$builder.cc:338:Biop$4572  = \$auto$builder.cc:338:Biop$4564  | \$auto$builder.cc:338:Biop$4549 ;
  assign \$auto$builder.cc:338:Biop$4610  = \$auto$builder.cc:338:Biop$4459  && iRXFinished;
  assign \$auto$builder.cc:338:Biop$4616  = iFCR_FIFOEnable && iRXFIFOFull;
  assign \$auto$builder.cc:338:Biop$4620  = \$auto$builder.cc:338:Biop$4616  && iRXFinished;
  assign \$auto$builder.cc:338:Biop$4622  = \$auto$builder.cc:338:Biop$4610  | \$auto$builder.cc:338:Biop$4620 ;
  assign \$auto$builder.cc:338:Biop$4662  = | iFECounter;
  assign \$auto$builder.cc:338:Biop$4668  = ! iRXFIFOQ[10:8];
  assign \$auto$builder.cc:338:Biop$4670  = iRXFIFOEmpty | \$auto$builder.cc:338:Biop$4668 ;
  assign \$auto$builder.cc:338:Biop$4682  = ~ iFEDecrement;
  assign \$auto$builder.cc:338:Biop$4684  = iFEIncrement && \$auto$builder.cc:338:Biop$4682 ;
  assign \$auto$opt_share.cc:222:merge_operators$18114  = iFECounter + { \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], 1'h1 };
  assign \$auto$builder.cc:338:Biop$4690  = ~ iFEIncrement;
  assign \$auto$builder.cc:338:Biop$4694  = \$auto$builder.cc:338:Biop$4690  && iFEDecrement;
  assign iRXFIFOPE = \$auto$builder.cc:338:Biop$4492  && iRXFIFOQ[8];
  assign iRXFIFOFE = \$auto$builder.cc:338:Biop$4492  && iRXFIFOQ[9];
  assign iRXFIFOBI = \$auto$builder.cc:338:Biop$4492  && iRXFIFOQ[10];
  assign \$auto$builder.cc:338:Biop$4735  = | iRXFIFOD[10:8];
  assign iFEIncrement = iRXFIFOWrite && \$auto$builder.cc:338:Biop$4735 ;
  assign \$auto$builder.cc:338:Biop$4747  = \$auto$builder.cc:338:Biop$4662  && \$auto$builder.cc:338:Biop$4492 ;
  assign \$auto$builder.cc:338:Biop$4753  = iPERE | iFERE;
  assign \$auto$builder.cc:338:Biop$4757  = \$auto$builder.cc:338:Biop$4753  | iBIRE;
  assign iFEDecrement = \$auto$builder.cc:338:Biop$4747  && \$auto$builder.cc:338:Biop$4757 ;
  assign iLSR[7] = iFCR_FIFOEnable && iLSR_FIFOERR;
  assign iLSR_DR = \$auto$builder.cc:338:Biop$4492  | iRXFIFOWrite;
  assign \$auto$builder.cc:338:Biop$4783  = ~ iTXRunning;
  assign iLSR_TEMT = \$auto$builder.cc:338:Biop$4783  && iLSR_THRE;
  assign \$auto$builder.cc:338:Biop$4797  = iMCR[4] && iRTS;
  assign \$auto$builder.cc:338:Biop$4799  = ~ iMCR[4];
  assign \$auto$builder.cc:338:Biop$4801  = ~ iCTSn;
  assign \$auto$builder.cc:338:Biop$4803  = \$auto$builder.cc:338:Biop$4799  && \$auto$builder.cc:338:Biop$4801 ;
  assign iMSR_CTS = \$auto$builder.cc:338:Biop$4797  | \$auto$builder.cc:338:Biop$4803 ;
  assign \$auto$builder.cc:338:Biop$4815  = iMCR[4] && iMCR[0];
  assign \$auto$builder.cc:338:Biop$4819  = ~ iDSRn;
  assign \$auto$builder.cc:338:Biop$4821  = \$auto$builder.cc:338:Biop$4799  && \$auto$builder.cc:338:Biop$4819 ;
  assign iMSR_DSR = \$auto$builder.cc:338:Biop$4815  | \$auto$builder.cc:338:Biop$4821 ;
  assign \$auto$builder.cc:338:Biop$4833  = iMCR[4] && iMCR[2];
  assign \$auto$builder.cc:338:Biop$4837  = ~ iRIn;
  assign \$auto$builder.cc:338:Biop$4839  = \$auto$builder.cc:338:Biop$4799  && \$auto$builder.cc:338:Biop$4837 ;
  assign iMSR_RI = \$auto$builder.cc:338:Biop$4833  | \$auto$builder.cc:338:Biop$4839 ;
  assign \$auto$builder.cc:338:Biop$4851  = iMCR[4] && iMCR[3];
  assign \$auto$builder.cc:338:Biop$4855  = ~ iDCDn;
  assign \$auto$builder.cc:338:Biop$4857  = \$auto$builder.cc:338:Biop$4799  && \$auto$builder.cc:338:Biop$4855 ;
  assign iMSR_DCD = \$auto$builder.cc:338:Biop$4851  | \$auto$builder.cc:338:Biop$4857 ;
  assign \$auto$builder.cc:338:Biop$4872  = iCTSnRE | iCTSnFE;
  assign \$auto$builder.cc:338:Biop$4886  = iDSRnRE | iDSRnFE;
  assign \$auto$builder.cc:338:Biop$4910  = iDCDnRE | iDCDnFE;
  assign \$auto$builder.cc:338:Biop$4938  = \$auto$builder.cc:338:Biop$4455  && iLSR_THRE;
  assign \$auto$builder.cc:338:Biop$4942  = ~ iTXFIFOFull;
  assign \$auto$builder.cc:338:Biop$4944  = iFCR_FIFOEnable && \$auto$builder.cc:338:Biop$4942 ;
  assign \$auto$builder.cc:338:Biop$4946  = \$auto$builder.cc:338:Biop$4938  | \$auto$builder.cc:338:Biop$4944 ;
  assign iTXFIFOWrite = \$auto$builder.cc:338:Biop$4946  && iTHRWrite;
  assign \$auto$builder.cc:338:Biop$4974  = ! iFCR_RXTrigger;
  assign \$auto$builder.cc:338:Biop$4978  = \$auto$builder.cc:338:Biop$4974  && \$auto$builder.cc:338:Biop$4492 ;
  assign \$auto$builder.cc:338:Biop$4980  = iFCR_RXTrigger == 1'h1;
  assign \$auto$builder.cc:338:Biop$4986  = iRXFIFOUsage[2] | iRXFIFOUsage[3];
  assign \$auto$builder.cc:338:Biop$4988  = \$auto$builder.cc:338:Biop$4980  && \$auto$builder.cc:338:Biop$4986 ;
  assign \$auto$builder.cc:338:Biop$4990  = \$auto$builder.cc:338:Biop$4978  | \$auto$builder.cc:338:Biop$4988 ;
  assign \$auto$builder.cc:338:Biop$4992  = iFCR_RXTrigger == 2'h2;
  assign \$auto$builder.cc:338:Biop$4996  = \$auto$builder.cc:338:Biop$4992  && iRXFIFOUsage[3];
  assign \$auto$builder.cc:338:Biop$4998  = \$auto$builder.cc:338:Biop$4990  | \$auto$builder.cc:338:Biop$4996 ;
  assign \$auto$builder.cc:338:Biop$5000  = iFCR_RXTrigger == 2'h3;
  assign \$auto$builder.cc:338:Biop$5004  = \$auto$builder.cc:338:Biop$5000  && iRXFIFOUsage[3];
  assign \$auto$builder.cc:338:Biop$5008  = \$auto$builder.cc:338:Biop$5004  && iRXFIFOUsage[2];
  assign \$auto$builder.cc:338:Biop$5012  = \$auto$builder.cc:338:Biop$5008  && iRXFIFOUsage[1];
  assign \$auto$builder.cc:338:Biop$5014  = \$auto$builder.cc:338:Biop$4998  | \$auto$builder.cc:338:Biop$5012 ;
  assign iRXFIFO16Trigger = \$auto$builder.cc:338:Biop$5014  | iRXFIFOUsage[4];
  assign \$auto$builder.cc:338:Biop$5036  = iRXFIFOUsage[4] | iRXFIFOUsage[5];
  assign \$auto$builder.cc:338:Biop$5038  = \$auto$builder.cc:338:Biop$4980  && \$auto$builder.cc:338:Biop$5036 ;
  assign \$auto$builder.cc:338:Biop$5040  = \$auto$builder.cc:338:Biop$4978  | \$auto$builder.cc:338:Biop$5038 ;
  assign \$auto$builder.cc:338:Biop$5046  = \$auto$builder.cc:338:Biop$4992  && iRXFIFOUsage[5];
  assign \$auto$builder.cc:338:Biop$5048  = \$auto$builder.cc:338:Biop$5040  | \$auto$builder.cc:338:Biop$5046 ;
  assign \$auto$builder.cc:338:Biop$5054  = \$auto$builder.cc:338:Biop$5000  && iRXFIFOUsage[5];
  assign \$auto$builder.cc:338:Biop$5058  = \$auto$builder.cc:338:Biop$5054  && iRXFIFOUsage[4];
  assign \$auto$builder.cc:338:Biop$5062  = \$auto$builder.cc:338:Biop$5058  && iRXFIFOUsage[3];
  assign \$auto$builder.cc:338:Biop$5064  = \$auto$builder.cc:338:Biop$5048  | \$auto$builder.cc:338:Biop$5062 ;
  assign iRXFIFO64Trigger = \$auto$builder.cc:338:Biop$5064  | iRXFIFO64Full;
  assign \$auto$builder.cc:338:Biop$5086  = ~ iLSR_THRE;
  assign \$auto$builder.cc:338:Biop$5088  = ~ iMCR[5];
  assign \$auto$builder.cc:338:Biop$5094  = iMCR[5] && iMSR_CTS;
  assign \$auto$builder.cc:338:Biop$5096  = \$auto$builder.cc:338:Biop$5088  | \$auto$builder.cc:338:Biop$5094 ;
  assign iTXEnable = \$auto$builder.cc:338:Biop$5086  && \$auto$builder.cc:338:Biop$5096 ;
  assign \$auto$builder.cc:338:Biop$5155  = ~ iMCR[1];
  assign \$auto$builder.cc:338:Biop$5161  = iMCR[5] && iRXFIFOTrigger;
  assign \$auto$builder.cc:338:Biop$5163  = \$auto$builder.cc:338:Biop$5155  | \$auto$builder.cc:338:Biop$5161 ;
  assign \$auto$builder.cc:338:Biop$5175  = iMCR[5] && iRXFIFOEmpty;
  assign \$auto$builder.cc:338:Biop$5177  = \$auto$builder.cc:338:Biop$5088  | \$auto$builder.cc:338:Biop$5175 ;
  assign \$auto$builder.cc:338:Biop$5179  = iMCR[1] && \$auto$builder.cc:338:Biop$5177 ;
  assign \$auto$builder.cc:338:Biop$5195  = ~ iMCR[2];
  assign \$auto$builder.cc:338:Biop$5197  = iMCR[4] | \$auto$builder.cc:338:Biop$5195 ;
  assign \$auto$builder.cc:338:Biop$5204  = ~ iMCR[3];
  assign \$auto$builder.cc:338:Biop$5206  = iMCR[4] | \$auto$builder.cc:338:Biop$5204 ;
  assign \$auto$builder.cc:338:Biop$5213  = ~ iRTS;
  assign \$auto$builder.cc:338:Biop$5215  = iMCR[4] | \$auto$builder.cc:338:Biop$5213 ;
  assign \$auto$builder.cc:338:Biop$5222  = ~ iMCR[0];
  assign \$auto$builder.cc:338:Biop$5224  = iMCR[4] | \$auto$builder.cc:338:Biop$5222 ;
  assign \$auto$builder.cc:338:Biop$5233  = iMCR[4] | iSOUT;
  (* src = "../rtl/apb_uart/apb_uart.sv:320.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTimeoutCount <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17443 ) iTimeoutCount <= \$auto$slang_frontend.cc:694:finish$\iTimeoutCount$4506 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTSR <= 8'h00;
    else if (\$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 ) iTSR <= iTXFIFOQ;
  (* src = "../rtl/apb_uart/apb_uart.sv:614.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iSCR <= 8'h00;
    else if (iSCRWrite) iSCR <= PWDATA[7:0];
  (* src = "../rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOD <= 11'h000;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17450 ) iRXFIFOD <= { iRXBI, iRXFE, iRXPE, iRXData };
  reg [5:0] \$auto$ff.cc:266:slice$17452 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:422.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) \$auto$ff.cc:266:slice$17452  <= 6'h00;
    else if (iMCRWrite) \$auto$ff.cc:266:slice$17452  <= PWDATA[5:0];
  assign iMCR[5:0] = \$auto$ff.cc:266:slice$17452 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:400.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLCR <= 8'h00;
    else if (iLCRWrite) iLCR <= PWDATA[7:0];
  reg [3:0] \$auto$ff.cc:266:slice$17455 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:254.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) \$auto$ff.cc:266:slice$17455  <= 4'h0;
    else if (iIERWrite) \$auto$ff.cc:266:slice$17455  <= PWDATA[3:0];
  assign iIER[3:0] = \$auto$ff.cc:266:slice$17455 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFECounter <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17458 ) iFECounter <= \$auto$slang_frontend.cc:694:finish$\iFECounter$4701 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_RXTrigger <= 2'h0;
    else if (iFCRWrite) iFCR_RXTrigger <= PWDATA[7:6];
  (* src = "../rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_FIFOEnable <= 1'h0;
    else if (iFCRWrite) iFCR_FIFOEnable <= PWDATA[0];
  (* src = "../rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_FIFO64E <= 1'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17463 ) iFCR_FIFO64E <= PWDATA[5];
  (* src = "../rtl/apb_uart/apb_uart.sv:234.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iDLM <= 8'h00;
    else if (iDLMWrite) iDLM <= PWDATA[7:0];
  (* src = "../rtl/apb_uart/apb_uart.sv:234.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iDLL <= 8'h01;
    else if (iDLLWrite) iDLL <= PWDATA[7:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17443  = | { \$auto$builder.cc:338:Biop$4500 , \$auto$builder.cc:338:Biop$4488  };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17458  = | { \$auto$builder.cc:338:Biop$4694 , \$auto$builder.cc:338:Biop$4684 , iRXFIFOClear };
  assign \$auto$rtlil.cc:2739:Not$17449  = ~ rx_State;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17450  = & { \$auto$rtlil.cc:2739:Not$17449 , iRXFinished };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17463  = & { iLCR[7], iFCRWrite };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17115  = | { \$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 , \$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118  };
  assign \$auto$rtlil.cc:2874:Mux$18116 [6] = ~ \$auto$builder.cc:338:Biop$4684 ;
  assign iRST = ~ RSTN;
  assign iIIR_FIFO64 = iFCR_FIFOEnable & iFCR_FIFO64E;
  assign iTXFIFOFull = iFCR_FIFO64E ? iTXFIFO64Full : iTXFIFOUsage[4];
  assign iRXFIFOFull = iFCR_FIFO64E ? iRXFIFO64Full : iRXFIFOUsage[4];
  assign iRXFIFOTrigger = iFCR_FIFO64E ? iRXFIFO64Trigger : iRXFIFO16Trigger;
  assign iSIN = iMCR[4] ? iSOUT : iSINr;
  (* src = "../rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) DTRN <= 1'h1;
    else DTRN <= \$auto$builder.cc:338:Biop$5224 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) OUT1N <= 1'h1;
    else OUT1N <= \$auto$builder.cc:338:Biop$5197 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) OUT2N <= 1'h1;
    else OUT2N <= \$auto$builder.cc:338:Biop$5206 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) RTSN <= 1'h1;
    else RTSN <= \$auto$builder.cc:338:Biop$5215 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) SOUT <= 1'h1;
    else SOUT <= \$auto$builder.cc:338:Biop$5233 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:829.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iBAUDOUTN <= 1'h1;
    else iBAUDOUTN <= \$auto$slang_frontend.cc:694:finish$\iBAUDOUTN$5191 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:320.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iCharTimeout <= 1'h0;
    else iCharTimeout <= \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4521 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_RXFIFOReset <= 1'h0;
    else iFCR_RXFIFOReset <= \$auto$slang_frontend.cc:694:finish$\iFCR_RXFIFOReset$4577 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:355.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iFCR_TXFIFOReset <= 1'h0;
    else iFCR_TXFIFOReset <= \$auto$slang_frontend.cc:694:finish$\iFCR_TXFIFOReset$4578 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_BI <= 1'h0;
    else iLSR_BI <= \$auto$slang_frontend.cc:694:finish$\iLSR_BI$4660 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_FE <= 1'h0;
    else iLSR_FE <= \$auto$slang_frontend.cc:694:finish$\iLSR_FE$4650 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_FIFOERR <= 1'h0;
    else iLSR_FIFOERR <= \$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4674 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_OE <= 1'h0;
    else iLSR_OE <= \$auto$slang_frontend.cc:694:finish$\iLSR_OE$4630 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:443.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iLSR_PE <= 1'h0;
    else iLSR_PE <= \$auto$slang_frontend.cc:694:finish$\iLSR_PE$4640 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_TERI <= 1'h0;
    else iMSR_TERI <= \$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4904 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dCTS <= 1'h0;
    else iMSR_dCTS <= \$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4880 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dDCD <= 1'h0;
    else iMSR_dDCD <= \$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4918 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:561.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iMSR_dDSR <= 1'h0;
    else iMSR_dDSR <= \$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4894 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:812.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRTS <= 1'h0;
    else iRTS <= \$auto$slang_frontend.cc:694:finish$\iRTS$5183 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOClear <= 1'h0;
    else iRXFIFOClear <= \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5147 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iRXFIFOWrite <= 1'h0;
    else iRXFIFOWrite <= \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5148 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:292.1" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTHRInterrupt <= 1'h0;
    else iTHRInterrupt <= \$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4453 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXFIFORead <= 1'h0;
    else iTXFIFORead <= \$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXRunning <= 1'h0;
    else iTXRunning <= \$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) iTXStart <= 1'h0;
    else iTXStart <= \$auto$slang_frontend.cc:694:finish$\iTXStart$5119 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:773.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) rx_State <= 1'h0;
    else rx_State <= \$auto$slang_frontend.cc:694:finish$\rx_State$5150 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:724.5" *)
  always @(posedge CLK, negedge RSTN)
    if (!RSTN) tx_State <= 2'h0;
    else tx_State <= \$auto$slang_frontend.cc:694:finish$\tx_State$5121 ;
  assign \$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5247  = iLCR[7] ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:897.18-897.38|../rtl/apb_uart/apb_uart.sv:895.13-902.18" *) iDLM : { 4'h0, iIER[3:0] };
  function [7:0] \$procmux$14345 ;
    input [7:0] a;
    input [55:0] b;
    input [6:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/apb_uart/apb_uart.sv:932.13-932.33|../rtl/apb_uart/apb_uart.sv:880.7-940.14" *)
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \$procmux$14345  = b[7:0];
      7'b?????1?:
        \$procmux$14345  = b[15:8];
      7'b????1??:
        \$procmux$14345  = b[23:16];
      7'b???1???:
        \$procmux$14345  = b[31:24];
      7'b??1????:
        \$procmux$14345  = b[39:32];
      7'b?1?????:
        \$procmux$14345  = b[47:40];
      7'b1??????:
        \$procmux$14345  = b[55:48];
      default:
        \$procmux$14345  = a;
    endcase
  endfunction
  assign PRDATA[7:0] = \$procmux$14345 (\$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5242 , { \$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5247 , iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0, iIIR[3:0], iLCR, 2'h0, iMCR[5:0], iLSR[7], iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR, iMSR_DCD, iMSR_RI, iMSR_DSR, iMSR_CTS, iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS, iSCR }, { \$auto$builder.cc:338:Biop$4301 , \$auto$builder.cc:338:Biop$4329 , \$auto$builder.cc:338:Biop$4349 , \$auto$builder.cc:338:Biop$4359 , \$auto$builder.cc:338:Biop$4369 , \$auto$builder.cc:338:Biop$4379 , \$auto$builder.cc:338:Biop$4389  });
  assign \$auto$slang_frontend.cc:694:finish$\PRDATA[0]$5242  = iLCR[7] ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:885.18-885.38|../rtl/apb_uart/apb_uart.sv:883.13-890.18" *) iDLL : iRXFIFOQ[7:0];
  assign \$auto$slang_frontend.cc:694:finish$\iBAUDOUTN$5191  = ~ (* src = "../rtl/apb_uart/apb_uart.sv:849.13-849.32|../rtl/apb_uart/apb_uart.sv:847.8-850.13" *) iBaudtick16x;
  assign \$auto$slang_frontend.cc:694:finish$\iRTS$5182  = iRTS | (* src = "../rtl/apb_uart/apb_uart.sv:825.13-825.27|../rtl/apb_uart/apb_uart.sv:823.13-826.13" *) \$auto$builder.cc:338:Biop$5179 ;
  assign \$auto$slang_frontend.cc:694:finish$\iRTS$5183  = \$auto$builder.cc:338:Biop$5163  ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:821.13-821.27|../rtl/apb_uart/apb_uart.sv:819.8-826.13" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\iRTS$5182 ;
  assign \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5145  = ~ (* src = "../rtl/apb_uart/apb_uart.sv:805.24-805.45|../rtl/apb_uart/apb_uart.sv:804.27-805.45" *) iRXFIFOFull;
  assign \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5146  = iFCR_FIFOEnable ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:803.24-803.45|../rtl/apb_uart/apb_uart.sv:802.22-805.45" *) \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5145  : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\rx_State$5150  = rx_State ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:801.19-807.22|../rtl/apb_uart/apb_uart.sv:787.13-809.21" *) 1'h0 : iRXFinished;
  assign \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5147  = rx_State ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:801.19-807.22|../rtl/apb_uart/apb_uart.sv:787.13-809.21" *) iFCR_RXFIFOReset : \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5134 ;
  assign \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5134  = iRXFinished ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:791.24-796.27|../rtl/apb_uart/apb_uart.sv:790.22-798.43" *) \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5133  : iFCR_RXFIFOReset;
  assign \$auto$slang_frontend.cc:694:finish$\iRXFIFOClear$5133  = iFCR_FIFOEnable ? (* src = "../rtl/apb_uart/apb_uart.sv:794.29-794.50|../rtl/apb_uart/apb_uart.sv:793.27-794.50" *) iFCR_RXFIFOReset : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5148  = rx_State & (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:801.19-807.22|../rtl/apb_uart/apb_uart.sv:787.13-809.21" *) \$auto$slang_frontend.cc:694:finish$\iRXFIFOWrite$5146 ;
  assign \$auto$slang_frontend.cc:694:finish$\iTXRunning$5120  = tx_State == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:759.19-766.22|../rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 2'h2;
  function [1:0] \$procmux$14470 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/apb_uart/apb_uart.sv:767.31-767.50|../rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$14470  = b[1:0];
      3'b?1?:
        \$procmux$14470  = b[3:2];
      3'b1??:
        \$procmux$14470  = b[5:4];
      default:
        \$procmux$14470  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\tx_State$5121  = \$procmux$14470 ({ 1'h0, iTXEnable }, { 3'h5, iTXFinished, 2'h0 }, { \$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118 , \$auto$slang_frontend.cc:694:finish$\iTXRunning$5120 , \$procmux$14471_CMP  });
  assign \$procmux$14471_CMP  = tx_State == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:767.31-767.50|../rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 2'h3;
  assign \$auto$slang_frontend.cc:694:finish$\iTXFIFORead$5118  = tx_State == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:752.19-757.22|../rtl/apb_uart/apb_uart.sv:740.13-769.20" *) 1'h1;
  function [0:0] \$procmux$14477 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/apb_uart/apb_uart.sv:767.31-767.50|../rtl/apb_uart/apb_uart.sv:740.13-769.20" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$14477  = b[0:0];
      2'b1?:
        \$procmux$14477  = b[1:1];
      default:
        \$procmux$14477  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\iTXStart$5119  = \$procmux$14477 (iTXEnable, 2'h2, { \$auto$opt_reduce.cc:137:opt_pmux$17115 , \$procmux$14471_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4917  = iMSRRead ? (* src = "../rtl/apb_uart/apb_uart.sv:601.13-601.32|../rtl/apb_uart/apb_uart.sv:599.13-602.13" *) 1'h0 : iMSR_dDCD;
  assign \$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4918  = \$auto$slang_frontend.cc:694:finish$\iMSR_dDCD$4917  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:597.13-597.32|../rtl/apb_uart/apb_uart.sv:595.8-602.13" *) \$auto$builder.cc:338:Biop$4910 ;
  assign \$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4903  = iMSRRead ? (* src = "../rtl/apb_uart/apb_uart.sv:593.13-593.32|../rtl/apb_uart/apb_uart.sv:591.13-594.13" *) 1'h0 : iMSR_TERI;
  assign \$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4904  = \$auto$slang_frontend.cc:694:finish$\iMSR_TERI$4903  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:589.13-589.32|../rtl/apb_uart/apb_uart.sv:587.8-594.13" *) iRInFE;
  assign \$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4893  = iMSRRead ? (* src = "../rtl/apb_uart/apb_uart.sv:585.13-585.32|../rtl/apb_uart/apb_uart.sv:583.13-586.13" *) 1'h0 : iMSR_dDSR;
  assign \$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4894  = \$auto$slang_frontend.cc:694:finish$\iMSR_dDSR$4893  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:581.13-581.32|../rtl/apb_uart/apb_uart.sv:579.8-586.13" *) \$auto$builder.cc:338:Biop$4886 ;
  assign \$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4879  = iMSRRead ? (* src = "../rtl/apb_uart/apb_uart.sv:577.13-577.32|../rtl/apb_uart/apb_uart.sv:575.13-578.13" *) 1'h0 : iMSR_dCTS;
  assign \$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4880  = \$auto$slang_frontend.cc:694:finish$\iMSR_dCTS$4879  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:573.13-573.32|../rtl/apb_uart/apb_uart.sv:571.8-578.13" *) \$auto$builder.cc:338:Biop$4872 ;
  assign \$auto$slang_frontend.cc:694:finish$\iFECounter$4701  = iRXFIFOClear ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:497.13-497.29|../rtl/apb_uart/apb_uart.sv:495.8-509.13" *) 7'h00 : \$auto$opt_share.cc:222:merge_operators$18114 ;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4673  = \$auto$builder.cc:338:Biop$4670  ? (* src = "../rtl/apb_uart/apb_uart.sv:493.13-493.35|../rtl/apb_uart/apb_uart.sv:491.13-494.13" *) 1'h0 : iLSR_FIFOERR;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4674  = \$auto$slang_frontend.cc:694:finish$\iLSR_FIFOERR$4673  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:489.13-489.35|../rtl/apb_uart/apb_uart.sv:487.8-494.13" *) \$auto$builder.cc:338:Biop$4662 ;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_BI$4659  = iLSRRead ? (* src = "../rtl/apb_uart/apb_uart.sv:485.13-485.30|../rtl/apb_uart/apb_uart.sv:483.13-486.13" *) 1'h0 : iLSR_BI;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_BI$4660  = \$auto$slang_frontend.cc:694:finish$\iLSR_BI$4659  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:481.13-481.30|../rtl/apb_uart/apb_uart.sv:479.8-486.13" *) iBIRE;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_FE$4649  = iLSRRead ? (* src = "../rtl/apb_uart/apb_uart.sv:477.13-477.30|../rtl/apb_uart/apb_uart.sv:475.13-478.13" *) 1'h0 : iLSR_FE;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_FE$4650  = \$auto$slang_frontend.cc:694:finish$\iLSR_FE$4649  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:473.13-473.30|../rtl/apb_uart/apb_uart.sv:471.8-478.13" *) iFERE;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_PE$4639  = iLSRRead ? (* src = "../rtl/apb_uart/apb_uart.sv:469.13-469.30|../rtl/apb_uart/apb_uart.sv:467.13-470.13" *) 1'h0 : iLSR_PE;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_PE$4640  = \$auto$slang_frontend.cc:694:finish$\iLSR_PE$4639  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:465.13-465.30|../rtl/apb_uart/apb_uart.sv:463.8-470.13" *) iPERE;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_OE$4629  = iLSRRead ? (* src = "../rtl/apb_uart/apb_uart.sv:461.13-461.30|../rtl/apb_uart/apb_uart.sv:459.13-462.13" *) 1'h0 : iLSR_OE;
  assign \$auto$slang_frontend.cc:694:finish$\iLSR_OE$4630  = \$auto$slang_frontend.cc:694:finish$\iLSR_OE$4629  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:457.13-457.30|../rtl/apb_uart/apb_uart.sv:455.8-462.13" *) \$auto$builder.cc:338:Biop$4622 ;
  assign \$auto$slang_frontend.cc:694:finish$\iFCR_TXFIFOReset$4578  = iFCRWrite & (* src = "../rtl/apb_uart/apb_uart.sv:371.10-389.13|../rtl/apb_uart/apb_uart.sv:370.8-389.13" *) \$auto$builder.cc:338:Biop$4572 ;
  assign \$auto$slang_frontend.cc:694:finish$\iFCR_RXFIFOReset$4577  = iFCRWrite & (* src = "../rtl/apb_uart/apb_uart.sv:371.10-389.13|../rtl/apb_uart/apb_uart.sv:370.8-389.13" *) \$auto$builder.cc:338:Biop$4551 ;
  assign \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4521  = iFCR_FIFOEnable & (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:340.13-347.18|../rtl/apb_uart/apb_uart.sv:338.8-352.13" *) \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4520 ;
  assign \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4519  = iCharTimeout | (* src = "../rtl/apb_uart/apb_uart.sv:346.18-346.40|../rtl/apb_uart/apb_uart.sv:344.18-347.18" *) iTimeoutCount[5];
  assign \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4520  = iRBRRead ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:342.18-342.40|../rtl/apb_uart/apb_uart.sv:340.13-347.18" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\iCharTimeout$4519 ;
  assign \$auto$slang_frontend.cc:694:finish$\iTimeoutCount$4506  = \$auto$builder.cc:338:Biop$4488  ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:332.13-332.72|../rtl/apb_uart/apb_uart.sv:329.8-337.13" *) 6'h00 : \$auto$builder.cc:338:Biop$4504 ;
  assign \$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4452  = \$auto$builder.cc:338:Biop$4449  ? (* src = "../rtl/apb_uart/apb_uart.sv:305.13-305.36|../rtl/apb_uart/apb_uart.sv:303.13-306.13" *) 1'h0 : iTHRInterrupt;
  assign \$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4453  = \$auto$slang_frontend.cc:694:finish$\iTHRInterrupt$4452  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/apb_uart.sv:301.13-301.36|../rtl/apb_uart/apb_uart.sv:299.8-306.13" *) \$auto$builder.cc:338:Biop$4437 ;
  (* src = "../rtl/apb_uart/apb_uart.sv:630.14" *)
  \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16  UART_BG16 (
    .BAUDTICK(iBaudtick16x),
    .CE(1'h1),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIVIDER({ iDLM, iDLL }),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:637.29" *)
  \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2  UART_BG2 (
    .CE(iBaudtick16x),
    .CLK(CLK),
    .Q(iBaudtick2x),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:517.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET  UART_BIDET (
    .CLK(CLK),
    .D(iRXFIFOBI),
    .RE(iBIRE),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:536.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS  UART_ED_CTS (
    .CLK(CLK),
    .D(iMSR_CTS),
    .FE(iCTSnFE),
    .RE(iCTSnRE),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:554.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD  UART_ED_DCD (
    .CLK(CLK),
    .D(iMSR_DCD),
    .FE(iDCDnFE),
    .RE(iDCDnRE),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:542.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR  UART_ED_DSR (
    .CLK(CLK),
    .D(iMSR_DSR),
    .FE(iDSRnFE),
    .RE(iDSRnRE),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:548.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI  UART_ED_RI (
    .CLK(CLK),
    .D(iMSR_RI),
    .FE(iRInFE),
    .RE(iRInRE),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:516.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET  UART_FEDET (
    .CLK(CLK),
    .D(iRXFIFOFE),
    .RE(iFERE),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:229.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS  UART_IF_CTS (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iCTSNs),
    .Q(iCTSn),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:231.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD  UART_IF_DCD (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDCDNs),
    .Q(iDCDn),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:230.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR  UART_IF_DSR (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iDSRNs),
    .Q(iDSRn),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:232.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI  UART_IF_RI (
    .CE(iBaudtick2x),
    .CLK(CLK),
    .D(iRINs),
    .Q(iRIn),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:273.16" *)
  \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC  UART_IIC (
    .AFE(iMCR[5]),
    .CLK(CLK),
    .CTI(iCharTimeout),
    .IER(iIER[3:0]),
    .IIR(iIIR[3:0]),
    .INT(INT),
    .LSR({ iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR }),
    .MSR({ iMSR_dDCD, iMSR_TERI, iMSR_dDSR, iMSR_dCTS }),
    .RDA(iRDAInterrupt),
    .RST(iRST),
    .THI(iTHRInterrupt)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:285.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED  UART_IIC_THRE_ED (
    .CLK(CLK),
    .D(iLSR_THRE),
    .RE(iLSR_THRERE),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:225.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS  UART_IS_CTS (
    .CLK(CLK),
    .D(CTSN),
    .Q(iCTSNs),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:227.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD  UART_IS_DCD (
    .CLK(CLK),
    .D(DCDN),
    .Q(iDCDNs),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:226.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR  UART_IS_DSR (
    .CLK(CLK),
    .D(DSRN),
    .Q(iDSRNs),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:228.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI  UART_IS_RI (
    .CLK(CLK),
    .D(RIN),
    .Q(iRINs),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:224.17" *)
  \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN  UART_IS_SIN (
    .CLK(CLK),
    .D(SIN),
    .Q(iSINr),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:515.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET  UART_PEDET (
    .CLK(CLK),
    .D(iRXFIFOPE),
    .RE(iPERE),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:642.18" *)
  \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK  UART_RCLK (
    .CLK(CLK),
    .D(iBAUDOUTN),
    .RE(iRCLK),
    .RST(iRST)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:697.15" *)
  \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX  UART_RX (
    .BI(iRXBI),
    .CLK(CLK),
    .DOUT(iRXData),
    .EPS(iLCR[4]),
    .FE(iRXFE),
    .PE(iRXPE),
    .PEN(iLCR[3]),
    .RST(iRST),
    .RXCLEAR(1'h0),
    .RXCLK(iRCLK),
    .RXFINISHED(iRXFinished),
    .SIN(iSIN),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .WLS(iLCR[1:0])
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:663.37" *)
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF  UART_RXFF (
    .CLEAR(iRXFIFOClear),
    .CLK(CLK),
    .D(iRXFIFOD),
    .EMPTY(iRXFIFOEmpty),
    .FULL(iRXFIFO64Full),
    .Q(iRXFIFOQ),
    .READ(iRBRRead),
    .RST(iRST),
    .USAGE(iRXFIFOUsage),
    .WRITE(iRXFIFOWrite)
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:681.18" *)
  \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX  UART_TX (
    .BC(iLCR[6]),
    .CLEAR(1'h0),
    .CLK(CLK),
    .DIN(iTSR),
    .EPS(iLCR[4]),
    .PEN(iLCR[3]),
    .RST(iRST),
    .SOUT(iSOUT),
    .SP(iLCR[5]),
    .STB(iLCR[2]),
    .TXCLK(iBaudtick2x),
    .TXFINISHED(iTXFinished),
    .TXSTART(iTXStart),
    .WLS(iLCR[1:0])
  );
  (* src = "../rtl/apb_uart/apb_uart.sv:648.36" *)
  \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF  UART_TXFF (
    .CLEAR(iFCR_TXFIFOReset),
    .CLK(CLK),
    .D(PWDATA[7:0]),
    .EMPTY(iLSR_THRE),
    .FULL(iTXFIFO64Full),
    .Q(iTXFIFOQ),
    .READ(iTXFIFORead),
    .RST(iRST),
    .USAGE(iTXFIFOUsage),
    .WRITE(iTXFIFOWrite)
  );
  assign \$auto$rtlil.cc:2874:Mux$18116 [5:0] = { \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], \$auto$rtlil.cc:2874:Mux$18116 [6], 1'h1 };
  assign PRDATA[31:8] = 24'h000000;
  assign PREADY = 1'h1;
  assign PSLVERR = 1'h0;
  assign iIER[7:4] = 4'h0;
  assign iIIR[7:4] = { iFCR_FIFOEnable, iFCR_FIFOEnable, iIIR_FIFO64, 1'h0 };
  assign iLSR[6:0] = { iLSR_TEMT, iLSR_THRE, iLSR_BI, iLSR_FE, iLSR_PE, iLSR_OE, iLSR_DR };
  assign iMCR[7:6] = 2'h0;
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:54.8" *)
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$auto$builder.cc:338:Biop$6049 ;
  wire \$auto$builder.cc:338:Biop$6057 ;
  wire \$auto$builder.cc:364:Unop$6047 ;
  wire \$auto$builder.cc:364:Unop$6055 ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:88.35" *)
  wire async_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:89.31" *)
  wire [40:0] async_data;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:87.35" *)
  wire async_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:69.16" *)
  input dst_clear_i;
  wire dst_clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:70.16" *)
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:68.16" *)
  input dst_clk_i;
  wire dst_clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:71.16" *)
  output [40:0] dst_data_o;
  wire [40:0] dst_data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:73.16" *)
  input dst_ready_i;
  wire dst_ready_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:67.16" *)
  input dst_rst_ni;
  wire dst_rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:72.16" *)
  output dst_valid_o;
  wire dst_valid_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:81.16" *)
  reg s_dst_clear_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:80.16" *)
  wire s_dst_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:84.16" *)
  reg s_dst_isolate_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:82.16" *)
  wire s_dst_valid;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:76.16" *)
  reg s_src_clear_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:75.16" *)
  wire s_src_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:79.16" *)
  reg s_src_isolate_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:77.16" *)
  wire s_src_ready;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:61.16" *)
  input src_clear_i;
  wire src_clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:62.16" *)
  output src_clear_pending_o;
  wire src_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:60.16" *)
  input src_clk_i;
  wire src_clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:63.16" *)
  input [40:0] src_data_i;
  wire [40:0] src_data_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:65.16" *)
  output src_ready_o;
  wire src_ready_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:59.16" *)
  input src_rst_ni;
  wire src_rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:64.16" *)
  input src_valid_i;
  wire src_valid_i;
  assign \$auto$builder.cc:338:Biop$6049  = src_valid_i & \$auto$builder.cc:364:Unop$6047 ;
  assign src_ready_o = s_src_ready & \$auto$builder.cc:364:Unop$6047 ;
  assign \$auto$builder.cc:338:Biop$6057  = dst_ready_i & \$auto$builder.cc:364:Unop$6055 ;
  assign dst_valid_o = s_dst_valid & \$auto$builder.cc:364:Unop$6055 ;
  assign \$auto$builder.cc:364:Unop$6047  = ! src_clear_pending_o;
  assign \$auto$builder.cc:364:Unop$6055  = ! dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_clear_ack_q <= 1'h0;
    else s_dst_clear_ack_q <= s_dst_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_isolate_ack_q <= 1'h0;
    else s_dst_isolate_ack_q <= dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_clear_ack_q <= 1'h0;
    else s_src_clear_ack_q <= s_src_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_isolate_ack_q <= 1'h0;
    else s_src_isolate_ack_q <= src_clear_pending_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:143.5" *)
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(src_clear_pending_o),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(dst_clear_pending_o),
    .b_rst_ni(dst_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:125.5" *)
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$auto$builder.cc:338:Biop$6057 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:106.5" *)
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$auto$builder.cc:338:Biop$6049 )
  );
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:54.8" *)
module \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp (src_rst_ni, src_clk_i, src_clear_i, src_data_i, src_valid_i, src_ready_o, dst_rst_ni, dst_clk_i, dst_clear_i, dst_clear_pending_o, dst_data_o, dst_valid_o, dst_ready_i, src_clear_pending_o);
  wire \$auto$builder.cc:338:Biop$6075 ;
  wire \$auto$builder.cc:338:Biop$6083 ;
  wire \$auto$builder.cc:364:Unop$6073 ;
  wire \$auto$builder.cc:364:Unop$6081 ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:88.35" *)
  wire async_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:89.31" *)
  wire [33:0] async_data;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:87.35" *)
  wire async_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:69.16" *)
  input dst_clear_i;
  wire dst_clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:70.16" *)
  output dst_clear_pending_o;
  wire dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:68.16" *)
  input dst_clk_i;
  wire dst_clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:71.16" *)
  output [33:0] dst_data_o;
  wire [33:0] dst_data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:73.16" *)
  input dst_ready_i;
  wire dst_ready_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:67.16" *)
  input dst_rst_ni;
  wire dst_rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:72.16" *)
  output dst_valid_o;
  wire dst_valid_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:81.16" *)
  reg s_dst_clear_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:80.16" *)
  wire s_dst_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:84.16" *)
  reg s_dst_isolate_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:82.16" *)
  wire s_dst_valid;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:76.16" *)
  reg s_src_clear_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:75.16" *)
  wire s_src_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:79.16" *)
  reg s_src_isolate_ack_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:77.16" *)
  wire s_src_ready;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:61.16" *)
  input src_clear_i;
  wire src_clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:62.16" *)
  output src_clear_pending_o;
  wire src_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:60.16" *)
  input src_clk_i;
  wire src_clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:63.16" *)
  input [33:0] src_data_i;
  wire [33:0] src_data_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:65.16" *)
  output src_ready_o;
  wire src_ready_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:59.16" *)
  input src_rst_ni;
  wire src_rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:64.16" *)
  input src_valid_i;
  wire src_valid_i;
  assign \$auto$builder.cc:338:Biop$6075  = src_valid_i & \$auto$builder.cc:364:Unop$6073 ;
  assign src_ready_o = s_src_ready & \$auto$builder.cc:364:Unop$6073 ;
  assign \$auto$builder.cc:338:Biop$6083  = dst_ready_i & \$auto$builder.cc:364:Unop$6081 ;
  assign dst_valid_o = s_dst_valid & \$auto$builder.cc:364:Unop$6081 ;
  assign \$auto$builder.cc:364:Unop$6073  = ! src_clear_pending_o;
  assign \$auto$builder.cc:364:Unop$6081  = ! dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_clear_ack_q <= 1'h0;
    else s_dst_clear_ack_q <= s_dst_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:172.3" *)
  always @(posedge dst_clk_i, negedge dst_rst_ni)
    if (!dst_rst_ni) s_dst_isolate_ack_q <= 1'h0;
    else s_dst_isolate_ack_q <= dst_clear_pending_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_clear_ack_q <= 1'h0;
    else s_src_clear_ack_q <= s_src_clear_req;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:162.3" *)
  always @(posedge src_clk_i, negedge src_rst_ni)
    if (!src_rst_ni) s_src_isolate_ack_q <= 1'h0;
    else s_src_isolate_ack_q <= src_clear_pending_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:143.5" *)
  \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr  i_cdc_reset_ctrlr (
    .a_clear_ack_i(s_src_clear_ack_q),
    .a_clear_i(src_clear_i),
    .a_clear_o(s_src_clear_req),
    .a_clk_i(src_clk_i),
    .a_isolate_ack_i(s_src_isolate_ack_q),
    .a_isolate_o(src_clear_pending_o),
    .a_rst_ni(src_rst_ni),
    .b_clear_ack_i(s_dst_clear_ack_q),
    .b_clear_i(dst_clear_i),
    .b_clear_o(s_dst_clear_req),
    .b_clk_i(dst_clk_i),
    .b_isolate_ack_i(s_dst_isolate_ack_q),
    .b_isolate_o(dst_clear_pending_o),
    .b_rst_ni(dst_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:125.5" *)
  \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst  i_dst (
    .async_ack_o(async_ack),
    .async_data_i(async_data),
    .async_req_i(async_req),
    .clear_i(s_dst_clear_req),
    .clk_i(dst_clk_i),
    .data_o(dst_data_o),
    .ready_i(\$auto$builder.cc:338:Biop$6083 ),
    .rst_ni(dst_rst_ni),
    .valid_o(s_dst_valid)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:106.5" *)
  \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src  i_src (
    .async_ack_i(async_ack),
    .async_data_o(async_data),
    .async_req_o(async_req),
    .clear_i(s_src_clear_req),
    .clk_i(src_clk_i),
    .data_i(src_data_i),
    .ready_o(s_src_ready),
    .rst_ni(src_rst_ni),
    .valid_i(\$auto$builder.cc:338:Biop$6075 )
  );
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:269.8" *)
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst (clk_i, rst_ni, data_o, clear_i, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$builder.cc:338:Biop$9328 ;
  wire \$auto$builder.cc:338:Biop$9337 ;
  wire \$auto$builder.cc:338:Biop$9341 ;
  wire \$auto$builder.cc:364:Unop$9332 ;
  wire \$auto$builder.cc:364:Unop$9339 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17471 ;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.8" *)
  wire ack_dst_d;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.19" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:280.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:281.16" *)
  input [40:0] async_data_i;
  wire [40:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:279.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:275.16" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:274.16" *)
  input clk_i;
  wire clk_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" *)
  wire [40:0] data_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.17" *)
  wire [40:0] data_dst_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:276.16" *)
  output [40:0] data_o;
  reg [40:0] data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:278.16" *)
  input ready_i;
  wire ready_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.30" *)
  wire req_synced;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.42" *)
  reg req_synced_q1;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:273.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:277.16" *)
  output valid_o;
  wire valid_o;
  assign \$auto$builder.cc:338:Biop$9328  = valid_o && ready_i;
  assign \$auto$builder.cc:338:Biop$9337  = req_synced != req_synced_q1;
  assign \$auto$builder.cc:338:Biop$9341  = \$auto$builder.cc:338:Biop$9337  && \$auto$builder.cc:364:Unop$9339 ;
  assign valid_o = async_ack_o != req_synced_q1;
  assign \$auto$builder.cc:364:Unop$9332  = ~ async_ack_o;
  assign \$auto$builder.cc:364:Unop$9339  = ! valid_o;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$9341 ) data_o[33:32] <= async_data_i[33:32];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$9341 ) data_o[31:0] <= async_data_i[31:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$9341 ) data_o[40:34] <= async_data_i[40:34];
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17471 ) async_ack_o <= ack_dst_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17471  = | { \$auto$builder.cc:338:Biop$9328 , clear_i };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_synced_q1 <= 1'h0;
    else req_synced_q1 <= req_synced;
  assign data_dst_d = \$auto$builder.cc:338:Biop$9341  ? (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|../rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" *) async_data_i : data_o;
  assign ack_dst_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|../rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" *) 1'h0 : \$auto$builder.cc:364:Unop$9332 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:294.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_dst_q = data_o;
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:269.8" *)
module \cdc_2phase_dst_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst (clk_i, rst_ni, data_o, clear_i, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$builder.cc:338:Biop$9378 ;
  wire \$auto$builder.cc:338:Biop$9387 ;
  wire \$auto$builder.cc:338:Biop$9391 ;
  wire \$auto$builder.cc:364:Unop$9382 ;
  wire \$auto$builder.cc:364:Unop$9389 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17476 ;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.8" *)
  wire ack_dst_d;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.19" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:280.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:281.16" *)
  input [33:0] async_data_i;
  wire [33:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:279.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:275.16" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:274.16" *)
  input clk_i;
  wire clk_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] data_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:288.17" *)
  wire [33:0] data_dst_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:276.16" *)
  output [33:0] data_o;
  reg [33:0] data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:278.16" *)
  input ready_i;
  wire ready_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.30" *)
  wire req_synced;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:286.42" *)
  reg req_synced_q1;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:273.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:277.16" *)
  output valid_o;
  wire valid_o;
  assign \$auto$builder.cc:338:Biop$9378  = valid_o && ready_i;
  assign \$auto$builder.cc:338:Biop$9387  = req_synced != req_synced_q1;
  assign \$auto$builder.cc:338:Biop$9391  = \$auto$builder.cc:338:Biop$9387  && \$auto$builder.cc:364:Unop$9389 ;
  assign valid_o = async_ack_o != req_synced_q1;
  assign \$auto$builder.cc:364:Unop$9382  = ~ async_ack_o;
  assign \$auto$builder.cc:364:Unop$9389  = ! valid_o;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$9391 ) data_o[1:0] <= async_data_i[1:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$builder.cc:338:Biop$9391 ) data_o[33:2] <= async_data_i[33:2];
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17476 ) async_ack_o <= ack_dst_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17476  = | { \$auto$builder.cc:338:Biop$9378 , clear_i };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:322.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_synced_q1 <= 1'h0;
    else req_synced_q1 <= req_synced;
  assign data_dst_d = \$auto$builder.cc:338:Biop$9391  ? (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:316.7-316.33|../rtl/common_cells/cdc_2phase_clearable.sv:315.5-317.8" *) async_data_i : data_o;
  assign ack_dst_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:305.7-305.24|../rtl/common_cells/cdc_2phase_clearable.sv:304.5-308.8" *) 1'h0 : \$auto$builder.cc:364:Unop$9382 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:294.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_dst_q = data_o;
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:199.8" *)
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$builder.cc:338:Biop$9307 ;
  wire \$auto$builder.cc:364:Unop$9311 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17479 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17484 ;
  wire \$auto$rtlil.cc:2739:Not$17483 ;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$9313 ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.32" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:210.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:211.16" *)
  output [40:0] async_data_o;
  reg [40:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:209.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:205.16" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:204.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:206.16" *)
  input [40:0] data_i;
  wire [40:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40" *)
  wire [40:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.17" *)
  wire [40:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:208.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:203.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:207.16" *)
  input valid_i;
  wire valid_i;
  assign \$auto$builder.cc:338:Biop$9307  = valid_i && ready_o;
  assign ready_o = async_req_o == ack_synced;
  assign \$auto$builder.cc:364:Unop$9311  = ~ async_req_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:245.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17479 ) async_req_o <= req_src_d;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17484 ) async_data_o[33:32] <= data_i[33:32];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17484 ) async_data_o[31:0] <= data_i[31:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17484 ) async_data_o[40:34] <= data_i[40:34];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17479  = | { \$auto$builder.cc:338:Biop$9307 , clear_i };
  assign \$auto$rtlil.cc:2739:Not$17483  = ~ clear_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17484  = & { \$auto$rtlil.cc:2739:Not$17483 , \$auto$builder.cc:338:Biop$9307  };
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$9313  = \$auto$builder.cc:338:Biop$9307  ? (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *) data_i : async_data_o;
  assign req_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) 1'h0 : \$auto$builder.cc:364:Unop$9311 ;
  assign data_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) async_data_o : \$auto$slang_frontend.cc:694:finish$\data_src_d$9313 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:222.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_2phase_clearable.sv:199.8" *)
module \cdc_2phase_src_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src (clk_i, rst_ni, data_i, clear_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$builder.cc:338:Biop$9357 ;
  wire \$auto$builder.cc:364:Unop$9361 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17497 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17502 ;
  wire \$auto$rtlil.cc:2739:Not$17501 ;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *)
  wire [33:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$9363 ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.32" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:210.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:211.16" *)
  output [33:0] async_data_o;
  reg [33:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:209.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:205.16" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:204.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:206.16" *)
  input [33:0] data_i;
  wire [33:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.5" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [33:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:217.17" *)
  wire [33:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:208.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:215.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:203.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:207.16" *)
  input valid_i;
  wire valid_i;
  assign \$auto$builder.cc:338:Biop$9357  = valid_i && ready_o;
  assign ready_o = async_req_o == ack_synced;
  assign \$auto$builder.cc:364:Unop$9361  = ~ async_req_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:245.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17497 ) async_req_o <= req_src_d;
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17502 ) async_data_o[1:0] <= data_i[1:0];
  (* keep = "true" *)
  always @(posedge clk_i)
    if (\$auto$opt_dff.cc:219:make_patterns_logic$17502 ) async_data_o[33:2] <= data_i[33:2];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17497  = | { \$auto$builder.cc:338:Biop$9357 , clear_i };
  assign \$auto$rtlil.cc:2739:Not$17501  = ~ clear_i;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17502  = & { \$auto$builder.cc:338:Biop$9357 , \$auto$rtlil.cc:2739:Not$17501  };
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$9363  = \$auto$builder.cc:338:Biop$9357  ? (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:237.38-240.8|../rtl/common_cells/cdc_2phase_clearable.sv:237.14-240.8" *) data_i : async_data_o;
  assign req_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) 1'h0 : \$auto$builder.cc:364:Unop$9361 ;
  assign data_src_d = clear_i ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:235.7-235.25|../rtl/common_cells/cdc_2phase_clearable.sv:234.5-240.8" *) async_data_o : \$auto$slang_frontend.cc:694:finish$\data_src_d$9363 ;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_2phase_clearable.sv:222.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17510 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17512 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17514 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17516 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$10500 ;
  wire \$procmux$11253_CMP ;
  wire \$procmux$11264_CMP ;
  wire \$procmux$11278_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17516 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17510  = { \$procmux$11264_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17512  = { \$procmux$11278_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17514  = { \$procmux$11253_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17516  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17510 , \$auto$opt_dff.cc:194:make_patterns_logic$17512 , \$auto$opt_dff.cc:194:make_patterns_logic$17514  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$11253_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$11264_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [0:0] \$procmux$11275 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11275  = b[0:0];
      2'b1?:
        \$procmux$11275  = b[1:1];
      default:
        \$procmux$11275  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$11275 (1'h0, { req_synced, 1'h1 }, { \$procmux$11278_CMP , \$procmux$11264_CMP  });
  assign \$procmux$11278_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  function [1:0] \$procmux$11281 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11281  = b[1:0];
      2'b1?:
        \$procmux$11281  = b[3:2];
      default:
        \$procmux$11281  = a;
    endcase
  endfunction
  assign state_d = \$procmux$11281 (2'h0, { \$auto$slang_frontend.cc:694:finish$\state_d$10500 , 2'h2 }, { \$procmux$11278_CMP , \$procmux$11264_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$10500  = ready_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$11315 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11315  = b[0:0];
      2'b1?:
        \$procmux$11315  = b[1:1];
      default:
        \$procmux$11315  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$11315 (1'h0, { ready_i, req_synced }, { \$procmux$11264_CMP , \$procmux$11253_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17519 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17521 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17523 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17525 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$10573 ;
  wire \$procmux$11099_CMP ;
  wire \$procmux$11110_CMP ;
  wire \$procmux$11124_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17525 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17519  = { \$procmux$11110_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17521  = { \$procmux$11124_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17523  = { \$procmux$11099_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17525  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17519 , \$auto$opt_dff.cc:194:make_patterns_logic$17521 , \$auto$opt_dff.cc:194:make_patterns_logic$17523  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$11099_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$11110_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [0:0] \$procmux$11121 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11121  = b[0:0];
      2'b1?:
        \$procmux$11121  = b[1:1];
      default:
        \$procmux$11121  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$11121 (1'h0, { req_synced, 1'h1 }, { \$procmux$11124_CMP , \$procmux$11110_CMP  });
  assign \$procmux$11124_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  function [1:0] \$procmux$11127 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11127  = b[1:0];
      2'b1?:
        \$procmux$11127  = b[3:2];
      default:
        \$procmux$11127  = a;
    endcase
  endfunction
  assign state_d = \$procmux$11127 (2'h0, { \$auto$slang_frontend.cc:694:finish$\state_d$10573 , 2'h2 }, { \$procmux$11124_CMP , \$procmux$11110_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$10573  = ready_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$11161 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11161  = b[0:0];
      2'b1?:
        \$procmux$11161  = b[1:1];
      default:
        \$procmux$11161  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$11161 (1'h0, { ready_i, req_synced }, { \$procmux$11110_CMP , \$procmux$11099_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17528 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17530 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17532 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17534 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$10646 ;
  wire \$procmux$10945_CMP ;
  wire \$procmux$10956_CMP ;
  wire \$procmux$10970_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17534 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17528  = { \$procmux$10956_CMP , ready_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17530  = { \$procmux$10970_CMP , req_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17532  = { \$procmux$10945_CMP , req_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17534  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17530 , \$auto$opt_dff.cc:194:make_patterns_logic$17528 , \$auto$opt_dff.cc:194:make_patterns_logic$17532  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$10945_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$10956_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [0:0] \$procmux$10967 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10967  = b[0:0];
      2'b1?:
        \$procmux$10967  = b[1:1];
      default:
        \$procmux$10967  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$10967 (1'h0, { req_synced, 1'h1 }, { \$procmux$10970_CMP , \$procmux$10956_CMP  });
  assign \$procmux$10970_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  function [1:0] \$procmux$10973 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10973  = b[1:0];
      2'b1?:
        \$procmux$10973  = b[3:2];
      default:
        \$procmux$10973  = a;
    endcase
  endfunction
  assign state_d = \$procmux$10973 (2'h0, { \$auto$slang_frontend.cc:694:finish$\state_d$10646 , 2'h2 }, { \$procmux$10970_CMP , \$procmux$10956_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$10646  = ready_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$11007 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11007  = b[0:0];
      2'b1?:
        \$procmux$11007  = b[1:1];
      default:
        \$procmux$11007  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$11007 (1'h0, { ready_i, req_synced }, { \$procmux$10956_CMP , \$procmux$10945_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:205.8" *)
module \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst (clk_i, rst_ni, data_o, valid_o, ready_i, async_req_i, async_ack_o, async_data_i);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17537 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17539 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17541 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17543 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\state_d$10719 ;
  wire \$procmux$10791_CMP ;
  wire \$procmux$10802_CMP ;
  wire \$procmux$10816_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.10" *)
  wire ack_dst_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:221.21" *)
  wire ack_dst_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:216.16" *)
  output async_ack_o;
  reg async_ack_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:217.16" *)
  input [1:0] async_data_i;
  wire [1:0] async_data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:215.16" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:211.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:212.16" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:214.16" *)
  input ready_i;
  wire ready_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:223.10" *)
  wire req_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:210.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:231.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:213.16" *)
  output valid_o;
  wire valid_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:284.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17543 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17537  = { req_synced, \$procmux$10791_CMP  } != 2'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17539  = { ready_i, \$procmux$10802_CMP  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17541  = { req_synced, \$procmux$10816_CMP  } != 2'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17543  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17537 , \$auto$opt_dff.cc:194:make_patterns_logic$17539 , \$auto$opt_dff.cc:194:make_patterns_logic$17541  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:293.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_ack_o <= 1'h0;
    else async_ack_o <= ack_dst_d;
  assign \$procmux$10791_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 2'h2;
  assign \$procmux$10802_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) 1'h1;
  function [0:0] \$procmux$10813 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:262.28-268.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10813  = b[0:0];
      2'b1?:
        \$procmux$10813  = b[1:1];
      default:
        \$procmux$10813  = a;
    endcase
  endfunction
  assign valid_o = \$procmux$10813 (1'h0, { req_synced, 1'h1 }, { \$procmux$10816_CMP , \$procmux$10802_CMP  });
  assign \$procmux$10816_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:252.9-259.12|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *) state_q;
  function [1:0] \$procmux$10819 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10819  = b[1:0];
      2'b1?:
        \$procmux$10819  = b[3:2];
      default:
        \$procmux$10819  = a;
    endcase
  endfunction
  assign state_d = \$procmux$10819 (2'h0, { \$auto$slang_frontend.cc:694:finish$\state_d$10719 , 2'h2 }, { \$procmux$10816_CMP , \$procmux$10802_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$10719  = ready_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:255.13-255.41|../rtl/common_cells/cdc_4phase.sv:254.11-258.14" *) 2'h2 : 2'h1;
  function [0:0] \$procmux$10853 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:270.26-276.10|../rtl/common_cells/cdc_4phase.sv:249.5-281.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10853  = b[0:0];
      2'b1?:
        \$procmux$10853  = b[1:1];
      default:
        \$procmux$10853  = a;
    endcase
  endfunction
  assign ack_dst_d = \$procmux$10853 (1'h0, { ready_i, req_synced }, { \$procmux$10802_CMP , \$procmux$10791_CMP  });
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:236.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_req_i),
    .serial_o(req_synced)
  );
  assign ack_dst_q = async_ack_o;
  assign data_o = async_data_i;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17549 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17551 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17553 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17546 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17555 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$10461 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$10474 ;
  wire \$procmux$11323_CMP ;
  wire \$procmux$11339_CMP ;
  wire \$procmux$11353_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17546 ) async_data_o <= data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17555 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17549  = { \$procmux$11353_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17551  = { \$procmux$11339_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17553  = { \$procmux$11323_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17546  = & { \$procmux$11353_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17555  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17551 , \$auto$opt_dff.cc:194:make_patterns_logic$17549 , \$auto$opt_dff.cc:194:make_patterns_logic$17553  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$11323_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\ready_o$10474  = ~ (* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *) ack_synced;
  assign \$procmux$11339_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign data_src_d = \$procmux$11353_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\data_src_d$10461  : async_data_o;
  assign \$procmux$11353_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  function [0:0] \$procmux$11358 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11358  = b[0:0];
      2'b1?:
        \$procmux$11358  = b[1:1];
      default:
        \$procmux$11358  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$11358 (1'h0, { valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$10474  }, { \$procmux$11353_CMP , \$procmux$11339_CMP  });
  assign ready_o = \$procmux$11323_CMP  & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\ready_o$10474 ;
  function [1:0] \$procmux$11371 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11371  = b[1:0];
      2'b1?:
        \$procmux$11371  = b[3:2];
      default:
        \$procmux$11371  = a;
    endcase
  endfunction
  assign state_d = \$procmux$11371 (2'h0, 4'h6, { \$procmux$11353_CMP , \$procmux$11339_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$10461  = valid_i ? (* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17561 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17563 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17565 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17558 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17567 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$10534 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$10547 ;
  wire \$procmux$11169_CMP ;
  wire \$procmux$11185_CMP ;
  wire \$procmux$11199_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17558 ) async_data_o <= data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17567 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17561  = { \$procmux$11199_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17563  = { \$procmux$11185_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17565  = { \$procmux$11169_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17558  = & { \$procmux$11199_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17567  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17563 , \$auto$opt_dff.cc:194:make_patterns_logic$17561 , \$auto$opt_dff.cc:194:make_patterns_logic$17565  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$11169_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\ready_o$10547  = ~ (* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *) ack_synced;
  assign \$procmux$11185_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign data_src_d = \$procmux$11199_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\data_src_d$10534  : async_data_o;
  assign \$procmux$11199_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  function [0:0] \$procmux$11204 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11204  = b[0:0];
      2'b1?:
        \$procmux$11204  = b[1:1];
      default:
        \$procmux$11204  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$11204 (1'h0, { valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$10547  }, { \$procmux$11199_CMP , \$procmux$11185_CMP  });
  assign ready_o = \$procmux$11169_CMP  & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\ready_o$10547 ;
  function [1:0] \$procmux$11217 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11217  = b[1:0];
      2'b1?:
        \$procmux$11217  = b[3:2];
      default:
        \$procmux$11217  = a;
    endcase
  endfunction
  assign state_d = \$procmux$11217 (2'h0, 4'h6, { \$procmux$11199_CMP , \$procmux$11185_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$10534  = valid_i ? (* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17573 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17575 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17577 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17570 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17579 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$10607 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$10620 ;
  wire \$procmux$11015_CMP ;
  wire \$procmux$11031_CMP ;
  wire \$procmux$11045_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17570 ) async_data_o <= data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17579 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17573  = { \$procmux$11045_CMP , valid_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17575  = { \$procmux$11031_CMP , ack_synced } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17577  = { \$procmux$11015_CMP , ack_synced } != 2'h3;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17570  = & { \$procmux$11045_CMP , valid_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17579  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17575 , \$auto$opt_dff.cc:194:make_patterns_logic$17577 , \$auto$opt_dff.cc:194:make_patterns_logic$17573  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$11015_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\ready_o$10620  = ~ (* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *) ack_synced;
  assign \$procmux$11031_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign data_src_d = \$procmux$11045_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\data_src_d$10607  : async_data_o;
  assign \$procmux$11045_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  function [0:0] \$procmux$11050 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11050  = b[0:0];
      2'b1?:
        \$procmux$11050  = b[1:1];
      default:
        \$procmux$11050  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$11050 (1'h0, { valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$10620  }, { \$procmux$11045_CMP , \$procmux$11031_CMP  });
  assign ready_o = \$procmux$11015_CMP  & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\ready_o$10620 ;
  function [1:0] \$procmux$11063 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11063  = b[1:0];
      2'b1?:
        \$procmux$11063  = b[3:2];
      default:
        \$procmux$11063  = a;
    endcase
  endfunction
  assign state_d = \$procmux$11063 (2'h0, 4'h6, { \$procmux$11045_CMP , \$procmux$11031_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$10607  = valid_i ? (* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_4phase.sv:92.8" *)
module \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src (clk_i, rst_ni, data_i, valid_i, ready_o, async_req_o, async_ack_i, async_data_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17585 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17587 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17589 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17582 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17591 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\data_src_d$10680 ;
  (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *)
  wire \$auto$slang_frontend.cc:694:finish$\ready_o$10693 ;
  wire \$procmux$10861_CMP ;
  wire \$procmux$10877_CMP ;
  wire \$procmux$10891_CMP ;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:114.10" *)
  wire ack_synced;
  (* src = "../rtl/common_cells/cdc_4phase.sv:105.16" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:106.16" *)
  output [1:0] async_data_o;
  reg [1:0] async_data_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:104.16" *)
  output async_req_o;
  reg async_req_o;
  (* src = "../rtl/common_cells/cdc_4phase.sv:100.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:101.16" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.5" *)
  (* unused_bits = "0 1" *)
  wire [1:0] data_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:112.17" *)
  wire [1:0] data_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:103.16" *)
  output ready_o;
  wire ready_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.10" *)
  wire req_src_d;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:110.21" *)
  wire req_src_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:99.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.11" *)
  wire [1:0] state_d;
  (* src = "../rtl/common_cells/cdc_4phase.sv:117.20" *)
  reg [1:0] state_q;
  (* src = "../rtl/common_cells/cdc_4phase.sv:102.16" *)
  input valid_i;
  wire valid_i;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_data_o <= 2'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17582 ) async_data_o <= data_i;
  (* src = "../rtl/common_cells/cdc_4phase.sv:172.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17591 ) state_q <= state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17585  = { ack_synced, \$procmux$10861_CMP  } != 2'h3;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17587  = { ack_synced, \$procmux$10877_CMP  } != 2'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17589  = { valid_i, \$procmux$10891_CMP  } != 2'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17582  = & { valid_i, \$procmux$10891_CMP  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17591  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17589 , \$auto$opt_dff.cc:194:make_patterns_logic$17585 , \$auto$opt_dff.cc:194:make_patterns_logic$17587  };
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:181.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) async_req_o <= 1'h1;
    else async_req_o <= req_src_d;
  assign \$procmux$10861_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\ready_o$10693  = ~ (* src = "../rtl/common_cells/cdc_4phase.sv:159.33-164.12|../rtl/common_cells/cdc_4phase.sv:159.9-164.12" *) ack_synced;
  assign \$procmux$10877_CMP  = state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) 1'h1;
  assign data_src_d = \$procmux$10891_CMP  ? (* full_case = 32'd1 *) (* keep = "true" *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\data_src_d$10680  : async_data_o;
  assign \$procmux$10891_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:136.13-150.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) state_q;
  function [0:0] \$procmux$10896 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* keep = "true" *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:151.24-157.10|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10896  = b[0:0];
      2'b1?:
        \$procmux$10896  = b[1:1];
      default:
        \$procmux$10896  = a;
    endcase
  endfunction
  assign req_src_d = \$procmux$10896 (1'h0, { valid_i, \$auto$slang_frontend.cc:694:finish$\ready_o$10693  }, { \$procmux$10891_CMP , \$procmux$10877_CMP  });
  assign ready_o = \$procmux$10861_CMP  & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *) \$auto$slang_frontend.cc:694:finish$\ready_o$10693 ;
  function [1:0] \$procmux$10909 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_4phase.sv:159.9-164.12|../rtl/common_cells/cdc_4phase.sv:135.5-169.12" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$10909  = b[1:0];
      2'b1?:
        \$procmux$10909  = b[3:2];
      default:
        \$procmux$10909  = a;
    endcase
  endfunction
  assign state_d = \$procmux$10909 (2'h0, 4'h6, { \$procmux$10891_CMP , \$procmux$10877_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\data_src_d$10680  = valid_i ? (* src = "../rtl/common_cells/cdc_4phase.sv:145.22-149.12|../rtl/common_cells/cdc_4phase.sv:145.9-149.12" *) data_i : async_data_o;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_4phase.sv:122.5" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync  i_sync (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(async_ack_i),
    .serial_o(ack_synced)
  );
  assign data_src_q = async_data_o;
  assign req_src_q = async_req_o;
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:109.8" *)
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:125.15" *)
  input a_clear_ack_i;
  wire a_clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:123.16" *)
  input a_clear_i;
  wire a_clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:124.16" *)
  output a_clear_o;
  wire a_clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:121.16" *)
  input a_clk_i;
  wire a_clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:127.16" *)
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:126.16" *)
  output a_isolate_o;
  wire a_isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:122.16" *)
  input a_rst_ni;
  wire a_rst_ni;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.31" *)
  wire async_a2b_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:141.21" *)
  wire [1:0] async_a2b_next_phase;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.16" *)
  wire async_a2b_req;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.31" *)
  wire async_b2a_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:145.21" *)
  wire [1:0] async_b2a_next_phase;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.16" *)
  wire async_b2a_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:133.16" *)
  input b_clear_ack_i;
  wire b_clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:131.16" *)
  input b_clear_i;
  wire b_clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:132.16" *)
  output b_clear_o;
  wire b_clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:129.16" *)
  input b_clk_i;
  wire b_clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:135.16" *)
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:134.16" *)
  output b_isolate_o;
  wire b_isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:130.16" *)
  input b_rst_ni;
  wire b_rst_ni;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:150.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:169.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:109.8" *)
module \cdc_reset_ctrlr$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr (a_clk_i, a_rst_ni, a_clear_i, a_clear_o, a_clear_ack_i, a_isolate_o, a_isolate_ack_i, b_clk_i, b_rst_ni, b_clear_i, b_clear_o, b_clear_ack_i, b_isolate_o, b_isolate_ack_i);
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:125.15" *)
  input a_clear_ack_i;
  wire a_clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:123.16" *)
  input a_clear_i;
  wire a_clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:124.16" *)
  output a_clear_o;
  wire a_clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:121.16" *)
  input a_clk_i;
  wire a_clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:127.16" *)
  input a_isolate_ack_i;
  wire a_isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:126.16" *)
  output a_isolate_o;
  wire a_isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:122.16" *)
  input a_rst_ni;
  wire a_rst_ni;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.31" *)
  wire async_a2b_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:141.21" *)
  wire [1:0] async_a2b_next_phase;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.16" *)
  wire async_a2b_req;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:139.31" *)
  wire async_b2a_ack;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:145.21" *)
  wire [1:0] async_b2a_next_phase;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:143.16" *)
  wire async_b2a_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:133.16" *)
  input b_clear_ack_i;
  wire b_clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:131.16" *)
  input b_clear_i;
  wire b_clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:132.16" *)
  output b_clear_o;
  wire b_clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:129.16" *)
  input b_clk_i;
  wire b_clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:135.16" *)
  input b_isolate_ack_i;
  wire b_isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:134.16" *)
  output b_isolate_o;
  wire b_isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:130.16" *)
  input b_rst_ni;
  wire b_rst_ni;
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:150.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a  i_cdc_reset_ctrlr_half_a (
    .async_ack_i(async_b2a_ack),
    .async_ack_o(async_a2b_ack),
    .async_next_phase_i(async_b2a_next_phase),
    .async_next_phase_o(async_a2b_next_phase),
    .async_req_i(async_b2a_req),
    .async_req_o(async_a2b_req),
    .clear_ack_i(a_clear_ack_i),
    .clear_i(a_clear_i),
    .clear_o(a_clear_o),
    .clk_i(a_clk_i),
    .isolate_ack_i(a_isolate_ack_i),
    .isolate_o(a_isolate_o),
    .rst_ni(a_rst_ni)
  );
  (* keep = "true" *)
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:169.5" *)
  \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b  i_cdc_reset_ctrlr_half_b (
    .async_ack_i(async_a2b_ack),
    .async_ack_o(async_b2a_ack),
    .async_next_phase_i(async_a2b_next_phase),
    .async_next_phase_o(async_b2a_next_phase),
    .async_req_i(async_a2b_req),
    .async_req_o(async_b2a_req),
    .clear_ack_i(b_clear_ack_i),
    .clear_i(b_clear_i),
    .clear_o(b_clear_o),
    .clk_i(b_clk_i),
    .isolate_ack_i(b_isolate_ack_i),
    .isolate_o(b_isolate_o),
    .rst_ni(b_rst_ni)
  );
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$10126 ;
  wire \$auto$builder.cc:338:Biop$10143 ;
  wire \$auto$builder.cc:338:Biop$10182 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17595 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17597 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17599 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17601 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17603 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17605 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17607 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17609 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17611 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17613 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17117 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17119 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17125 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17129 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17131 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17135 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18097 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18099 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10135 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10151 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10152 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10191 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10194 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10189 ;
  wire \$procmux$12292_CMP ;
  wire \$procmux$12293_CMP ;
  wire \$procmux$12294_CMP ;
  wire \$procmux$12295_CMP ;
  wire \$procmux$12327_CMP ;
  wire \$procmux$12328_CMP ;
  wire \$procmux$12329_CMP ;
  wire \$procmux$12330_CMP ;
  wire \$procmux$12355_CMP ;
  wire \$procmux$12361_CMP ;
  wire \$procmux$12368_CMP ;
  wire \$procmux$12376_CMP ;
  wire \$procmux$12391_CMP ;
  wire \$procmux$12426_CMP ;
  wire \$procmux$12437_CMP ;
  wire \$procmux$12455_CMP ;
  wire \$procmux$12506_CMP ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$10126  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$auto$builder.cc:338:Biop$10143  = initiator_phase_transition_ack && clear_ack_i;
  assign \$auto$builder.cc:338:Biop$10182  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$10182 ) receiver_phase_q <= receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17613 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17595  = { \$procmux$12506_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17597  = { \$procmux$12455_CMP , \$auto$builder.cc:338:Biop$10126 , initiator_phase_transition_ack, isolate_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17599  = { \$procmux$12437_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17601  = { \$procmux$12391_CMP , \$auto$builder.cc:338:Biop$10143 , initiator_phase_transition_ack, clear_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17603  = { \$procmux$12376_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17605  = { \$procmux$12355_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17607  = { \$procmux$12361_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17609  = { \$procmux$12368_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17611  = { \$procmux$12426_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17613  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17599 , \$auto$opt_dff.cc:194:make_patterns_logic$17601 , \$auto$opt_dff.cc:194:make_patterns_logic$17603 , \$auto$opt_dff.cc:194:make_patterns_logic$17605 , \$auto$opt_dff.cc:194:make_patterns_logic$17607 , \$auto$opt_dff.cc:194:make_patterns_logic$17609 , \$auto$opt_dff.cc:194:make_patterns_logic$17611 , \$auto$opt_dff.cc:194:make_patterns_logic$17597 , \$auto$opt_dff.cc:194:make_patterns_logic$17595  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17117  = | { \$procmux$12294_CMP , \$procmux$12293_CMP , \$procmux$12292_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17119  = | { \$procmux$12330_CMP , \$procmux$12329_CMP , \$procmux$12327_CMP  };
  assign initiator_isolate_out = | { \$procmux$12455_CMP , \$procmux$12437_CMP , \$procmux$12426_CMP , \$procmux$12391_CMP , \$procmux$12376_CMP , \$procmux$12368_CMP , \$procmux$12361_CMP , \$procmux$12355_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17125  = | { \$procmux$12329_CMP , \$procmux$12328_CMP , \$procmux$12327_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$12455_CMP , \$procmux$12426_CMP , \$procmux$12391_CMP , \$procmux$12368_CMP , \$procmux$12361_CMP , \$procmux$12355_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17129  = | { \$procmux$12330_CMP , \$procmux$12327_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17131  = | { \$procmux$12295_CMP , \$procmux$12294_CMP , \$procmux$12292_CMP  };
  assign initiator_clear_out = | { \$procmux$12391_CMP , \$procmux$12376_CMP , \$procmux$12368_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17135  = | { \$procmux$12455_CMP , \$procmux$12437_CMP , \$procmux$12426_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18097  = | { \$procmux$12376_CMP , \$procmux$12368_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18099  = | { \$procmux$12437_CMP , \$procmux$12426_CMP  };
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10194  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17131 ;
  assign \$procmux$12292_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$12293_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$12294_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$12295_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10191  : \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10194 ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$17125  : \$auto$opt_reduce.cc:137:opt_pmux$17117 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10189 ;
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10191  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17119 ;
  assign \$procmux$12327_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$12328_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$12329_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$12330_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$12342 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12342  = b[0:0];
      2'b1?:
        \$procmux$12342  = b[1:1];
      default:
        \$procmux$12342  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10189  = \$procmux$12342 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$12328_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17129  });
  assign \$procmux$12355_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$12361_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$12368_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$12376_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$12391_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10151 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10152 [1:0] = \$auto$builder.cc:338:Biop$10143  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10151 [1:0];
  assign \$procmux$12426_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$12437_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$12455_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10135 [2:0] = \$auto$builder.cc:338:Biop$10126  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$12489 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$12489  = b[3:0];
      6'b????1?:
        \$procmux$12489  = b[7:4];
      6'b???1??:
        \$procmux$12489  = b[11:8];
      6'b??1???:
        \$procmux$12489  = b[15:12];
      6'b?1????:
        \$procmux$12489  = b[19:16];
      6'b1?????:
        \$procmux$12489  = b[23:20];
      default:
        \$procmux$12489  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$12489 (4'h1, { 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10135 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10152 [1:0], 12'h780 }, { \$procmux$12455_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18099 , \$procmux$12391_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18097 , \$procmux$12361_CMP , \$procmux$12355_CMP  });
  assign \$procmux$12506_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$12573 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12573  = b[1:0];
      3'b?1?:
        \$procmux$12573  = b[3:2];
      3'b1??:
        \$procmux$12573  = b[5:4];
      default:
        \$procmux$12573  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$12573 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$17135 , initiator_clear_out, \$procmux$12361_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10135 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10151 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10152 [3:2] = 2'h1;
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$10207 ;
  wire \$auto$builder.cc:338:Biop$10224 ;
  wire \$auto$builder.cc:338:Biop$10263 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17617 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17619 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17621 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17623 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17625 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17627 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17629 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17631 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17633 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17635 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17137 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17139 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17145 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17149 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17151 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17155 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18101 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18103 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10216 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10232 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10233 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10272 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10275 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10270 ;
  wire \$procmux$11996_CMP ;
  wire \$procmux$11997_CMP ;
  wire \$procmux$11998_CMP ;
  wire \$procmux$11999_CMP ;
  wire \$procmux$12031_CMP ;
  wire \$procmux$12032_CMP ;
  wire \$procmux$12033_CMP ;
  wire \$procmux$12034_CMP ;
  wire \$procmux$12059_CMP ;
  wire \$procmux$12065_CMP ;
  wire \$procmux$12072_CMP ;
  wire \$procmux$12080_CMP ;
  wire \$procmux$12095_CMP ;
  wire \$procmux$12130_CMP ;
  wire \$procmux$12141_CMP ;
  wire \$procmux$12159_CMP ;
  wire \$procmux$12210_CMP ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$10207  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$auto$builder.cc:338:Biop$10224  = initiator_phase_transition_ack && clear_ack_i;
  assign \$auto$builder.cc:338:Biop$10263  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$10263 ) receiver_phase_q <= receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17635 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17617  = { \$procmux$12210_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17619  = { \$procmux$12159_CMP , \$auto$builder.cc:338:Biop$10207 , initiator_phase_transition_ack, isolate_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17621  = { \$procmux$12141_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17623  = { \$procmux$12095_CMP , \$auto$builder.cc:338:Biop$10224 , initiator_phase_transition_ack, clear_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17625  = { \$procmux$12080_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17627  = { \$procmux$12059_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17629  = { \$procmux$12065_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17631  = { \$procmux$12072_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17633  = { \$procmux$12130_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17635  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17631 , \$auto$opt_dff.cc:194:make_patterns_logic$17629 , \$auto$opt_dff.cc:194:make_patterns_logic$17633 , \$auto$opt_dff.cc:194:make_patterns_logic$17617 , \$auto$opt_dff.cc:194:make_patterns_logic$17619 , \$auto$opt_dff.cc:194:make_patterns_logic$17621 , \$auto$opt_dff.cc:194:make_patterns_logic$17623 , \$auto$opt_dff.cc:194:make_patterns_logic$17625 , \$auto$opt_dff.cc:194:make_patterns_logic$17627  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17137  = | { \$procmux$11998_CMP , \$procmux$11997_CMP , \$procmux$11996_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17139  = | { \$procmux$12034_CMP , \$procmux$12033_CMP , \$procmux$12031_CMP  };
  assign initiator_isolate_out = | { \$procmux$12159_CMP , \$procmux$12141_CMP , \$procmux$12130_CMP , \$procmux$12095_CMP , \$procmux$12080_CMP , \$procmux$12072_CMP , \$procmux$12065_CMP , \$procmux$12059_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17145  = | { \$procmux$12033_CMP , \$procmux$12032_CMP , \$procmux$12031_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$12159_CMP , \$procmux$12130_CMP , \$procmux$12095_CMP , \$procmux$12072_CMP , \$procmux$12065_CMP , \$procmux$12059_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17149  = | { \$procmux$12034_CMP , \$procmux$12031_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17151  = | { \$procmux$11999_CMP , \$procmux$11998_CMP , \$procmux$11996_CMP  };
  assign initiator_clear_out = | { \$procmux$12095_CMP , \$procmux$12080_CMP , \$procmux$12072_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17155  = | { \$procmux$12159_CMP , \$procmux$12141_CMP , \$procmux$12130_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18101  = | { \$procmux$12080_CMP , \$procmux$12072_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18103  = | { \$procmux$12141_CMP , \$procmux$12130_CMP  };
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10275  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17151 ;
  assign \$procmux$11996_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$11997_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$11998_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$11999_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10272  : \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10275 ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$17145  : \$auto$opt_reduce.cc:137:opt_pmux$17137 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10270 ;
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10272  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17139 ;
  assign \$procmux$12031_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$12032_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$12033_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$12034_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$12046 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$12046  = b[0:0];
      2'b1?:
        \$procmux$12046  = b[1:1];
      default:
        \$procmux$12046  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10270  = \$procmux$12046 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$12032_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17149  });
  assign \$procmux$12059_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$12065_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$12072_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$12080_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$12095_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10232 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10233 [1:0] = \$auto$builder.cc:338:Biop$10224  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10232 [1:0];
  assign \$procmux$12130_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$12141_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$12159_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10216 [2:0] = \$auto$builder.cc:338:Biop$10207  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$12193 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$12193  = b[3:0];
      6'b????1?:
        \$procmux$12193  = b[7:4];
      6'b???1??:
        \$procmux$12193  = b[11:8];
      6'b??1???:
        \$procmux$12193  = b[15:12];
      6'b?1????:
        \$procmux$12193  = b[19:16];
      6'b1?????:
        \$procmux$12193  = b[23:20];
      default:
        \$procmux$12193  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$12193 (4'h1, { 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10216 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10233 [1:0], 12'h780 }, { \$procmux$12159_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18103 , \$procmux$12095_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18101 , \$procmux$12065_CMP , \$procmux$12059_CMP  });
  assign \$procmux$12210_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$12277 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12277  = b[1:0];
      3'b?1?:
        \$procmux$12277  = b[3:2];
      3'b1??:
        \$procmux$12277  = b[5:4];
      default:
        \$procmux$12277  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$12277 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$17155 , initiator_clear_out, \$procmux$12065_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10216 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10232 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10233 [3:2] = 2'h1;
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$10298 ;
  wire \$auto$builder.cc:338:Biop$10315 ;
  wire \$auto$builder.cc:338:Biop$10354 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17639 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17641 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17643 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17645 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17647 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17649 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17651 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17653 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17655 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17657 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17157 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17159 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17165 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17169 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17171 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17175 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18105 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18107 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10307 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10323 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10324 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10363 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10366 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10361 ;
  wire \$procmux$11700_CMP ;
  wire \$procmux$11701_CMP ;
  wire \$procmux$11702_CMP ;
  wire \$procmux$11703_CMP ;
  wire \$procmux$11735_CMP ;
  wire \$procmux$11736_CMP ;
  wire \$procmux$11737_CMP ;
  wire \$procmux$11738_CMP ;
  wire \$procmux$11763_CMP ;
  wire \$procmux$11769_CMP ;
  wire \$procmux$11776_CMP ;
  wire \$procmux$11784_CMP ;
  wire \$procmux$11799_CMP ;
  wire \$procmux$11834_CMP ;
  wire \$procmux$11845_CMP ;
  wire \$procmux$11863_CMP ;
  wire \$procmux$11914_CMP ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$10298  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$auto$builder.cc:338:Biop$10315  = initiator_phase_transition_ack && clear_ack_i;
  assign \$auto$builder.cc:338:Biop$10354  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$10354 ) receiver_phase_q <= receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17657 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17639  = { \$procmux$11914_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17641  = { \$procmux$11863_CMP , \$auto$builder.cc:338:Biop$10298 , initiator_phase_transition_ack, isolate_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17643  = { \$procmux$11845_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17645  = { \$procmux$11799_CMP , \$auto$builder.cc:338:Biop$10315 , initiator_phase_transition_ack, clear_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17647  = { \$procmux$11784_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17649  = { \$procmux$11763_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17651  = { \$procmux$11769_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17653  = { \$procmux$11776_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17655  = { \$procmux$11834_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17657  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17639 , \$auto$opt_dff.cc:194:make_patterns_logic$17643 , \$auto$opt_dff.cc:194:make_patterns_logic$17641 , \$auto$opt_dff.cc:194:make_patterns_logic$17655 , \$auto$opt_dff.cc:194:make_patterns_logic$17651 , \$auto$opt_dff.cc:194:make_patterns_logic$17653 , \$auto$opt_dff.cc:194:make_patterns_logic$17645 , \$auto$opt_dff.cc:194:make_patterns_logic$17649 , \$auto$opt_dff.cc:194:make_patterns_logic$17647  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17157  = | { \$procmux$11702_CMP , \$procmux$11701_CMP , \$procmux$11700_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17159  = | { \$procmux$11738_CMP , \$procmux$11737_CMP , \$procmux$11735_CMP  };
  assign initiator_isolate_out = | { \$procmux$11863_CMP , \$procmux$11845_CMP , \$procmux$11834_CMP , \$procmux$11799_CMP , \$procmux$11784_CMP , \$procmux$11776_CMP , \$procmux$11769_CMP , \$procmux$11763_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17165  = | { \$procmux$11737_CMP , \$procmux$11736_CMP , \$procmux$11735_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$11863_CMP , \$procmux$11834_CMP , \$procmux$11799_CMP , \$procmux$11776_CMP , \$procmux$11769_CMP , \$procmux$11763_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17169  = | { \$procmux$11738_CMP , \$procmux$11735_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17171  = | { \$procmux$11703_CMP , \$procmux$11702_CMP , \$procmux$11700_CMP  };
  assign initiator_clear_out = | { \$procmux$11799_CMP , \$procmux$11784_CMP , \$procmux$11776_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17175  = | { \$procmux$11863_CMP , \$procmux$11845_CMP , \$procmux$11834_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18105  = | { \$procmux$11784_CMP , \$procmux$11776_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18107  = | { \$procmux$11845_CMP , \$procmux$11834_CMP  };
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10366  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17171 ;
  assign \$procmux$11700_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$11701_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$11702_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$11703_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10363  : \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10366 ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$17165  : \$auto$opt_reduce.cc:137:opt_pmux$17157 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10361 ;
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10363  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17159 ;
  assign \$procmux$11735_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$11736_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$11737_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$11738_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$11750 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11750  = b[0:0];
      2'b1?:
        \$procmux$11750  = b[1:1];
      default:
        \$procmux$11750  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10361  = \$procmux$11750 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$11736_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17169  });
  assign \$procmux$11763_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$11769_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$11776_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$11784_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$11799_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10323 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10324 [1:0] = \$auto$builder.cc:338:Biop$10315  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10323 [1:0];
  assign \$procmux$11834_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$11845_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$11863_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10307 [2:0] = \$auto$builder.cc:338:Biop$10298  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$11897 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$11897  = b[3:0];
      6'b????1?:
        \$procmux$11897  = b[7:4];
      6'b???1??:
        \$procmux$11897  = b[11:8];
      6'b??1???:
        \$procmux$11897  = b[15:12];
      6'b?1????:
        \$procmux$11897  = b[19:16];
      6'b1?????:
        \$procmux$11897  = b[23:20];
      default:
        \$procmux$11897  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$11897 (4'h1, { 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10307 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10324 [1:0], 12'h780 }, { \$procmux$11863_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18107 , \$procmux$11799_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18105 , \$procmux$11769_CMP , \$procmux$11763_CMP  });
  assign \$procmux$11914_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$11981 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$11981  = b[1:0];
      3'b?1?:
        \$procmux$11981  = b[3:2];
      3'b1??:
        \$procmux$11981  = b[5:4];
      default:
        \$procmux$11981  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$11981 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$17175 , initiator_clear_out, \$procmux$11769_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10307 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10323 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10324 [3:2] = 2'h1;
endmodule

(* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:187.8" *)
module \cdc_reset_ctrlr_half$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b (clk_i, rst_ni, clear_i, async_req_o, async_ack_i, async_req_i, async_ack_o, isolate_o, isolate_ack_i, clear_o, clear_ack_i, async_next_phase_o, async_next_phase_i);
  wire \$auto$builder.cc:338:Biop$10379 ;
  wire \$auto$builder.cc:338:Biop$10396 ;
  wire \$auto$builder.cc:338:Biop$10435 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17661 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17663 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17665 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17667 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17669 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17671 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17673 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17675 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17677 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17679 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17177 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17179 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17185 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17189 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17191 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17195 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18109 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$18111 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10388 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10404 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10405 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10444 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10447 ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10442 ;
  wire \$procmux$11404_CMP ;
  wire \$procmux$11405_CMP ;
  wire \$procmux$11406_CMP ;
  wire \$procmux$11407_CMP ;
  wire \$procmux$11439_CMP ;
  wire \$procmux$11440_CMP ;
  wire \$procmux$11441_CMP ;
  wire \$procmux$11442_CMP ;
  wire \$procmux$11467_CMP ;
  wire \$procmux$11473_CMP ;
  wire \$procmux$11480_CMP ;
  wire \$procmux$11488_CMP ;
  wire \$procmux$11503_CMP ;
  wire \$procmux$11538_CMP ;
  wire \$procmux$11549_CMP ;
  wire \$procmux$11567_CMP ;
  wire \$procmux$11618_CMP ;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:209.30" *)
  input async_ack_i;
  wire async_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:212.30" *)
  output async_ack_o;
  wire async_ack_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:210.30" *)
  input [1:0] async_next_phase_i;
  wire [1:0] async_next_phase_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:207.30" *)
  output [1:0] async_next_phase_o;
  wire [1:0] async_next_phase_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:211.30" *)
  input async_req_i;
  wire async_req_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:208.30" *)
  output async_req_o;
  wire async_req_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:205.30" *)
  input clear_ack_i;
  wire clear_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:201.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:204.30" *)
  output clear_o;
  wire clear_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:199.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:263.30" *)
  wire initiator_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:259.30" *)
  wire [1:0] initiator_clear_seq_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:262.30" *)
  wire initiator_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:261.30" *)
  wire initiator_phase_transition_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:260.30" *)
  wire initiator_phase_transition_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.21" *)
  wire [3:0] initiator_state_d;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:255.40" *)
  reg [3:0] initiator_state_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:203.30" *)
  input isolate_ack_i;
  wire isolate_ack_i;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:202.30" *)
  output isolate_o;
  wire isolate_o;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:419.9" *)
  wire receiver_clear_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:418.9" *)
  wire receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:415.21" *)
  wire [1:0] receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.29" *)
  wire receiver_phase_ack;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:414.21" *)
  reg [1:0] receiver_phase_q;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:416.9" *)
  wire receiver_phase_req;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:200.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$builder.cc:338:Biop$10379  = initiator_phase_transition_ack && isolate_ack_i;
  assign \$auto$builder.cc:338:Biop$10396  = initiator_phase_transition_ack && clear_ack_i;
  assign \$auto$builder.cc:338:Biop$10435  = receiver_phase_req && receiver_phase_ack;
  assign clear_o = initiator_clear_out || receiver_clear_out;
  assign isolate_o = initiator_isolate_out || receiver_isolate_out;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:438.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) receiver_phase_q <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$10435 ) receiver_phase_q <= receiver_next_phase;
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:371.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) initiator_state_q <= 4'h1;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17679 ) initiator_state_q <= initiator_state_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17661  = { \$procmux$11618_CMP , clear_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17663  = { \$procmux$11567_CMP , \$auto$builder.cc:338:Biop$10379 , initiator_phase_transition_ack, isolate_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17665  = { \$procmux$11549_CMP , isolate_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17667  = { \$procmux$11503_CMP , \$auto$builder.cc:338:Biop$10396 , initiator_phase_transition_ack, clear_ack_i } != 4'h8;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17669  = { \$procmux$11488_CMP , clear_ack_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17671  = { \$procmux$11467_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17673  = { \$procmux$11473_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17675  = { \$procmux$11480_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17677  = { \$procmux$11538_CMP , initiator_phase_transition_ack } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17679  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17661 , \$auto$opt_dff.cc:194:make_patterns_logic$17665 , \$auto$opt_dff.cc:194:make_patterns_logic$17663 , \$auto$opt_dff.cc:194:make_patterns_logic$17669 , \$auto$opt_dff.cc:194:make_patterns_logic$17677 , \$auto$opt_dff.cc:194:make_patterns_logic$17675 , \$auto$opt_dff.cc:194:make_patterns_logic$17667 , \$auto$opt_dff.cc:194:make_patterns_logic$17673 , \$auto$opt_dff.cc:194:make_patterns_logic$17671  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17177  = | { \$procmux$11406_CMP , \$procmux$11405_CMP , \$procmux$11404_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17179  = | { \$procmux$11442_CMP , \$procmux$11441_CMP , \$procmux$11439_CMP  };
  assign initiator_isolate_out = | { \$procmux$11567_CMP , \$procmux$11549_CMP , \$procmux$11538_CMP , \$procmux$11503_CMP , \$procmux$11488_CMP , \$procmux$11480_CMP , \$procmux$11473_CMP , \$procmux$11467_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17185  = | { \$procmux$11441_CMP , \$procmux$11440_CMP , \$procmux$11439_CMP  };
  assign initiator_phase_transition_req = | { \$procmux$11567_CMP , \$procmux$11538_CMP , \$procmux$11503_CMP , \$procmux$11480_CMP , \$procmux$11473_CMP , \$procmux$11467_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17189  = | { \$procmux$11442_CMP , \$procmux$11439_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17191  = | { \$procmux$11407_CMP , \$procmux$11406_CMP , \$procmux$11404_CMP  };
  assign initiator_clear_out = | { \$procmux$11503_CMP , \$procmux$11488_CMP , \$procmux$11480_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17195  = | { \$procmux$11567_CMP , \$procmux$11549_CMP , \$procmux$11538_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18109  = | { \$procmux$11488_CMP , \$procmux$11480_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$18111  = | { \$procmux$11549_CMP , \$procmux$11538_CMP  };
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10447  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17191 ;
  assign \$procmux$11404_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:506.33-509.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h3;
  assign \$procmux$11405_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:501.28-504.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 2'h2;
  assign \$procmux$11406_CMP  = receiver_phase_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:496.30-499.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) 1'h1;
  assign \$procmux$11407_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:491.27-494.12|../rtl/common_cells/cdc_reset_ctrlr.sv:490.7-516.14" *) receiver_phase_q;
  assign receiver_clear_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10444  : \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10447 ;
  assign receiver_isolate_out = receiver_phase_req ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$opt_reduce.cc:137:opt_pmux$17185  : \$auto$opt_reduce.cc:137:opt_pmux$17177 ;
  assign receiver_phase_ack = receiver_phase_req & (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14|../rtl/common_cells/cdc_reset_ctrlr.sv:452.5-517.8" *) \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10442 ;
  assign \$auto$slang_frontend.cc:694:finish$\receiver_clear_out$10444  = ~ (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17179 ;
  assign \$procmux$11439_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h3;
  assign \$procmux$11440_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:467.28-472.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 2'h2;
  assign \$procmux$11441_CMP  = receiver_next_phase == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:460.30-465.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) 1'h1;
  assign \$procmux$11442_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:454.27-458.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *) receiver_next_phase;
  function [0:0] \$procmux$11454 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:474.33-478.12|../rtl/common_cells/cdc_reset_ctrlr.sv:453.7-485.14" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \$procmux$11454  = b[0:0];
      2'b1?:
        \$procmux$11454  = b[1:1];
      default:
        \$procmux$11454  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\receiver_phase_ack$10442  = \$procmux$11454 (isolate_ack_i, { clear_ack_i, 1'h1 }, { \$procmux$11440_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17189  });
  assign \$procmux$11467_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 4'h8;
  assign \$procmux$11473_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h7;
  assign \$procmux$11480_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:335.29-343.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h5;
  assign \$procmux$11488_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:326.23-333.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h6;
  assign \$procmux$11503_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:312.14-324.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 3'h4;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10404 [1:0] = initiator_phase_transition_ack ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:320.11-320.46|../rtl/common_cells/cdc_reset_ctrlr.sv:319.18-323.12" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10405 [1:0] = \$auto$builder.cc:338:Biop$10396  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:318.11-318.42|../rtl/common_cells/cdc_reset_ctrlr.sv:317.9-323.12" *) 2'h3 : \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10404 [1:0];
  assign \$procmux$11538_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:302.31-310.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h2;
  assign \$procmux$11549_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:293.25-300.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 2'h3;
  assign \$procmux$11567_CMP  = initiator_state_q == (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:279.16-291.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10388 [2:0] = \$auto$builder.cc:338:Biop$10379  ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:285.11-285.37|../rtl/common_cells/cdc_reset_ctrlr.sv:284.9-290.12" *) 3'h4 : { 2'h1, initiator_phase_transition_ack };
  function [3:0] \$procmux$11601 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:355.17-363.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$11601  = b[3:0];
      6'b????1?:
        \$procmux$11601  = b[7:4];
      6'b???1??:
        \$procmux$11601  = b[11:8];
      6'b??1???:
        \$procmux$11601  = b[15:12];
      6'b?1????:
        \$procmux$11601  = b[19:16];
      6'b1?????:
        \$procmux$11601  = b[23:20];
      default:
        \$procmux$11601  = a;
    endcase
  endfunction
  assign initiator_state_d = \$procmux$11601 (4'h1, { 1'h0, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10388 [2:0], 6'h11, \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10405 [1:0], 12'h780 }, { \$procmux$11567_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18111 , \$procmux$11503_CMP , \$auto$opt_reduce.cc:137:opt_pmux$18109 , \$procmux$11473_CMP , \$procmux$11467_CMP  });
  assign \$procmux$11618_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:274.9-276.12|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *) initiator_state_q;
  function [1:0] \$procmux$11685 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:345.19-353.10|../rtl/common_cells/cdc_reset_ctrlr.sv:272.5-368.12" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$11685  = b[1:0];
      3'b?1?:
        \$procmux$11685  = b[3:2];
      3'b1??:
        \$procmux$11685  = b[5:4];
      default:
        \$procmux$11685  = a;
    endcase
  endfunction
  assign initiator_clear_seq_phase = \$procmux$11685 (2'h0, 6'h1b, { \$auto$opt_reduce.cc:137:opt_pmux$17195 , initiator_clear_out, \$procmux$11473_CMP  });
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:427.5" *)
  \cdc_4phase_dst$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst  i_state_transition_cdc_dst (
    .async_ack_o(async_ack_o),
    .async_data_i(async_next_phase_i),
    .async_req_i(async_req_i),
    .clk_i(clk_i),
    .data_o(receiver_next_phase),
    .ready_i(receiver_phase_ack),
    .rst_ni(rst_ni),
    .valid_o(receiver_phase_req)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/cdc_reset_ctrlr.sv:398.5" *)
  \cdc_4phase_src$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src  i_state_transition_cdc_src (
    .async_ack_i(async_ack_i),
    .async_data_o(async_next_phase_o),
    .async_req_o(async_req_o),
    .clk_i(clk_i),
    .data_i(initiator_clear_seq_phase),
    .ready_o(initiator_phase_transition_ack),
    .rst_ni(rst_ni),
    .valid_i(initiator_phase_transition_req)
  );
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10388 [3] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10404 [3:2] = 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\initiator_state_d$10405 [3:2] = 2'h1;
endmodule

(* src = "../rtl/core_wrap.sv:8.8" *)
module \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap (clk_i, rst_ni, ref_clk_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_err_i, debug_req_i, fetch_enable_i, core_busy_o, test_enable_i, irqs_i, timer0_irq_i, boot_addr_i, instr_addr_o, instr_rdata_i
, data_be_o, data_addr_o, data_wdata_o, data_rdata_i);
  (* src = "../rtl/core_wrap.sv:17.23" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "../rtl/core_wrap.sv:9.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/core_wrap.sv:44.23" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "../rtl/core_wrap.sv:33.23" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "../rtl/core_wrap.sv:32.23" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "../rtl/core_wrap.sv:36.23" *)
  input data_err_i;
  wire data_err_i;
  (* src = "../rtl/core_wrap.sv:29.23" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "../rtl/core_wrap.sv:35.23" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "../rtl/core_wrap.sv:28.23" *)
  output data_req_o;
  wire data_req_o;
  (* src = "../rtl/core_wrap.sv:30.23" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "../rtl/core_wrap.sv:34.23" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "../rtl/core_wrap.sv:31.23" *)
  output data_we_o;
  wire data_we_o;
  (* src = "../rtl/core_wrap.sv:39.23" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "../rtl/core_wrap.sv:42.23" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "../rtl/core_wrap.sv:23.23" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "../rtl/core_wrap.sv:25.23" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "../rtl/core_wrap.sv:21.23" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "../rtl/core_wrap.sv:24.23" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "../rtl/core_wrap.sv:20.23" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "../rtl/core_wrap.sv:22.23" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "../rtl/core_wrap.sv:14.22" *)
  input [15:0] irqs_i;
  wire [15:0] irqs_i;
  (* src = "../rtl/core_wrap.sv:11.16" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "../rtl/core_wrap.sv:10.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/core_wrap.sv:12.16" *)
  input test_enable_i;
  wire test_enable_i;
  (* src = "../rtl/core_wrap.sv:15.15" *)
  input timer0_irq_i;
  wire timer0_irq_i;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/core_wrap.sv:68.5" *)
  \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex  i_ibex (
    .boot_addr_i({ boot_addr_i[31:8], 8'h00 }),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .debug_req_i(debug_req_i),
    .fetch_enable_i(fetch_enable_i),
    .hart_id_i(32'd0),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .irq_external_i(1'h0),
    .irq_fast_i(irqs_i),
    .irq_nm_i(1'h0),
    .irq_software_i(1'h0),
    .irq_timer_i(timer0_irq_i),
    .rst_ni(rst_ni),
    .test_en_i(test_enable_i)
  );
endmodule

(* top =  1  *)
(* src = "../rtl/croc_chip.sv:8.8" *)
module croc_chip(clk_i, rst_ni, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio0_io, gpio1_io, gpio2_io, gpio3_io, gpio4_io, gpio5_io, gpio6_io, gpio7_io, gpio8_io
, gpio9_io, gpio10_io, gpio11_io, gpio12_io, gpio13_io, gpio14_io, gpio15_io, gpio16_io, gpio17_io, gpio18_io, gpio19_io, gpio20_io, gpio21_io, gpio22_io, gpio23_io, gpio24_io, gpio25_io, gpio26_io, gpio27_io, gpio28_io, gpio29_io
, gpio30_io, gpio31_io, unused0_o, unused1_o, unused2_o, unused3_o);
  (* src = "../rtl/croc_chip.sv:9.15" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/croc_chip.sv:22.15" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "../rtl/croc_chip.sv:25.15" *)
  inout gpio0_io;
  wire gpio0_io;
  (* src = "../rtl/croc_chip.sv:35.15" *)
  inout gpio10_io;
  wire gpio10_io;
  (* src = "../rtl/croc_chip.sv:36.15" *)
  inout gpio11_io;
  wire gpio11_io;
  (* src = "../rtl/croc_chip.sv:37.15" *)
  inout gpio12_io;
  wire gpio12_io;
  (* src = "../rtl/croc_chip.sv:38.15" *)
  inout gpio13_io;
  wire gpio13_io;
  (* src = "../rtl/croc_chip.sv:39.15" *)
  inout gpio14_io;
  wire gpio14_io;
  (* src = "../rtl/croc_chip.sv:40.15" *)
  inout gpio15_io;
  wire gpio15_io;
  (* src = "../rtl/croc_chip.sv:41.15" *)
  inout gpio16_io;
  wire gpio16_io;
  (* src = "../rtl/croc_chip.sv:42.15" *)
  inout gpio17_io;
  wire gpio17_io;
  (* src = "../rtl/croc_chip.sv:43.15" *)
  inout gpio18_io;
  wire gpio18_io;
  (* src = "../rtl/croc_chip.sv:44.15" *)
  inout gpio19_io;
  wire gpio19_io;
  (* src = "../rtl/croc_chip.sv:26.15" *)
  inout gpio1_io;
  wire gpio1_io;
  (* src = "../rtl/croc_chip.sv:45.15" *)
  inout gpio20_io;
  wire gpio20_io;
  (* src = "../rtl/croc_chip.sv:46.15" *)
  inout gpio21_io;
  wire gpio21_io;
  (* src = "../rtl/croc_chip.sv:47.15" *)
  inout gpio22_io;
  wire gpio22_io;
  (* src = "../rtl/croc_chip.sv:48.15" *)
  inout gpio23_io;
  wire gpio23_io;
  (* src = "../rtl/croc_chip.sv:49.15" *)
  inout gpio24_io;
  wire gpio24_io;
  (* src = "../rtl/croc_chip.sv:50.15" *)
  inout gpio25_io;
  wire gpio25_io;
  (* src = "../rtl/croc_chip.sv:51.15" *)
  inout gpio26_io;
  wire gpio26_io;
  (* src = "../rtl/croc_chip.sv:52.15" *)
  inout gpio27_io;
  wire gpio27_io;
  (* src = "../rtl/croc_chip.sv:53.15" *)
  inout gpio28_io;
  wire gpio28_io;
  (* src = "../rtl/croc_chip.sv:54.15" *)
  inout gpio29_io;
  wire gpio29_io;
  (* src = "../rtl/croc_chip.sv:27.15" *)
  inout gpio2_io;
  wire gpio2_io;
  (* src = "../rtl/croc_chip.sv:55.15" *)
  inout gpio30_io;
  wire gpio30_io;
  (* src = "../rtl/croc_chip.sv:56.15" *)
  inout gpio31_io;
  wire gpio31_io;
  (* src = "../rtl/croc_chip.sv:28.15" *)
  inout gpio3_io;
  wire gpio3_io;
  (* src = "../rtl/croc_chip.sv:29.15" *)
  inout gpio4_io;
  wire gpio4_io;
  (* src = "../rtl/croc_chip.sv:30.15" *)
  inout gpio5_io;
  wire gpio5_io;
  (* src = "../rtl/croc_chip.sv:31.15" *)
  inout gpio6_io;
  wire gpio6_io;
  (* src = "../rtl/croc_chip.sv:32.15" *)
  inout gpio7_io;
  wire gpio7_io;
  (* src = "../rtl/croc_chip.sv:33.15" *)
  inout gpio8_io;
  wire gpio8_io;
  (* src = "../rtl/croc_chip.sv:34.15" *)
  inout gpio9_io;
  wire gpio9_io;
  (* src = "../rtl/croc_chip.sv:13.15" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "../rtl/croc_chip.sv:16.15" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "../rtl/croc_chip.sv:17.15" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "../rtl/croc_chip.sv:15.15" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "../rtl/croc_chip.sv:14.15" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "../rtl/croc_chip.sv:11.15" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "../rtl/croc_chip.sv:10.15" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/croc_chip.sv:62.11" *)
  wire soc_clk_i;
  (* src = "../rtl/croc_chip.sv:73.11" *)
  wire soc_fetch_en_i;
  (* src = "../rtl/croc_chip.sv:78.27" *)
  wire [31:0] soc_gpio_i;
  (* src = "../rtl/croc_chip.sv:79.27" *)
  wire [31:0] soc_gpio_o;
  (* src = "../rtl/croc_chip.sv:80.27" *)
  wire [31:0] soc_gpio_out_en_o;
  (* src = "../rtl/croc_chip.sv:67.11" *)
  wire soc_jtag_tck_i;
  (* src = "../rtl/croc_chip.sv:70.11" *)
  wire soc_jtag_tdi_i;
  (* src = "../rtl/croc_chip.sv:71.11" *)
  wire soc_jtag_tdo_o;
  (* src = "../rtl/croc_chip.sv:69.11" *)
  wire soc_jtag_tms_i;
  (* src = "../rtl/croc_chip.sv:68.11" *)
  wire soc_jtag_trst_ni;
  (* src = "../rtl/croc_chip.sv:64.11" *)
  wire soc_ref_clk_i;
  (* src = "../rtl/croc_chip.sv:63.11" *)
  wire soc_rst_ni;
  (* src = "../rtl/croc_chip.sv:74.11" *)
  wire soc_status_o;
  (* src = "../rtl/croc_chip.sv:93.70" *)
  wire soc_uart_rx_i;
  (* src = "../rtl/croc_chip.sv:94.70" *)
  wire soc_uart_tx_o;
  (* src = "../rtl/croc_chip.sv:23.15" *)
  output status_o;
  wire status_o;
  (* src = "../rtl/croc_chip.sv:19.15" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "../rtl/croc_chip.sv:20.15" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "../rtl/croc_chip.sv:57.15" *)
  output unused0_o;
  wire unused0_o;
  (* src = "../rtl/croc_chip.sv:58.15" *)
  output unused1_o;
  wire unused1_o;
  (* src = "../rtl/croc_chip.sv:59.15" *)
  output unused2_o;
  wire unused2_o;
  (* src = "../rtl/croc_chip.sv:60.15" *)
  output unused3_o;
  wire unused3_o;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_chip.sv:159.3" *)
  \croc_soc$croc_chip.i_croc_soc  i_croc_soc (
    .clk_i(soc_clk_i),
    .fetch_en_i(soc_fetch_en_i),
    .gpio_i(soc_gpio_i),
    .gpio_o(soc_gpio_o),
    .gpio_out_en_o(soc_gpio_out_en_o),
    .jtag_tck_i(soc_jtag_tck_i),
    .jtag_tdi_i(soc_jtag_tdi_i),
    .jtag_tdo_o(soc_jtag_tdo_o),
    .jtag_tms_i(soc_jtag_tms_i),
    .jtag_trst_ni(soc_jtag_trst_ni),
    .ref_clk_i(soc_ref_clk_i),
    .rst_ni(soc_rst_ni),
    .status_o(soc_status_o),
    .testmode_i(1'h0),
    .uart_rx_i(soc_uart_rx_i),
    .uart_tx_o(soc_uart_tx_o)
  );
  (* src = "../rtl/croc_chip.sv:82.27" *)
  sg13g2_IOPadIn pad_clk_i (
    .p2c(soc_clk_i),
    .pad(clk_i)
  );
  (* src = "../rtl/croc_chip.sv:96.27" *)
  sg13g2_IOPadIn pad_fetch_en_i (
    .p2c(soc_fetch_en_i),
    .pad(fetch_en_i)
  );
  (* src = "../rtl/croc_chip.sv:99.27" *)
  sg13g2_IOPadInOut30mA pad_gpio0_io (
    .c2p(soc_gpio_o[0]),
    .c2p_en(soc_gpio_out_en_o[0]),
    .p2c(soc_gpio_i[0]),
    .pad(gpio0_io)
  );
  (* src = "../rtl/croc_chip.sv:109.27" *)
  sg13g2_IOPadInOut30mA pad_gpio10_io (
    .c2p(soc_gpio_o[10]),
    .c2p_en(soc_gpio_out_en_o[10]),
    .p2c(soc_gpio_i[10]),
    .pad(gpio10_io)
  );
  (* src = "../rtl/croc_chip.sv:110.27" *)
  sg13g2_IOPadInOut30mA pad_gpio11_io (
    .c2p(soc_gpio_o[11]),
    .c2p_en(soc_gpio_out_en_o[11]),
    .p2c(soc_gpio_i[11]),
    .pad(gpio11_io)
  );
  (* src = "../rtl/croc_chip.sv:111.27" *)
  sg13g2_IOPadInOut30mA pad_gpio12_io (
    .c2p(soc_gpio_o[12]),
    .c2p_en(soc_gpio_out_en_o[12]),
    .p2c(soc_gpio_i[12]),
    .pad(gpio12_io)
  );
  (* src = "../rtl/croc_chip.sv:112.27" *)
  sg13g2_IOPadInOut30mA pad_gpio13_io (
    .c2p(soc_gpio_o[13]),
    .c2p_en(soc_gpio_out_en_o[13]),
    .p2c(soc_gpio_i[13]),
    .pad(gpio13_io)
  );
  (* src = "../rtl/croc_chip.sv:113.27" *)
  sg13g2_IOPadInOut30mA pad_gpio14_io (
    .c2p(soc_gpio_o[14]),
    .c2p_en(soc_gpio_out_en_o[14]),
    .p2c(soc_gpio_i[14]),
    .pad(gpio14_io)
  );
  (* src = "../rtl/croc_chip.sv:114.27" *)
  sg13g2_IOPadInOut30mA pad_gpio15_io (
    .c2p(soc_gpio_o[15]),
    .c2p_en(soc_gpio_out_en_o[15]),
    .p2c(soc_gpio_i[15]),
    .pad(gpio15_io)
  );
  (* src = "../rtl/croc_chip.sv:115.27" *)
  sg13g2_IOPadInOut30mA pad_gpio16_io (
    .c2p(soc_gpio_o[16]),
    .c2p_en(soc_gpio_out_en_o[16]),
    .p2c(soc_gpio_i[16]),
    .pad(gpio16_io)
  );
  (* src = "../rtl/croc_chip.sv:116.27" *)
  sg13g2_IOPadInOut30mA pad_gpio17_io (
    .c2p(soc_gpio_o[17]),
    .c2p_en(soc_gpio_out_en_o[17]),
    .p2c(soc_gpio_i[17]),
    .pad(gpio17_io)
  );
  (* src = "../rtl/croc_chip.sv:117.27" *)
  sg13g2_IOPadInOut30mA pad_gpio18_io (
    .c2p(soc_gpio_o[18]),
    .c2p_en(soc_gpio_out_en_o[18]),
    .p2c(soc_gpio_i[18]),
    .pad(gpio18_io)
  );
  (* src = "../rtl/croc_chip.sv:118.27" *)
  sg13g2_IOPadInOut30mA pad_gpio19_io (
    .c2p(soc_gpio_o[19]),
    .c2p_en(soc_gpio_out_en_o[19]),
    .p2c(soc_gpio_i[19]),
    .pad(gpio19_io)
  );
  (* src = "../rtl/croc_chip.sv:100.27" *)
  sg13g2_IOPadInOut30mA pad_gpio1_io (
    .c2p(soc_gpio_o[1]),
    .c2p_en(soc_gpio_out_en_o[1]),
    .p2c(soc_gpio_i[1]),
    .pad(gpio1_io)
  );
  (* src = "../rtl/croc_chip.sv:119.27" *)
  sg13g2_IOPadInOut30mA pad_gpio20_io (
    .c2p(soc_gpio_o[20]),
    .c2p_en(soc_gpio_out_en_o[20]),
    .p2c(soc_gpio_i[20]),
    .pad(gpio20_io)
  );
  (* src = "../rtl/croc_chip.sv:120.27" *)
  sg13g2_IOPadInOut30mA pad_gpio21_io (
    .c2p(soc_gpio_o[21]),
    .c2p_en(soc_gpio_out_en_o[21]),
    .p2c(soc_gpio_i[21]),
    .pad(gpio21_io)
  );
  (* src = "../rtl/croc_chip.sv:121.27" *)
  sg13g2_IOPadInOut30mA pad_gpio22_io (
    .c2p(soc_gpio_o[22]),
    .c2p_en(soc_gpio_out_en_o[22]),
    .p2c(soc_gpio_i[22]),
    .pad(gpio22_io)
  );
  (* src = "../rtl/croc_chip.sv:122.27" *)
  sg13g2_IOPadInOut30mA pad_gpio23_io (
    .c2p(soc_gpio_o[23]),
    .c2p_en(soc_gpio_out_en_o[23]),
    .p2c(soc_gpio_i[23]),
    .pad(gpio23_io)
  );
  (* src = "../rtl/croc_chip.sv:123.27" *)
  sg13g2_IOPadInOut30mA pad_gpio24_io (
    .c2p(soc_gpio_o[24]),
    .c2p_en(soc_gpio_out_en_o[24]),
    .p2c(soc_gpio_i[24]),
    .pad(gpio24_io)
  );
  (* src = "../rtl/croc_chip.sv:124.27" *)
  sg13g2_IOPadInOut30mA pad_gpio25_io (
    .c2p(soc_gpio_o[25]),
    .c2p_en(soc_gpio_out_en_o[25]),
    .p2c(soc_gpio_i[25]),
    .pad(gpio25_io)
  );
  (* src = "../rtl/croc_chip.sv:125.27" *)
  sg13g2_IOPadInOut30mA pad_gpio26_io (
    .c2p(soc_gpio_o[26]),
    .c2p_en(soc_gpio_out_en_o[26]),
    .p2c(soc_gpio_i[26]),
    .pad(gpio26_io)
  );
  (* src = "../rtl/croc_chip.sv:126.27" *)
  sg13g2_IOPadInOut30mA pad_gpio27_io (
    .c2p(soc_gpio_o[27]),
    .c2p_en(soc_gpio_out_en_o[27]),
    .p2c(soc_gpio_i[27]),
    .pad(gpio27_io)
  );
  (* src = "../rtl/croc_chip.sv:127.27" *)
  sg13g2_IOPadInOut30mA pad_gpio28_io (
    .c2p(soc_gpio_o[28]),
    .c2p_en(soc_gpio_out_en_o[28]),
    .p2c(soc_gpio_i[28]),
    .pad(gpio28_io)
  );
  (* src = "../rtl/croc_chip.sv:128.27" *)
  sg13g2_IOPadInOut30mA pad_gpio29_io (
    .c2p(soc_gpio_o[29]),
    .c2p_en(soc_gpio_out_en_o[29]),
    .p2c(soc_gpio_i[29]),
    .pad(gpio29_io)
  );
  (* src = "../rtl/croc_chip.sv:101.27" *)
  sg13g2_IOPadInOut30mA pad_gpio2_io (
    .c2p(soc_gpio_o[2]),
    .c2p_en(soc_gpio_out_en_o[2]),
    .p2c(soc_gpio_i[2]),
    .pad(gpio2_io)
  );
  (* src = "../rtl/croc_chip.sv:129.27" *)
  sg13g2_IOPadInOut30mA pad_gpio30_io (
    .c2p(soc_gpio_o[30]),
    .c2p_en(soc_gpio_out_en_o[30]),
    .p2c(soc_gpio_i[30]),
    .pad(gpio30_io)
  );
  (* src = "../rtl/croc_chip.sv:130.27" *)
  sg13g2_IOPadInOut30mA pad_gpio31_io (
    .c2p(soc_gpio_o[31]),
    .c2p_en(soc_gpio_out_en_o[31]),
    .p2c(soc_gpio_i[31]),
    .pad(gpio31_io)
  );
  (* src = "../rtl/croc_chip.sv:102.27" *)
  sg13g2_IOPadInOut30mA pad_gpio3_io (
    .c2p(soc_gpio_o[3]),
    .c2p_en(soc_gpio_out_en_o[3]),
    .p2c(soc_gpio_i[3]),
    .pad(gpio3_io)
  );
  (* src = "../rtl/croc_chip.sv:103.27" *)
  sg13g2_IOPadInOut30mA pad_gpio4_io (
    .c2p(soc_gpio_o[4]),
    .c2p_en(soc_gpio_out_en_o[4]),
    .p2c(soc_gpio_i[4]),
    .pad(gpio4_io)
  );
  (* src = "../rtl/croc_chip.sv:104.27" *)
  sg13g2_IOPadInOut30mA pad_gpio5_io (
    .c2p(soc_gpio_o[5]),
    .c2p_en(soc_gpio_out_en_o[5]),
    .p2c(soc_gpio_i[5]),
    .pad(gpio5_io)
  );
  (* src = "../rtl/croc_chip.sv:105.27" *)
  sg13g2_IOPadInOut30mA pad_gpio6_io (
    .c2p(soc_gpio_o[6]),
    .c2p_en(soc_gpio_out_en_o[6]),
    .p2c(soc_gpio_i[6]),
    .pad(gpio6_io)
  );
  (* src = "../rtl/croc_chip.sv:106.27" *)
  sg13g2_IOPadInOut30mA pad_gpio7_io (
    .c2p(soc_gpio_o[7]),
    .c2p_en(soc_gpio_out_en_o[7]),
    .p2c(soc_gpio_i[7]),
    .pad(gpio7_io)
  );
  (* src = "../rtl/croc_chip.sv:107.27" *)
  sg13g2_IOPadInOut30mA pad_gpio8_io (
    .c2p(soc_gpio_o[8]),
    .c2p_en(soc_gpio_out_en_o[8]),
    .p2c(soc_gpio_i[8]),
    .pad(gpio8_io)
  );
  (* src = "../rtl/croc_chip.sv:108.27" *)
  sg13g2_IOPadInOut30mA pad_gpio9_io (
    .c2p(soc_gpio_o[9]),
    .c2p_en(soc_gpio_out_en_o[9]),
    .p2c(soc_gpio_i[9]),
    .pad(gpio9_io)
  );
  (* src = "../rtl/croc_chip.sv:87.27" *)
  sg13g2_IOPadIn pad_jtag_tck_i (
    .p2c(soc_jtag_tck_i),
    .pad(jtag_tck_i)
  );
  (* src = "../rtl/croc_chip.sv:90.27" *)
  sg13g2_IOPadIn pad_jtag_tdi_i (
    .p2c(soc_jtag_tdi_i),
    .pad(jtag_tdi_i)
  );
  (* src = "../rtl/croc_chip.sv:91.27" *)
  sg13g2_IOPadOut16mA pad_jtag_tdo_o (
    .c2p(soc_jtag_tdo_o),
    .pad(jtag_tdo_o)
  );
  (* src = "../rtl/croc_chip.sv:89.27" *)
  sg13g2_IOPadIn pad_jtag_tms_i (
    .p2c(soc_jtag_tms_i),
    .pad(jtag_tms_i)
  );
  (* src = "../rtl/croc_chip.sv:88.27" *)
  sg13g2_IOPadIn pad_jtag_trst_ni (
    .p2c(soc_jtag_trst_ni),
    .pad(jtag_trst_ni)
  );
  (* src = "../rtl/croc_chip.sv:84.27" *)
  sg13g2_IOPadIn pad_ref_clk_i (
    .p2c(soc_ref_clk_i),
    .pad(ref_clk_i)
  );
  (* src = "../rtl/croc_chip.sv:83.27" *)
  sg13g2_IOPadIn pad_rst_ni (
    .p2c(soc_rst_ni),
    .pad(rst_ni)
  );
  (* src = "../rtl/croc_chip.sv:97.27" *)
  sg13g2_IOPadOut16mA pad_status_o (
    .c2p(soc_status_o),
    .pad(status_o)
  );
  (* src = "../rtl/croc_chip.sv:93.27" *)
  sg13g2_IOPadIn pad_uart_rx_i (
    .p2c(soc_uart_rx_i),
    .pad(uart_rx_i)
  );
  (* src = "../rtl/croc_chip.sv:94.27" *)
  sg13g2_IOPadOut16mA pad_uart_tx_o (
    .c2p(soc_uart_tx_o),
    .pad(uart_tx_o)
  );
  (* src = "../rtl/croc_chip.sv:131.25" *)
  sg13g2_IOPadOut16mA pad_unused0_o (
    .c2p(soc_status_o),
    .pad(unused0_o)
  );
  (* src = "../rtl/croc_chip.sv:132.25" *)
  sg13g2_IOPadOut16mA pad_unused1_o (
    .c2p(soc_status_o),
    .pad(unused1_o)
  );
  (* src = "../rtl/croc_chip.sv:133.25" *)
  sg13g2_IOPadOut16mA pad_unused2_o (
    .c2p(soc_status_o),
    .pad(unused2_o)
  );
  (* src = "../rtl/croc_chip.sv:134.25" *)
  sg13g2_IOPadOut16mA pad_unused3_o (
    .c2p(soc_status_o),
    .pad(unused3_o)
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:136.46" *)
  sg13g2_IOPadVdd pad_vdd0 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:137.46" *)
  sg13g2_IOPadVdd pad_vdd1 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:138.46" *)
  sg13g2_IOPadVdd pad_vdd2 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:139.46" *)
  sg13g2_IOPadVdd pad_vdd3 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:146.48" *)
  sg13g2_IOPadIOVdd pad_vddio0 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:147.48" *)
  sg13g2_IOPadIOVdd pad_vddio1 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:148.48" *)
  sg13g2_IOPadIOVdd pad_vddio2 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:149.48" *)
  sg13g2_IOPadIOVdd pad_vddio3 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:141.46" *)
  sg13g2_IOPadVss pad_vss0 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:142.46" *)
  sg13g2_IOPadVss pad_vss1 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:143.46" *)
  sg13g2_IOPadVss pad_vss2 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:144.46" *)
  sg13g2_IOPadVss pad_vss3 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:151.48" *)
  sg13g2_IOPadIOVss pad_vssio0 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:152.48" *)
  sg13g2_IOPadIOVss pad_vssio1 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:153.48" *)
  sg13g2_IOPadIOVss pad_vssio2 (
  );
  (* keep = "true" *)
  (* src = "../rtl/croc_chip.sv:154.48" *)
  sg13g2_IOPadIOVss pad_vssio3 (
  );
endmodule

(* src = "../rtl/croc_domain.sv:8.8" *)
module \croc_domain$croc_chip.i_croc_soc.i_croc (clk_i, rst_ni, testmode_i, ref_clk_i, core_busy_o, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, user_sbr_obi_req_o, user_sbr_obi_rsp_i, user_mgr_obi_req_i, user_mgr_obi_rsp_o
, interrupts_i);
  wire \$auto$builder.cc:364:Unop$12 ;
  wire \$auto$builder.cc:364:Unop$14 ;
  wire \$auto$builder.cc:364:Unop$8 ;
  (* src = "../rtl/croc_domain.sv:133.34" *)
  (* unused_bits = "75 149 223 371" *)
  wire [443:0] all_periph_obi_req;
  (* src = "../rtl/croc_domain.sv:134.34" *)
  wire [233:0] all_periph_obi_rsp;
  (* src = "../rtl/croc_domain.sv:97.34" *)
  wire [369:0] all_sbr_obi_req;
  (* src = "../rtl/croc_domain.sv:98.34" *)
  wire [194:0] all_sbr_obi_rsp;
  (* src = "../rtl/croc_domain.sv:11.21" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/croc_domain.sv:43.16" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "../rtl/croc_domain.sv:82.17" *)
  wire [71:0] core_data_obi_req;
  (* src = "../rtl/croc_domain.sv:83.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] core_data_obi_rsp;
  (* src = "../rtl/croc_domain.sv:73.17" *)
  wire [71:0] core_instr_obi_req;
  (* src = "../rtl/croc_domain.sv:74.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] core_instr_obi_rsp;
  (* src = "../rtl/croc_domain.sv:88.17" *)
  wire [71:0] dbg_req_obi_req;
  (* src = "../rtl/croc_domain.sv:89.17" *)
  (* unused_bits = "2 4" *)
  wire [36:0] dbg_req_obi_rsp;
  (* src = "../rtl/croc_domain.sv:50.9" *)
  wire debug_req;
  (* src = "../rtl/croc_domain.sv:228.17" *)
  wire [40:0] dmi_req;
  (* src = "../rtl/croc_domain.sv:227.35" *)
  wire dmi_req_ready;
  (* src = "../rtl/croc_domain.sv:227.20" *)
  wire dmi_req_valid;
  (* src = "../rtl/croc_domain.sv:229.18" *)
  wire [33:0] dmi_resp;
  (* src = "../rtl/croc_domain.sv:227.66" *)
  wire dmi_resp_ready;
  (* src = "../rtl/croc_domain.sv:227.50" *)
  wire dmi_resp_valid;
  (* src = "../rtl/croc_domain.sv:227.9" *)
  wire dmi_rst_n;
  (* src = "../rtl/croc_domain.sv:138.17" *)
  wire [38:0] error_obi_rsp;
  (* src = "../rtl/croc_domain.sv:15.21" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "../rtl/croc_domain.sv:51.9" *)
  wire fetch_enable;
  (* src = "../rtl/croc_domain.sv:347.39" *)
  wire [3:0] \gen_sram_bank[0].bank_be ;
  (* src = "../rtl/croc_domain.sv:344.37" *)
  (* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \gen_sram_bank[0].bank_byte_addr ;
  (* src = "../rtl/croc_domain.sv:346.49" *)
  wire [31:0] \gen_sram_bank[0].bank_rdata ;
  (* src = "../rtl/croc_domain.sv:343.11" *)
  wire \gen_sram_bank[0].bank_req ;
  (* src = "../rtl/croc_domain.sv:346.37" *)
  wire [31:0] \gen_sram_bank[0].bank_wdata ;
  (* src = "../rtl/croc_domain.sv:343.21" *)
  wire \gen_sram_bank[0].bank_we ;
  (* src = "../rtl/croc_domain.sv:347.39" *)
  wire [3:0] \gen_sram_bank[1].bank_be ;
  (* src = "../rtl/croc_domain.sv:344.37" *)
  (* unused_bits = "0 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \gen_sram_bank[1].bank_byte_addr ;
  (* src = "../rtl/croc_domain.sv:346.49" *)
  wire [31:0] \gen_sram_bank[1].bank_rdata ;
  (* src = "../rtl/croc_domain.sv:343.11" *)
  wire \gen_sram_bank[1].bank_req ;
  (* src = "../rtl/croc_domain.sv:346.37" *)
  wire [31:0] \gen_sram_bank[1].bank_wdata ;
  (* src = "../rtl/croc_domain.sv:343.21" *)
  wire \gen_sram_bank[1].bank_we ;
  (* src = "../rtl/croc_domain.sv:26.32" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "../rtl/croc_domain.sv:30.32" *)
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  (* src = "../rtl/croc_domain.sv:56.9" *)
  wire gpio_irq;
  (* src = "../rtl/croc_domain.sv:27.32" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "../rtl/croc_domain.sv:154.17" *)
  wire [38:0] gpio_obi_rsp;
  (* src = "../rtl/croc_domain.sv:28.32" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "../rtl/croc_domain.sv:42.38" *)
  input [3:0] interrupts_i;
  wire [3:0] interrupts_i;
  (* src = "../rtl/croc_domain.sv:17.21" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "../rtl/croc_domain.sv:18.21" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "../rtl/croc_domain.sv:19.21" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "../rtl/croc_domain.sv:20.21" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "../rtl/croc_domain.sv:21.21" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "../rtl/croc_domain.sv:418.50" *)
  wire [2:0] periph_idx;
  (* src = "../rtl/croc_domain.sv:13.21" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "../rtl/croc_domain.sv:12.21" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/croc_domain.sv:502.39" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33" *)
  wire [66:0] soc_ctrl_reg2hw;
  (* src = "../rtl/croc_domain.sv:470.13" *)
  wire [69:0] soc_ctrl_reg_req;
  (* src = "../rtl/croc_domain.sv:471.13" *)
  wire [33:0] soc_ctrl_reg_rsp;
  (* src = "../rtl/croc_domain.sv:14.21" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/croc_domain.sv:57.9" *)
  wire timer0_irq0;
  (* src = "../rtl/croc_domain.sv:58.9" *)
  wire timer0_irq1;
  (* src = "../rtl/croc_domain.sv:55.9" *)
  wire uart_irq;
  (* src = "../rtl/croc_domain.sv:524.13" *)
  wire [69:0] uart_reg_req;
  (* src = "../rtl/croc_domain.sv:525.13" *)
  wire [33:0] uart_reg_rsp;
  (* src = "../rtl/croc_domain.sv:23.21" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "../rtl/croc_domain.sv:24.21" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "../rtl/croc_domain.sv:39.24" *)
  input [71:0] user_mgr_obi_req_i;
  wire [71:0] user_mgr_obi_req_i;
  (* src = "../rtl/croc_domain.sv:40.24" *)
  output [36:0] user_mgr_obi_rsp_o;
  wire [36:0] user_mgr_obi_rsp_o;
  (* src = "../rtl/croc_domain.sv:35.24" *)
  output [73:0] user_sbr_obi_req_o;
  wire [73:0] user_sbr_obi_req_o;
  (* src = "../rtl/croc_domain.sv:36.24" *)
  input [38:0] user_sbr_obi_rsp_i;
  wire [38:0] user_sbr_obi_rsp_i;
  (* src = "../rtl/croc_domain.sv:112.17" *)
  wire [38:0] xbar_error_obi_rsp;
  (* src = "../rtl/croc_domain.sv:108.17" *)
  wire [38:0] xbar_periph_obi_rsp;
  assign fetch_enable = soc_ctrl_reg2hw[34] | fetch_en_i;
  assign \$auto$builder.cc:364:Unop$12  = ~ all_periph_obi_req[263];
  assign \$auto$builder.cc:364:Unop$14  = ~ all_periph_obi_req[411];
  assign \$auto$builder.cc:364:Unop$8  = ~ all_periph_obi_req[189];
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:377.7" *)
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram  \gen_sram_bank[0].i_sram  (
    .addr_i(\gen_sram_bank[0].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[0].bank_rdata ),
    .req_i(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[0].bank_wdata ),
    .we_i(\gen_sram_bank[0].bank_we )
  );
  (* src = "../rtl/croc_domain.sv:353.7" *)
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim  \gen_sram_bank[0].i_sram_shim  (
    .addr_o(\gen_sram_bank[0].bank_byte_addr ),
    .be_o(\gen_sram_bank[0].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[221:148]),
    .obi_rsp_o(all_sbr_obi_rsp[116:78]),
    .rdata_i(\gen_sram_bank[0].bank_rdata ),
    .req_o(\gen_sram_bank[0].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[0].bank_wdata ),
    .we_o(\gen_sram_bank[0].bank_we )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:377.7" *)
  \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram  \gen_sram_bank[1].i_sram  (
    .addr_i(\gen_sram_bank[1].bank_byte_addr [10:2]),
    .be_i(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .impl_i(soc_ctrl_reg2hw[0]),
    .rdata_o(\gen_sram_bank[1].bank_rdata ),
    .req_i(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_i(\gen_sram_bank[1].bank_wdata ),
    .we_i(\gen_sram_bank[1].bank_we )
  );
  (* src = "../rtl/croc_domain.sv:353.7" *)
  \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim  \gen_sram_bank[1].i_sram_shim  (
    .addr_o(\gen_sram_bank[1].bank_byte_addr ),
    .be_o(\gen_sram_bank[1].bank_be ),
    .clk_i(clk_i),
    .gnt_i(1'h1),
    .obi_req_i(all_sbr_obi_req[295:222]),
    .obi_rsp_o(all_sbr_obi_rsp[155:117]),
    .rdata_i(\gen_sram_bank[1].bank_rdata ),
    .req_o(\gen_sram_bank[1].bank_req ),
    .rst_ni(rst_ni),
    .wdata_o(\gen_sram_bank[1].bank_wdata ),
    .we_o(\gen_sram_bank[1].bank_we )
  );
  (* src = "../rtl/croc_domain.sv:426.5" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(all_sbr_obi_req[147:116]),
    .addr_map_i(480'h000000010000000000040000000000020300000003001000000000030300200003003000000000040300500003006000000000050300a0000300b000),
    .default_idx_i(3'h0),
    .en_default_idx_i(1'h1),
    .idx_o(periph_idx)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:179.5" *)
  \core_wrap$croc_chip.i_croc_soc.i_croc.i_core_wrap  i_core_wrap (
    .boot_addr_i(soc_ctrl_reg2hw[66:35]),
    .clk_i(clk_i),
    .core_busy_o(core_busy_o),
    .data_addr_o(core_data_obi_req[71:40]),
    .data_be_o(core_data_obi_req[38:35]),
    .data_err_i(core_data_obi_rsp[3]),
    .data_gnt_i(core_data_obi_rsp[1]),
    .data_rdata_i(core_data_obi_rsp[36:5]),
    .data_req_o(core_data_obi_req[0]),
    .data_rvalid_i(core_data_obi_rsp[0]),
    .data_wdata_o(core_data_obi_req[34:3]),
    .data_we_o(core_data_obi_req[39]),
    .debug_req_i(debug_req),
    .fetch_enable_i(fetch_enable),
    .instr_addr_o(core_instr_obi_req[71:40]),
    .instr_err_i(core_instr_obi_rsp[3]),
    .instr_gnt_i(core_instr_obi_rsp[1]),
    .instr_rdata_i(core_instr_obi_rsp[36:5]),
    .instr_req_o(core_instr_obi_req[0]),
    .instr_rvalid_i(core_instr_obi_rsp[0]),
    .irqs_i({ 9'h000, interrupts_i, gpio_irq, uart_irq, timer0_irq1 }),
    .ref_clk_i(ref_clk_i),
    .rst_ni(rst_ni),
    .test_enable_i(testmode_i),
    .timer0_irq_i(timer0_irq0)
  );
  (* src = "../rtl/croc_domain.sv:258.5" *)
  \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req),
    .dmi_req_i(dmi_req),
    .dmi_req_ready_o(dmi_req_ready),
    .dmi_req_valid_i(dmi_req_valid),
    .dmi_resp_o(dmi_resp),
    .dmi_resp_ready_i(dmi_resp_ready),
    .dmi_resp_valid_o(dmi_resp_valid),
    .dmi_rst_ni(dmi_rst_n),
    .hartinfo_i(32'd2171776),
    .master_addr_o(dbg_req_obi_req[71:40]),
    .master_be_o(dbg_req_obi_req[38:35]),
    .master_err_i(dbg_req_obi_rsp[3]),
    .master_gnt_i(dbg_req_obi_rsp[1]),
    .master_other_err_i(1'h0),
    .master_rdata_i(dbg_req_obi_rsp[36:5]),
    .master_req_o(dbg_req_obi_req[0]),
    .master_rvalid_i(dbg_req_obi_rsp[0]),
    .master_wdata_o(dbg_req_obi_req[34:3]),
    .master_we_o(dbg_req_obi_req[39]),
    .rst_ni(rst_ni),
    .slave_addr_i(all_periph_obi_req[147:116]),
    .slave_aid_i(all_periph_obi_req[78:76]),
    .slave_be_i(all_periph_obi_req[114:111]),
    .slave_gnt_o(all_periph_obi_rsp[40]),
    .slave_rdata_o(all_periph_obi_rsp[77:46]),
    .slave_req_i(all_periph_obi_req[74]),
    .slave_rid_o(all_periph_obi_rsp[45:43]),
    .slave_rvalid_o(all_periph_obi_rsp[39]),
    .slave_wdata_i(all_periph_obi_req[110:79]),
    .slave_we_i(all_periph_obi_req[115]),
    .testmode_i(testmode_i),
    .unavailable_i(1'h0)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:233.5" *)
  \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag  i_dmi_jtag (
    .clk_i(clk_i),
    .dmi_req_o(dmi_req),
    .dmi_req_ready_i(dmi_req_ready),
    .dmi_req_valid_o(dmi_req_valid),
    .dmi_resp_i(dmi_resp),
    .dmi_resp_ready_o(dmi_resp_ready),
    .dmi_resp_valid_i(dmi_resp_valid),
    .dmi_rst_no(dmi_rst_n),
    .rst_ni(rst_ni),
    .tck_i(jtag_tck_i),
    .td_i(jtag_tdi_i),
    .td_o(jtag_tdo_o),
    .testmode_i(testmode_i),
    .tms_i(jtag_tms_i),
    .trst_ni(jtag_trst_ni)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:584.5" *)
  \gpio$croc_chip.i_croc_soc.i_croc.i_gpio  i_gpio (
    .clk_i(clk_i),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync_o),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupt_o(gpio_irq),
    .obi_req_i(all_periph_obi_req[369:296]),
    .obi_rsp_o(gpio_obi_rsp),
    .rst_ni(rst_ni)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:323.5" *)
  \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar  i_main_xbar (
    .addr_map_i(384'h000000042000000080000000000000031000080010001000000000021000000010000800000000010000000010000000),
    .clk_i(clk_i),
    .default_idx_i(12'h000),
    .en_default_idx_i(4'hf),
    .mgr_ports_req_o(all_sbr_obi_req),
    .mgr_ports_rsp_i({ user_sbr_obi_rsp_i, all_sbr_obi_rsp[155:78], xbar_periph_obi_rsp, xbar_error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_ports_req_i({ core_instr_obi_req[71:40], 39'h3c00000000, core_instr_obi_req[0], core_data_obi_req[71:3], 2'h0, core_data_obi_req[0], dbg_req_obi_req[71:3], 2'h0, dbg_req_obi_req[0], user_mgr_obi_req_i }),
    .sbr_ports_rsp_o({ core_instr_obi_rsp, core_data_obi_rsp, dbg_req_obi_rsp, user_mgr_obi_rsp_o }),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/croc_domain.sv:442.5" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_periph_obi_req),
    .mgr_ports_rsp_i({ all_periph_obi_rsp[233:199], 2'h0, all_periph_obi_rsp[196:195], gpio_obi_rsp, all_periph_obi_rsp[155:120], 1'h0, all_periph_obi_rsp[118:81], 1'h0, all_periph_obi_rsp[79:43], 2'h0, all_periph_obi_rsp[40:39], error_obi_rsp }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(all_sbr_obi_req[147:74]),
    .sbr_port_rsp_o(xbar_periph_obi_rsp),
    .sbr_port_select_i(periph_idx)
  );
  (* src = "../rtl/croc_domain.sv:461.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err  i_periph_err (
    .clk_i(clk_i),
    .obi_req_i(all_periph_obi_req[73:0]),
    .obi_rsp_o(error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:513.5" *)
  \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl  i_soc_ctrl (
    .clk_i(clk_i),
    .devmode_i(1'h0),
    .hw2reg(4'h0),
    .reg2hw(soc_ctrl_reg2hw),
    .reg_req_i(soc_ctrl_reg_req),
    .reg_rsp_o(soc_ctrl_reg_rsp),
    .rst_ni(rst_ni)
  );
  (* src = "../rtl/croc_domain.sv:480.5" *)
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate  i_soc_ctrl_translate (
    .add_i(all_periph_obi_req[221:190]),
    .be_i(all_periph_obi_req[188:185]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[79]),
    .id_i(all_periph_obi_req[152:150]),
    .r_id_o(all_periph_obi_rsp[84:82]),
    .r_opc_o(all_periph_obi_rsp[81]),
    .r_rdata_o(all_periph_obi_rsp[116:85]),
    .r_valid_o(all_periph_obi_rsp[78]),
    .reg_req_o(soc_ctrl_reg_req),
    .reg_rsp_i(soc_ctrl_reg_rsp),
    .req_i(all_periph_obi_req[148]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[184:153]),
    .wen_i(\$auto$builder.cc:364:Unop$8 )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:599.5" *)
  \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer  i_timer (
    .addr_i(all_periph_obi_req[443:412]),
    .be_i(all_periph_obi_req[410:407]),
    .clk_i(clk_i),
    .event_hi_i(1'h0),
    .event_lo_i(1'h0),
    .gnt_o(all_periph_obi_rsp[196]),
    .id_i(all_periph_obi_req[374:372]),
    .irq_hi_o(timer0_irq1),
    .irq_lo_o(timer0_irq0),
    .r_id_o(all_periph_obi_rsp[201:199]),
    .r_rdata_o(all_periph_obi_rsp[233:202]),
    .r_valid_o(all_periph_obi_rsp[195]),
    .ref_clk_i(ref_clk_i),
    .req_i(all_periph_obi_req[370]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[406:375]),
    .wen_i(\$auto$builder.cc:364:Unop$14 )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_domain.sv:559.5" *)
  \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart  i_uart (
    .clk_i(clk_i),
    .cts_ni(1'h0),
    .dcd_ni(1'h0),
    .dsr_ni(1'h0),
    .intr_o(uart_irq),
    .reg_req_i(uart_reg_req),
    .reg_rsp_o(uart_reg_rsp),
    .rin_ni(1'h0),
    .rst_ni(rst_ni),
    .sin_i(uart_rx_i),
    .sout_o(uart_tx_o)
  );
  (* src = "../rtl/croc_domain.sv:534.5" *)
  \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate  i_uart_translate (
    .add_i(all_periph_obi_req[295:264]),
    .be_i(all_periph_obi_req[262:259]),
    .clk_i(clk_i),
    .gnt_o(all_periph_obi_rsp[118]),
    .id_i(all_periph_obi_req[226:224]),
    .r_id_o(all_periph_obi_rsp[123:121]),
    .r_opc_o(all_periph_obi_rsp[120]),
    .r_rdata_o(all_periph_obi_rsp[155:124]),
    .r_valid_o(all_periph_obi_rsp[117]),
    .reg_req_o(uart_reg_req),
    .reg_rsp_i(uart_reg_rsp),
    .req_i(all_periph_obi_req[222]),
    .rst_ni(rst_ni),
    .wdata_i(all_periph_obi_req[258:227]),
    .wen_i(\$auto$builder.cc:364:Unop$12 )
  );
  (* src = "../rtl/croc_domain.sv:404.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err  i_xbar_err (
    .clk_i(clk_i),
    .obi_req_i(all_sbr_obi_req[73:0]),
    .obi_rsp_o(xbar_error_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign dbg_req_obi_req[2:1] = 2'h0;
  assign core_instr_obi_req[39:1] = 39'h3c00000000;
  assign core_data_obi_req[2:1] = 2'h0;
  assign { all_sbr_obi_rsp[194:156], all_sbr_obi_rsp[77:0] } = { user_sbr_obi_rsp_i, xbar_periph_obi_rsp, xbar_error_obi_rsp };
  assign { all_periph_obi_rsp[198:197], all_periph_obi_rsp[194:156], all_periph_obi_rsp[119], all_periph_obi_rsp[80], all_periph_obi_rsp[42:41], all_periph_obi_rsp[38:0] } = { 2'h0, gpio_obi_rsp, 4'h0, error_obi_rsp };
  assign user_sbr_obi_req_o = all_sbr_obi_req[369:296];
endmodule

(* src = "../rtl/croc_soc.sv:8.8" *)
module \croc_soc$croc_chip.i_croc_soc (clk_i, rst_ni, testmode_i, ref_clk_i, jtag_tck_i, jtag_trst_ni, jtag_tms_i, jtag_tdi_i, jtag_tdo_o, uart_rx_i, uart_tx_o, fetch_en_i, status_o, gpio_i, gpio_o, gpio_out_en_o);
  (* src = "../rtl/croc_soc.sv:11.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/croc_soc.sv:15.16" *)
  input fetch_en_i;
  wire fetch_en_i;
  (* src = "../rtl/croc_soc.sv:27.32" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "../rtl/croc_soc.sv:61.23" *)
  wire [31:0] gpio_in_sync;
  (* src = "../rtl/croc_soc.sv:28.32" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "../rtl/croc_soc.sv:29.32" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "../rtl/croc_soc.sv:60.29" *)
  wire [3:0] interrupts;
  (* src = "../rtl/croc_soc.sv:18.16" *)
  input jtag_tck_i;
  wire jtag_tck_i;
  (* src = "../rtl/croc_soc.sv:19.16" *)
  input jtag_tdi_i;
  wire jtag_tdi_i;
  (* src = "../rtl/croc_soc.sv:20.16" *)
  output jtag_tdo_o;
  wire jtag_tdo_o;
  (* src = "../rtl/croc_soc.sv:21.16" *)
  input jtag_tms_i;
  wire jtag_tms_i;
  (* src = "../rtl/croc_soc.sv:22.16" *)
  input jtag_trst_ni;
  wire jtag_trst_ni;
  (* src = "../rtl/croc_soc.sv:13.16" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "../rtl/croc_soc.sv:12.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/croc_soc.sv:16.16" *)
  output status_o;
  wire status_o;
  (* src = "../rtl/croc_soc.sv:32.23" *)
  wire synced_fetch_en;
  (* src = "../rtl/croc_soc.sv:32.9" *)
  wire synced_rst_n;
  (* src = "../rtl/croc_soc.sv:14.16" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/croc_soc.sv:24.16" *)
  input uart_rx_i;
  wire uart_rx_i;
  (* src = "../rtl/croc_soc.sv:25.16" *)
  output uart_tx_o;
  wire uart_tx_o;
  (* src = "../rtl/croc_soc.sv:57.15" *)
  wire [71:0] user_mgr_obi_req;
  (* src = "../rtl/croc_soc.sv:58.15" *)
  wire [36:0] user_mgr_obi_rsp;
  (* src = "../rtl/croc_soc.sv:53.15" *)
  wire [73:0] user_sbr_obi_req;
  (* src = "../rtl/croc_soc.sv:54.15" *)
  wire [38:0] user_sbr_obi_rsp;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_soc.sv:65.3" *)
  \croc_domain$croc_chip.i_croc_soc.i_croc  i_croc (
    .clk_i(clk_i),
    .core_busy_o(status_o),
    .fetch_en_i(synced_fetch_en),
    .gpio_i(gpio_i),
    .gpio_in_sync_o(gpio_in_sync),
    .gpio_o(gpio_o),
    .gpio_out_en_o(gpio_out_en_o),
    .interrupts_i(interrupts),
    .jtag_tck_i(jtag_tck_i),
    .jtag_tdi_i(jtag_tdi_i),
    .jtag_tdo_o(jtag_tdo_o),
    .jtag_tms_i(jtag_tms_i),
    .jtag_trst_ni(jtag_trst_ni),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .uart_rx_i(uart_rx_i),
    .uart_tx_o(uart_tx_o),
    .user_mgr_obi_req_i(user_mgr_obi_req),
    .user_mgr_obi_rsp_o(user_mgr_obi_rsp),
    .user_sbr_obi_req_o(user_sbr_obi_req),
    .user_sbr_obi_rsp_i(user_sbr_obi_rsp)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_soc.sv:45.7" *)
  \sync$croc_chip.i_croc_soc.i_ext_intr_sync  i_ext_intr_sync (
    .clk_i(clk_i),
    .rst_ni(synced_rst_n),
    .serial_i(fetch_en_i),
    .serial_o(synced_fetch_en)
  );
  (* src = "../rtl/croc_soc.sv:34.10" *)
  \rstgen$croc_chip.i_croc_soc.i_rstgen  i_rstgen (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .rst_no(synced_rst_n),
    .test_mode_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/croc_soc.sv:99.3" *)
  \user_domain$croc_chip.i_croc_soc.i_user  i_user (
    .clk_i(clk_i),
    .gpio_in_sync_i(gpio_in_sync),
    .interrupts_o(interrupts),
    .ref_clk_i(ref_clk_i),
    .rst_ni(synced_rst_n),
    .testmode_i(testmode_i),
    .user_mgr_obi_req_o(user_mgr_obi_req),
    .user_mgr_obi_rsp_i(user_mgr_obi_rsp),
    .user_sbr_obi_req_i(user_sbr_obi_req),
    .user_sbr_obi_rsp_o(user_sbr_obi_rsp)
  );
endmodule

(* src = "../rtl/cve2/cve2_core_blackbox.sv:15.8" *)
module \cve2_core$croc_chip.i_croc_soc.i_croc.i_core_wrap.i_ibex (clk_i, rst_ni, test_en_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_err_i, irq_software_i, irq_timer_i, irq_external_i, irq_nm_i, irq_pending_o, debug_req_i, fetch_enable_i, core_busy_o, boot_addr_i
, instr_addr_o, instr_rdata_i, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, hart_id_i, irq_fast_i, crash_dump_o);
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:36.40" *)
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:30.40" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:106.40" *)
  output core_busy_o;
  wire core_busy_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:67.40" *)
  output [127:0] crash_dump_o;
  wire [127:0] crash_dump_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:52.40" *)
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:51.40" *)
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:55.40" *)
  input data_err_i;
  wire data_err_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:48.40" *)
  input data_gnt_i;
  wire data_gnt_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:54.40" *)
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:47.40" *)
  output data_req_o;
  wire data_req_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:49.40" *)
  input data_rvalid_i;
  wire data_rvalid_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:53.40" *)
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:50.40" *)
  output data_we_o;
  wire data_we_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:66.40" *)
  input debug_req_i;
  wire debug_req_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:105.40" *)
  input fetch_enable_i;
  wire fetch_enable_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:35.40" *)
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:42.40" *)
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:44.40" *)
  input instr_err_i;
  wire instr_err_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:40.40" *)
  input instr_gnt_i;
  wire instr_gnt_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:43.40" *)
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:39.40" *)
  output instr_req_o;
  wire instr_req_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:41.40" *)
  input instr_rvalid_i;
  wire instr_rvalid_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:60.40" *)
  input irq_external_i;
  wire irq_external_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:61.40" *)
  input [15:0] irq_fast_i;
  wire [15:0] irq_fast_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:62.40" *)
  input irq_nm_i;
  wire irq_nm_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:63.40" *)
  output irq_pending_o;
  wire irq_pending_o;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:58.40" *)
  input irq_software_i;
  wire irq_software_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:59.40" *)
  input irq_timer_i;
  wire irq_timer_i;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:31.40" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/cve2/cve2_core_blackbox.sv:33.40" *)
  input test_en_i;
  wire test_en_i;
  assign core_busy_o = 1'hx;
  assign crash_dump_o = 128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
  assign data_addr_o = 32'hxxxxxxxx;
  assign data_be_o = 4'hx;
  assign data_req_o = 1'hx;
  assign data_wdata_o = 32'hxxxxxxxx;
  assign data_we_o = 1'hx;
  assign instr_addr_o = 32'hxxxxxxxx;
  assign instr_req_o = 1'hx;
  assign irq_pending_o = 1'hx;
endmodule

(* src = "../rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17682 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17409 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17408 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17411 ;
  (* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$6240 ;
  (* src = "../rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "../rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "../rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "../rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "../rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "../rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "../rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "../rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "../rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "../rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17409  = counter_q - \$auto$rtlil.cc:2874:Mux$17411 ;
  (* src = "../rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17682 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17682  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2741:Neg$17408  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:2874:Mux$17411  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2741:Neg$17408 ;
  assign \$auto$slang_frontend.cc:694:finish$\counter_d$6240  = load_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17409 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\counter_d$6240 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "../rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17685 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17414 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17413 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17416 ;
  (* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$6389 ;
  (* src = "../rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "../rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "../rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "../rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "../rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "../rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "../rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "../rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "../rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "../rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17414  = counter_q - \$auto$rtlil.cc:2874:Mux$17416 ;
  (* src = "../rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17685 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17685  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2741:Neg$17413  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:2874:Mux$17416  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2741:Neg$17413 ;
  assign \$auto$slang_frontend.cc:694:finish$\counter_d$6389  = load_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17414 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\counter_d$6389 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "../rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17688 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17419 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17418 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17421 ;
  (* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$6538 ;
  (* src = "../rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "../rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "../rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "../rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "../rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "../rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "../rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "../rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "../rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "../rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17419  = counter_q - \$auto$rtlil.cc:2874:Mux$17421 ;
  (* src = "../rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17688 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17688  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2741:Neg$17418  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:2874:Mux$17421  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2741:Neg$17418 ;
  assign \$auto$slang_frontend.cc:694:finish$\counter_d$6538  = load_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17419 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\counter_d$6538 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "../rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17691 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17424 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17423 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17426 ;
  (* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$6687 ;
  (* src = "../rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "../rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "../rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "../rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "../rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "../rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "../rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "../rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "../rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "../rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17424  = counter_q - \$auto$rtlil.cc:2874:Mux$17426 ;
  (* src = "../rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17691 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17691  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2741:Neg$17423  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:2874:Mux$17426  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2741:Neg$17423 ;
  assign \$auto$slang_frontend.cc:694:finish$\counter_d$6687  = load_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17424 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\counter_d$6687 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "../rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17694 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17429 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17428 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17431 ;
  (* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$4028 ;
  (* src = "../rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "../rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "../rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "../rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "../rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "../rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "../rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "../rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "../rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "../rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17429  = counter_q - \$auto$rtlil.cc:2874:Mux$17431 ;
  (* src = "../rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17694 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17694  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2741:Neg$17428  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:2874:Mux$17431  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2741:Neg$17428 ;
  assign \$auto$slang_frontend.cc:694:finish$\counter_d$4028  = load_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17429 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\counter_d$4028 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "../rtl/common_cells/delta_counter.sv:13.8" *)
module \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter (clk_i, rst_ni, clear_i, en_i, load_i, down_i, delta_i, d_i, q_o, overflow_o);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17697 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$17434 ;
  wire [1:0] \$auto$rtlil.cc:2741:Neg$17433 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$17436 ;
  (* src = "../rtl/common_cells/delta_counter.sv:65.18-73.12" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\counter_d$5932 ;
  (* src = "../rtl/common_cells/delta_counter.sv:19.30" *)
  input clear_i;
  wire clear_i;
  (* src = "../rtl/common_cells/delta_counter.sv:17.30" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/delta_counter.sv:28.32" *)
  wire [1:0] counter_d;
  (* src = "../rtl/common_cells/delta_counter.sv:28.21" *)
  reg [1:0] counter_q;
  (* src = "../rtl/common_cells/delta_counter.sv:24.30" *)
  input d_i;
  wire d_i;
  (* src = "../rtl/common_cells/delta_counter.sv:23.30" *)
  input delta_i;
  wire delta_i;
  (* src = "../rtl/common_cells/delta_counter.sv:22.30" *)
  input down_i;
  wire down_i;
  (* src = "../rtl/common_cells/delta_counter.sv:20.30" *)
  input en_i;
  wire en_i;
  (* src = "../rtl/common_cells/delta_counter.sv:21.30" *)
  input load_i;
  wire load_i;
  (* src = "../rtl/common_cells/delta_counter.sv:26.30" *)
  output overflow_o;
  wire overflow_o;
  (* src = "../rtl/common_cells/delta_counter.sv:25.30" *)
  output q_o;
  wire q_o;
  (* src = "../rtl/common_cells/delta_counter.sv:18.30" *)
  input rst_ni;
  wire rst_ni;
  assign \$auto$opt_share.cc:222:merge_operators$17434  = counter_q - \$auto$rtlil.cc:2874:Mux$17436 ;
  (* src = "../rtl/common_cells/delta_counter.sv:76.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17697 ) counter_q <= counter_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17697  = | { load_i, en_i, clear_i };
  assign \$auto$rtlil.cc:2741:Neg$17433  = - { 1'h0, delta_i };
  assign \$auto$rtlil.cc:2874:Mux$17436  = down_i ? { 1'h0, delta_i } : \$auto$rtlil.cc:2741:Neg$17433 ;
  assign \$auto$slang_frontend.cc:694:finish$\counter_d$5932  = load_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:66.13-66.37|../rtl/common_cells/delta_counter.sv:65.18-73.12" *) { 1'h0, d_i } : \$auto$opt_share.cc:222:merge_operators$17434 ;
  assign counter_d = clear_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/delta_counter.sv:64.13-64.28|../rtl/common_cells/delta_counter.sv:63.9-73.12" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\counter_d$5932 ;
  assign overflow_o = counter_q[1];
  assign q_o = counter_q[0];
endmodule

(* src = "../rtl/riscv-dbg/dm_obi_top.sv:63.8" *)
module \dm_obi_top$croc_chip.i_croc_soc.i_croc.i_dm_top (clk_i, rst_ni, testmode_i, ndmreset_o, dmactive_o, debug_req_o, unavailable_i, slave_req_i, slave_we_i, master_req_o, master_we_o, master_gnt_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_resp_valid_o, dmi_resp_ready_i, hartinfo_i, slave_gnt_o, slave_addr_i, slave_be_i
, slave_wdata_i, slave_aid_i, slave_rvalid_o, slave_rdata_o, slave_rid_o, master_addr_o, master_wdata_o, master_be_o, master_rvalid_i, master_err_i, master_other_err_i, master_rdata_i, dmi_req_i, dmi_resp_o);
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:72.33" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:78.33" *)
  output debug_req_o;
  wire debug_req_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:77.33" *)
  output dmactive_o;
  wire dmactive_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:113.33" *)
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:112.33" *)
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:111.33" *)
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:117.33" *)
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:116.33" *)
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:115.33" *)
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:110.33" *)
  input dmi_rst_ni;
  wire dmi_rst_ni;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:81.40" *)
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:99.33" *)
  output [31:0] master_addr_o;
  wire [31:0] master_addr_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:102.33" *)
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:105.33" *)
  input master_err_i;
  wire master_err_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:103.33" *)
  input master_gnt_i;
  wire master_gnt_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:106.33" *)
  input master_other_err_i;
  wire master_other_err_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:107.33" *)
  input [31:0] master_rdata_i;
  wire [31:0] master_rdata_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:98.33" *)
  output master_req_o;
  wire master_req_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:104.33" *)
  input master_rvalid_i;
  wire master_rvalid_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:101.33" *)
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:100.33" *)
  output master_we_o;
  wire master_we_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:76.33" *)
  output ndmreset_o;
  wire ndmreset_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:74.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:87.33" *)
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:91.33" *)
  input [2:0] slave_aid_i;
  wire [2:0] slave_aid_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:88.33" *)
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:85.33" *)
  output slave_gnt_o;
  wire slave_gnt_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:94.33" *)
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:83.33" *)
  input slave_req_i;
  wire slave_req_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:96.33" *)
  output [2:0] slave_rid_o;
  reg [2:0] slave_rid_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:93.33" *)
  output slave_rvalid_o;
  reg slave_rvalid_o;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:89.33" *)
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:86.33" *)
  input slave_we_i;
  wire slave_we_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:75.33" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:80.33" *)
  input unavailable_i;
  wire unavailable_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:175.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) slave_rid_o <= 3'h0;
    else if (slave_req_i) slave_rid_o <= slave_aid_i;
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:175.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) slave_rvalid_o <= 1'h0;
    else slave_rvalid_o <= slave_req_i;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dm_obi_top.sv:130.5" *)
  \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top  i_dm_top (
    .clk_i(clk_i),
    .debug_req_o(debug_req_o),
    .dmactive_o(dmactive_o),
    .dmi_req_i(dmi_req_i),
    .dmi_req_ready_o(dmi_req_ready_o),
    .dmi_req_valid_i(dmi_req_valid_i),
    .dmi_resp_o(dmi_resp_o),
    .dmi_resp_ready_i(dmi_resp_ready_i),
    .dmi_resp_valid_o(dmi_resp_valid_o),
    .dmi_rst_ni(dmi_rst_ni),
    .hartinfo_i(hartinfo_i),
    .master_add_o(master_addr_o),
    .master_be_o(master_be_o),
    .master_gnt_i(master_gnt_i),
    .master_r_err_i(master_err_i),
    .master_r_other_err_i(master_other_err_i),
    .master_r_rdata_i(master_rdata_i),
    .master_r_valid_i(master_rvalid_i),
    .master_req_o(master_req_o),
    .master_wdata_o(master_wdata_o),
    .master_we_o(master_we_o),
    .ndmreset_ack_i(ndmreset_o),
    .ndmreset_o(ndmreset_o),
    .next_dm_addr_i(32'd0),
    .rst_ni(rst_ni),
    .slave_addr_i(slave_addr_i),
    .slave_be_i(slave_be_i),
    .slave_rdata_o(slave_rdata_o),
    .slave_req_i(slave_req_i),
    .slave_wdata_i(slave_wdata_i),
    .slave_we_i(slave_we_i),
    .testmode_i(testmode_i),
    .unavailable_i(unavailable_i)
  );
  assign slave_gnt_o = 1'h1;
endmodule

(* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:20.8" *)
module \dm_top$croc_chip.i_croc_soc.i_croc.i_dm_top.i_dm_top (clk_i, rst_ni, testmode_i, ndmreset_o, ndmreset_ack_i, dmactive_o, debug_req_o, unavailable_i, slave_req_i, slave_we_i, master_req_o, master_we_o, master_gnt_i, master_r_valid_i, master_r_err_i, master_r_other_err_i, dmi_rst_ni, dmi_req_valid_i, dmi_req_ready_o, dmi_resp_valid_o, dmi_resp_ready_i
, hartinfo_i, slave_addr_i, slave_be_i, slave_wdata_i, slave_rdata_o, master_wdata_o, master_be_o, dmi_req_i, dmi_resp_o, next_dm_addr_i, master_add_o, master_r_rdata_i);
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:30.33" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:43.33" *)
  output debug_req_o;
  wire debug_req_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:42.33" *)
  output dmactive_o;
  wire dmactive_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:72.33" *)
  input [40:0] dmi_req_i;
  wire [40:0] dmi_req_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:71.33" *)
  output dmi_req_ready_o;
  wire dmi_req_ready_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:70.33" *)
  input dmi_req_valid_i;
  wire dmi_req_valid_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:76.33" *)
  output [33:0] dmi_resp_o;
  wire [33:0] dmi_resp_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:75.33" *)
  input dmi_resp_ready_i;
  wire dmi_resp_ready_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:74.33" *)
  output dmi_resp_valid_o;
  wire dmi_resp_valid_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:67.33" *)
  input dmi_rst_ni;
  wire dmi_rst_ni;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:46.39" *)
  input [31:0] hartinfo_i;
  wire [31:0] hartinfo_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:56.33" *)
  output [31:0] master_add_o;
  wire [31:0] master_add_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:59.33" *)
  output [3:0] master_be_o;
  wire [3:0] master_be_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:60.33" *)
  input master_gnt_i;
  wire master_gnt_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:62.33" *)
  input master_r_err_i;
  wire master_r_err_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:63.33" *)
  input master_r_other_err_i;
  wire master_r_other_err_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:64.33" *)
  input [31:0] master_r_rdata_i;
  wire [31:0] master_r_rdata_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:61.33" *)
  input master_r_valid_i;
  wire master_r_valid_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:55.33" *)
  output master_req_o;
  wire master_req_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:58.33" *)
  output [31:0] master_wdata_o;
  wire [31:0] master_wdata_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:57.33" *)
  output master_we_o;
  wire master_we_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:41.33" *)
  input ndmreset_ack_i;
  wire ndmreset_ack_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:40.33" *)
  output ndmreset_o;
  wire ndmreset_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:38.33" *)
  input [31:0] next_dm_addr_i;
  wire [31:0] next_dm_addr_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:32.33" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:50.33" *)
  input [31:0] slave_addr_i;
  wire [31:0] slave_addr_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:51.33" *)
  input [3:0] slave_be_i;
  wire [3:0] slave_be_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:53.33" *)
  output [31:0] slave_rdata_o;
  wire [31:0] slave_rdata_o;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:48.33" *)
  input slave_req_i;
  wire slave_req_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:52.33" *)
  input [31:0] slave_wdata_i;
  wire [31:0] slave_wdata_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:49.33" *)
  input slave_we_i;
  wire slave_we_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:39.33" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/riscv-dbg/dm_top_blackbox.sv:45.33" *)
  input unavailable_i;
  wire unavailable_i;
  assign debug_req_o = 1'hx;
  assign dmactive_o = 1'hx;
  assign dmi_req_ready_o = 1'hx;
  assign dmi_resp_o = 34'hxxxxxxxxx;
  assign dmi_resp_valid_o = 1'hx;
  assign master_add_o = 32'hxxxxxxxx;
  assign master_be_o = 4'hx;
  assign master_req_o = 1'hx;
  assign master_wdata_o = 32'hxxxxxxxx;
  assign master_we_o = 1'hx;
  assign ndmreset_o = 1'hx;
  assign slave_rdata_o = 32'hxxxxxxxx;
endmodule

(* src = "../rtl/riscv-dbg/dmi_cdc.sv:19.8" *)
module \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc (clk_i, rst_ni, tck_i, trst_ni, jtag_dmi_req_i, jtag_dmi_ready_o, jtag_dmi_valid_i, jtag_dmi_cdc_clear_i, jtag_dmi_resp_o, jtag_dmi_valid_o, jtag_dmi_ready_i, core_dmi_rst_no, core_dmi_req_o, core_dmi_valid_o, core_dmi_ready_i, core_dmi_resp_i, core_dmi_ready_o, core_dmi_valid_i);
  wire \$auto$builder.cc:364:Unop$2864 ;
  wire \$auto$builder.cc:364:Unop$2873 ;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:98.28" *)
  wire clear_pending_rise_edge_detect;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:35.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:48.28" *)
  wire core_clear_pending;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:96.28" *)
  reg core_clear_pending_q;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:41.28" *)
  input core_dmi_ready_i;
  wire core_dmi_ready_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:44.28" *)
  output core_dmi_ready_o;
  wire core_dmi_ready_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:39.28" *)
  output [40:0] core_dmi_req_o;
  wire [40:0] core_dmi_req_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:43.28" *)
  input [33:0] core_dmi_resp_i;
  wire [33:0] core_dmi_resp_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:38.28" *)
  output core_dmi_rst_no;
  reg core_dmi_rst_no;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:45.28" *)
  input core_dmi_valid_i;
  wire core_dmi_valid_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:40.28" *)
  output core_dmi_valid_o;
  wire core_dmi_valid_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:26.28" *)
  input jtag_dmi_cdc_clear_i;
  wire jtag_dmi_cdc_clear_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:32.28" *)
  input jtag_dmi_ready_i;
  wire jtag_dmi_ready_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:24.28" *)
  output jtag_dmi_ready_o;
  wire jtag_dmi_ready_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:23.28" *)
  input [40:0] jtag_dmi_req_i;
  wire [40:0] jtag_dmi_req_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:30.28" *)
  output [33:0] jtag_dmi_resp_o;
  wire [33:0] jtag_dmi_resp_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:25.28" *)
  input jtag_dmi_valid_i;
  wire jtag_dmi_valid_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:31.28" *)
  output jtag_dmi_valid_o;
  wire jtag_dmi_valid_o;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:36.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:21.28" *)
  input tck_i;
  wire tck_i;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:22.28" *)
  input trst_ni;
  wire trst_ni;
  assign clear_pending_rise_edge_detect = \$auto$builder.cc:364:Unop$2864  && core_clear_pending;
  assign \$auto$builder.cc:364:Unop$2864  = ! core_clear_pending_q;
  assign \$auto$builder.cc:364:Unop$2873  = ~ clear_pending_rise_edge_detect;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:102.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_clear_pending_q <= 1'h0;
    else core_clear_pending_q <= core_clear_pending;
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:102.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_dmi_rst_no <= 1'h1;
    else core_dmi_rst_no <= \$auto$builder.cc:364:Unop$2873 ;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:50.45" *)
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req  i_cdc_req (
    .dst_clear_i(1'h0),
    .dst_clear_pending_o(core_clear_pending),
    .dst_clk_i(clk_i),
    .dst_data_o(core_dmi_req_o),
    .dst_ready_i(core_dmi_ready_i),
    .dst_rst_ni(rst_ni),
    .dst_valid_o(core_dmi_valid_o),
    .src_clear_i(jtag_dmi_cdc_clear_i),
    .src_clk_i(tck_i),
    .src_data_i(jtag_dmi_req_i),
    .src_ready_o(jtag_dmi_ready_o),
    .src_rst_ni(trst_ni),
    .src_valid_i(jtag_dmi_valid_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dmi_cdc.sv:72.46" *)
  \cdc_2phase_clearable$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp  i_cdc_resp (
    .dst_clear_i(jtag_dmi_cdc_clear_i),
    .dst_clk_i(tck_i),
    .dst_data_o(jtag_dmi_resp_o),
    .dst_ready_i(jtag_dmi_ready_i),
    .dst_rst_ni(trst_ni),
    .dst_valid_o(jtag_dmi_valid_o),
    .src_clear_i(1'h0),
    .src_clk_i(clk_i),
    .src_data_i(core_dmi_resp_i),
    .src_ready_o(core_dmi_ready_o),
    .src_rst_ni(rst_ni),
    .src_valid_i(core_dmi_valid_i)
  );
endmodule

(* src = "../rtl/riscv-dbg/dmi_jtag.sv:19.8" *)
module \dmi_jtag$croc_chip.i_croc_soc.i_croc.i_dmi_jtag (clk_i, rst_ni, testmode_i, dmi_rst_no, dmi_req_o, dmi_req_valid_o, dmi_req_ready_i, dmi_resp_i, dmi_resp_ready_o, dmi_resp_valid_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o);
  wire \$auto$builder.cc:338:Biop$110 ;
  wire \$auto$builder.cc:338:Biop$112 ;
  wire \$auto$builder.cc:338:Biop$123 ;
  wire \$auto$builder.cc:338:Biop$128 ;
  wire \$auto$builder.cc:338:Biop$130 ;
  wire \$auto$builder.cc:338:Biop$137 ;
  wire \$auto$builder.cc:338:Biop$142 ;
  wire \$auto$builder.cc:338:Biop$144 ;
  wire \$auto$builder.cc:338:Biop$167 ;
  wire \$auto$builder.cc:338:Biop$171 ;
  wire \$auto$builder.cc:338:Biop$173 ;
  wire \$auto$builder.cc:338:Biop$23 ;
  wire \$auto$builder.cc:338:Biop$25 ;
  wire \$auto$builder.cc:338:Biop$49 ;
  wire \$auto$builder.cc:338:Biop$58 ;
  wire \$auto$builder.cc:338:Biop$62 ;
  wire \$auto$builder.cc:338:Biop$66 ;
  wire \$auto$builder.cc:338:Biop$70 ;
  wire \$auto$builder.cc:364:Unop$165 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17701 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17703 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17705 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17707 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17709 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17714 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17717 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17721 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17728 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17711 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17723 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17730 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17197 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17209 ;
  wire \$auto$rtlil.cc:2746:ReduceBool$121 ;
  wire \$auto$rtlil.cc:2793:Eq$117 ;
  wire \$auto$rtlil.cc:2793:Eq$119 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\data_d$106 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\data_d$83 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:271.20-273.14" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$176 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$177 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$178 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:266.7-275.10" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$179 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$184 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:277.7-281.10" *)
  wire [40:0] \$auto$slang_frontend.cc:694:finish$\dr_d$185 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$33 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:72.5-85.8" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$34 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\dtmcs_d$41 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:247.7-249.10" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\error_d$140 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:252.7-254.10" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\error_d$147 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$107 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:232.7-234.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$115 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:239.7-241.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$126 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$84 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$88 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$108 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$85 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$89 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\state_d$104 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:163.13-167.16" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\state_d$74 ;
  wire \$procmux$16628_CMP ;
  wire \$procmux$16632_CMP ;
  wire \$procmux$16702_CMP ;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:125.15" *)
  wire [6:0] address_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:125.26" *)
  reg [6:0] address_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:56.9" *)
  wire capture;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:22.24" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:126.16" *)
  wire [31:0] data_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:126.24" *)
  reg [31:0] data_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:128.10" *)
  reg [40:0] dmi;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:54.9" *)
  wire dmi_clear;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:107.18" *)
  wire [40:0] dmi_req;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:29.24" *)
  output [40:0] dmi_req_o;
  wire [40:0] dmi_req_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:108.18" *)
  wire dmi_req_ready;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:31.24" *)
  input dmi_req_ready_i;
  wire dmi_req_ready_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:109.18" *)
  wire dmi_req_valid;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:30.24" *)
  output dmi_req_valid_o;
  wire dmi_req_valid_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:111.18" *)
  wire [33:0] dmi_resp;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:33.24" *)
  input [33:0] dmi_resp_i;
  wire [33:0] dmi_resp_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:34.24" *)
  output dmi_resp_ready_o;
  wire dmi_resp_ready_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:112.18" *)
  wire dmi_resp_valid;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:35.24" *)
  input dmi_resp_valid_i;
  wire dmi_resp_valid_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:28.24" *)
  output dmi_rst_no;
  wire dmi_rst_no;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:104.16" *)
  wire dmi_select;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:124.28" *)
  wire [40:0] dr_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:68.15" *)
  wire [31:0] dtmcs_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:68.24" *)
  reg [31:0] dtmcs_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:60.9" *)
  wire dtmcs_select;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:49.15" *)
  wire [1:0] error_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:136.9" *)
  wire error_dmi_busy;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:49.24" *)
  reg [1:0] error_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:52.9" *)
  wire jtag_dmi_clear;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:23.24" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:57.9" *)
  wire shift;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:122.11" *)
  wire [2:0] state_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:122.20" *)
  reg [2:0] state_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:51.9" *)
  wire tck;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:37.24" *)
  input tck_i;
  wire tck_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:40.24" *)
  input td_i;
  wire td_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:41.24" *)
  output td_o;
  wire td_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:58.9" *)
  wire tdi;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:42.24" *)
  output tdo_oe_o;
  wire tdo_oe_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:24.24" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:38.24" *)
  input tms_i;
  wire tms_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:39.24" *)
  input trst_ni;
  wire trst_ni;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:55.9" *)
  wire update;
  assign \$auto$rtlil.cc:2746:ReduceBool$121  = | { \$auto$rtlil.cc:2793:Eq$119 , \$auto$rtlil.cc:2793:Eq$117  };
  assign \$auto$builder.cc:338:Biop$110  = | state_q;
  assign \$auto$builder.cc:338:Biop$112  = update && \$auto$builder.cc:338:Biop$110 ;
  assign \$auto$builder.cc:338:Biop$123  = capture && \$auto$rtlil.cc:2746:ReduceBool$121 ;
  assign \$auto$builder.cc:338:Biop$128  = ! error_q;
  assign \$auto$builder.cc:338:Biop$130  = \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$126  && \$auto$builder.cc:338:Biop$128 ;
  assign \$auto$builder.cc:338:Biop$137  = \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$108  && \$auto$builder.cc:338:Biop$128 ;
  assign \$auto$builder.cc:338:Biop$142  = update && dtmcs_q[16];
  assign \$auto$builder.cc:338:Biop$144  = \$auto$builder.cc:338:Biop$142  && dtmcs_select;
  assign \$auto$builder.cc:338:Biop$167  = \$auto$builder.cc:338:Biop$128  && \$auto$builder.cc:364:Unop$165 ;
  assign \$auto$builder.cc:338:Biop$171  = error_q == 2'h3;
  assign \$auto$builder.cc:338:Biop$173  = \$auto$builder.cc:338:Biop$171  || error_dmi_busy;
  assign \$auto$builder.cc:338:Biop$23  = dtmcs_select && update;
  assign \$auto$builder.cc:338:Biop$25  = \$auto$builder.cc:338:Biop$23  && dtmcs_q[17];
  assign dmi_clear = jtag_dmi_clear || \$auto$builder.cc:338:Biop$25 ;
  assign \$auto$builder.cc:338:Biop$49  = state_q == 2'h3;
  assign \$auto$builder.cc:338:Biop$58  = dmi_select && update;
  assign \$auto$builder.cc:338:Biop$62  = \$auto$builder.cc:338:Biop$58  && \$auto$builder.cc:338:Biop$128 ;
  assign \$auto$builder.cc:338:Biop$66  = dmi[1:0] == 1'h1;
  assign \$auto$builder.cc:338:Biop$70  = dmi[1:0] == 2'h2;
  assign \$auto$builder.cc:364:Unop$165  = ! error_dmi_busy;
  assign \$auto$rtlil.cc:2793:Eq$117  = state_q == 1'h1;
  assign \$auto$rtlil.cc:2793:Eq$119  = state_q == 2'h2;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) state_q <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17711 ) state_q <= state_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) error_q <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17714 ) error_q <= error_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) data_q <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17723 ) data_q <= data_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) address_q <= 7'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17730 ) address_q <= address_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17701  = { \$auto$builder.cc:338:Biop$49 , dmi_clear, dmi_req_ready } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17703  = { \$auto$rtlil.cc:2793:Eq$117 , dmi_clear, dmi_req_ready } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17705  = | { \$procmux$16632_CMP , \$auto$rtlil.cc:2793:Eq$117 , \$auto$builder.cc:338:Biop$49 , dmi_clear, dmi_resp_valid };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17707  = { \$procmux$16632_CMP , \$auto$builder.cc:338:Biop$62 , dmi_clear } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17709  = { \$procmux$16632_CMP , \$auto$builder.cc:338:Biop$70 , \$auto$builder.cc:338:Biop$66 , \$auto$builder.cc:338:Biop$62 , dmi_clear } != 5'h12;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17714  = | { \$auto$builder.cc:338:Biop$144 , \$auto$builder.cc:338:Biop$137 , \$auto$builder.cc:338:Biop$130 , dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17717  = { \$auto$rtlil.cc:2793:Eq$119 , dmi_clear, dmi_resp_valid } != 3'h4;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17721  = | { \$procmux$16632_CMP , \$auto$rtlil.cc:2793:Eq$119 , dmi_clear };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17728  = | { \$procmux$16632_CMP , dmi_clear };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17711  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17709 , \$auto$opt_dff.cc:194:make_patterns_logic$17701 , \$auto$opt_dff.cc:194:make_patterns_logic$17707 , \$auto$opt_dff.cc:194:make_patterns_logic$17703 , \$auto$opt_dff.cc:194:make_patterns_logic$17705  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17723  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17707 , \$auto$opt_dff.cc:194:make_patterns_logic$17717 , \$auto$opt_dff.cc:194:make_patterns_logic$17721  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17730  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17707 , \$auto$opt_dff.cc:194:make_patterns_logic$17728  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17197  = | { \$auto$rtlil.cc:2793:Eq$117 , \$auto$builder.cc:338:Biop$49  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17209  = | { \$procmux$16628_CMP , \$auto$rtlil.cc:2793:Eq$119  };
  assign dmi_req[33:32] = \$auto$builder.cc:338:Biop$49  ? 2'h2 : 2'h1;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:285.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dmi <= 41'h00000000000;
    else dmi <= dr_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[9:4] <= 6'h00;
    else dtmcs_q[9:4] <= dtmcs_d[9:4];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[17] <= 1'h0;
    else dtmcs_q[17] <= dtmcs_d[17];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[16] <= 1'h0;
    else dtmcs_q[16] <= dtmcs_d[16];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[11:10] <= 2'h0;
    else dtmcs_q[11:10] <= dtmcs_d[11:10];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[14:12] <= 3'h0;
    else dtmcs_q[14:12] <= dtmcs_d[14:12];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[3:0] <= 4'h0;
    else dtmcs_q[3:0] <= dtmcs_d[3:0];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[15] <= 1'h0;
    else dtmcs_q[15] <= dtmcs_d[15];
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:92.3" *)
  always @(posedge tck, negedge trst_ni)
    if (!trst_ni) dtmcs_q[31:18] <= 14'h0000;
    else dtmcs_q[31:18] <= dtmcs_d[31:18];
  assign \$auto$slang_frontend.cc:694:finish$\error_d$147  = \$auto$builder.cc:338:Biop$144  ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:253.9-253.30|../rtl/riscv-dbg/dmi_jtag.sv:252.7-254.10" *) 2'h0 : { 1'h1, \$auto$slang_frontend.cc:694:finish$\error_d$140 [0] };
  assign \$auto$slang_frontend.cc:694:finish$\error_d$140 [0] = ~ (* src = "../rtl/riscv-dbg/dmi_jtag.sv:248.9-248.31|../rtl/riscv-dbg/dmi_jtag.sv:247.7-249.10" *) \$auto$builder.cc:338:Biop$137 ;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$126  = \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$115  | (* src = "../rtl/riscv-dbg/dmi_jtag.sv:240.9-240.31|../rtl/riscv-dbg/dmi_jtag.sv:239.7-241.10" *) \$auto$builder.cc:338:Biop$123 ;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$115  = \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$107  | (* src = "../rtl/riscv-dbg/dmi_jtag.sv:233.9-233.31|../rtl/riscv-dbg/dmi_jtag.sv:232.7-234.10" *) \$auto$builder.cc:338:Biop$112 ;
  assign \$procmux$16628_CMP  = state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) 3'h4;
  assign \$procmux$16632_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:159.11-169.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) state_q;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$85  = dmi_resp[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:214.28-214.55|../rtl/riscv-dbg/dmi_jtag.sv:213.13-217.20" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$84  = dmi_resp[1:0] == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:215.29-215.51|../rtl/riscv-dbg/dmi_jtag.sv:213.13-217.20" *) 2'h3;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$88  = dmi_resp_valid & (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.31-219.14|../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14" *) \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$84 ;
  function [31:0] \$procmux$16699 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/riscv-dbg/dmi_jtag.sv:190.29-193.18|../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$16699  = b[31:0];
      3'b?1?:
        \$procmux$16699  = b[63:32];
      3'b1??:
        \$procmux$16699  = b[95:64];
      default:
        \$procmux$16699  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\data_d$83  = \$procmux$16699 (32'd3131949278, { dmi_resp[33:2], 64'hdeadbeefb051b051 }, { \$procmux$16702_CMP , \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$85 , \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$84  });
  assign \$procmux$16702_CMP  = ! (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:184.17-184.40|../rtl/riscv-dbg/dmi_jtag.sv:182.13-197.20" *) dmi_resp[1:0];
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$89  = dmi_resp_valid & (* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.31-199.14|../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14" *) \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$85 ;
  assign \$auto$slang_frontend.cc:694:finish$\data_d$106  = \$auto$rtlil.cc:2793:Eq$119  ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:181.11-199.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) \$auto$slang_frontend.cc:694:finish$\data_d$83  : dmi[33:2];
  function [2:0] \$procmux$16826 ;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$16826  = b[2:0];
      3'b?1?:
        \$procmux$16826  = b[5:3];
      3'b1??:
        \$procmux$16826  = b[8:6];
      default:
        \$procmux$16826  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\state_d$104  = \$procmux$16826 (3'h0, { 1'h0, \$auto$slang_frontend.cc:694:finish$\state_d$74 [1], 7'h54 }, { \$procmux$16632_CMP , \$auto$rtlil.cc:2793:Eq$117 , \$auto$builder.cc:338:Biop$49  });
  assign \$auto$slang_frontend.cc:694:finish$\state_d$74 [1] = ~ (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:164.15-164.30|../rtl/riscv-dbg/dmi_jtag.sv:163.13-167.16" *) \$auto$builder.cc:338:Biop$66 ;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$108  = \$auto$opt_reduce.cc:137:opt_pmux$17209  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) \$auto$slang_frontend.cc:694:finish$\error_dmi_op_failed$89 ;
  assign \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$107  = \$auto$opt_reduce.cc:137:opt_pmux$17209  & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:212.11-219.14|../rtl/riscv-dbg/dmi_jtag.sv:156.7-228.14" *) \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$88 ;
  assign data_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 32'd0 : \$auto$slang_frontend.cc:694:finish$\data_d$106 ;
  assign address_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 7'h00 : dmi[40:34];
  assign state_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 3'h0 : \$auto$slang_frontend.cc:694:finish$\state_d$104 ;
  assign error_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 2'h0 : \$auto$slang_frontend.cc:694:finish$\error_d$147 ;
  assign error_dmi_busy = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\error_dmi_busy$126 ;
  assign dmi_req_valid = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:150.20-155.8|../rtl/riscv-dbg/dmi_jtag.sv:150.5-255.8" *) 1'h0 : \$auto$opt_reduce.cc:137:opt_pmux$17197 ;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$184  = dmi_select ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:279.11-279.47|../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12" *) { tdi, dmi[40:1] } : \$auto$slang_frontend.cc:694:finish$\dr_d$179 ;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$185  = shift ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:278.9-280.12|../rtl/riscv-dbg/dmi_jtag.sv:277.7-281.10" *) \$auto$slang_frontend.cc:694:finish$\dr_d$184  : \$auto$slang_frontend.cc:694:finish$\dr_d$179 ;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$176  = \$auto$builder.cc:338:Biop$173  ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:272.13-272.49|../rtl/riscv-dbg/dmi_jtag.sv:271.20-273.14" *) { address_q, data_q, 2'h3 } : dmi;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$177  = \$auto$builder.cc:338:Biop$167  ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:269.13-269.52|../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14" *) { address_q, data_q, 2'h0 } : \$auto$slang_frontend.cc:694:finish$\dr_d$176 ;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$178  = dmi_select ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:268.11-273.14|../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12" *) \$auto$slang_frontend.cc:694:finish$\dr_d$177  : dmi;
  assign \$auto$slang_frontend.cc:694:finish$\dr_d$179  = capture ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:267.9-274.12|../rtl/riscv-dbg/dmi_jtag.sv:266.7-275.10" *) \$auto$slang_frontend.cc:694:finish$\dr_d$178  : dmi;
  assign dr_d = dmi_clear ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag.sv:264.7-264.17|../rtl/riscv-dbg/dmi_jtag.sv:263.5-282.8" *) 41'h00000000000 : \$auto$slang_frontend.cc:694:finish$\dr_d$185 ;
  assign \$auto$slang_frontend.cc:694:finish$\dtmcs_d$41  = dtmcs_select ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.25-88.61|../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61" *) { tdi, dtmcs_q[31:1] } : \$auto$slang_frontend.cc:694:finish$\dtmcs_d$34 ;
  assign dtmcs_d = shift ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:88.7-88.61|../rtl/riscv-dbg/dmi_jtag.sv:87.5-89.8" *) \$auto$slang_frontend.cc:694:finish$\dtmcs_d$41  : \$auto$slang_frontend.cc:694:finish$\dtmcs_d$34 ;
  assign \$auto$slang_frontend.cc:694:finish$\dtmcs_d$33  = dtmcs_select ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:74.9-83.23|../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10" *) { 20'h00001, error_q, 10'h071 } : dtmcs_q;
  assign \$auto$slang_frontend.cc:694:finish$\dtmcs_d$34  = capture ? (* src = "../rtl/riscv-dbg/dmi_jtag.sv:73.7-84.10|../rtl/riscv-dbg/dmi_jtag.sv:72.5-85.8" *) \$auto$slang_frontend.cc:694:finish$\dtmcs_d$33  : dtmcs_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:330.11" *)
  \dmi_cdc$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc  i_dmi_cdc (
    .clk_i(clk_i),
    .core_dmi_ready_i(dmi_req_ready_i),
    .core_dmi_ready_o(dmi_resp_ready_o),
    .core_dmi_req_o(dmi_req_o),
    .core_dmi_resp_i(dmi_resp_i),
    .core_dmi_rst_no(dmi_rst_no),
    .core_dmi_valid_i(dmi_resp_valid_i),
    .core_dmi_valid_o(dmi_req_valid_o),
    .jtag_dmi_cdc_clear_i(dmi_clear),
    .jtag_dmi_ready_i(1'h1),
    .jtag_dmi_ready_o(dmi_req_ready),
    .jtag_dmi_req_i({ address_q, dmi_req[33:32], data_q }),
    .jtag_dmi_resp_o(dmi_resp),
    .jtag_dmi_valid_i(dmi_req_valid),
    .jtag_dmi_valid_o(dmi_resp_valid),
    .rst_ni(rst_ni),
    .tck_i(tck),
    .trst_ni(trst_ni)
  );
  (* src = "../rtl/riscv-dbg/dmi_jtag.sv:307.5" *)
  \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap  i_dmi_jtag_tap (
    .capture_o(capture),
    .dmi_clear_o(jtag_dmi_clear),
    .dmi_select_o(dmi_select),
    .dmi_tdo_i(dmi[0]),
    .dtmcs_select_o(dtmcs_select),
    .dtmcs_tdo_i(dtmcs_q[0]),
    .shift_o(shift),
    .tck_i(tck_i),
    .tck_o(tck),
    .td_i(td_i),
    .td_o(td_o),
    .tdi_o(tdi),
    .tdo_oe_o(tdo_oe_o),
    .testmode_i(testmode_i),
    .tms_i(tms_i),
    .trst_ni(trst_ni),
    .update_o(update)
  );
  assign \$auto$slang_frontend.cc:694:finish$\error_d$140 [1] = 1'h1;
  assign { \$auto$slang_frontend.cc:694:finish$\state_d$74 [2], \$auto$slang_frontend.cc:694:finish$\state_d$74 [0] } = 2'h1;
  assign { dmi_req[40:34], dmi_req[31:0] } = { address_q, data_q };
endmodule

(* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:19.8" *)
module \dmi_jtag_tap$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap (testmode_i, tck_i, tms_i, trst_ni, td_i, td_o, tdo_oe_o, tck_o, dmi_clear_o, update_o, capture_o, shift_o, tdi_o, dtmcs_select_o, dtmcs_tdo_i, dmi_select_o, dmi_tdo_i);
  wire \$auto$builder.cc:338:Biop$2784 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17733 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17736 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17199 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17201 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17213 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17215 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17217 ;
  wire \$auto$rtlil.cc:2874:Mux$2789 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$2793 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" *)
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$2749 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$2751 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" *)
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$2761 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\bypass_d$2763 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$2746 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$2750 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$2758 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\idcode_d$2762 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" *)
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$2728 ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\tdo_mux$2776 ;
  wire \$procmux$15177_CMP ;
  wire \$procmux$15178_CMP ;
  wire \$procmux$15179_CMP ;
  wire \$procmux$15182_CMP ;
  wire \$procmux$15184_CMP ;
  wire \$procmux$15185_CMP ;
  wire \$procmux$15186_CMP ;
  wire \$procmux$15189_CMP ;
  wire \$procmux$15190_CMP ;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:124.16" *)
  wire bypass_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:124.26" *)
  reg bypass_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.9" *)
  wire capture_ir;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:40.23" *)
  output capture_o;
  wire capture_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:38.23" *)
  output dmi_clear_o;
  wire dmi_clear_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:46.23" *)
  output dmi_select_o;
  wire dmi_select_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:47.23" *)
  input dmi_tdo_i;
  wire dmi_tdo_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:43.23" *)
  output dtmcs_select_o;
  wire dtmcs_select_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:44.23" *)
  input dtmcs_tdo_i;
  wire dtmcs_tdo_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:120.16" *)
  wire [31:0] idcode_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:120.26" *)
  reg [31:0] idcode_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:121.16" *)
  wire idcode_select;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:75.25" *)
  wire [4:0] jtag_ir_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:75.36" *)
  reg [4:0] jtag_ir_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:73.25" *)
  wire [4:0] jtag_ir_shift_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:73.42" *)
  reg [4:0] jtag_ir_shift_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.21" *)
  wire shift_ir;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:41.23" *)
  output shift_o;
  wire shift_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:57.28" *)
  wire [3:0] tap_state_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:57.15" *)
  reg [3:0] tap_state_q;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:28.23" *)
  input tck_i;
  wire tck_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:188.9" *)
  wire tck_n;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:188.16" *)
  wire tck_ni;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:36.23" *)
  output tck_o;
  wire tck_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:31.23" *)
  input td_i;
  wire td_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:32.23" *)
  output td_o;
  reg td_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:42.23" *)
  output tdi_o;
  wire tdi_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:168.9" *)
  wire tdo_mux;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:33.23" *)
  output tdo_oe_o;
  reg tdo_oe_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:34.23" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:29.23" *)
  input tms_i;
  wire tms_i;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:30.23" *)
  input trst_ni;
  wire trst_ni;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:76.31" *)
  wire update_ir;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:39.23" *)
  output update_o;
  wire update_o;
  assign \$auto$builder.cc:338:Biop$2784  = shift_ir | shift_o;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) jtag_ir_shift_q <= 5'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17733 ) jtag_ir_shift_q <= jtag_ir_shift_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:104.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) jtag_ir_q <= 5'h01;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17736 ) jtag_ir_q <= jtag_ir_d;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17733  = { capture_ir, shift_ir, \$auto$opt_reduce.cc:137:opt_pmux$17201  } != 3'h1;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17736  = { update_ir, \$auto$opt_reduce.cc:137:opt_pmux$17201  } != 2'h1;
  assign \$auto$opt_reduce.cc:137:opt_pmux$17199  = | { idcode_select, dmi_select_o, dtmcs_select_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17201  = | { \$procmux$15190_CMP , \$procmux$15189_CMP , \$procmux$15186_CMP , \$procmux$15185_CMP , \$procmux$15184_CMP , \$procmux$15182_CMP , \$procmux$15179_CMP , \$procmux$15178_CMP , \$procmux$15177_CMP , update_ir, shift_ir, capture_ir, shift_o, capture_o, update_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17213  = | { \$procmux$15190_CMP , update_ir, update_o };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17215  = | { shift_ir, capture_ir };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17217  = | { shift_o, capture_o };
  assign \$auto$rtlil.cc:2874:Mux$2789  = ~ tms_i;
  assign \$auto$rtlil.cc:2874:Mux$2793  = tms_i ? 2'h2 : 2'h1;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) bypass_q <= 1'h0;
    else bypass_q <= bypass_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) idcode_q <= 32'd202137011;
    else idcode_q <= idcode_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:304.3" *)
  always @(posedge tck_i, negedge trst_ni)
    if (!trst_ni) tap_state_q <= 4'h1;
    else tap_state_q <= tap_state_d;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" *)
  always @(posedge tck_n, negedge trst_ni)
    if (!trst_ni) td_o <= 1'h0;
    else td_o <= tdo_mux;
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:203.3" *)
  always @(posedge tck_n, negedge trst_ni)
    if (!trst_ni) tdo_oe_o <= 1'h0;
    else tdo_oe_o <= \$auto$builder.cc:338:Biop$2784 ;
  function [0:0] \$procmux$15097 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$15097  = b[0:0];
      3'b?1?:
        \$procmux$15097  = b[1:1];
      3'b1??:
        \$procmux$15097  = b[2:2];
      default:
        \$procmux$15097  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\tdo_mux$2776  = \$procmux$15097 (bypass_q, { idcode_q[0], dtmcs_tdo_i, dmi_tdo_i }, { idcode_select, dtmcs_select_o, dmi_select_o });
  assign dmi_select_o = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:179.25-179.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 5'h11;
  assign dtmcs_select_o = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:178.25-178.47|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 5'h10;
  assign idcode_select = jtag_ir_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:177.25-177.47|../rtl/riscv-dbg/dmi_jtag_tap.sv:176.7-181.14" *) 1'h1;
  assign tdo_mux = shift_ir ? (* full_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:173.7-173.36|../rtl/riscv-dbg/dmi_jtag_tap.sv:172.5-182.8" *) jtag_ir_shift_q[0] : \$auto$slang_frontend.cc:694:finish$\tdo_mux$2776 ;
  assign bypass_d = \$auto$opt_reduce.cc:137:opt_pmux$17201  & (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" *) \$auto$slang_frontend.cc:694:finish$\bypass_d$2763 ;
  assign idcode_d = \$auto$opt_reduce.cc:137:opt_pmux$17201  ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:140.27-144.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:140.5-144.8" *) \$auto$slang_frontend.cc:694:finish$\idcode_d$2762  : 32'd202137011;
  assign \$auto$slang_frontend.cc:694:finish$\bypass_d$2761  = \$auto$opt_reduce.cc:137:opt_pmux$17199  ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:137.27-137.43|../rtl/riscv-dbg/dmi_jtag_tap.sv:137.7-137.43" *) \$auto$slang_frontend.cc:694:finish$\bypass_d$2751  : td_i;
  assign \$auto$slang_frontend.cc:694:finish$\idcode_d$2758  = idcode_select ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:136.27-136.65|../rtl/riscv-dbg/dmi_jtag_tap.sv:136.7-136.65" *) { td_i, idcode_q[31:1] } : \$auto$slang_frontend.cc:694:finish$\idcode_d$2750 ;
  assign \$auto$slang_frontend.cc:694:finish$\bypass_d$2763  = shift_o ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *) \$auto$slang_frontend.cc:694:finish$\bypass_d$2761  : \$auto$slang_frontend.cc:694:finish$\bypass_d$2751 ;
  assign \$auto$slang_frontend.cc:694:finish$\idcode_d$2762  = shift_o ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:135.19-138.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:135.5-138.8" *) \$auto$slang_frontend.cc:694:finish$\idcode_d$2758  : \$auto$slang_frontend.cc:694:finish$\idcode_d$2750 ;
  assign \$auto$slang_frontend.cc:694:finish$\bypass_d$2749  = \$auto$opt_reduce.cc:137:opt_pmux$17199  & (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:132.26-132.42|../rtl/riscv-dbg/dmi_jtag_tap.sv:132.7-132.42" *) bypass_q;
  assign \$auto$slang_frontend.cc:694:finish$\idcode_d$2746  = idcode_select ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:131.26-131.49|../rtl/riscv-dbg/dmi_jtag_tap.sv:131.7-131.49" *) 32'd202137011 : idcode_q;
  assign \$auto$slang_frontend.cc:694:finish$\bypass_d$2751  = capture_o ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *) \$auto$slang_frontend.cc:694:finish$\bypass_d$2749  : bypass_q;
  assign \$auto$slang_frontend.cc:694:finish$\idcode_d$2750  = capture_o ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:130.21-133.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:130.5-133.8" *) \$auto$slang_frontend.cc:694:finish$\idcode_d$2746  : idcode_q;
  assign dmi_clear_o = ~ (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) \$auto$opt_reduce.cc:137:opt_pmux$17201 ;
  assign update_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hf;
  assign \$procmux$15177_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:290.9-290.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'he;
  assign \$procmux$15178_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:287.9-287.51|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hd;
  assign \$procmux$15179_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:283.9-283.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hc;
  assign shift_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:278.16-281.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'hb;
  assign capture_ir = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:270.18-273.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'ha;
  assign \$procmux$15182_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:264.9-264.60|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'h9;
  assign update_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:258.17-261.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 4'h8;
  assign \$procmux$15184_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:256.9-256.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h7;
  assign \$procmux$15185_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:253.9-253.51|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h6;
  assign \$procmux$15186_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:250.9-250.52|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h5;
  assign shift_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:245.16-248.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 3'h4;
  assign capture_o = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:241.18-244.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 2'h3;
  assign \$procmux$15189_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:239.9-239.58|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 2'h2;
  assign \$procmux$15190_CMP  = tap_state_q == (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:235.9-235.60|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *) 1'h1;
  function [3:0] \$procmux$15192 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:296.17-299.10|../rtl/riscv-dbg/dmi_jtag_tap.sv:229.5-301.12" *)
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \$procmux$15192  = b[3:0];
      11'b?????????1?:
        \$procmux$15192  = b[7:4];
      11'b????????1??:
        \$procmux$15192  = b[11:8];
      11'b???????1???:
        \$procmux$15192  = b[15:12];
      11'b??????1????:
        \$procmux$15192  = b[19:16];
      11'b?????1?????:
        \$procmux$15192  = b[23:20];
      11'b????1??????:
        \$procmux$15192  = b[27:24];
      11'b???1???????:
        \$procmux$15192  = b[31:28];
      11'b??1????????:
        \$procmux$15192  = b[35:32];
      11'b?1?????????:
        \$procmux$15192  = b[39:36];
      11'b1??????????:
        \$procmux$15192  = b[43:40];
      default:
        \$procmux$15192  = a;
    endcase
  endfunction
  assign tap_state_d = \$procmux$15192 ({ 3'h0, \$auto$rtlil.cc:2874:Mux$2789  }, { \$auto$rtlil.cc:2874:Mux$2793 [1], 1'h0, \$auto$rtlil.cc:2874:Mux$2793 [0], 4'ha, tms_i, \$auto$rtlil.cc:2874:Mux$2793 , \$auto$rtlil.cc:2874:Mux$2793 [0], 4'h3, tms_i, \$auto$rtlil.cc:2874:Mux$2793 , 2'h0, \$auto$rtlil.cc:2874:Mux$2789 , 1'h0, \$auto$rtlil.cc:2874:Mux$2789 , 2'h1, \$auto$rtlil.cc:2874:Mux$2793 , \$auto$rtlil.cc:2874:Mux$2793 [0], 2'h3, tms_i, 3'h7, \$auto$rtlil.cc:2874:Mux$2793 , 1'h1, tms_i, 4'hc, \$auto$rtlil.cc:2874:Mux$2793  }, { \$procmux$15189_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17217 , \$procmux$15186_CMP , \$procmux$15185_CMP , \$procmux$15184_CMP , \$procmux$15182_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17215 , \$procmux$15179_CMP , \$procmux$15178_CMP , \$procmux$15177_CMP , \$auto$opt_reduce.cc:137:opt_pmux$17213  });
  assign jtag_ir_d = \$auto$opt_reduce.cc:137:opt_pmux$17201  ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" *) jtag_ir_shift_q : 5'h01;
  assign jtag_ir_shift_d = \$auto$opt_reduce.cc:137:opt_pmux$17201  ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:97.27-101.8|../rtl/riscv-dbg/dmi_jtag_tap.sv:97.5-101.8" *) \$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$2728  : 5'h00;
  assign \$auto$slang_frontend.cc:694:finish$\jtag_ir_shift_d$2728  = capture_ir ? (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:89.7-89.45|../rtl/riscv-dbg/dmi_jtag_tap.sv:88.5-90.8" *) 5'h05 : { td_i, jtag_ir_shift_q[4:1] };
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:195.15" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux  i_dft_tck_mux (
    .clk0_i(tck_ni),
    .clk1_i(tck_i),
    .clk_o(tck_n),
    .clk_sel_i(testmode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/riscv-dbg/dmi_jtag_tap.sv:190.19" *)
  \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv  i_tck_inv (
    .clk_i(tck_i),
    .clk_o(tck_ni)
  );
  assign tck_o = tck_i;
  assign tdi_o = td_i;
endmodule

(* src = "../rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$6878 ;
  wire \$auto$builder.cc:338:Biop$6911 ;
  wire \$auto$builder.cc:338:Biop$6926 ;
  wire \$auto$builder.cc:338:Biop$6930 ;
  wire \$auto$builder.cc:338:Biop$6934 ;
  wire \$auto$builder.cc:364:Unop$6876 ;
  wire \$auto$builder.cc:364:Unop$6909 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17739 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17742 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17744 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17749 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17746 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18121 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$6890 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$6954 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$6956 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$6955 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$6893  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$6890 [3], \$auto$rtlil.cc:2896:Demux$6890 [3], \$auto$rtlil.cc:2896:Demux$6890 [1], \$auto$rtlil.cc:2896:Demux$6890 [1] }),
    .Y(mem_n)
  );
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign full_o = status_cnt_q == 2'h2;
  assign empty_o = ! status_cnt_q;
  assign \$auto$builder.cc:338:Biop$6878  = push_i && \$auto$builder.cc:364:Unop$6876 ;
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$auto$builder.cc:338:Biop$6911  = pop_i && \$auto$builder.cc:364:Unop$6909 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:2874:Mux$18121 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$6926  = push_i && pop_i;
  assign \$auto$builder.cc:338:Biop$6930  = \$auto$builder.cc:338:Biop$6926  && \$auto$builder.cc:364:Unop$6876 ;
  assign \$auto$builder.cc:338:Biop$6934  = \$auto$builder.cc:338:Biop$6930  && \$auto$builder.cc:364:Unop$6909 ;
  assign \$auto$builder.cc:364:Unop$6876  = ~ full_o;
  assign \$auto$builder.cc:364:Unop$6909  = ~ empty_o;
  assign \$auto$rtlil.cc:2896:Demux$6890 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$6890 [3] = write_pointer_q == 1'h1;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17739 ) write_pointer_q <= \$auto$slang_frontend.cc:694:finish$\write_pointer_q$6955 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17746 ) status_cnt_q <= \$auto$slang_frontend.cc:694:finish$\status_cnt_q$6956 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17749 ) read_pointer_q <= \$auto$slang_frontend.cc:694:finish$\read_pointer_q$6954 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$6878 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$6878 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17739  = | { \$auto$builder.cc:338:Biop$6878 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17742  = | { \$auto$builder.cc:338:Biop$6934 , \$auto$builder.cc:338:Biop$6911 , \$auto$builder.cc:338:Biop$6878 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17744  = { \$auto$builder.cc:338:Biop$6934 , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17749  = | { \$auto$builder.cc:338:Biop$6911 , flush_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17746  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17742 , \$auto$opt_dff.cc:194:make_patterns_logic$17744  };
  assign \$auto$rtlil.cc:2874:Mux$18121 [1] = ~ \$auto$builder.cc:338:Biop$6911 ;
  assign \$auto$slang_frontend.cc:694:finish$\status_cnt_q$6956  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$slang_frontend.cc:694:finish$\write_pointer_q$6955  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$auto$slang_frontend.cc:694:finish$\read_pointer_q$6954  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:2874:Mux$18121 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$6890 [2], \$auto$rtlil.cc:2896:Demux$6890 [0] } = { \$auto$rtlil.cc:2896:Demux$6890 [3], \$auto$rtlil.cc:2896:Demux$6890 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "../rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$7151 ;
  wire \$auto$builder.cc:338:Biop$7184 ;
  wire \$auto$builder.cc:338:Biop$7199 ;
  wire \$auto$builder.cc:338:Biop$7203 ;
  wire \$auto$builder.cc:338:Biop$7207 ;
  wire \$auto$builder.cc:364:Unop$7149 ;
  wire \$auto$builder.cc:364:Unop$7182 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17754 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17757 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17759 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17764 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17761 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18126 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$7163 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7227 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7229 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7228 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$7166  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$7163 [3], \$auto$rtlil.cc:2896:Demux$7163 [3], \$auto$rtlil.cc:2896:Demux$7163 [1], \$auto$rtlil.cc:2896:Demux$7163 [1] }),
    .Y(mem_n)
  );
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign full_o = status_cnt_q == 2'h2;
  assign empty_o = ! status_cnt_q;
  assign \$auto$builder.cc:338:Biop$7151  = push_i && \$auto$builder.cc:364:Unop$7149 ;
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$auto$builder.cc:338:Biop$7184  = pop_i && \$auto$builder.cc:364:Unop$7182 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:2874:Mux$18126 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$7199  = push_i && pop_i;
  assign \$auto$builder.cc:338:Biop$7203  = \$auto$builder.cc:338:Biop$7199  && \$auto$builder.cc:364:Unop$7149 ;
  assign \$auto$builder.cc:338:Biop$7207  = \$auto$builder.cc:338:Biop$7203  && \$auto$builder.cc:364:Unop$7182 ;
  assign \$auto$builder.cc:364:Unop$7149  = ~ full_o;
  assign \$auto$builder.cc:364:Unop$7182  = ~ empty_o;
  assign \$auto$rtlil.cc:2896:Demux$7163 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$7163 [3] = write_pointer_q == 1'h1;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17754 ) write_pointer_q <= \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7228 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17761 ) status_cnt_q <= \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7229 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17764 ) read_pointer_q <= \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7227 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$7151 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$7151 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17754  = | { \$auto$builder.cc:338:Biop$7151 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17757  = | { \$auto$builder.cc:338:Biop$7207 , \$auto$builder.cc:338:Biop$7184 , \$auto$builder.cc:338:Biop$7151 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17759  = { \$auto$builder.cc:338:Biop$7207 , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17764  = | { \$auto$builder.cc:338:Biop$7184 , flush_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17761  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17757 , \$auto$opt_dff.cc:194:make_patterns_logic$17759  };
  assign \$auto$rtlil.cc:2874:Mux$18126 [1] = ~ \$auto$builder.cc:338:Biop$7184 ;
  assign \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7229  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7228  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7227  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:2874:Mux$18126 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$7163 [2], \$auto$rtlil.cc:2896:Demux$7163 [0] } = { \$auto$rtlil.cc:2896:Demux$7163 [3], \$auto$rtlil.cc:2896:Demux$7163 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "../rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$7424 ;
  wire \$auto$builder.cc:338:Biop$7457 ;
  wire \$auto$builder.cc:338:Biop$7472 ;
  wire \$auto$builder.cc:338:Biop$7476 ;
  wire \$auto$builder.cc:338:Biop$7480 ;
  wire \$auto$builder.cc:364:Unop$7422 ;
  wire \$auto$builder.cc:364:Unop$7455 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17769 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17772 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17774 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17779 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17776 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18131 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$7436 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7500 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7502 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7501 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$7439  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$7436 [3], \$auto$rtlil.cc:2896:Demux$7436 [3], \$auto$rtlil.cc:2896:Demux$7436 [1], \$auto$rtlil.cc:2896:Demux$7436 [1] }),
    .Y(mem_n)
  );
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign full_o = status_cnt_q == 2'h2;
  assign empty_o = ! status_cnt_q;
  assign \$auto$builder.cc:338:Biop$7424  = push_i && \$auto$builder.cc:364:Unop$7422 ;
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$auto$builder.cc:338:Biop$7457  = pop_i && \$auto$builder.cc:364:Unop$7455 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:2874:Mux$18131 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$7472  = push_i && pop_i;
  assign \$auto$builder.cc:338:Biop$7476  = \$auto$builder.cc:338:Biop$7472  && \$auto$builder.cc:364:Unop$7422 ;
  assign \$auto$builder.cc:338:Biop$7480  = \$auto$builder.cc:338:Biop$7476  && \$auto$builder.cc:364:Unop$7455 ;
  assign \$auto$builder.cc:364:Unop$7422  = ~ full_o;
  assign \$auto$builder.cc:364:Unop$7455  = ~ empty_o;
  assign \$auto$rtlil.cc:2896:Demux$7436 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$7436 [3] = write_pointer_q == 1'h1;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17769 ) write_pointer_q <= \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7501 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17776 ) status_cnt_q <= \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7502 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17779 ) read_pointer_q <= \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7500 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$7424 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$7424 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17769  = | { \$auto$builder.cc:338:Biop$7424 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17772  = | { \$auto$builder.cc:338:Biop$7480 , \$auto$builder.cc:338:Biop$7457 , \$auto$builder.cc:338:Biop$7424 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17774  = { \$auto$builder.cc:338:Biop$7480 , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17779  = | { \$auto$builder.cc:338:Biop$7457 , flush_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17776  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17772 , \$auto$opt_dff.cc:194:make_patterns_logic$17774  };
  assign \$auto$rtlil.cc:2874:Mux$18131 [1] = ~ \$auto$builder.cc:338:Biop$7457 ;
  assign \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7502  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7501  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7500  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:2874:Mux$18131 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$7436 [2], \$auto$rtlil.cc:2896:Demux$7436 [0] } = { \$auto$rtlil.cc:2896:Demux$7436 [3], \$auto$rtlil.cc:2896:Demux$7436 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "../rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$7697 ;
  wire \$auto$builder.cc:338:Biop$7730 ;
  wire \$auto$builder.cc:338:Biop$7745 ;
  wire \$auto$builder.cc:338:Biop$7749 ;
  wire \$auto$builder.cc:338:Biop$7753 ;
  wire \$auto$builder.cc:364:Unop$7695 ;
  wire \$auto$builder.cc:364:Unop$7728 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17784 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17787 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17789 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17794 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17791 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18136 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$7709 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7773 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7775 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7774 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$7712  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$7709 [3], \$auto$rtlil.cc:2896:Demux$7709 [3], \$auto$rtlil.cc:2896:Demux$7709 [1], \$auto$rtlil.cc:2896:Demux$7709 [1] }),
    .Y(mem_n)
  );
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign full_o = status_cnt_q == 2'h2;
  assign empty_o = ! status_cnt_q;
  assign \$auto$builder.cc:338:Biop$7697  = push_i && \$auto$builder.cc:364:Unop$7695 ;
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$auto$builder.cc:338:Biop$7730  = pop_i && \$auto$builder.cc:364:Unop$7728 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:2874:Mux$18136 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$7745  = push_i && pop_i;
  assign \$auto$builder.cc:338:Biop$7749  = \$auto$builder.cc:338:Biop$7745  && \$auto$builder.cc:364:Unop$7695 ;
  assign \$auto$builder.cc:338:Biop$7753  = \$auto$builder.cc:338:Biop$7749  && \$auto$builder.cc:364:Unop$7728 ;
  assign \$auto$builder.cc:364:Unop$7695  = ~ full_o;
  assign \$auto$builder.cc:364:Unop$7728  = ~ empty_o;
  assign \$auto$rtlil.cc:2896:Demux$7709 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$7709 [3] = write_pointer_q == 1'h1;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17784 ) write_pointer_q <= \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7774 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17791 ) status_cnt_q <= \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7775 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17794 ) read_pointer_q <= \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7773 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$7697 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$7697 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17784  = | { \$auto$builder.cc:338:Biop$7697 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17787  = | { \$auto$builder.cc:338:Biop$7753 , \$auto$builder.cc:338:Biop$7730 , \$auto$builder.cc:338:Biop$7697 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17789  = { \$auto$builder.cc:338:Biop$7753 , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17794  = | { \$auto$builder.cc:338:Biop$7730 , flush_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17791  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17787 , \$auto$opt_dff.cc:194:make_patterns_logic$17789  };
  assign \$auto$rtlil.cc:2874:Mux$18136 [1] = ~ \$auto$builder.cc:338:Biop$7730 ;
  assign \$auto$slang_frontend.cc:694:finish$\status_cnt_q$7775  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$slang_frontend.cc:694:finish$\write_pointer_q$7774  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$auto$slang_frontend.cc:694:finish$\read_pointer_q$7773  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:2874:Mux$18136 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$7709 [2], \$auto$rtlil.cc:2896:Demux$7709 [0] } = { \$auto$rtlil.cc:2896:Demux$7709 [3], \$auto$rtlil.cc:2896:Demux$7709 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "../rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$7970 ;
  wire \$auto$builder.cc:338:Biop$8003 ;
  wire \$auto$builder.cc:338:Biop$8018 ;
  wire \$auto$builder.cc:338:Biop$8022 ;
  wire \$auto$builder.cc:338:Biop$8026 ;
  wire \$auto$builder.cc:364:Unop$7968 ;
  wire \$auto$builder.cc:364:Unop$8001 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17799 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17802 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17804 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17809 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17806 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18141 ;
  wire [3:0] \$auto$rtlil.cc:2896:Demux$7982 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\read_pointer_q$8046 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$8048 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\write_pointer_q$8047 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:32.19" *)
  input [1:0] data_i;
  wire [1:0] data_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:35.19" *)
  output [1:0] data_o;
  wire [1:0] data_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.29" *)
  wire [3:0] mem_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:49.36" *)
  reg [3:0] mem_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.30" *)
  wire read_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.46" *)
  reg read_pointer_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.62" *)
  wire write_pointer_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:44.79" *)
  reg write_pointer_q;
  \$bwmux  #(
    .WIDTH(32'd4)
  ) \$auto$builder.cc:128:Bwmux$7985  (
    .A(mem_q),
    .B({ data_i, data_i }),
    .S({ \$auto$rtlil.cc:2896:Demux$7982 [3], \$auto$rtlil.cc:2896:Demux$7982 [3], \$auto$rtlil.cc:2896:Demux$7982 [1], \$auto$rtlil.cc:2896:Demux$7982 [1] }),
    .Y(mem_n)
  );
  assign data_o = read_pointer_q ? mem_q[3:2] : mem_q[1:0];
  assign full_o = status_cnt_q == 2'h2;
  assign empty_o = ! status_cnt_q;
  assign \$auto$builder.cc:338:Biop$7970  = push_i && \$auto$builder.cc:364:Unop$7968 ;
  assign write_pointer_n = write_pointer_q + 1'h1;
  assign \$auto$builder.cc:338:Biop$8003  = pop_i && \$auto$builder.cc:364:Unop$8001 ;
  assign read_pointer_n = read_pointer_q + 1'h1;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:2874:Mux$18141 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$8018  = push_i && pop_i;
  assign \$auto$builder.cc:338:Biop$8022  = \$auto$builder.cc:338:Biop$8018  && \$auto$builder.cc:364:Unop$7968 ;
  assign \$auto$builder.cc:338:Biop$8026  = \$auto$builder.cc:338:Biop$8022  && \$auto$builder.cc:364:Unop$8001 ;
  assign \$auto$builder.cc:364:Unop$7968  = ~ full_o;
  assign \$auto$builder.cc:364:Unop$8001  = ~ empty_o;
  assign \$auto$rtlil.cc:2896:Demux$7982 [1] = write_pointer_q == 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$7982 [3] = write_pointer_q == 1'h1;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) write_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17799 ) write_pointer_q <= \$auto$slang_frontend.cc:694:finish$\write_pointer_q$8047 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17806 ) status_cnt_q <= \$auto$slang_frontend.cc:694:finish$\status_cnt_q$8048 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) read_pointer_q <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17809 ) read_pointer_q <= \$auto$slang_frontend.cc:694:finish$\read_pointer_q$8046 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[3:2] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$7970 ) mem_q[3:2] <= mem_n[3:2];
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) mem_q[1:0] <= 2'h0;
    else if (\$auto$builder.cc:338:Biop$7970 ) mem_q[1:0] <= mem_n[1:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17799  = | { \$auto$builder.cc:338:Biop$7970 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17802  = | { \$auto$builder.cc:338:Biop$8026 , \$auto$builder.cc:338:Biop$8003 , \$auto$builder.cc:338:Biop$7970 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17804  = { \$auto$builder.cc:338:Biop$8026 , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17809  = | { \$auto$builder.cc:338:Biop$8003 , flush_i };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17806  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17802 , \$auto$opt_dff.cc:194:make_patterns_logic$17804  };
  assign \$auto$rtlil.cc:2874:Mux$18141 [1] = ~ \$auto$builder.cc:338:Biop$8003 ;
  assign \$auto$slang_frontend.cc:694:finish$\status_cnt_q$8048  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$slang_frontend.cc:694:finish$\write_pointer_q$8047  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : write_pointer_n;
  assign \$auto$slang_frontend.cc:694:finish$\read_pointer_q$8046  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 1'h0 : read_pointer_n;
  assign \$auto$rtlil.cc:2874:Mux$18141 [0] = 1'h1;
  assign { \$auto$rtlil.cc:2896:Demux$7982 [2], \$auto$rtlil.cc:2896:Demux$7982 [0] } = { \$auto$rtlil.cc:2896:Demux$7982 [3], \$auto$rtlil.cc:2896:Demux$7982 [1] };
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "../rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$4057 ;
  wire \$auto$builder.cc:338:Biop$4086 ;
  wire \$auto$builder.cc:338:Biop$4101 ;
  wire \$auto$builder.cc:338:Biop$4105 ;
  wire \$auto$builder.cc:338:Biop$4109 ;
  wire \$auto$builder.cc:364:Unop$4055 ;
  wire \$auto$builder.cc:364:Unop$4084 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17817 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17819 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17821 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18146 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$4131 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == 1'h1;
  assign empty_o = ! status_cnt_q;
  assign \$auto$builder.cc:338:Biop$4057  = push_i && \$auto$builder.cc:364:Unop$4055 ;
  assign \$auto$builder.cc:338:Biop$4086  = pop_i && \$auto$builder.cc:364:Unop$4084 ;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:2874:Mux$18146 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$4101  = push_i && pop_i;
  assign \$auto$builder.cc:338:Biop$4105  = \$auto$builder.cc:338:Biop$4101  && \$auto$builder.cc:364:Unop$4055 ;
  assign \$auto$builder.cc:338:Biop$4109  = \$auto$builder.cc:338:Biop$4105  && \$auto$builder.cc:364:Unop$4084 ;
  assign \$auto$builder.cc:364:Unop$4055  = ~ full_o;
  assign \$auto$builder.cc:364:Unop$4084  = ~ empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17821 ) status_cnt_q <= \$auto$slang_frontend.cc:694:finish$\status_cnt_q$4131 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$auto$builder.cc:338:Biop$4057 ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17817  = | { \$auto$builder.cc:338:Biop$4109 , \$auto$builder.cc:338:Biop$4086 , \$auto$builder.cc:338:Biop$4057 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17819  = { \$auto$builder.cc:338:Biop$4109 , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17821  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17817 , \$auto$opt_dff.cc:194:make_patterns_logic$17819  };
  assign \$auto$rtlil.cc:2874:Mux$18146 [1] = ~ \$auto$builder.cc:338:Biop$4086 ;
  assign \$auto$slang_frontend.cc:694:finish$\status_cnt_q$4131  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:2874:Mux$18146 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "../rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$3772 ;
  wire \$auto$builder.cc:338:Biop$3801 ;
  wire \$auto$builder.cc:338:Biop$3816 ;
  wire \$auto$builder.cc:338:Biop$3820 ;
  wire \$auto$builder.cc:338:Biop$3824 ;
  wire \$auto$builder.cc:364:Unop$3770 ;
  wire \$auto$builder.cc:364:Unop$3799 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17831 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17833 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17835 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18151 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$3846 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == 1'h1;
  assign empty_o = ! status_cnt_q;
  assign \$auto$builder.cc:338:Biop$3772  = push_i && \$auto$builder.cc:364:Unop$3770 ;
  assign \$auto$builder.cc:338:Biop$3801  = pop_i && \$auto$builder.cc:364:Unop$3799 ;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:2874:Mux$18151 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$3816  = push_i && pop_i;
  assign \$auto$builder.cc:338:Biop$3820  = \$auto$builder.cc:338:Biop$3816  && \$auto$builder.cc:364:Unop$3770 ;
  assign \$auto$builder.cc:338:Biop$3824  = \$auto$builder.cc:338:Biop$3820  && \$auto$builder.cc:364:Unop$3799 ;
  assign \$auto$builder.cc:364:Unop$3770  = ~ full_o;
  assign \$auto$builder.cc:364:Unop$3799  = ~ empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17835 ) status_cnt_q <= \$auto$slang_frontend.cc:694:finish$\status_cnt_q$3846 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$auto$builder.cc:338:Biop$3772 ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17831  = | { \$auto$builder.cc:338:Biop$3824 , \$auto$builder.cc:338:Biop$3801 , \$auto$builder.cc:338:Biop$3772 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17833  = { \$auto$builder.cc:338:Biop$3824 , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17835  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17831 , \$auto$opt_dff.cc:194:make_patterns_logic$17833  };
  assign \$auto$rtlil.cc:2874:Mux$18151 [1] = ~ \$auto$builder.cc:338:Biop$3801 ;
  assign \$auto$slang_frontend.cc:694:finish$\status_cnt_q$3846  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:2874:Mux$18151 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "../rtl/common_cells/fifo_v3.sv:15.8" *)
module \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo (clk_i, rst_ni, testmode_i, flush_i, full_o, empty_o, data_i, push_i, data_o, pop_i, usage_o);
  wire \$auto$builder.cc:338:Biop$5961 ;
  wire \$auto$builder.cc:338:Biop$5990 ;
  wire \$auto$builder.cc:338:Biop$6005 ;
  wire \$auto$builder.cc:338:Biop$6009 ;
  wire \$auto$builder.cc:338:Biop$6013 ;
  wire \$auto$builder.cc:364:Unop$5959 ;
  wire \$auto$builder.cc:364:Unop$5988 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17845 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17847 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17849 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18156 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:122.13-130.16" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\status_cnt_q$6035 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:23.19" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:32.19" *)
  input [2:0] data_i;
  wire [2:0] data_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:35.19" *)
  output [2:0] data_o;
  reg [2:0] data_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:29.19" *)
  output empty_o;
  wire empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:25.19" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:28.19" *)
  output full_o;
  wire full_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:36.19" *)
  input pop_i;
  wire pop_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:33.19" *)
  input push_i;
  wire push_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:24.19" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.26" *)
  wire [1:0] status_cnt_n;
  (* src = "../rtl/common_cells/fifo_v3.sv:47.40" *)
  reg [1:0] status_cnt_q;
  (* src = "../rtl/common_cells/fifo_v3.sv:26.19" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/common_cells/fifo_v3.sv:30.36" *)
  output usage_o;
  wire usage_o;
  assign full_o = status_cnt_q == 1'h1;
  assign empty_o = ! status_cnt_q;
  assign \$auto$builder.cc:338:Biop$5961  = push_i && \$auto$builder.cc:364:Unop$5959 ;
  assign \$auto$builder.cc:338:Biop$5990  = pop_i && \$auto$builder.cc:364:Unop$5988 ;
  assign status_cnt_n = status_cnt_q - { \$auto$rtlil.cc:2874:Mux$18156 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$6005  = push_i && pop_i;
  assign \$auto$builder.cc:338:Biop$6009  = \$auto$builder.cc:338:Biop$6005  && \$auto$builder.cc:364:Unop$5959 ;
  assign \$auto$builder.cc:338:Biop$6013  = \$auto$builder.cc:338:Biop$6009  && \$auto$builder.cc:364:Unop$5988 ;
  assign \$auto$builder.cc:364:Unop$5959  = ~ full_o;
  assign \$auto$builder.cc:364:Unop$5988  = ~ empty_o;
  (* src = "../rtl/common_cells/fifo_v3.sv:116.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) status_cnt_q <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17849 ) status_cnt_q <= \$auto$slang_frontend.cc:694:finish$\status_cnt_q$6035 ;
  (* src = "../rtl/common_cells/fifo_v3.sv:134.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_o <= 3'h0;
    else if (\$auto$builder.cc:338:Biop$5961 ) data_o <= data_i;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17845  = | { \$auto$builder.cc:338:Biop$6013 , \$auto$builder.cc:338:Biop$5990 , \$auto$builder.cc:338:Biop$5961 , flush_i };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17847  = { \$auto$builder.cc:338:Biop$6013 , flush_i } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17849  = & { \$auto$opt_dff.cc:194:make_patterns_logic$17847 , \$auto$opt_dff.cc:194:make_patterns_logic$17845  };
  assign \$auto$rtlil.cc:2874:Mux$18156 [1] = ~ \$auto$builder.cc:338:Biop$5990 ;
  assign \$auto$slang_frontend.cc:694:finish$\status_cnt_q$6035  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/fifo_v3.sv:122.26-126.17|../rtl/common_cells/fifo_v3.sv:122.13-130.16" *) 2'h0 : status_cnt_n;
  assign \$auto$rtlil.cc:2874:Mux$18156 [0] = 1'h1;
  assign usage_o = status_cnt_q[0];
endmodule

(* src = "../rtl/gpio/gpio.sv:12.8" *)
module \gpio$croc_chip.i_croc_soc.i_croc.i_gpio (clk_i, rst_ni, gpio_i, gpio_o, gpio_out_en_o, gpio_in_sync_o, obi_req_i, obi_rsp_o, interrupt_o);
  wire \$auto$builder.cc:338:Biop$1312 ;
  wire \$auto$builder.cc:338:Biop$1319 ;
  wire \$auto$builder.cc:338:Biop$1351 ;
  wire \$auto$builder.cc:338:Biop$1358 ;
  wire \$auto$builder.cc:338:Biop$1390 ;
  wire \$auto$builder.cc:338:Biop$1397 ;
  wire \$auto$builder.cc:338:Biop$1429 ;
  wire \$auto$builder.cc:338:Biop$1436 ;
  wire \$auto$builder.cc:338:Biop$1468 ;
  wire \$auto$builder.cc:338:Biop$1475 ;
  wire \$auto$builder.cc:338:Biop$1507 ;
  wire \$auto$builder.cc:338:Biop$1514 ;
  wire \$auto$builder.cc:338:Biop$1546 ;
  wire \$auto$builder.cc:338:Biop$1553 ;
  wire \$auto$builder.cc:338:Biop$1585 ;
  wire \$auto$builder.cc:338:Biop$1592 ;
  wire \$auto$builder.cc:338:Biop$1624 ;
  wire \$auto$builder.cc:338:Biop$1631 ;
  wire \$auto$builder.cc:338:Biop$1663 ;
  wire \$auto$builder.cc:338:Biop$1670 ;
  wire \$auto$builder.cc:338:Biop$1702 ;
  wire \$auto$builder.cc:338:Biop$1709 ;
  wire \$auto$builder.cc:338:Biop$1741 ;
  wire \$auto$builder.cc:338:Biop$1748 ;
  wire \$auto$builder.cc:338:Biop$1780 ;
  wire \$auto$builder.cc:338:Biop$1787 ;
  wire \$auto$builder.cc:338:Biop$1819 ;
  wire \$auto$builder.cc:338:Biop$1826 ;
  wire \$auto$builder.cc:338:Biop$1858 ;
  wire \$auto$builder.cc:338:Biop$1865 ;
  wire \$auto$builder.cc:338:Biop$1897 ;
  wire \$auto$builder.cc:338:Biop$1904 ;
  wire \$auto$builder.cc:338:Biop$1936 ;
  wire \$auto$builder.cc:338:Biop$1943 ;
  wire \$auto$builder.cc:338:Biop$1975 ;
  wire \$auto$builder.cc:338:Biop$1982 ;
  wire \$auto$builder.cc:338:Biop$2014 ;
  wire \$auto$builder.cc:338:Biop$2021 ;
  wire \$auto$builder.cc:338:Biop$2053 ;
  wire \$auto$builder.cc:338:Biop$2060 ;
  wire \$auto$builder.cc:338:Biop$2092 ;
  wire \$auto$builder.cc:338:Biop$2099 ;
  wire \$auto$builder.cc:338:Biop$2131 ;
  wire \$auto$builder.cc:338:Biop$2138 ;
  wire \$auto$builder.cc:338:Biop$2170 ;
  wire \$auto$builder.cc:338:Biop$2177 ;
  wire \$auto$builder.cc:338:Biop$2209 ;
  wire \$auto$builder.cc:338:Biop$2216 ;
  wire \$auto$builder.cc:338:Biop$2248 ;
  wire \$auto$builder.cc:338:Biop$2255 ;
  wire \$auto$builder.cc:338:Biop$2287 ;
  wire \$auto$builder.cc:338:Biop$2294 ;
  wire \$auto$builder.cc:338:Biop$2326 ;
  wire \$auto$builder.cc:338:Biop$2333 ;
  wire \$auto$builder.cc:338:Biop$2365 ;
  wire \$auto$builder.cc:338:Biop$2372 ;
  wire \$auto$builder.cc:338:Biop$2404 ;
  wire \$auto$builder.cc:338:Biop$2411 ;
  wire \$auto$builder.cc:338:Biop$2443 ;
  wire \$auto$builder.cc:338:Biop$2450 ;
  wire \$auto$builder.cc:338:Biop$2482 ;
  wire \$auto$builder.cc:338:Biop$2489 ;
  wire \$auto$builder.cc:338:Biop$2521 ;
  wire \$auto$builder.cc:338:Biop$2528 ;
  wire \$auto$builder.cc:338:Biop$2539 ;
  wire \$auto$builder.cc:338:Biop$2542 ;
  wire \$auto$builder.cc:338:Biop$2545 ;
  wire \$auto$builder.cc:338:Biop$2548 ;
  wire \$auto$builder.cc:338:Biop$2551 ;
  wire \$auto$builder.cc:338:Biop$2554 ;
  wire \$auto$builder.cc:338:Biop$2557 ;
  wire \$auto$builder.cc:338:Biop$2560 ;
  wire \$auto$builder.cc:338:Biop$2563 ;
  wire \$auto$builder.cc:338:Biop$2566 ;
  wire \$auto$builder.cc:338:Biop$2569 ;
  wire \$auto$builder.cc:338:Biop$2572 ;
  wire \$auto$builder.cc:338:Biop$2575 ;
  wire \$auto$builder.cc:338:Biop$2578 ;
  wire \$auto$builder.cc:338:Biop$2581 ;
  wire \$auto$builder.cc:338:Biop$2584 ;
  wire \$auto$builder.cc:338:Biop$2587 ;
  wire \$auto$builder.cc:338:Biop$2590 ;
  wire \$auto$builder.cc:338:Biop$2593 ;
  wire \$auto$builder.cc:338:Biop$2596 ;
  wire \$auto$builder.cc:338:Biop$2599 ;
  wire \$auto$builder.cc:338:Biop$2602 ;
  wire \$auto$builder.cc:338:Biop$2605 ;
  wire \$auto$builder.cc:338:Biop$2608 ;
  wire \$auto$builder.cc:338:Biop$2611 ;
  wire \$auto$builder.cc:338:Biop$2614 ;
  wire \$auto$builder.cc:338:Biop$2617 ;
  wire \$auto$builder.cc:338:Biop$2620 ;
  wire \$auto$builder.cc:338:Biop$2623 ;
  wire \$auto$builder.cc:338:Biop$2626 ;
  wire \$auto$builder.cc:364:Unop$1289 ;
  wire \$auto$builder.cc:364:Unop$1293 ;
  wire \$auto$builder.cc:364:Unop$1301 ;
  wire \$auto$builder.cc:364:Unop$1316 ;
  wire \$auto$builder.cc:364:Unop$1328 ;
  wire \$auto$builder.cc:364:Unop$1332 ;
  wire \$auto$builder.cc:364:Unop$1340 ;
  wire \$auto$builder.cc:364:Unop$1355 ;
  wire \$auto$builder.cc:364:Unop$1367 ;
  wire \$auto$builder.cc:364:Unop$1371 ;
  wire \$auto$builder.cc:364:Unop$1379 ;
  wire \$auto$builder.cc:364:Unop$1394 ;
  wire \$auto$builder.cc:364:Unop$1406 ;
  wire \$auto$builder.cc:364:Unop$1410 ;
  wire \$auto$builder.cc:364:Unop$1418 ;
  wire \$auto$builder.cc:364:Unop$1433 ;
  wire \$auto$builder.cc:364:Unop$1445 ;
  wire \$auto$builder.cc:364:Unop$1449 ;
  wire \$auto$builder.cc:364:Unop$1457 ;
  wire \$auto$builder.cc:364:Unop$1472 ;
  wire \$auto$builder.cc:364:Unop$1484 ;
  wire \$auto$builder.cc:364:Unop$1488 ;
  wire \$auto$builder.cc:364:Unop$1496 ;
  wire \$auto$builder.cc:364:Unop$1511 ;
  wire \$auto$builder.cc:364:Unop$1523 ;
  wire \$auto$builder.cc:364:Unop$1527 ;
  wire \$auto$builder.cc:364:Unop$1535 ;
  wire \$auto$builder.cc:364:Unop$1550 ;
  wire \$auto$builder.cc:364:Unop$1562 ;
  wire \$auto$builder.cc:364:Unop$1566 ;
  wire \$auto$builder.cc:364:Unop$1574 ;
  wire \$auto$builder.cc:364:Unop$1589 ;
  wire \$auto$builder.cc:364:Unop$1601 ;
  wire \$auto$builder.cc:364:Unop$1605 ;
  wire \$auto$builder.cc:364:Unop$1613 ;
  wire \$auto$builder.cc:364:Unop$1628 ;
  wire \$auto$builder.cc:364:Unop$1640 ;
  wire \$auto$builder.cc:364:Unop$1644 ;
  wire \$auto$builder.cc:364:Unop$1652 ;
  wire \$auto$builder.cc:364:Unop$1667 ;
  wire \$auto$builder.cc:364:Unop$1679 ;
  wire \$auto$builder.cc:364:Unop$1683 ;
  wire \$auto$builder.cc:364:Unop$1691 ;
  wire \$auto$builder.cc:364:Unop$1706 ;
  wire \$auto$builder.cc:364:Unop$1718 ;
  wire \$auto$builder.cc:364:Unop$1722 ;
  wire \$auto$builder.cc:364:Unop$1730 ;
  wire \$auto$builder.cc:364:Unop$1745 ;
  wire \$auto$builder.cc:364:Unop$1757 ;
  wire \$auto$builder.cc:364:Unop$1761 ;
  wire \$auto$builder.cc:364:Unop$1769 ;
  wire \$auto$builder.cc:364:Unop$1784 ;
  wire \$auto$builder.cc:364:Unop$1796 ;
  wire \$auto$builder.cc:364:Unop$1800 ;
  wire \$auto$builder.cc:364:Unop$1808 ;
  wire \$auto$builder.cc:364:Unop$1823 ;
  wire \$auto$builder.cc:364:Unop$1835 ;
  wire \$auto$builder.cc:364:Unop$1839 ;
  wire \$auto$builder.cc:364:Unop$1847 ;
  wire \$auto$builder.cc:364:Unop$1862 ;
  wire \$auto$builder.cc:364:Unop$1874 ;
  wire \$auto$builder.cc:364:Unop$1878 ;
  wire \$auto$builder.cc:364:Unop$1886 ;
  wire \$auto$builder.cc:364:Unop$1901 ;
  wire \$auto$builder.cc:364:Unop$1913 ;
  wire \$auto$builder.cc:364:Unop$1917 ;
  wire \$auto$builder.cc:364:Unop$1925 ;
  wire \$auto$builder.cc:364:Unop$1940 ;
  wire \$auto$builder.cc:364:Unop$1952 ;
  wire \$auto$builder.cc:364:Unop$1956 ;
  wire \$auto$builder.cc:364:Unop$1964 ;
  wire \$auto$builder.cc:364:Unop$1979 ;
  wire \$auto$builder.cc:364:Unop$1991 ;
  wire \$auto$builder.cc:364:Unop$1995 ;
  wire \$auto$builder.cc:364:Unop$2003 ;
  wire \$auto$builder.cc:364:Unop$2018 ;
  wire \$auto$builder.cc:364:Unop$2030 ;
  wire \$auto$builder.cc:364:Unop$2034 ;
  wire \$auto$builder.cc:364:Unop$2042 ;
  wire \$auto$builder.cc:364:Unop$2057 ;
  wire \$auto$builder.cc:364:Unop$2069 ;
  wire \$auto$builder.cc:364:Unop$2073 ;
  wire \$auto$builder.cc:364:Unop$2081 ;
  wire \$auto$builder.cc:364:Unop$2096 ;
  wire \$auto$builder.cc:364:Unop$2108 ;
  wire \$auto$builder.cc:364:Unop$2112 ;
  wire \$auto$builder.cc:364:Unop$2120 ;
  wire \$auto$builder.cc:364:Unop$2135 ;
  wire \$auto$builder.cc:364:Unop$2147 ;
  wire \$auto$builder.cc:364:Unop$2151 ;
  wire \$auto$builder.cc:364:Unop$2159 ;
  wire \$auto$builder.cc:364:Unop$2174 ;
  wire \$auto$builder.cc:364:Unop$2186 ;
  wire \$auto$builder.cc:364:Unop$2190 ;
  wire \$auto$builder.cc:364:Unop$2198 ;
  wire \$auto$builder.cc:364:Unop$2213 ;
  wire \$auto$builder.cc:364:Unop$2225 ;
  wire \$auto$builder.cc:364:Unop$2229 ;
  wire \$auto$builder.cc:364:Unop$2237 ;
  wire \$auto$builder.cc:364:Unop$2252 ;
  wire \$auto$builder.cc:364:Unop$2264 ;
  wire \$auto$builder.cc:364:Unop$2268 ;
  wire \$auto$builder.cc:364:Unop$2276 ;
  wire \$auto$builder.cc:364:Unop$2291 ;
  wire \$auto$builder.cc:364:Unop$2303 ;
  wire \$auto$builder.cc:364:Unop$2307 ;
  wire \$auto$builder.cc:364:Unop$2315 ;
  wire \$auto$builder.cc:364:Unop$2330 ;
  wire \$auto$builder.cc:364:Unop$2342 ;
  wire \$auto$builder.cc:364:Unop$2346 ;
  wire \$auto$builder.cc:364:Unop$2354 ;
  wire \$auto$builder.cc:364:Unop$2369 ;
  wire \$auto$builder.cc:364:Unop$2381 ;
  wire \$auto$builder.cc:364:Unop$2385 ;
  wire \$auto$builder.cc:364:Unop$2393 ;
  wire \$auto$builder.cc:364:Unop$2408 ;
  wire \$auto$builder.cc:364:Unop$2420 ;
  wire \$auto$builder.cc:364:Unop$2424 ;
  wire \$auto$builder.cc:364:Unop$2432 ;
  wire \$auto$builder.cc:364:Unop$2447 ;
  wire \$auto$builder.cc:364:Unop$2459 ;
  wire \$auto$builder.cc:364:Unop$2463 ;
  wire \$auto$builder.cc:364:Unop$2471 ;
  wire \$auto$builder.cc:364:Unop$2486 ;
  wire \$auto$builder.cc:364:Unop$2498 ;
  wire \$auto$builder.cc:364:Unop$2502 ;
  wire \$auto$builder.cc:364:Unop$2510 ;
  wire \$auto$builder.cc:364:Unop$2525 ;
  (* src = "../rtl/gpio/gpio.sv:25.34" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[0].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[0].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[0].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[0].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[0].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[0].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[10].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[10].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[10].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[10].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[10].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[10].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[11].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[11].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[11].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[11].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[11].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[11].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[12].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[12].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[12].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[12].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[12].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[12].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[13].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[13].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[13].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[13].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[13].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[13].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[14].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[14].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[14].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[14].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[14].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[14].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[15].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[15].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[15].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[15].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[15].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[15].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[16].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[16].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[16].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[16].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[16].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[16].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[17].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[17].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[17].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[17].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[17].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[17].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[18].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[18].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[18].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[18].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[18].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[18].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[19].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[19].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[19].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[19].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[19].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[19].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[1].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[1].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[1].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[1].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[1].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[1].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[20].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[20].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[20].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[20].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[20].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[20].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[21].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[21].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[21].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[21].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[21].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[21].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[22].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[22].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[22].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[22].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[22].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[22].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[23].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[23].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[23].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[23].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[23].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[23].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[24].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[24].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[24].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[24].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[24].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[24].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[25].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[25].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[25].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[25].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[25].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[25].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[26].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[26].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[26].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[26].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[26].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[26].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[27].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[27].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[27].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[27].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[27].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[27].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[28].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[28].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[28].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[28].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[28].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[28].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[29].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[29].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[29].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[29].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[29].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[29].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[2].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[2].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[2].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[2].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[2].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[2].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[30].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[30].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[30].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[30].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[30].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[30].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[31].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[31].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[31].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[31].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[31].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[31].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[3].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[3].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[3].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[3].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[3].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[3].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[4].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[4].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[4].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[4].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[4].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[4].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[5].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[5].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[5].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[5].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[5].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[5].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[6].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[6].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[6].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[6].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[6].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[6].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[7].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[7].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[7].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[7].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[7].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[7].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[8].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[8].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[8].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[8].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[8].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[8].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:95.24" *)
  wire \gen_gpios[9].f_edge ;
  (* src = "../rtl/gpio/gpio.sv:119.15" *)
  wire \gen_gpios[9].is_input ;
  (* src = "../rtl/gpio/gpio.sv:120.15" *)
  wire \gen_gpios[9].is_output ;
  (* src = "../rtl/gpio/gpio.sv:96.24" *)
  wire \gen_gpios[9].r_edge ;
  (* src = "../rtl/gpio/gpio.sv:97.24" *)
  wire \gen_gpios[9].serial_d ;
  (* src = "../rtl/gpio/gpio.sv:97.34" *)
  reg \gen_gpios[9].serial_q ;
  (* src = "../rtl/gpio/gpio.sv:64.25" *)
  wire [31:0] gpio_edge;
  (* src = "../rtl/gpio/gpio.sv:30.34" *)
  input [31:0] gpio_i;
  wire [31:0] gpio_i;
  (* src = "../rtl/gpio/gpio.sv:39.34" *)
  output [31:0] gpio_in_sync_o;
  wire [31:0] gpio_in_sync_o;
  (* src = "../rtl/gpio/gpio.sv:65.25" *)
  wire [31:0] gpio_intrpt;
  (* src = "../rtl/gpio/gpio.sv:32.34" *)
  output [31:0] gpio_o;
  wire [31:0] gpio_o;
  (* src = "../rtl/gpio/gpio.sv:36.34" *)
  output [31:0] gpio_out_en_o;
  wire [31:0] gpio_out_en_o;
  (* src = "../rtl/gpio/gpio.sv:58.33" *)
  wire [159:0] hw2reg;
  (* src = "../rtl/gpio/gpio.sv:42.34" *)
  output interrupt_o;
  wire interrupt_o;
  (* src = "../rtl/gpio/gpio.sv:45.34" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "../rtl/gpio/gpio.sv:47.34" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "../rtl/gpio/gpio.sv:57.33" *)
  wire [223:0] reg2hw;
  (* src = "../rtl/gpio/gpio.sv:27.34" *)
  input rst_ni;
  wire rst_ni;
  assign \gen_gpios[0].f_edge  = \$auto$builder.cc:364:Unop$1289  & \gen_gpios[0].serial_q ;
  assign \gen_gpios[0].r_edge  = \gen_gpios[0].serial_d  & \$auto$builder.cc:364:Unop$1293 ;
  assign \gen_gpios[0].is_input  = reg2hw[5] & \$auto$builder.cc:364:Unop$1301 ;
  assign \gen_gpios[0].is_output  = reg2hw[5] & reg2hw[6];
  assign hw2reg[4] = \gen_gpios[0].serial_q  & \gen_gpios[0].is_input ;
  assign gpio_o[0] = reg2hw[4] & \gen_gpios[0].is_output ;
  assign \$auto$builder.cc:338:Biop$1312  = \gen_gpios[0].is_output  & reg2hw[3];
  assign \$auto$builder.cc:338:Biop$1319  = gpio_edge[0] & reg2hw[2];
  assign gpio_intrpt[0] = \$auto$builder.cc:338:Biop$1319  & \gen_gpios[0].is_input ;
  assign \gen_gpios[1].f_edge  = \$auto$builder.cc:364:Unop$1328  & \gen_gpios[1].serial_q ;
  assign \gen_gpios[1].r_edge  = \gen_gpios[1].serial_d  & \$auto$builder.cc:364:Unop$1332 ;
  assign \gen_gpios[1].is_input  = reg2hw[12] & \$auto$builder.cc:364:Unop$1340 ;
  assign \gen_gpios[1].is_output  = reg2hw[12] & reg2hw[13];
  assign hw2reg[9] = \gen_gpios[1].serial_q  & \gen_gpios[1].is_input ;
  assign gpio_o[1] = reg2hw[11] & \gen_gpios[1].is_output ;
  assign \$auto$builder.cc:338:Biop$1351  = \gen_gpios[1].is_output  & reg2hw[10];
  assign \$auto$builder.cc:338:Biop$1358  = gpio_edge[1] & reg2hw[9];
  assign gpio_intrpt[1] = \$auto$builder.cc:338:Biop$1358  & \gen_gpios[1].is_input ;
  assign \gen_gpios[2].f_edge  = \$auto$builder.cc:364:Unop$1367  & \gen_gpios[2].serial_q ;
  assign \gen_gpios[2].r_edge  = \gen_gpios[2].serial_d  & \$auto$builder.cc:364:Unop$1371 ;
  assign \gen_gpios[2].is_input  = reg2hw[19] & \$auto$builder.cc:364:Unop$1379 ;
  assign \gen_gpios[2].is_output  = reg2hw[19] & reg2hw[20];
  assign hw2reg[14] = \gen_gpios[2].serial_q  & \gen_gpios[2].is_input ;
  assign gpio_o[2] = reg2hw[18] & \gen_gpios[2].is_output ;
  assign \$auto$builder.cc:338:Biop$1390  = \gen_gpios[2].is_output  & reg2hw[17];
  assign \$auto$builder.cc:338:Biop$1397  = gpio_edge[2] & reg2hw[16];
  assign gpio_intrpt[2] = \$auto$builder.cc:338:Biop$1397  & \gen_gpios[2].is_input ;
  assign \gen_gpios[3].f_edge  = \$auto$builder.cc:364:Unop$1406  & \gen_gpios[3].serial_q ;
  assign \gen_gpios[3].r_edge  = \gen_gpios[3].serial_d  & \$auto$builder.cc:364:Unop$1410 ;
  assign \gen_gpios[3].is_input  = reg2hw[26] & \$auto$builder.cc:364:Unop$1418 ;
  assign \gen_gpios[3].is_output  = reg2hw[26] & reg2hw[27];
  assign hw2reg[19] = \gen_gpios[3].serial_q  & \gen_gpios[3].is_input ;
  assign gpio_o[3] = reg2hw[25] & \gen_gpios[3].is_output ;
  assign \$auto$builder.cc:338:Biop$1429  = \gen_gpios[3].is_output  & reg2hw[24];
  assign \$auto$builder.cc:338:Biop$1436  = gpio_edge[3] & reg2hw[23];
  assign gpio_intrpt[3] = \$auto$builder.cc:338:Biop$1436  & \gen_gpios[3].is_input ;
  assign \gen_gpios[4].f_edge  = \$auto$builder.cc:364:Unop$1445  & \gen_gpios[4].serial_q ;
  assign \gen_gpios[4].r_edge  = \gen_gpios[4].serial_d  & \$auto$builder.cc:364:Unop$1449 ;
  assign \gen_gpios[4].is_input  = reg2hw[33] & \$auto$builder.cc:364:Unop$1457 ;
  assign \gen_gpios[4].is_output  = reg2hw[33] & reg2hw[34];
  assign hw2reg[24] = \gen_gpios[4].serial_q  & \gen_gpios[4].is_input ;
  assign gpio_o[4] = reg2hw[32] & \gen_gpios[4].is_output ;
  assign \$auto$builder.cc:338:Biop$1468  = \gen_gpios[4].is_output  & reg2hw[31];
  assign \$auto$builder.cc:338:Biop$1475  = gpio_edge[4] & reg2hw[30];
  assign gpio_intrpt[4] = \$auto$builder.cc:338:Biop$1475  & \gen_gpios[4].is_input ;
  assign \gen_gpios[5].f_edge  = \$auto$builder.cc:364:Unop$1484  & \gen_gpios[5].serial_q ;
  assign \gen_gpios[5].r_edge  = \gen_gpios[5].serial_d  & \$auto$builder.cc:364:Unop$1488 ;
  assign \gen_gpios[5].is_input  = reg2hw[40] & \$auto$builder.cc:364:Unop$1496 ;
  assign \gen_gpios[5].is_output  = reg2hw[40] & reg2hw[41];
  assign hw2reg[29] = \gen_gpios[5].serial_q  & \gen_gpios[5].is_input ;
  assign gpio_o[5] = reg2hw[39] & \gen_gpios[5].is_output ;
  assign \$auto$builder.cc:338:Biop$1507  = \gen_gpios[5].is_output  & reg2hw[38];
  assign \$auto$builder.cc:338:Biop$1514  = gpio_edge[5] & reg2hw[37];
  assign gpio_intrpt[5] = \$auto$builder.cc:338:Biop$1514  & \gen_gpios[5].is_input ;
  assign \gen_gpios[6].f_edge  = \$auto$builder.cc:364:Unop$1523  & \gen_gpios[6].serial_q ;
  assign \gen_gpios[6].r_edge  = \gen_gpios[6].serial_d  & \$auto$builder.cc:364:Unop$1527 ;
  assign \gen_gpios[6].is_input  = reg2hw[47] & \$auto$builder.cc:364:Unop$1535 ;
  assign \gen_gpios[6].is_output  = reg2hw[47] & reg2hw[48];
  assign hw2reg[34] = \gen_gpios[6].serial_q  & \gen_gpios[6].is_input ;
  assign gpio_o[6] = reg2hw[46] & \gen_gpios[6].is_output ;
  assign \$auto$builder.cc:338:Biop$1546  = \gen_gpios[6].is_output  & reg2hw[45];
  assign \$auto$builder.cc:338:Biop$1553  = gpio_edge[6] & reg2hw[44];
  assign gpio_intrpt[6] = \$auto$builder.cc:338:Biop$1553  & \gen_gpios[6].is_input ;
  assign \gen_gpios[7].f_edge  = \$auto$builder.cc:364:Unop$1562  & \gen_gpios[7].serial_q ;
  assign \gen_gpios[7].r_edge  = \gen_gpios[7].serial_d  & \$auto$builder.cc:364:Unop$1566 ;
  assign \gen_gpios[7].is_input  = reg2hw[54] & \$auto$builder.cc:364:Unop$1574 ;
  assign \gen_gpios[7].is_output  = reg2hw[54] & reg2hw[55];
  assign hw2reg[39] = \gen_gpios[7].serial_q  & \gen_gpios[7].is_input ;
  assign gpio_o[7] = reg2hw[53] & \gen_gpios[7].is_output ;
  assign \$auto$builder.cc:338:Biop$1585  = \gen_gpios[7].is_output  & reg2hw[52];
  assign \$auto$builder.cc:338:Biop$1592  = gpio_edge[7] & reg2hw[51];
  assign gpio_intrpt[7] = \$auto$builder.cc:338:Biop$1592  & \gen_gpios[7].is_input ;
  assign \gen_gpios[8].f_edge  = \$auto$builder.cc:364:Unop$1601  & \gen_gpios[8].serial_q ;
  assign \gen_gpios[8].r_edge  = \gen_gpios[8].serial_d  & \$auto$builder.cc:364:Unop$1605 ;
  assign \gen_gpios[8].is_input  = reg2hw[61] & \$auto$builder.cc:364:Unop$1613 ;
  assign \gen_gpios[8].is_output  = reg2hw[61] & reg2hw[62];
  assign hw2reg[44] = \gen_gpios[8].serial_q  & \gen_gpios[8].is_input ;
  assign gpio_o[8] = reg2hw[60] & \gen_gpios[8].is_output ;
  assign \$auto$builder.cc:338:Biop$1624  = \gen_gpios[8].is_output  & reg2hw[59];
  assign \$auto$builder.cc:338:Biop$1631  = gpio_edge[8] & reg2hw[58];
  assign gpio_intrpt[8] = \$auto$builder.cc:338:Biop$1631  & \gen_gpios[8].is_input ;
  assign \gen_gpios[9].f_edge  = \$auto$builder.cc:364:Unop$1640  & \gen_gpios[9].serial_q ;
  assign \gen_gpios[9].r_edge  = \gen_gpios[9].serial_d  & \$auto$builder.cc:364:Unop$1644 ;
  assign \gen_gpios[9].is_input  = reg2hw[68] & \$auto$builder.cc:364:Unop$1652 ;
  assign \gen_gpios[9].is_output  = reg2hw[68] & reg2hw[69];
  assign hw2reg[49] = \gen_gpios[9].serial_q  & \gen_gpios[9].is_input ;
  assign gpio_o[9] = reg2hw[67] & \gen_gpios[9].is_output ;
  assign \$auto$builder.cc:338:Biop$1663  = \gen_gpios[9].is_output  & reg2hw[66];
  assign \$auto$builder.cc:338:Biop$1670  = gpio_edge[9] & reg2hw[65];
  assign gpio_intrpt[9] = \$auto$builder.cc:338:Biop$1670  & \gen_gpios[9].is_input ;
  assign \gen_gpios[10].f_edge  = \$auto$builder.cc:364:Unop$1679  & \gen_gpios[10].serial_q ;
  assign \gen_gpios[10].r_edge  = \gen_gpios[10].serial_d  & \$auto$builder.cc:364:Unop$1683 ;
  assign \gen_gpios[10].is_input  = reg2hw[75] & \$auto$builder.cc:364:Unop$1691 ;
  assign \gen_gpios[10].is_output  = reg2hw[75] & reg2hw[76];
  assign hw2reg[54] = \gen_gpios[10].serial_q  & \gen_gpios[10].is_input ;
  assign gpio_o[10] = reg2hw[74] & \gen_gpios[10].is_output ;
  assign \$auto$builder.cc:338:Biop$1702  = \gen_gpios[10].is_output  & reg2hw[73];
  assign \$auto$builder.cc:338:Biop$1709  = gpio_edge[10] & reg2hw[72];
  assign gpio_intrpt[10] = \$auto$builder.cc:338:Biop$1709  & \gen_gpios[10].is_input ;
  assign \gen_gpios[11].f_edge  = \$auto$builder.cc:364:Unop$1718  & \gen_gpios[11].serial_q ;
  assign \gen_gpios[11].r_edge  = \gen_gpios[11].serial_d  & \$auto$builder.cc:364:Unop$1722 ;
  assign \gen_gpios[11].is_input  = reg2hw[82] & \$auto$builder.cc:364:Unop$1730 ;
  assign \gen_gpios[11].is_output  = reg2hw[82] & reg2hw[83];
  assign hw2reg[59] = \gen_gpios[11].serial_q  & \gen_gpios[11].is_input ;
  assign gpio_o[11] = reg2hw[81] & \gen_gpios[11].is_output ;
  assign \$auto$builder.cc:338:Biop$1741  = \gen_gpios[11].is_output  & reg2hw[80];
  assign \$auto$builder.cc:338:Biop$1748  = gpio_edge[11] & reg2hw[79];
  assign gpio_intrpt[11] = \$auto$builder.cc:338:Biop$1748  & \gen_gpios[11].is_input ;
  assign \gen_gpios[12].f_edge  = \$auto$builder.cc:364:Unop$1757  & \gen_gpios[12].serial_q ;
  assign \gen_gpios[12].r_edge  = \gen_gpios[12].serial_d  & \$auto$builder.cc:364:Unop$1761 ;
  assign \gen_gpios[12].is_input  = reg2hw[89] & \$auto$builder.cc:364:Unop$1769 ;
  assign \gen_gpios[12].is_output  = reg2hw[89] & reg2hw[90];
  assign hw2reg[64] = \gen_gpios[12].serial_q  & \gen_gpios[12].is_input ;
  assign gpio_o[12] = reg2hw[88] & \gen_gpios[12].is_output ;
  assign \$auto$builder.cc:338:Biop$1780  = \gen_gpios[12].is_output  & reg2hw[87];
  assign \$auto$builder.cc:338:Biop$1787  = gpio_edge[12] & reg2hw[86];
  assign gpio_intrpt[12] = \$auto$builder.cc:338:Biop$1787  & \gen_gpios[12].is_input ;
  assign \gen_gpios[13].f_edge  = \$auto$builder.cc:364:Unop$1796  & \gen_gpios[13].serial_q ;
  assign \gen_gpios[13].r_edge  = \gen_gpios[13].serial_d  & \$auto$builder.cc:364:Unop$1800 ;
  assign \gen_gpios[13].is_input  = reg2hw[96] & \$auto$builder.cc:364:Unop$1808 ;
  assign \gen_gpios[13].is_output  = reg2hw[96] & reg2hw[97];
  assign hw2reg[69] = \gen_gpios[13].serial_q  & \gen_gpios[13].is_input ;
  assign gpio_o[13] = reg2hw[95] & \gen_gpios[13].is_output ;
  assign \$auto$builder.cc:338:Biop$1819  = \gen_gpios[13].is_output  & reg2hw[94];
  assign \$auto$builder.cc:338:Biop$1826  = gpio_edge[13] & reg2hw[93];
  assign gpio_intrpt[13] = \$auto$builder.cc:338:Biop$1826  & \gen_gpios[13].is_input ;
  assign \gen_gpios[14].f_edge  = \$auto$builder.cc:364:Unop$1835  & \gen_gpios[14].serial_q ;
  assign \gen_gpios[14].r_edge  = \gen_gpios[14].serial_d  & \$auto$builder.cc:364:Unop$1839 ;
  assign \gen_gpios[14].is_input  = reg2hw[103] & \$auto$builder.cc:364:Unop$1847 ;
  assign \gen_gpios[14].is_output  = reg2hw[103] & reg2hw[104];
  assign hw2reg[74] = \gen_gpios[14].serial_q  & \gen_gpios[14].is_input ;
  assign gpio_o[14] = reg2hw[102] & \gen_gpios[14].is_output ;
  assign \$auto$builder.cc:338:Biop$1858  = \gen_gpios[14].is_output  & reg2hw[101];
  assign \$auto$builder.cc:338:Biop$1865  = gpio_edge[14] & reg2hw[100];
  assign gpio_intrpt[14] = \$auto$builder.cc:338:Biop$1865  & \gen_gpios[14].is_input ;
  assign \gen_gpios[15].f_edge  = \$auto$builder.cc:364:Unop$1874  & \gen_gpios[15].serial_q ;
  assign \gen_gpios[15].r_edge  = \gen_gpios[15].serial_d  & \$auto$builder.cc:364:Unop$1878 ;
  assign \gen_gpios[15].is_input  = reg2hw[110] & \$auto$builder.cc:364:Unop$1886 ;
  assign \gen_gpios[15].is_output  = reg2hw[110] & reg2hw[111];
  assign hw2reg[79] = \gen_gpios[15].serial_q  & \gen_gpios[15].is_input ;
  assign gpio_o[15] = reg2hw[109] & \gen_gpios[15].is_output ;
  assign \$auto$builder.cc:338:Biop$1897  = \gen_gpios[15].is_output  & reg2hw[108];
  assign \$auto$builder.cc:338:Biop$1904  = gpio_edge[15] & reg2hw[107];
  assign gpio_intrpt[15] = \$auto$builder.cc:338:Biop$1904  & \gen_gpios[15].is_input ;
  assign \gen_gpios[16].f_edge  = \$auto$builder.cc:364:Unop$1913  & \gen_gpios[16].serial_q ;
  assign \gen_gpios[16].r_edge  = \gen_gpios[16].serial_d  & \$auto$builder.cc:364:Unop$1917 ;
  assign \gen_gpios[16].is_input  = reg2hw[117] & \$auto$builder.cc:364:Unop$1925 ;
  assign \gen_gpios[16].is_output  = reg2hw[117] & reg2hw[118];
  assign hw2reg[84] = \gen_gpios[16].serial_q  & \gen_gpios[16].is_input ;
  assign gpio_o[16] = reg2hw[116] & \gen_gpios[16].is_output ;
  assign \$auto$builder.cc:338:Biop$1936  = \gen_gpios[16].is_output  & reg2hw[115];
  assign \$auto$builder.cc:338:Biop$1943  = gpio_edge[16] & reg2hw[114];
  assign gpio_intrpt[16] = \$auto$builder.cc:338:Biop$1943  & \gen_gpios[16].is_input ;
  assign \gen_gpios[17].f_edge  = \$auto$builder.cc:364:Unop$1952  & \gen_gpios[17].serial_q ;
  assign \gen_gpios[17].r_edge  = \gen_gpios[17].serial_d  & \$auto$builder.cc:364:Unop$1956 ;
  assign \gen_gpios[17].is_input  = reg2hw[124] & \$auto$builder.cc:364:Unop$1964 ;
  assign \gen_gpios[17].is_output  = reg2hw[124] & reg2hw[125];
  assign hw2reg[89] = \gen_gpios[17].serial_q  & \gen_gpios[17].is_input ;
  assign gpio_o[17] = reg2hw[123] & \gen_gpios[17].is_output ;
  assign \$auto$builder.cc:338:Biop$1975  = \gen_gpios[17].is_output  & reg2hw[122];
  assign \$auto$builder.cc:338:Biop$1982  = gpio_edge[17] & reg2hw[121];
  assign gpio_intrpt[17] = \$auto$builder.cc:338:Biop$1982  & \gen_gpios[17].is_input ;
  assign \gen_gpios[18].f_edge  = \$auto$builder.cc:364:Unop$1991  & \gen_gpios[18].serial_q ;
  assign \gen_gpios[18].r_edge  = \gen_gpios[18].serial_d  & \$auto$builder.cc:364:Unop$1995 ;
  assign \gen_gpios[18].is_input  = reg2hw[131] & \$auto$builder.cc:364:Unop$2003 ;
  assign \gen_gpios[18].is_output  = reg2hw[131] & reg2hw[132];
  assign hw2reg[94] = \gen_gpios[18].serial_q  & \gen_gpios[18].is_input ;
  assign gpio_o[18] = reg2hw[130] & \gen_gpios[18].is_output ;
  assign \$auto$builder.cc:338:Biop$2014  = \gen_gpios[18].is_output  & reg2hw[129];
  assign \$auto$builder.cc:338:Biop$2021  = gpio_edge[18] & reg2hw[128];
  assign gpio_intrpt[18] = \$auto$builder.cc:338:Biop$2021  & \gen_gpios[18].is_input ;
  assign \gen_gpios[19].f_edge  = \$auto$builder.cc:364:Unop$2030  & \gen_gpios[19].serial_q ;
  assign \gen_gpios[19].r_edge  = \gen_gpios[19].serial_d  & \$auto$builder.cc:364:Unop$2034 ;
  assign \gen_gpios[19].is_input  = reg2hw[138] & \$auto$builder.cc:364:Unop$2042 ;
  assign \gen_gpios[19].is_output  = reg2hw[138] & reg2hw[139];
  assign hw2reg[99] = \gen_gpios[19].serial_q  & \gen_gpios[19].is_input ;
  assign gpio_o[19] = reg2hw[137] & \gen_gpios[19].is_output ;
  assign \$auto$builder.cc:338:Biop$2053  = \gen_gpios[19].is_output  & reg2hw[136];
  assign \$auto$builder.cc:338:Biop$2060  = gpio_edge[19] & reg2hw[135];
  assign gpio_intrpt[19] = \$auto$builder.cc:338:Biop$2060  & \gen_gpios[19].is_input ;
  assign \gen_gpios[20].f_edge  = \$auto$builder.cc:364:Unop$2069  & \gen_gpios[20].serial_q ;
  assign \gen_gpios[20].r_edge  = \gen_gpios[20].serial_d  & \$auto$builder.cc:364:Unop$2073 ;
  assign \gen_gpios[20].is_input  = reg2hw[145] & \$auto$builder.cc:364:Unop$2081 ;
  assign \gen_gpios[20].is_output  = reg2hw[145] & reg2hw[146];
  assign hw2reg[104] = \gen_gpios[20].serial_q  & \gen_gpios[20].is_input ;
  assign gpio_o[20] = reg2hw[144] & \gen_gpios[20].is_output ;
  assign \$auto$builder.cc:338:Biop$2092  = \gen_gpios[20].is_output  & reg2hw[143];
  assign \$auto$builder.cc:338:Biop$2099  = gpio_edge[20] & reg2hw[142];
  assign gpio_intrpt[20] = \$auto$builder.cc:338:Biop$2099  & \gen_gpios[20].is_input ;
  assign \gen_gpios[21].f_edge  = \$auto$builder.cc:364:Unop$2108  & \gen_gpios[21].serial_q ;
  assign \gen_gpios[21].r_edge  = \gen_gpios[21].serial_d  & \$auto$builder.cc:364:Unop$2112 ;
  assign \gen_gpios[21].is_input  = reg2hw[152] & \$auto$builder.cc:364:Unop$2120 ;
  assign \gen_gpios[21].is_output  = reg2hw[152] & reg2hw[153];
  assign hw2reg[109] = \gen_gpios[21].serial_q  & \gen_gpios[21].is_input ;
  assign gpio_o[21] = reg2hw[151] & \gen_gpios[21].is_output ;
  assign \$auto$builder.cc:338:Biop$2131  = \gen_gpios[21].is_output  & reg2hw[150];
  assign \$auto$builder.cc:338:Biop$2138  = gpio_edge[21] & reg2hw[149];
  assign gpio_intrpt[21] = \$auto$builder.cc:338:Biop$2138  & \gen_gpios[21].is_input ;
  assign \gen_gpios[22].f_edge  = \$auto$builder.cc:364:Unop$2147  & \gen_gpios[22].serial_q ;
  assign \gen_gpios[22].r_edge  = \gen_gpios[22].serial_d  & \$auto$builder.cc:364:Unop$2151 ;
  assign \gen_gpios[22].is_input  = reg2hw[159] & \$auto$builder.cc:364:Unop$2159 ;
  assign \gen_gpios[22].is_output  = reg2hw[159] & reg2hw[160];
  assign hw2reg[114] = \gen_gpios[22].serial_q  & \gen_gpios[22].is_input ;
  assign gpio_o[22] = reg2hw[158] & \gen_gpios[22].is_output ;
  assign \$auto$builder.cc:338:Biop$2170  = \gen_gpios[22].is_output  & reg2hw[157];
  assign \$auto$builder.cc:338:Biop$2177  = gpio_edge[22] & reg2hw[156];
  assign gpio_intrpt[22] = \$auto$builder.cc:338:Biop$2177  & \gen_gpios[22].is_input ;
  assign \gen_gpios[23].f_edge  = \$auto$builder.cc:364:Unop$2186  & \gen_gpios[23].serial_q ;
  assign \gen_gpios[23].r_edge  = \gen_gpios[23].serial_d  & \$auto$builder.cc:364:Unop$2190 ;
  assign \gen_gpios[23].is_input  = reg2hw[166] & \$auto$builder.cc:364:Unop$2198 ;
  assign \gen_gpios[23].is_output  = reg2hw[166] & reg2hw[167];
  assign hw2reg[119] = \gen_gpios[23].serial_q  & \gen_gpios[23].is_input ;
  assign gpio_o[23] = reg2hw[165] & \gen_gpios[23].is_output ;
  assign \$auto$builder.cc:338:Biop$2209  = \gen_gpios[23].is_output  & reg2hw[164];
  assign \$auto$builder.cc:338:Biop$2216  = gpio_edge[23] & reg2hw[163];
  assign gpio_intrpt[23] = \$auto$builder.cc:338:Biop$2216  & \gen_gpios[23].is_input ;
  assign \gen_gpios[24].f_edge  = \$auto$builder.cc:364:Unop$2225  & \gen_gpios[24].serial_q ;
  assign \gen_gpios[24].r_edge  = \gen_gpios[24].serial_d  & \$auto$builder.cc:364:Unop$2229 ;
  assign \gen_gpios[24].is_input  = reg2hw[173] & \$auto$builder.cc:364:Unop$2237 ;
  assign \gen_gpios[24].is_output  = reg2hw[173] & reg2hw[174];
  assign hw2reg[124] = \gen_gpios[24].serial_q  & \gen_gpios[24].is_input ;
  assign gpio_o[24] = reg2hw[172] & \gen_gpios[24].is_output ;
  assign \$auto$builder.cc:338:Biop$2248  = \gen_gpios[24].is_output  & reg2hw[171];
  assign \$auto$builder.cc:338:Biop$2255  = gpio_edge[24] & reg2hw[170];
  assign gpio_intrpt[24] = \$auto$builder.cc:338:Biop$2255  & \gen_gpios[24].is_input ;
  assign \gen_gpios[25].f_edge  = \$auto$builder.cc:364:Unop$2264  & \gen_gpios[25].serial_q ;
  assign \gen_gpios[25].r_edge  = \gen_gpios[25].serial_d  & \$auto$builder.cc:364:Unop$2268 ;
  assign \gen_gpios[25].is_input  = reg2hw[180] & \$auto$builder.cc:364:Unop$2276 ;
  assign \gen_gpios[25].is_output  = reg2hw[180] & reg2hw[181];
  assign hw2reg[129] = \gen_gpios[25].serial_q  & \gen_gpios[25].is_input ;
  assign gpio_o[25] = reg2hw[179] & \gen_gpios[25].is_output ;
  assign \$auto$builder.cc:338:Biop$2287  = \gen_gpios[25].is_output  & reg2hw[178];
  assign \$auto$builder.cc:338:Biop$2294  = gpio_edge[25] & reg2hw[177];
  assign gpio_intrpt[25] = \$auto$builder.cc:338:Biop$2294  & \gen_gpios[25].is_input ;
  assign \gen_gpios[26].f_edge  = \$auto$builder.cc:364:Unop$2303  & \gen_gpios[26].serial_q ;
  assign \gen_gpios[26].r_edge  = \gen_gpios[26].serial_d  & \$auto$builder.cc:364:Unop$2307 ;
  assign \gen_gpios[26].is_input  = reg2hw[187] & \$auto$builder.cc:364:Unop$2315 ;
  assign \gen_gpios[26].is_output  = reg2hw[187] & reg2hw[188];
  assign hw2reg[134] = \gen_gpios[26].serial_q  & \gen_gpios[26].is_input ;
  assign gpio_o[26] = reg2hw[186] & \gen_gpios[26].is_output ;
  assign \$auto$builder.cc:338:Biop$2326  = \gen_gpios[26].is_output  & reg2hw[185];
  assign \$auto$builder.cc:338:Biop$2333  = gpio_edge[26] & reg2hw[184];
  assign gpio_intrpt[26] = \$auto$builder.cc:338:Biop$2333  & \gen_gpios[26].is_input ;
  assign \gen_gpios[27].f_edge  = \$auto$builder.cc:364:Unop$2342  & \gen_gpios[27].serial_q ;
  assign \gen_gpios[27].r_edge  = \gen_gpios[27].serial_d  & \$auto$builder.cc:364:Unop$2346 ;
  assign \gen_gpios[27].is_input  = reg2hw[194] & \$auto$builder.cc:364:Unop$2354 ;
  assign \gen_gpios[27].is_output  = reg2hw[194] & reg2hw[195];
  assign hw2reg[139] = \gen_gpios[27].serial_q  & \gen_gpios[27].is_input ;
  assign gpio_o[27] = reg2hw[193] & \gen_gpios[27].is_output ;
  assign \$auto$builder.cc:338:Biop$2365  = \gen_gpios[27].is_output  & reg2hw[192];
  assign \$auto$builder.cc:338:Biop$2372  = gpio_edge[27] & reg2hw[191];
  assign gpio_intrpt[27] = \$auto$builder.cc:338:Biop$2372  & \gen_gpios[27].is_input ;
  assign \gen_gpios[28].f_edge  = \$auto$builder.cc:364:Unop$2381  & \gen_gpios[28].serial_q ;
  assign \gen_gpios[28].r_edge  = \gen_gpios[28].serial_d  & \$auto$builder.cc:364:Unop$2385 ;
  assign \gen_gpios[28].is_input  = reg2hw[201] & \$auto$builder.cc:364:Unop$2393 ;
  assign \gen_gpios[28].is_output  = reg2hw[201] & reg2hw[202];
  assign hw2reg[144] = \gen_gpios[28].serial_q  & \gen_gpios[28].is_input ;
  assign gpio_o[28] = reg2hw[200] & \gen_gpios[28].is_output ;
  assign \$auto$builder.cc:338:Biop$2404  = \gen_gpios[28].is_output  & reg2hw[199];
  assign \$auto$builder.cc:338:Biop$2411  = gpio_edge[28] & reg2hw[198];
  assign gpio_intrpt[28] = \$auto$builder.cc:338:Biop$2411  & \gen_gpios[28].is_input ;
  assign \gen_gpios[29].f_edge  = \$auto$builder.cc:364:Unop$2420  & \gen_gpios[29].serial_q ;
  assign \gen_gpios[29].r_edge  = \gen_gpios[29].serial_d  & \$auto$builder.cc:364:Unop$2424 ;
  assign \gen_gpios[29].is_input  = reg2hw[208] & \$auto$builder.cc:364:Unop$2432 ;
  assign \gen_gpios[29].is_output  = reg2hw[208] & reg2hw[209];
  assign hw2reg[149] = \gen_gpios[29].serial_q  & \gen_gpios[29].is_input ;
  assign gpio_o[29] = reg2hw[207] & \gen_gpios[29].is_output ;
  assign \$auto$builder.cc:338:Biop$2443  = \gen_gpios[29].is_output  & reg2hw[206];
  assign \$auto$builder.cc:338:Biop$2450  = gpio_edge[29] & reg2hw[205];
  assign gpio_intrpt[29] = \$auto$builder.cc:338:Biop$2450  & \gen_gpios[29].is_input ;
  assign \gen_gpios[30].f_edge  = \$auto$builder.cc:364:Unop$2459  & \gen_gpios[30].serial_q ;
  assign \gen_gpios[30].r_edge  = \gen_gpios[30].serial_d  & \$auto$builder.cc:364:Unop$2463 ;
  assign \gen_gpios[30].is_input  = reg2hw[215] & \$auto$builder.cc:364:Unop$2471 ;
  assign \gen_gpios[30].is_output  = reg2hw[215] & reg2hw[216];
  assign hw2reg[154] = \gen_gpios[30].serial_q  & \gen_gpios[30].is_input ;
  assign gpio_o[30] = reg2hw[214] & \gen_gpios[30].is_output ;
  assign \$auto$builder.cc:338:Biop$2482  = \gen_gpios[30].is_output  & reg2hw[213];
  assign \$auto$builder.cc:338:Biop$2489  = gpio_edge[30] & reg2hw[212];
  assign gpio_intrpt[30] = \$auto$builder.cc:338:Biop$2489  & \gen_gpios[30].is_input ;
  assign \gen_gpios[31].f_edge  = \$auto$builder.cc:364:Unop$2498  & \gen_gpios[31].serial_q ;
  assign \gen_gpios[31].r_edge  = \gen_gpios[31].serial_d  & \$auto$builder.cc:364:Unop$2502 ;
  assign \gen_gpios[31].is_input  = reg2hw[222] & \$auto$builder.cc:364:Unop$2510 ;
  assign \gen_gpios[31].is_output  = reg2hw[222] & reg2hw[223];
  assign hw2reg[159] = \gen_gpios[31].serial_q  & \gen_gpios[31].is_input ;
  assign gpio_o[31] = reg2hw[221] & \gen_gpios[31].is_output ;
  assign \$auto$builder.cc:338:Biop$2521  = \gen_gpios[31].is_output  & reg2hw[220];
  assign \$auto$builder.cc:338:Biop$2528  = gpio_edge[31] & reg2hw[219];
  assign gpio_intrpt[31] = \$auto$builder.cc:338:Biop$2528  & \gen_gpios[31].is_input ;
  assign \$auto$builder.cc:338:Biop$2539  = reg2hw[1] | reg2hw[8];
  assign \$auto$builder.cc:338:Biop$2542  = \$auto$builder.cc:338:Biop$2539  | reg2hw[15];
  assign \$auto$builder.cc:338:Biop$2545  = \$auto$builder.cc:338:Biop$2542  | reg2hw[22];
  assign \$auto$builder.cc:338:Biop$2548  = \$auto$builder.cc:338:Biop$2545  | reg2hw[29];
  assign \$auto$builder.cc:338:Biop$2551  = \$auto$builder.cc:338:Biop$2548  | reg2hw[36];
  assign \$auto$builder.cc:338:Biop$2554  = \$auto$builder.cc:338:Biop$2551  | reg2hw[43];
  assign \$auto$builder.cc:338:Biop$2557  = \$auto$builder.cc:338:Biop$2554  | reg2hw[50];
  assign \$auto$builder.cc:338:Biop$2560  = \$auto$builder.cc:338:Biop$2557  | reg2hw[57];
  assign \$auto$builder.cc:338:Biop$2563  = \$auto$builder.cc:338:Biop$2560  | reg2hw[64];
  assign \$auto$builder.cc:338:Biop$2566  = \$auto$builder.cc:338:Biop$2563  | reg2hw[71];
  assign \$auto$builder.cc:338:Biop$2569  = \$auto$builder.cc:338:Biop$2566  | reg2hw[78];
  assign \$auto$builder.cc:338:Biop$2572  = \$auto$builder.cc:338:Biop$2569  | reg2hw[85];
  assign \$auto$builder.cc:338:Biop$2575  = \$auto$builder.cc:338:Biop$2572  | reg2hw[92];
  assign \$auto$builder.cc:338:Biop$2578  = \$auto$builder.cc:338:Biop$2575  | reg2hw[99];
  assign \$auto$builder.cc:338:Biop$2581  = \$auto$builder.cc:338:Biop$2578  | reg2hw[106];
  assign \$auto$builder.cc:338:Biop$2584  = \$auto$builder.cc:338:Biop$2581  | reg2hw[113];
  assign \$auto$builder.cc:338:Biop$2587  = \$auto$builder.cc:338:Biop$2584  | reg2hw[120];
  assign \$auto$builder.cc:338:Biop$2590  = \$auto$builder.cc:338:Biop$2587  | reg2hw[127];
  assign \$auto$builder.cc:338:Biop$2593  = \$auto$builder.cc:338:Biop$2590  | reg2hw[134];
  assign \$auto$builder.cc:338:Biop$2596  = \$auto$builder.cc:338:Biop$2593  | reg2hw[141];
  assign \$auto$builder.cc:338:Biop$2599  = \$auto$builder.cc:338:Biop$2596  | reg2hw[148];
  assign \$auto$builder.cc:338:Biop$2602  = \$auto$builder.cc:338:Biop$2599  | reg2hw[155];
  assign \$auto$builder.cc:338:Biop$2605  = \$auto$builder.cc:338:Biop$2602  | reg2hw[162];
  assign \$auto$builder.cc:338:Biop$2608  = \$auto$builder.cc:338:Biop$2605  | reg2hw[169];
  assign \$auto$builder.cc:338:Biop$2611  = \$auto$builder.cc:338:Biop$2608  | reg2hw[176];
  assign \$auto$builder.cc:338:Biop$2614  = \$auto$builder.cc:338:Biop$2611  | reg2hw[183];
  assign \$auto$builder.cc:338:Biop$2617  = \$auto$builder.cc:338:Biop$2614  | reg2hw[190];
  assign \$auto$builder.cc:338:Biop$2620  = \$auto$builder.cc:338:Biop$2617  | reg2hw[197];
  assign \$auto$builder.cc:338:Biop$2623  = \$auto$builder.cc:338:Biop$2620  | reg2hw[204];
  assign \$auto$builder.cc:338:Biop$2626  = \$auto$builder.cc:338:Biop$2623  | reg2hw[211];
  assign interrupt_o = \$auto$builder.cc:338:Biop$2626  | reg2hw[218];
  assign \$auto$builder.cc:364:Unop$1289  = ~ \gen_gpios[0].serial_d ;
  assign \$auto$builder.cc:364:Unop$1293  = ~ \gen_gpios[0].serial_q ;
  assign \$auto$builder.cc:364:Unop$1301  = ~ reg2hw[6];
  assign \$auto$builder.cc:364:Unop$1316  = ~ reg2hw[4];
  assign \$auto$builder.cc:364:Unop$1328  = ~ \gen_gpios[1].serial_d ;
  assign \$auto$builder.cc:364:Unop$1332  = ~ \gen_gpios[1].serial_q ;
  assign \$auto$builder.cc:364:Unop$1340  = ~ reg2hw[13];
  assign \$auto$builder.cc:364:Unop$1355  = ~ reg2hw[11];
  assign \$auto$builder.cc:364:Unop$1367  = ~ \gen_gpios[2].serial_d ;
  assign \$auto$builder.cc:364:Unop$1371  = ~ \gen_gpios[2].serial_q ;
  assign \$auto$builder.cc:364:Unop$1379  = ~ reg2hw[20];
  assign \$auto$builder.cc:364:Unop$1394  = ~ reg2hw[18];
  assign \$auto$builder.cc:364:Unop$1406  = ~ \gen_gpios[3].serial_d ;
  assign \$auto$builder.cc:364:Unop$1410  = ~ \gen_gpios[3].serial_q ;
  assign \$auto$builder.cc:364:Unop$1418  = ~ reg2hw[27];
  assign \$auto$builder.cc:364:Unop$1433  = ~ reg2hw[25];
  assign \$auto$builder.cc:364:Unop$1445  = ~ \gen_gpios[4].serial_d ;
  assign \$auto$builder.cc:364:Unop$1449  = ~ \gen_gpios[4].serial_q ;
  assign \$auto$builder.cc:364:Unop$1457  = ~ reg2hw[34];
  assign \$auto$builder.cc:364:Unop$1472  = ~ reg2hw[32];
  assign \$auto$builder.cc:364:Unop$1484  = ~ \gen_gpios[5].serial_d ;
  assign \$auto$builder.cc:364:Unop$1488  = ~ \gen_gpios[5].serial_q ;
  assign \$auto$builder.cc:364:Unop$1496  = ~ reg2hw[41];
  assign \$auto$builder.cc:364:Unop$1511  = ~ reg2hw[39];
  assign \$auto$builder.cc:364:Unop$1523  = ~ \gen_gpios[6].serial_d ;
  assign \$auto$builder.cc:364:Unop$1527  = ~ \gen_gpios[6].serial_q ;
  assign \$auto$builder.cc:364:Unop$1535  = ~ reg2hw[48];
  assign \$auto$builder.cc:364:Unop$1550  = ~ reg2hw[46];
  assign \$auto$builder.cc:364:Unop$1562  = ~ \gen_gpios[7].serial_d ;
  assign \$auto$builder.cc:364:Unop$1566  = ~ \gen_gpios[7].serial_q ;
  assign \$auto$builder.cc:364:Unop$1574  = ~ reg2hw[55];
  assign \$auto$builder.cc:364:Unop$1589  = ~ reg2hw[53];
  assign \$auto$builder.cc:364:Unop$1601  = ~ \gen_gpios[8].serial_d ;
  assign \$auto$builder.cc:364:Unop$1605  = ~ \gen_gpios[8].serial_q ;
  assign \$auto$builder.cc:364:Unop$1613  = ~ reg2hw[62];
  assign \$auto$builder.cc:364:Unop$1628  = ~ reg2hw[60];
  assign \$auto$builder.cc:364:Unop$1640  = ~ \gen_gpios[9].serial_d ;
  assign \$auto$builder.cc:364:Unop$1644  = ~ \gen_gpios[9].serial_q ;
  assign \$auto$builder.cc:364:Unop$1652  = ~ reg2hw[69];
  assign \$auto$builder.cc:364:Unop$1667  = ~ reg2hw[67];
  assign \$auto$builder.cc:364:Unop$1679  = ~ \gen_gpios[10].serial_d ;
  assign \$auto$builder.cc:364:Unop$1683  = ~ \gen_gpios[10].serial_q ;
  assign \$auto$builder.cc:364:Unop$1691  = ~ reg2hw[76];
  assign \$auto$builder.cc:364:Unop$1706  = ~ reg2hw[74];
  assign \$auto$builder.cc:364:Unop$1718  = ~ \gen_gpios[11].serial_d ;
  assign \$auto$builder.cc:364:Unop$1722  = ~ \gen_gpios[11].serial_q ;
  assign \$auto$builder.cc:364:Unop$1730  = ~ reg2hw[83];
  assign \$auto$builder.cc:364:Unop$1745  = ~ reg2hw[81];
  assign \$auto$builder.cc:364:Unop$1757  = ~ \gen_gpios[12].serial_d ;
  assign \$auto$builder.cc:364:Unop$1761  = ~ \gen_gpios[12].serial_q ;
  assign \$auto$builder.cc:364:Unop$1769  = ~ reg2hw[90];
  assign \$auto$builder.cc:364:Unop$1784  = ~ reg2hw[88];
  assign \$auto$builder.cc:364:Unop$1796  = ~ \gen_gpios[13].serial_d ;
  assign \$auto$builder.cc:364:Unop$1800  = ~ \gen_gpios[13].serial_q ;
  assign \$auto$builder.cc:364:Unop$1808  = ~ reg2hw[97];
  assign \$auto$builder.cc:364:Unop$1823  = ~ reg2hw[95];
  assign \$auto$builder.cc:364:Unop$1835  = ~ \gen_gpios[14].serial_d ;
  assign \$auto$builder.cc:364:Unop$1839  = ~ \gen_gpios[14].serial_q ;
  assign \$auto$builder.cc:364:Unop$1847  = ~ reg2hw[104];
  assign \$auto$builder.cc:364:Unop$1862  = ~ reg2hw[102];
  assign \$auto$builder.cc:364:Unop$1874  = ~ \gen_gpios[15].serial_d ;
  assign \$auto$builder.cc:364:Unop$1878  = ~ \gen_gpios[15].serial_q ;
  assign \$auto$builder.cc:364:Unop$1886  = ~ reg2hw[111];
  assign \$auto$builder.cc:364:Unop$1901  = ~ reg2hw[109];
  assign \$auto$builder.cc:364:Unop$1913  = ~ \gen_gpios[16].serial_d ;
  assign \$auto$builder.cc:364:Unop$1917  = ~ \gen_gpios[16].serial_q ;
  assign \$auto$builder.cc:364:Unop$1925  = ~ reg2hw[118];
  assign \$auto$builder.cc:364:Unop$1940  = ~ reg2hw[116];
  assign \$auto$builder.cc:364:Unop$1952  = ~ \gen_gpios[17].serial_d ;
  assign \$auto$builder.cc:364:Unop$1956  = ~ \gen_gpios[17].serial_q ;
  assign \$auto$builder.cc:364:Unop$1964  = ~ reg2hw[125];
  assign \$auto$builder.cc:364:Unop$1979  = ~ reg2hw[123];
  assign \$auto$builder.cc:364:Unop$1991  = ~ \gen_gpios[18].serial_d ;
  assign \$auto$builder.cc:364:Unop$1995  = ~ \gen_gpios[18].serial_q ;
  assign \$auto$builder.cc:364:Unop$2003  = ~ reg2hw[132];
  assign \$auto$builder.cc:364:Unop$2018  = ~ reg2hw[130];
  assign \$auto$builder.cc:364:Unop$2030  = ~ \gen_gpios[19].serial_d ;
  assign \$auto$builder.cc:364:Unop$2034  = ~ \gen_gpios[19].serial_q ;
  assign \$auto$builder.cc:364:Unop$2042  = ~ reg2hw[139];
  assign \$auto$builder.cc:364:Unop$2057  = ~ reg2hw[137];
  assign \$auto$builder.cc:364:Unop$2069  = ~ \gen_gpios[20].serial_d ;
  assign \$auto$builder.cc:364:Unop$2073  = ~ \gen_gpios[20].serial_q ;
  assign \$auto$builder.cc:364:Unop$2081  = ~ reg2hw[146];
  assign \$auto$builder.cc:364:Unop$2096  = ~ reg2hw[144];
  assign \$auto$builder.cc:364:Unop$2108  = ~ \gen_gpios[21].serial_d ;
  assign \$auto$builder.cc:364:Unop$2112  = ~ \gen_gpios[21].serial_q ;
  assign \$auto$builder.cc:364:Unop$2120  = ~ reg2hw[153];
  assign \$auto$builder.cc:364:Unop$2135  = ~ reg2hw[151];
  assign \$auto$builder.cc:364:Unop$2147  = ~ \gen_gpios[22].serial_d ;
  assign \$auto$builder.cc:364:Unop$2151  = ~ \gen_gpios[22].serial_q ;
  assign \$auto$builder.cc:364:Unop$2159  = ~ reg2hw[160];
  assign \$auto$builder.cc:364:Unop$2174  = ~ reg2hw[158];
  assign \$auto$builder.cc:364:Unop$2186  = ~ \gen_gpios[23].serial_d ;
  assign \$auto$builder.cc:364:Unop$2190  = ~ \gen_gpios[23].serial_q ;
  assign \$auto$builder.cc:364:Unop$2198  = ~ reg2hw[167];
  assign \$auto$builder.cc:364:Unop$2213  = ~ reg2hw[165];
  assign \$auto$builder.cc:364:Unop$2225  = ~ \gen_gpios[24].serial_d ;
  assign \$auto$builder.cc:364:Unop$2229  = ~ \gen_gpios[24].serial_q ;
  assign \$auto$builder.cc:364:Unop$2237  = ~ reg2hw[174];
  assign \$auto$builder.cc:364:Unop$2252  = ~ reg2hw[172];
  assign \$auto$builder.cc:364:Unop$2264  = ~ \gen_gpios[25].serial_d ;
  assign \$auto$builder.cc:364:Unop$2268  = ~ \gen_gpios[25].serial_q ;
  assign \$auto$builder.cc:364:Unop$2276  = ~ reg2hw[181];
  assign \$auto$builder.cc:364:Unop$2291  = ~ reg2hw[179];
  assign \$auto$builder.cc:364:Unop$2303  = ~ \gen_gpios[26].serial_d ;
  assign \$auto$builder.cc:364:Unop$2307  = ~ \gen_gpios[26].serial_q ;
  assign \$auto$builder.cc:364:Unop$2315  = ~ reg2hw[188];
  assign \$auto$builder.cc:364:Unop$2330  = ~ reg2hw[186];
  assign \$auto$builder.cc:364:Unop$2342  = ~ \gen_gpios[27].serial_d ;
  assign \$auto$builder.cc:364:Unop$2346  = ~ \gen_gpios[27].serial_q ;
  assign \$auto$builder.cc:364:Unop$2354  = ~ reg2hw[195];
  assign \$auto$builder.cc:364:Unop$2369  = ~ reg2hw[193];
  assign \$auto$builder.cc:364:Unop$2381  = ~ \gen_gpios[28].serial_d ;
  assign \$auto$builder.cc:364:Unop$2385  = ~ \gen_gpios[28].serial_q ;
  assign \$auto$builder.cc:364:Unop$2393  = ~ reg2hw[202];
  assign \$auto$builder.cc:364:Unop$2408  = ~ reg2hw[200];
  assign \$auto$builder.cc:364:Unop$2420  = ~ \gen_gpios[29].serial_d ;
  assign \$auto$builder.cc:364:Unop$2424  = ~ \gen_gpios[29].serial_q ;
  assign \$auto$builder.cc:364:Unop$2432  = ~ reg2hw[209];
  assign \$auto$builder.cc:364:Unop$2447  = ~ reg2hw[207];
  assign \$auto$builder.cc:364:Unop$2459  = ~ \gen_gpios[30].serial_d ;
  assign \$auto$builder.cc:364:Unop$2463  = ~ \gen_gpios[30].serial_q ;
  assign \$auto$builder.cc:364:Unop$2471  = ~ reg2hw[216];
  assign \$auto$builder.cc:364:Unop$2486  = ~ reg2hw[214];
  assign \$auto$builder.cc:364:Unop$2498  = ~ \gen_gpios[31].serial_d ;
  assign \$auto$builder.cc:364:Unop$2502  = ~ \gen_gpios[31].serial_q ;
  assign \$auto$builder.cc:364:Unop$2510  = ~ reg2hw[223];
  assign \$auto$builder.cc:364:Unop$2525  = ~ reg2hw[221];
  assign gpio_edge[0] = reg2hw[0] ? \gen_gpios[0].r_edge  : \gen_gpios[0].f_edge ;
  assign gpio_edge[1] = reg2hw[7] ? \gen_gpios[1].r_edge  : \gen_gpios[1].f_edge ;
  assign gpio_edge[2] = reg2hw[14] ? \gen_gpios[2].r_edge  : \gen_gpios[2].f_edge ;
  assign gpio_edge[3] = reg2hw[21] ? \gen_gpios[3].r_edge  : \gen_gpios[3].f_edge ;
  assign gpio_edge[4] = reg2hw[28] ? \gen_gpios[4].r_edge  : \gen_gpios[4].f_edge ;
  assign gpio_edge[5] = reg2hw[35] ? \gen_gpios[5].r_edge  : \gen_gpios[5].f_edge ;
  assign gpio_edge[6] = reg2hw[42] ? \gen_gpios[6].r_edge  : \gen_gpios[6].f_edge ;
  assign gpio_edge[7] = reg2hw[49] ? \gen_gpios[7].r_edge  : \gen_gpios[7].f_edge ;
  assign gpio_edge[8] = reg2hw[56] ? \gen_gpios[8].r_edge  : \gen_gpios[8].f_edge ;
  assign gpio_edge[9] = reg2hw[63] ? \gen_gpios[9].r_edge  : \gen_gpios[9].f_edge ;
  assign gpio_edge[10] = reg2hw[70] ? \gen_gpios[10].r_edge  : \gen_gpios[10].f_edge ;
  assign gpio_edge[11] = reg2hw[77] ? \gen_gpios[11].r_edge  : \gen_gpios[11].f_edge ;
  assign gpio_edge[12] = reg2hw[84] ? \gen_gpios[12].r_edge  : \gen_gpios[12].f_edge ;
  assign gpio_edge[13] = reg2hw[91] ? \gen_gpios[13].r_edge  : \gen_gpios[13].f_edge ;
  assign gpio_edge[14] = reg2hw[98] ? \gen_gpios[14].r_edge  : \gen_gpios[14].f_edge ;
  assign gpio_edge[15] = reg2hw[105] ? \gen_gpios[15].r_edge  : \gen_gpios[15].f_edge ;
  assign gpio_edge[16] = reg2hw[112] ? \gen_gpios[16].r_edge  : \gen_gpios[16].f_edge ;
  assign gpio_edge[17] = reg2hw[119] ? \gen_gpios[17].r_edge  : \gen_gpios[17].f_edge ;
  assign gpio_edge[18] = reg2hw[126] ? \gen_gpios[18].r_edge  : \gen_gpios[18].f_edge ;
  assign gpio_edge[19] = reg2hw[133] ? \gen_gpios[19].r_edge  : \gen_gpios[19].f_edge ;
  assign gpio_edge[20] = reg2hw[140] ? \gen_gpios[20].r_edge  : \gen_gpios[20].f_edge ;
  assign gpio_edge[21] = reg2hw[147] ? \gen_gpios[21].r_edge  : \gen_gpios[21].f_edge ;
  assign gpio_edge[22] = reg2hw[154] ? \gen_gpios[22].r_edge  : \gen_gpios[22].f_edge ;
  assign gpio_edge[23] = reg2hw[161] ? \gen_gpios[23].r_edge  : \gen_gpios[23].f_edge ;
  assign gpio_edge[24] = reg2hw[168] ? \gen_gpios[24].r_edge  : \gen_gpios[24].f_edge ;
  assign gpio_edge[25] = reg2hw[175] ? \gen_gpios[25].r_edge  : \gen_gpios[25].f_edge ;
  assign gpio_edge[26] = reg2hw[182] ? \gen_gpios[26].r_edge  : \gen_gpios[26].f_edge ;
  assign gpio_edge[27] = reg2hw[189] ? \gen_gpios[27].r_edge  : \gen_gpios[27].f_edge ;
  assign gpio_edge[28] = reg2hw[196] ? \gen_gpios[28].r_edge  : \gen_gpios[28].f_edge ;
  assign gpio_edge[29] = reg2hw[203] ? \gen_gpios[29].r_edge  : \gen_gpios[29].f_edge ;
  assign gpio_edge[30] = reg2hw[210] ? \gen_gpios[30].r_edge  : \gen_gpios[30].f_edge ;
  assign gpio_edge[31] = reg2hw[217] ? \gen_gpios[31].r_edge  : \gen_gpios[31].f_edge ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[0].serial_q  <= 1'h0;
    else \gen_gpios[0].serial_q  <= \gen_gpios[0].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[10].serial_q  <= 1'h0;
    else \gen_gpios[10].serial_q  <= \gen_gpios[10].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[11].serial_q  <= 1'h0;
    else \gen_gpios[11].serial_q  <= \gen_gpios[11].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[12].serial_q  <= 1'h0;
    else \gen_gpios[12].serial_q  <= \gen_gpios[12].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[13].serial_q  <= 1'h0;
    else \gen_gpios[13].serial_q  <= \gen_gpios[13].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[14].serial_q  <= 1'h0;
    else \gen_gpios[14].serial_q  <= \gen_gpios[14].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[15].serial_q  <= 1'h0;
    else \gen_gpios[15].serial_q  <= \gen_gpios[15].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[16].serial_q  <= 1'h0;
    else \gen_gpios[16].serial_q  <= \gen_gpios[16].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[17].serial_q  <= 1'h0;
    else \gen_gpios[17].serial_q  <= \gen_gpios[17].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[18].serial_q  <= 1'h0;
    else \gen_gpios[18].serial_q  <= \gen_gpios[18].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[19].serial_q  <= 1'h0;
    else \gen_gpios[19].serial_q  <= \gen_gpios[19].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[1].serial_q  <= 1'h0;
    else \gen_gpios[1].serial_q  <= \gen_gpios[1].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[20].serial_q  <= 1'h0;
    else \gen_gpios[20].serial_q  <= \gen_gpios[20].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[21].serial_q  <= 1'h0;
    else \gen_gpios[21].serial_q  <= \gen_gpios[21].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[22].serial_q  <= 1'h0;
    else \gen_gpios[22].serial_q  <= \gen_gpios[22].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[23].serial_q  <= 1'h0;
    else \gen_gpios[23].serial_q  <= \gen_gpios[23].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[24].serial_q  <= 1'h0;
    else \gen_gpios[24].serial_q  <= \gen_gpios[24].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[25].serial_q  <= 1'h0;
    else \gen_gpios[25].serial_q  <= \gen_gpios[25].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[26].serial_q  <= 1'h0;
    else \gen_gpios[26].serial_q  <= \gen_gpios[26].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[27].serial_q  <= 1'h0;
    else \gen_gpios[27].serial_q  <= \gen_gpios[27].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[28].serial_q  <= 1'h0;
    else \gen_gpios[28].serial_q  <= \gen_gpios[28].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[29].serial_q  <= 1'h0;
    else \gen_gpios[29].serial_q  <= \gen_gpios[29].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[2].serial_q  <= 1'h0;
    else \gen_gpios[2].serial_q  <= \gen_gpios[2].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[30].serial_q  <= 1'h0;
    else \gen_gpios[30].serial_q  <= \gen_gpios[30].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[31].serial_q  <= 1'h0;
    else \gen_gpios[31].serial_q  <= \gen_gpios[31].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[3].serial_q  <= 1'h0;
    else \gen_gpios[3].serial_q  <= \gen_gpios[3].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[4].serial_q  <= 1'h0;
    else \gen_gpios[4].serial_q  <= \gen_gpios[4].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[5].serial_q  <= 1'h0;
    else \gen_gpios[5].serial_q  <= \gen_gpios[5].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[6].serial_q  <= 1'h0;
    else \gen_gpios[6].serial_q  <= \gen_gpios[6].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[7].serial_q  <= 1'h0;
    else \gen_gpios[7].serial_q  <= \gen_gpios[7].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[8].serial_q  <= 1'h0;
    else \gen_gpios[8].serial_q  <= \gen_gpios[8].serial_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_gpios[9].serial_q  <= 1'h0;
    else \gen_gpios[9].serial_q  <= \gen_gpios[9].serial_d ;
  assign hw2reg[78:77] = \$auto$builder.cc:338:Biop$1897  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1901 , 1'h1 } : 2'h0;
  assign hw2reg[118:117] = \$auto$builder.cc:338:Biop$2209  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2213 , 1'h1 } : 2'h0;
  assign hw2reg[73:72] = \$auto$builder.cc:338:Biop$1858  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1862 , 1'h1 } : 2'h0;
  assign hw2reg[138:137] = \$auto$builder.cc:338:Biop$2365  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2369 , 1'h1 } : 2'h0;
  assign hw2reg[68:67] = \$auto$builder.cc:338:Biop$1819  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1823 , 1'h1 } : 2'h0;
  assign hw2reg[113:112] = \$auto$builder.cc:338:Biop$2170  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2174 , 1'h1 } : 2'h0;
  assign hw2reg[63:62] = \$auto$builder.cc:338:Biop$1780  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1784 , 1'h1 } : 2'h0;
  assign hw2reg[148:147] = \$auto$builder.cc:338:Biop$2443  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2447 , 1'h1 } : 2'h0;
  assign hw2reg[58:57] = \$auto$builder.cc:338:Biop$1741  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1745 , 1'h1 } : 2'h0;
  assign hw2reg[108:107] = \$auto$builder.cc:338:Biop$2131  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2135 , 1'h1 } : 2'h0;
  assign hw2reg[53:52] = \$auto$builder.cc:338:Biop$1702  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1706 , 1'h1 } : 2'h0;
  assign hw2reg[133:132] = \$auto$builder.cc:338:Biop$2326  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2330 , 1'h1 } : 2'h0;
  assign hw2reg[48:47] = \$auto$builder.cc:338:Biop$1663  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1667 , 1'h1 } : 2'h0;
  assign hw2reg[103:102] = \$auto$builder.cc:338:Biop$2092  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2096 , 1'h1 } : 2'h0;
  assign hw2reg[43:42] = \$auto$builder.cc:338:Biop$1624  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1628 , 1'h1 } : 2'h0;
  assign hw2reg[153:152] = \$auto$builder.cc:338:Biop$2482  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2486 , 1'h1 } : 2'h0;
  assign hw2reg[38:37] = \$auto$builder.cc:338:Biop$1585  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1589 , 1'h1 } : 2'h0;
  assign hw2reg[98:97] = \$auto$builder.cc:338:Biop$2053  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2057 , 1'h1 } : 2'h0;
  assign hw2reg[33:32] = \$auto$builder.cc:338:Biop$1546  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1550 , 1'h1 } : 2'h0;
  assign hw2reg[128:127] = \$auto$builder.cc:338:Biop$2287  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2291 , 1'h1 } : 2'h0;
  assign hw2reg[28:27] = \$auto$builder.cc:338:Biop$1507  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1511 , 1'h1 } : 2'h0;
  assign hw2reg[93:92] = \$auto$builder.cc:338:Biop$2014  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2018 , 1'h1 } : 2'h0;
  assign hw2reg[23:22] = \$auto$builder.cc:338:Biop$1468  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1472 , 1'h1 } : 2'h0;
  assign hw2reg[143:142] = \$auto$builder.cc:338:Biop$2404  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2408 , 1'h1 } : 2'h0;
  assign hw2reg[18:17] = \$auto$builder.cc:338:Biop$1429  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1433 , 1'h1 } : 2'h0;
  assign hw2reg[88:87] = \$auto$builder.cc:338:Biop$1975  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1979 , 1'h1 } : 2'h0;
  assign hw2reg[13:12] = \$auto$builder.cc:338:Biop$1390  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1394 , 1'h1 } : 2'h0;
  assign hw2reg[123:122] = \$auto$builder.cc:338:Biop$2248  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2252 , 1'h1 } : 2'h0;
  assign hw2reg[8:7] = \$auto$builder.cc:338:Biop$1351  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1355 , 1'h1 } : 2'h0;
  assign hw2reg[83:82] = \$auto$builder.cc:338:Biop$1936  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1940 , 1'h1 } : 2'h0;
  assign hw2reg[3:2] = \$auto$builder.cc:338:Biop$1312  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$1316 , 1'h1 } : 2'h0;
  assign hw2reg[158:157] = \$auto$builder.cc:338:Biop$2521  ? (* src = "../rtl/gpio/gpio.sv:143.49-146.16|../rtl/gpio/gpio.sv:143.13-146.16" *) { \$auto$builder.cc:364:Unop$2525 , 1'h1 } : 2'h0;
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync  \gen_gpios[0].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[0]),
    .serial_o(\gen_gpios[0].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync  \gen_gpios[10].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[10]),
    .serial_o(\gen_gpios[10].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync  \gen_gpios[11].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[11]),
    .serial_o(\gen_gpios[11].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync  \gen_gpios[12].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[12]),
    .serial_o(\gen_gpios[12].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync  \gen_gpios[13].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[13]),
    .serial_o(\gen_gpios[13].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync  \gen_gpios[14].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[14]),
    .serial_o(\gen_gpios[14].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync  \gen_gpios[15].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[15]),
    .serial_o(\gen_gpios[15].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync  \gen_gpios[16].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[16]),
    .serial_o(\gen_gpios[16].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync  \gen_gpios[17].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[17]),
    .serial_o(\gen_gpios[17].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync  \gen_gpios[18].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[18]),
    .serial_o(\gen_gpios[18].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync  \gen_gpios[19].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[19]),
    .serial_o(\gen_gpios[19].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync  \gen_gpios[1].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[1]),
    .serial_o(\gen_gpios[1].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync  \gen_gpios[20].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[20]),
    .serial_o(\gen_gpios[20].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync  \gen_gpios[21].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[21]),
    .serial_o(\gen_gpios[21].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync  \gen_gpios[22].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[22]),
    .serial_o(\gen_gpios[22].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync  \gen_gpios[23].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[23]),
    .serial_o(\gen_gpios[23].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync  \gen_gpios[24].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[24]),
    .serial_o(\gen_gpios[24].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync  \gen_gpios[25].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[25]),
    .serial_o(\gen_gpios[25].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync  \gen_gpios[26].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[26]),
    .serial_o(\gen_gpios[26].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync  \gen_gpios[27].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[27]),
    .serial_o(\gen_gpios[27].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync  \gen_gpios[28].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[28]),
    .serial_o(\gen_gpios[28].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync  \gen_gpios[29].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[29]),
    .serial_o(\gen_gpios[29].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync  \gen_gpios[2].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[2]),
    .serial_o(\gen_gpios[2].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync  \gen_gpios[30].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[30]),
    .serial_o(\gen_gpios[30].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync  \gen_gpios[31].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[31]),
    .serial_o(\gen_gpios[31].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync  \gen_gpios[3].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[3]),
    .serial_o(\gen_gpios[3].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync  \gen_gpios[4].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[4]),
    .serial_o(\gen_gpios[4].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync  \gen_gpios[5].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[5]),
    .serial_o(\gen_gpios[5].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync  \gen_gpios[6].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[6]),
    .serial_o(\gen_gpios[6].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync  \gen_gpios[7].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[7]),
    .serial_o(\gen_gpios[7].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync  \gen_gpios[8].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[8]),
    .serial_o(\gen_gpios[8].serial_d )
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/gpio/gpio.sv:101.11" *)
  \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync  \gen_gpios[9].i_sync  (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .serial_i(gpio_i[9]),
    .serial_o(\gen_gpios[9].serial_d )
  );
  (* src = "../rtl/gpio/gpio.sv:74.5" *)
  \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file  i_reg_file (
    .clk_i(clk_i),
    .hw2reg({ hw2reg[159:157], gpio_intrpt[31], gpio_intrpt[31], hw2reg[154:152], gpio_intrpt[30], gpio_intrpt[30], hw2reg[149:147], gpio_intrpt[29], gpio_intrpt[29], hw2reg[144:142], gpio_intrpt[28], gpio_intrpt[28], hw2reg[139:137], gpio_intrpt[27], gpio_intrpt[27], hw2reg[134:132], gpio_intrpt[26], gpio_intrpt[26], hw2reg[129:127], gpio_intrpt[25], gpio_intrpt[25], hw2reg[124:122], gpio_intrpt[24], gpio_intrpt[24], hw2reg[119:117], gpio_intrpt[23], gpio_intrpt[23], hw2reg[114:112], gpio_intrpt[22], gpio_intrpt[22], hw2reg[109:107], gpio_intrpt[21], gpio_intrpt[21], hw2reg[104:102], gpio_intrpt[20], gpio_intrpt[20], hw2reg[99:97], gpio_intrpt[19], gpio_intrpt[19], hw2reg[94:92], gpio_intrpt[18], gpio_intrpt[18], hw2reg[89:87], gpio_intrpt[17], gpio_intrpt[17], hw2reg[84:82], gpio_intrpt[16], gpio_intrpt[16], hw2reg[79:77], gpio_intrpt[15], gpio_intrpt[15], hw2reg[74:72], gpio_intrpt[14], gpio_intrpt[14], hw2reg[69:67], gpio_intrpt[13], gpio_intrpt[13], hw2reg[64:62], gpio_intrpt[12], gpio_intrpt[12], hw2reg[59:57], gpio_intrpt[11], gpio_intrpt[11], hw2reg[54:52], gpio_intrpt[10], gpio_intrpt[10], hw2reg[49:47], gpio_intrpt[9], gpio_intrpt[9], hw2reg[44:42], gpio_intrpt[8], gpio_intrpt[8], hw2reg[39:37], gpio_intrpt[7], gpio_intrpt[7], hw2reg[34:32], gpio_intrpt[6], gpio_intrpt[6], hw2reg[29:27], gpio_intrpt[5], gpio_intrpt[5], hw2reg[24:22], gpio_intrpt[4], gpio_intrpt[4], hw2reg[19:17], gpio_intrpt[3], gpio_intrpt[3], hw2reg[14:12], gpio_intrpt[2], gpio_intrpt[2], hw2reg[9:7], gpio_intrpt[1], gpio_intrpt[1], hw2reg[4:2], gpio_intrpt[0], gpio_intrpt[0] }),
    .obi_req_i(obi_req_i),
    .obi_rsp_o(obi_rsp_o),
    .reg2hw(reg2hw),
    .rst_ni(rst_ni)
  );
  assign gpio_in_sync_o = { \gen_gpios[31].serial_q , \gen_gpios[30].serial_q , \gen_gpios[29].serial_q , \gen_gpios[28].serial_q , \gen_gpios[27].serial_q , \gen_gpios[26].serial_q , \gen_gpios[25].serial_q , \gen_gpios[24].serial_q , \gen_gpios[23].serial_q , \gen_gpios[22].serial_q , \gen_gpios[21].serial_q , \gen_gpios[20].serial_q , \gen_gpios[19].serial_q , \gen_gpios[18].serial_q , \gen_gpios[17].serial_q , \gen_gpios[16].serial_q , \gen_gpios[15].serial_q , \gen_gpios[14].serial_q , \gen_gpios[13].serial_q , \gen_gpios[12].serial_q , \gen_gpios[11].serial_q , \gen_gpios[10].serial_q , \gen_gpios[9].serial_q , \gen_gpios[8].serial_q , \gen_gpios[7].serial_q , \gen_gpios[6].serial_q , \gen_gpios[5].serial_q , \gen_gpios[4].serial_q , \gen_gpios[3].serial_q , \gen_gpios[2].serial_q , \gen_gpios[1].serial_q , \gen_gpios[0].serial_q  };
  assign gpio_out_en_o = { \gen_gpios[31].is_output , \gen_gpios[30].is_output , \gen_gpios[29].is_output , \gen_gpios[28].is_output , \gen_gpios[27].is_output , \gen_gpios[26].is_output , \gen_gpios[25].is_output , \gen_gpios[24].is_output , \gen_gpios[23].is_output , \gen_gpios[22].is_output , \gen_gpios[21].is_output , \gen_gpios[20].is_output , \gen_gpios[19].is_output , \gen_gpios[18].is_output , \gen_gpios[17].is_output , \gen_gpios[16].is_output , \gen_gpios[15].is_output , \gen_gpios[14].is_output , \gen_gpios[13].is_output , \gen_gpios[12].is_output , \gen_gpios[11].is_output , \gen_gpios[10].is_output , \gen_gpios[9].is_output , \gen_gpios[8].is_output , \gen_gpios[7].is_output , \gen_gpios[6].is_output , \gen_gpios[5].is_output , \gen_gpios[4].is_output , \gen_gpios[3].is_output , \gen_gpios[2].is_output , \gen_gpios[1].is_output , \gen_gpios[0].is_output  };
  assign { hw2reg[156:155], hw2reg[151:150], hw2reg[146:145], hw2reg[141:140], hw2reg[136:135], hw2reg[131:130], hw2reg[126:125], hw2reg[121:120], hw2reg[116:115], hw2reg[111:110], hw2reg[106:105], hw2reg[101:100], hw2reg[96:95], hw2reg[91:90], hw2reg[86:85], hw2reg[81:80], hw2reg[76:75], hw2reg[71:70], hw2reg[66:65], hw2reg[61:60], hw2reg[56:55], hw2reg[51:50], hw2reg[46:45], hw2reg[41:40], hw2reg[36:35], hw2reg[31:30], hw2reg[26:25], hw2reg[21:20], hw2reg[16:15], hw2reg[11:10], hw2reg[6:5], hw2reg[1:0] } = { gpio_intrpt[31], gpio_intrpt[31:30], gpio_intrpt[30:29], gpio_intrpt[29:28], gpio_intrpt[28:27], gpio_intrpt[27:26], gpio_intrpt[26:25], gpio_intrpt[25:24], gpio_intrpt[24:23], gpio_intrpt[23:22], gpio_intrpt[22:21], gpio_intrpt[21:20], gpio_intrpt[20:19], gpio_intrpt[19:18], gpio_intrpt[18:17], gpio_intrpt[17:16], gpio_intrpt[16:15], gpio_intrpt[15:14], gpio_intrpt[14:13], gpio_intrpt[13:12], gpio_intrpt[12:11], gpio_intrpt[11:10], gpio_intrpt[10:9], gpio_intrpt[9:8], gpio_intrpt[8:7], gpio_intrpt[7:6], gpio_intrpt[6:5], gpio_intrpt[5:4], gpio_intrpt[4:3], gpio_intrpt[3:2], gpio_intrpt[2:1], gpio_intrpt[1:0], gpio_intrpt[0] };
endmodule

(* src = "../rtl/gpio/gpio_reg_top.sv:12.8" *)
module \gpio_reg_top$croc_chip.i_croc_soc.i_croc.i_gpio.i_reg_file (clk_i, rst_ni, obi_req_i, obi_rsp_o, reg2hw, hw2reg);
  wire [31:0] \$auto$builder.cc:338:Biop$5686 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5688 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5690 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5694 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5698 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5702 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5706 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5712 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5716 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5720 ;
  wire [31:0] \$auto$builder.cc:338:Biop$5724 ;
  wire \$auto$builder.cc:364:Unop$5251 ;
  wire [31:0] \$auto$builder.cc:364:Unop$5684 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17856 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17859 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17862 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$17865 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17203 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17205 ;
  (* src = "../rtl/gpio/gpio_reg_top.sv:165.5-199.8" *)
  wire \$auto$slang_frontend.cc:694:finish$\obi_err$5731 ;
  (* src = "../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\obi_err$5740 ;
  (* src = "../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\obi_rdata$5741 ;
  (* src = "../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\reg_d[128]$5728 ;
  (* src = "../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\reg_d[32]$5742 ;
  (* src = "../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *)
  wire [31:0] \$auto$slang_frontend.cc:694:finish$\toggle_out$5730 ;
  (* src = "../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\w_err_d$5725 ;
  wire \$procmux$14215_CMP ;
  wire \$procmux$14216_CMP ;
  wire \$procmux$14217_CMP ;
  wire \$procmux$14218_CMP ;
  wire \$procmux$14219_CMP ;
  wire \$procmux$14220_CMP ;
  wire \$procmux$14221_CMP ;
  wire \$procmux$14222_CMP ;
  wire \$procmux$14265_CMP ;
  wire \$procmux$14272_CMP ;
  wire \$procmux$14281_CMP ;
  wire \$procmux$14289_CMP ;
  wire \$procmux$14295_CMP ;
  wire \$procmux$14300_CMP ;
  (* src = "../rtl/gpio/gpio_reg_top.sv:23.18" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/gpio/gpio_reg_top.sv:37.43" *)
  input [159:0] hw2reg;
  wire [159:0] hw2reg;
  (* src = "../rtl/gpio/gpio_reg_top.sv:50.41" *)
  reg id_q;
  (* src = "../rtl/gpio/gpio_reg_top.sv:113.25" *)
  wire [31:0] new_intrpt;
  (* src = "../rtl/gpio/gpio_reg_top.sv:108.21" *)
  wire [255:0] new_reg;
  (* src = "../rtl/gpio/gpio_reg_top.sv:51.35" *)
  wire obi_err;
  (* src = "../rtl/gpio/gpio_reg_top.sv:54.35" *)
  wire [31:0] obi_rdata;
  (* src = "../rtl/gpio/gpio_reg_top.sv:55.35" *)
  wire obi_read_request;
  (* src = "../rtl/gpio/gpio_reg_top.sv:29.23" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "../rtl/gpio/gpio_reg_top.sv:31.22" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "../rtl/gpio/gpio_reg_top.sv:55.53" *)
  wire obi_write_request;
  (* src = "../rtl/gpio/gpio_reg_top.sv:49.48" *)
  wire [11:0] read_addr_q;
  (* src = "../rtl/gpio/gpio_reg_top.sv:35.42" *)
  output [223:0] reg2hw;
  wire [223:0] reg2hw;
  (* src = "../rtl/gpio/gpio_reg_top.sv:105.21" *)
  wire [255:0] reg_d;
  (* src = "../rtl/gpio/gpio_reg_top.sv:105.28" *)
  wire [255:0] reg_q;
  (* src = "../rtl/gpio/gpio_reg_top.sv:47.42" *)
  reg req_q;
  (* src = "../rtl/gpio/gpio_reg_top.sv:25.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/gpio/gpio_reg_top.sv:114.25" *)
  wire [31:0] toggle_out;
  (* src = "../rtl/gpio/gpio_reg_top.sv:52.35" *)
  wire w_err_d;
  (* src = "../rtl/gpio/gpio_reg_top.sv:52.44" *)
  reg w_err_q;
  (* src = "../rtl/gpio/gpio_reg_top.sv:46.41" *)
  reg we_q;
  assign obi_read_request = req_q & \$auto$builder.cc:364:Unop$5251 ;
  assign obi_write_request = obi_req_i[0] & obi_req_i[41];
  assign new_intrpt[0] = hw2reg[0] & hw2reg[1];
  assign new_intrpt[1] = hw2reg[5] & hw2reg[6];
  assign new_intrpt[2] = hw2reg[10] & hw2reg[11];
  assign new_intrpt[3] = hw2reg[15] & hw2reg[16];
  assign new_intrpt[4] = hw2reg[20] & hw2reg[21];
  assign new_intrpt[5] = hw2reg[25] & hw2reg[26];
  assign new_intrpt[6] = hw2reg[30] & hw2reg[31];
  assign new_intrpt[7] = hw2reg[35] & hw2reg[36];
  assign new_intrpt[8] = hw2reg[40] & hw2reg[41];
  assign new_intrpt[9] = hw2reg[45] & hw2reg[46];
  assign new_intrpt[10] = hw2reg[50] & hw2reg[51];
  assign new_intrpt[11] = hw2reg[55] & hw2reg[56];
  assign new_intrpt[12] = hw2reg[60] & hw2reg[61];
  assign new_intrpt[13] = hw2reg[65] & hw2reg[66];
  assign new_intrpt[14] = hw2reg[70] & hw2reg[71];
  assign new_intrpt[15] = hw2reg[75] & hw2reg[76];
  assign new_intrpt[16] = hw2reg[80] & hw2reg[81];
  assign new_intrpt[17] = hw2reg[85] & hw2reg[86];
  assign new_intrpt[18] = hw2reg[90] & hw2reg[91];
  assign new_intrpt[19] = hw2reg[95] & hw2reg[96];
  assign new_intrpt[20] = hw2reg[100] & hw2reg[101];
  assign new_intrpt[21] = hw2reg[105] & hw2reg[106];
  assign new_intrpt[22] = hw2reg[110] & hw2reg[111];
  assign new_intrpt[23] = hw2reg[115] & hw2reg[116];
  assign new_intrpt[24] = hw2reg[120] & hw2reg[121];
  assign new_intrpt[25] = hw2reg[125] & hw2reg[126];
  assign new_intrpt[26] = hw2reg[130] & hw2reg[131];
  assign new_intrpt[27] = hw2reg[135] & hw2reg[136];
  assign new_intrpt[28] = hw2reg[140] & hw2reg[141];
  assign new_intrpt[29] = hw2reg[145] & hw2reg[146];
  assign new_intrpt[30] = hw2reg[150] & hw2reg[151];
  assign new_intrpt[31] = hw2reg[155] & hw2reg[156];
  assign \$auto$builder.cc:338:Biop$5686  = { \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] } & { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6] };
  assign \$auto$builder.cc:338:Biop$5688  = { obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40], obi_req_i[40:39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39], obi_req_i[39:38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38], obi_req_i[38:37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37], obi_req_i[37] } & obi_req_i[36:5];
  assign \$auto$builder.cc:338:Biop$5690  = \$auto$builder.cc:338:Biop$5686  | \$auto$builder.cc:338:Biop$5688 ;
  assign \$auto$builder.cc:338:Biop$5694  = { \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] } & { reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5] };
  assign \$auto$builder.cc:338:Biop$5698  = \$auto$builder.cc:338:Biop$5694  | \$auto$builder.cc:338:Biop$5688 ;
  assign \$auto$builder.cc:338:Biop$5702  = { \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] } & new_reg[159:128];
  assign \$auto$builder.cc:338:Biop$5706  = \$auto$builder.cc:338:Biop$5702  | \$auto$builder.cc:338:Biop$5688 ;
  assign \$auto$builder.cc:338:Biop$5712  = { \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] } & { reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2] };
  assign \$auto$builder.cc:338:Biop$5716  = \$auto$builder.cc:338:Biop$5712  | \$auto$builder.cc:338:Biop$5688 ;
  assign \$auto$builder.cc:338:Biop$5720  = { \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] } & { reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
  assign \$auto$builder.cc:338:Biop$5724  = \$auto$builder.cc:338:Biop$5720  | \$auto$builder.cc:338:Biop$5688 ;
  assign \$auto$builder.cc:364:Unop$5251  = ~ we_q;
  reg [31:0] \$auto$ff.cc:266:slice$17855 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17855  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17856 ) \$auto$ff.cc:266:slice$17855  <= \$auto$builder.cc:338:Biop$5716 ;
  assign { reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2] } = \$auto$ff.cc:266:slice$17855 ;
  reg [31:0] \$auto$ff.cc:266:slice$17858 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17858  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17859 ) \$auto$ff.cc:266:slice$17858  <= \$auto$builder.cc:338:Biop$5724 ;
  assign { reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] } = \$auto$ff.cc:266:slice$17858 ;
  reg [31:0] \$auto$ff.cc:266:slice$17861 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17861  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17862 ) \$auto$ff.cc:266:slice$17861  <= \$auto$builder.cc:338:Biop$5698 ;
  assign { reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5] } = \$auto$ff.cc:266:slice$17861 ;
  reg [31:0] \$auto$ff.cc:266:slice$17864 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17864  <= 32'd0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$17865 ) \$auto$ff.cc:266:slice$17864  <= \$auto$builder.cc:338:Biop$5690 ;
  assign { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6] } = \$auto$ff.cc:266:slice$17864 ;
  reg [9:0] \$auto$ff.cc:266:slice$17867 ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$auto$ff.cc:266:slice$17867  <= 10'h000;
    else \$auto$ff.cc:266:slice$17867  <= obi_req_i[53:44];
  assign read_addr_q[9:0] = \$auto$ff.cc:266:slice$17867 ;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17856  = & { \$procmux$14295_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17859  = & { \$procmux$14300_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17862  = & { \$procmux$14281_CMP , obi_write_request };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$17865  = & { \$procmux$14265_CMP , obi_write_request };
  assign { \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7] } = ~ obi_req_i[40:37];
  assign \$auto$opt_reduce.cc:137:opt_pmux$17203  = | { \$procmux$14222_CMP , \$procmux$14221_CMP , \$procmux$14220_CMP , \$procmux$14219_CMP , \$procmux$14218_CMP , \$procmux$14217_CMP , \$procmux$14216_CMP , \$procmux$14215_CMP  };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17205  = | { \$procmux$14300_CMP , \$procmux$14295_CMP , \$procmux$14289_CMP , \$procmux$14281_CMP , \$procmux$14272_CMP , \$procmux$14265_CMP  };
  assign new_reg[128] = hw2reg[2] ? hw2reg[3] : reg2hw[4];
  assign new_reg[32] = hw2reg[0] ? hw2reg[1] : reg2hw[1];
  assign new_reg[129] = hw2reg[7] ? hw2reg[8] : reg2hw[11];
  assign new_reg[33] = hw2reg[5] ? hw2reg[6] : reg2hw[8];
  assign new_reg[130] = hw2reg[12] ? hw2reg[13] : reg2hw[18];
  assign new_reg[34] = hw2reg[10] ? hw2reg[11] : reg2hw[15];
  assign new_reg[131] = hw2reg[17] ? hw2reg[18] : reg2hw[25];
  assign new_reg[35] = hw2reg[15] ? hw2reg[16] : reg2hw[22];
  assign new_reg[132] = hw2reg[22] ? hw2reg[23] : reg2hw[32];
  assign new_reg[36] = hw2reg[20] ? hw2reg[21] : reg2hw[29];
  assign new_reg[133] = hw2reg[27] ? hw2reg[28] : reg2hw[39];
  assign new_reg[37] = hw2reg[25] ? hw2reg[26] : reg2hw[36];
  assign new_reg[134] = hw2reg[32] ? hw2reg[33] : reg2hw[46];
  assign new_reg[38] = hw2reg[30] ? hw2reg[31] : reg2hw[43];
  assign new_reg[135] = hw2reg[37] ? hw2reg[38] : reg2hw[53];
  assign new_reg[39] = hw2reg[35] ? hw2reg[36] : reg2hw[50];
  assign new_reg[136] = hw2reg[42] ? hw2reg[43] : reg2hw[60];
  assign new_reg[40] = hw2reg[40] ? hw2reg[41] : reg2hw[57];
  assign new_reg[137] = hw2reg[47] ? hw2reg[48] : reg2hw[67];
  assign new_reg[41] = hw2reg[45] ? hw2reg[46] : reg2hw[64];
  assign new_reg[138] = hw2reg[52] ? hw2reg[53] : reg2hw[74];
  assign new_reg[42] = hw2reg[50] ? hw2reg[51] : reg2hw[71];
  assign new_reg[139] = hw2reg[57] ? hw2reg[58] : reg2hw[81];
  assign new_reg[43] = hw2reg[55] ? hw2reg[56] : reg2hw[78];
  assign new_reg[140] = hw2reg[62] ? hw2reg[63] : reg2hw[88];
  assign new_reg[44] = hw2reg[60] ? hw2reg[61] : reg2hw[85];
  assign new_reg[141] = hw2reg[67] ? hw2reg[68] : reg2hw[95];
  assign new_reg[45] = hw2reg[65] ? hw2reg[66] : reg2hw[92];
  assign new_reg[142] = hw2reg[72] ? hw2reg[73] : reg2hw[102];
  assign new_reg[46] = hw2reg[70] ? hw2reg[71] : reg2hw[99];
  assign new_reg[143] = hw2reg[77] ? hw2reg[78] : reg2hw[109];
  assign new_reg[47] = hw2reg[75] ? hw2reg[76] : reg2hw[106];
  assign new_reg[144] = hw2reg[82] ? hw2reg[83] : reg2hw[116];
  assign new_reg[48] = hw2reg[80] ? hw2reg[81] : reg2hw[113];
  assign new_reg[145] = hw2reg[87] ? hw2reg[88] : reg2hw[123];
  assign new_reg[49] = hw2reg[85] ? hw2reg[86] : reg2hw[120];
  assign new_reg[146] = hw2reg[92] ? hw2reg[93] : reg2hw[130];
  assign new_reg[50] = hw2reg[90] ? hw2reg[91] : reg2hw[127];
  assign new_reg[147] = hw2reg[97] ? hw2reg[98] : reg2hw[137];
  assign new_reg[51] = hw2reg[95] ? hw2reg[96] : reg2hw[134];
  assign new_reg[148] = hw2reg[102] ? hw2reg[103] : reg2hw[144];
  assign new_reg[52] = hw2reg[100] ? hw2reg[101] : reg2hw[141];
  assign new_reg[149] = hw2reg[107] ? hw2reg[108] : reg2hw[151];
  assign new_reg[53] = hw2reg[105] ? hw2reg[106] : reg2hw[148];
  assign new_reg[150] = hw2reg[112] ? hw2reg[113] : reg2hw[158];
  assign new_reg[54] = hw2reg[110] ? hw2reg[111] : reg2hw[155];
  assign new_reg[151] = hw2reg[117] ? hw2reg[118] : reg2hw[165];
  assign new_reg[55] = hw2reg[115] ? hw2reg[116] : reg2hw[162];
  assign new_reg[152] = hw2reg[122] ? hw2reg[123] : reg2hw[172];
  assign new_reg[56] = hw2reg[120] ? hw2reg[121] : reg2hw[169];
  assign new_reg[153] = hw2reg[127] ? hw2reg[128] : reg2hw[179];
  assign new_reg[57] = hw2reg[125] ? hw2reg[126] : reg2hw[176];
  assign new_reg[154] = hw2reg[132] ? hw2reg[133] : reg2hw[186];
  assign new_reg[58] = hw2reg[130] ? hw2reg[131] : reg2hw[183];
  assign new_reg[155] = hw2reg[137] ? hw2reg[138] : reg2hw[193];
  assign new_reg[59] = hw2reg[135] ? hw2reg[136] : reg2hw[190];
  assign new_reg[156] = hw2reg[142] ? hw2reg[143] : reg2hw[200];
  assign new_reg[60] = hw2reg[140] ? hw2reg[141] : reg2hw[197];
  assign new_reg[157] = hw2reg[147] ? hw2reg[148] : reg2hw[207];
  assign new_reg[61] = hw2reg[145] ? hw2reg[146] : reg2hw[204];
  assign new_reg[158] = hw2reg[152] ? hw2reg[153] : reg2hw[214];
  assign new_reg[62] = hw2reg[150] ? hw2reg[151] : reg2hw[211];
  assign new_reg[159] = hw2reg[157] ? hw2reg[158] : reg2hw[221];
  assign new_reg[63] = hw2reg[155] ? hw2reg[156] : reg2hw[218];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 1'h0;
    else id_q <= obi_req_i[2];
  reg [31:0] \$driver$reg_q.in ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.in  <= 32'd0;
    else \$driver$reg_q.in  <= { hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4] };
  assign reg_q[191:160] = \$driver$reg_q.in ;
  reg [31:0] \$driver$reg_q.intrpt ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.intrpt  <= 32'd0;
    else \$driver$reg_q.intrpt  <= reg_d[63:32];
  assign { reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1] } = \$driver$reg_q.intrpt ;
  reg [31:0] \$driver$reg_q.out ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \$driver$reg_q.out  <= 32'd0;
    else \$driver$reg_q.out  <= reg_d[159:128];
  assign { reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4] } = \$driver$reg_q.out ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) req_q <= 1'h0;
    else req_q <= obi_req_i[0];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) w_err_q <= 1'h0;
    else w_err_q <= w_err_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) we_q <= 1'h0;
    else we_q <= obi_req_i[41];
  function [31:0] \$procmux$14214 ;
    input [31:0] a;
    input [255:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/gpio/gpio_reg_top.sv:237.11-237.41|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        \$procmux$14214  = b[31:0];
      8'b??????1?:
        \$procmux$14214  = b[63:32];
      8'b?????1??:
        \$procmux$14214  = b[95:64];
      8'b????1???:
        \$procmux$14214  = b[127:96];
      8'b???1????:
        \$procmux$14214  = b[159:128];
      8'b??1?????:
        \$procmux$14214  = b[191:160];
      8'b?1??????:
        \$procmux$14214  = b[223:192];
      8'b1???????:
        \$procmux$14214  = b[255:224];
      default:
        \$procmux$14214  = a;
    endcase
  endfunction
  assign \$auto$slang_frontend.cc:694:finish$\obi_rdata$5741  = \$procmux$14214 (32'd3135023902, { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], reg_q[191:160], reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4], 32'h00000000, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] }, { \$procmux$14222_CMP , \$procmux$14221_CMP , \$procmux$14220_CMP , \$procmux$14219_CMP , \$procmux$14218_CMP , \$procmux$14217_CMP , \$procmux$14216_CMP , \$procmux$14215_CMP  });
  assign \$procmux$14215_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:237.11-237.41|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0e0;
  assign \$procmux$14216_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:230.36-234.12|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0c0;
  assign \$procmux$14217_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:227.11-227.39|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h0a0;
  assign \$procmux$14218_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:223.11-223.26|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h080;
  assign \$procmux$14219_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:219.11-219.33|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h060;
  assign \$procmux$14220_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:215.11-215.32|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h040;
  assign \$procmux$14221_CMP  = read_addr_q[9:0] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:211.11-211.32|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) 10'h020;
  assign \$procmux$14222_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:207.11-207.33|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) read_addr_q[9:0];
  assign \$auto$slang_frontend.cc:694:finish$\reg_d[32]$5742  = \$procmux$14216_CMP  ? (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:230.36-234.12|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) new_intrpt : new_reg[63:32];
  assign \$auto$slang_frontend.cc:694:finish$\obi_err$5740  = ~ (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:237.11-237.41|../rtl/gpio/gpio_reg_top.sv:205.7-244.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17203 ;
  assign reg_d[63:32] = obi_read_request ? (* src = "../rtl/gpio/gpio_reg_top.sv:203.27-245.8|../rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$auto$slang_frontend.cc:694:finish$\reg_d[32]$5742  : new_reg[63:32];
  assign obi_rdata = obi_read_request ? (* src = "../rtl/gpio/gpio_reg_top.sv:203.27-245.8|../rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$auto$slang_frontend.cc:694:finish$\obi_rdata$5741  : 32'd0;
  assign obi_err = obi_read_request ? (* src = "../rtl/gpio/gpio_reg_top.sv:203.27-245.8|../rtl/gpio/gpio_reg_top.sv:203.5-245.8" *) \$auto$slang_frontend.cc:694:finish$\obi_err$5740  : \$auto$slang_frontend.cc:694:finish$\obi_err$5731 ;
  assign \$procmux$14265_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:169.11-169.89|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) obi_req_i[53:44];
  assign \$auto$slang_frontend.cc:694:finish$\toggle_out$5730  = \$procmux$14272_CMP  ? (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:182.11-182.60|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$auto$builder.cc:338:Biop$5688  : 32'd0;
  assign \$procmux$14272_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:182.11-182.60|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'h80;
  assign \$procmux$14281_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:173.11-173.87|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 6'h20;
  assign \$auto$slang_frontend.cc:694:finish$\reg_d[128]$5728  = \$procmux$14289_CMP  ? (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:177.11-178.77|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$auto$builder.cc:338:Biop$5706  : new_reg[159:128];
  assign \$procmux$14289_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:177.11-178.77|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 7'h60;
  assign \$procmux$14295_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:186.11-187.85|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'ha0;
  assign \$procmux$14300_CMP  = obi_req_i[53:44] == (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:191.11-192.87|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) 8'he0;
  assign \$auto$slang_frontend.cc:694:finish$\w_err_d$5725  = ~ (* full_case = 32'd1 *) (* src = "../rtl/gpio/gpio_reg_top.sv:191.11-192.87|../rtl/gpio/gpio_reg_top.sv:167.7-198.14" *) \$auto$opt_reduce.cc:137:opt_pmux$17205 ;
  assign toggle_out = obi_write_request ? (* src = "../rtl/gpio/gpio_reg_top.sv:165.28-199.8|../rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$auto$slang_frontend.cc:694:finish$\toggle_out$5730  : 32'd0;
  assign reg_d[159:128] = obi_write_request ? (* src = "../rtl/gpio/gpio_reg_top.sv:165.28-199.8|../rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$auto$slang_frontend.cc:694:finish$\reg_d[128]$5728  : new_reg[159:128];
  assign w_err_d = obi_write_request & (* src = "../rtl/gpio/gpio_reg_top.sv:165.28-199.8|../rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) \$auto$slang_frontend.cc:694:finish$\w_err_d$5725 ;
  assign \$auto$slang_frontend.cc:694:finish$\obi_err$5731  = obi_write_request ? (* src = "../rtl/gpio/gpio_reg_top.sv:165.28-199.8|../rtl/gpio/gpio_reg_top.sv:165.5-199.8" *) 1'h0 : w_err_q;
  assign { \$auto$builder.cc:364:Unop$5684 [30:24], \$auto$builder.cc:364:Unop$5684 [22:16], \$auto$builder.cc:364:Unop$5684 [14:8], \$auto$builder.cc:364:Unop$5684 [6:0] } = { \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [31], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [23], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [15], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7], \$auto$builder.cc:364:Unop$5684 [7] };
  assign { new_reg[255:160], new_reg[127:64], new_reg[31:0] } = { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 32'h00000000, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
  assign obi_rsp_o = { obi_rdata, 2'h0, id_q, obi_err, 1'h0, obi_req_i[0], req_q };
  assign read_addr_q[11:10] = 2'h0;
  assign { reg2hw[220], reg2hw[213], reg2hw[206], reg2hw[199], reg2hw[192], reg2hw[185], reg2hw[178], reg2hw[171], reg2hw[164], reg2hw[157], reg2hw[150], reg2hw[143], reg2hw[136], reg2hw[129], reg2hw[122], reg2hw[115], reg2hw[108], reg2hw[101], reg2hw[94], reg2hw[87], reg2hw[80], reg2hw[73], reg2hw[66], reg2hw[59], reg2hw[52], reg2hw[45], reg2hw[38], reg2hw[31], reg2hw[24], reg2hw[17], reg2hw[10], reg2hw[3] } = toggle_out;
  assign { reg_d[255:160], reg_d[127:64], reg_d[31:0] } = { 64'hxxxxxxxxxxxxxxxx, hw2reg[159], hw2reg[154], hw2reg[149], hw2reg[144], hw2reg[139], hw2reg[134], hw2reg[129], hw2reg[124], hw2reg[119], hw2reg[114], hw2reg[109], hw2reg[104], hw2reg[99], hw2reg[94], hw2reg[89], hw2reg[84], hw2reg[79], hw2reg[74], hw2reg[69], hw2reg[64], hw2reg[59], hw2reg[54], hw2reg[49], hw2reg[44], hw2reg[39], hw2reg[34], hw2reg[29], hw2reg[24], hw2reg[19], hw2reg[14], hw2reg[9], hw2reg[4], 96'h00000000xxxxxxxxxxxxxxxx };
  assign { reg_q[255:192], reg_q[159:0] } = { reg2hw[223], reg2hw[216], reg2hw[209], reg2hw[202], reg2hw[195], reg2hw[188], reg2hw[181], reg2hw[174], reg2hw[167], reg2hw[160], reg2hw[153], reg2hw[146], reg2hw[139], reg2hw[132], reg2hw[125], reg2hw[118], reg2hw[111], reg2hw[104], reg2hw[97], reg2hw[90], reg2hw[83], reg2hw[76], reg2hw[69], reg2hw[62], reg2hw[55], reg2hw[48], reg2hw[41], reg2hw[34], reg2hw[27], reg2hw[20], reg2hw[13], reg2hw[6], reg2hw[222], reg2hw[215], reg2hw[208], reg2hw[201], reg2hw[194], reg2hw[187], reg2hw[180], reg2hw[173], reg2hw[166], reg2hw[159], reg2hw[152], reg2hw[145], reg2hw[138], reg2hw[131], reg2hw[124], reg2hw[117], reg2hw[110], reg2hw[103], reg2hw[96], reg2hw[89], reg2hw[82], reg2hw[75], reg2hw[68], reg2hw[61], reg2hw[54], reg2hw[47], reg2hw[40], reg2hw[33], reg2hw[26], reg2hw[19], reg2hw[12], reg2hw[5], reg2hw[221], reg2hw[214], reg2hw[207], reg2hw[200], reg2hw[193], reg2hw[186], reg2hw[179], reg2hw[172], reg2hw[165], reg2hw[158], reg2hw[151], reg2hw[144], reg2hw[137], reg2hw[130], reg2hw[123], reg2hw[116], reg2hw[109], reg2hw[102], reg2hw[95], reg2hw[88], reg2hw[81], reg2hw[74], reg2hw[67], reg2hw[60], reg2hw[53], reg2hw[46], reg2hw[39], reg2hw[32], reg2hw[25], reg2hw[18], reg2hw[11], reg2hw[4], 32'hxxxxxxxx, reg2hw[219], reg2hw[212], reg2hw[205], reg2hw[198], reg2hw[191], reg2hw[184], reg2hw[177], reg2hw[170], reg2hw[163], reg2hw[156], reg2hw[149], reg2hw[142], reg2hw[135], reg2hw[128], reg2hw[121], reg2hw[114], reg2hw[107], reg2hw[100], reg2hw[93], reg2hw[86], reg2hw[79], reg2hw[72], reg2hw[65], reg2hw[58], reg2hw[51], reg2hw[44], reg2hw[37], reg2hw[30], reg2hw[23], reg2hw[16], reg2hw[9], reg2hw[2], reg2hw[218], reg2hw[211], reg2hw[204], reg2hw[197], reg2hw[190], reg2hw[183], reg2hw[176], reg2hw[169], reg2hw[162], reg2hw[155], reg2hw[148], reg2hw[141], reg2hw[134], reg2hw[127], reg2hw[120], reg2hw[113], reg2hw[106], reg2hw[99], reg2hw[92], reg2hw[85], reg2hw[78], reg2hw[71], reg2hw[64], reg2hw[57], reg2hw[50], reg2hw[43], reg2hw[36], reg2hw[29], reg2hw[22], reg2hw[15], reg2hw[8], reg2hw[1], reg2hw[217], reg2hw[210], reg2hw[203], reg2hw[196], reg2hw[189], reg2hw[182], reg2hw[175], reg2hw[168], reg2hw[161], reg2hw[154], reg2hw[147], reg2hw[140], reg2hw[133], reg2hw[126], reg2hw[119], reg2hw[112], reg2hw[105], reg2hw[98], reg2hw[91], reg2hw[84], reg2hw[77], reg2hw[70], reg2hw[63], reg2hw[56], reg2hw[49], reg2hw[42], reg2hw[35], reg2hw[28], reg2hw[21], reg2hw[14], reg2hw[7], reg2hw[0] };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/common_cells/lzc.sv:17.8" *)
module \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper (empty_o, in_i, cnt_o);
  (* src = "../rtl/common_cells/lzc.sv:30.32" *)
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  (* src = "../rtl/common_cells/lzc.sv:32.32" *)
  output empty_o;
  wire empty_o;
  wire [4:0] \gen_lzc.index_nodes ;
  wire [2:0] \gen_lzc.sel_nodes ;
  (* src = "../rtl/common_cells/lzc.sv:28.32" *)
  input [3:0] in_i;
  wire [3:0] in_i;
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign cnt_o = \gen_lzc.sel_nodes [1] ? { 1'h0, \gen_lzc.index_nodes [2] } : { 1'h1, \gen_lzc.index_nodes [4] };
  assign \gen_lzc.index_nodes [2] = ~ in_i[0];
  assign \gen_lzc.index_nodes [4] = ~ in_i[2];
  assign { \gen_lzc.index_nodes [3], \gen_lzc.index_nodes [1:0] } = { 1'h0, cnt_o };
endmodule

(* src = "../rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18192 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18197 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18200 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$18202 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$18207 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$18210 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18212 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18217 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18220 ;
  wire \$auto$builder.cc:338:Biop$2887 ;
  wire \$auto$builder.cc:338:Biop$2889 ;
  wire \$auto$builder.cc:338:Biop$2891 ;
  wire \$auto$builder.cc:338:Biop$2895 ;
  wire \$auto$builder.cc:338:Biop$2897 ;
  wire \$auto$builder.cc:338:Biop$2977 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17334 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:2874:Mux$2933 ;
  wire \$auto$rtlil.cc:2874:Mux$2943 ;
  (* unused_bits = "1" *)
  wire [36:0] \$auto$rtlil.cc:2874:Mux$2961 ;
  wire [359:0] \$auto$rtlil.cc:2875:Bwmux$2927 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$auto$rtlil.cc:2895:Bmux$2931 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$auto$rtlil.cc:2895:Bmux$2941 ;
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$auto$rtlil.cc:2896:Demux$2909 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2934 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2935 ;
  (* src = "../rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "../rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "../rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "../rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "../rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "../rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "../rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "../rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "../rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "../rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$auto$bmuxmap.cc:84:execute$18192 [36:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18192 [73:37] = sbr_port_select_i[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18192 [110:74] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18192 [147:111] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18197 [36:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18192 [73:37] : \$auto$bmuxmap.cc:84:execute$18192 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18197 [73:37] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18192 [147:111] : \$auto$bmuxmap.cc:84:execute$18192 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18200  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18197 [73:37] : \$auto$bmuxmap.cc:84:execute$18197 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18202 [71:0] = sbr_port_select_i[0] ? mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$18202 [143:72] = sbr_port_select_i[0] ? mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$18202 [215:144] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$18202 [287:216] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18207 [71:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18202 [143:72] : \$auto$bmuxmap.cc:84:execute$18202 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18207 [143:72] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18202 [287:216] : \$auto$bmuxmap.cc:84:execute$18202 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$18210  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18207 [143:72] : \$auto$bmuxmap.cc:84:execute$18207 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18212 [36:0] = select_q[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18212 [73:37] = select_q[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18212 [110:74] = select_q[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18212 [147:111] = select_q[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18217 [36:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18212 [73:37] : \$auto$bmuxmap.cc:84:execute$18212 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18217 [73:37] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18212 [147:111] : \$auto$bmuxmap.cc:84:execute$18212 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18220  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$18217 [73:37] : \$auto$bmuxmap.cc:84:execute$18217 [36:0];
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$auto$builder.cc:128:Bwmux$2926  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17334 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [288], 1'h0, \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [216], 1'h0, \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [144], 1'h0, \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [72], 1'h0, \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], \$auto$rtlil.cc:2896:Demux$2909 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$2927 )
  );
  assign \$auto$builder.cc:338:Biop$2887  = sbr_port_select_i == select_q;
  assign \$auto$builder.cc:338:Biop$2889  = ~ in_flight;
  assign \$auto$builder.cc:338:Biop$2891  = \$auto$builder.cc:338:Biop$2887  || \$auto$builder.cc:338:Biop$2889 ;
  assign \$auto$builder.cc:338:Biop$2895  = in_flight && sbr_port_rsp_o[0];
  assign \$auto$builder.cc:338:Biop$2897  = \$auto$builder.cc:338:Biop$2891  || \$auto$builder.cc:338:Biop$2895 ;
  assign cnt_up = \$auto$rtlil.cc:2874:Mux$2943  && \$auto$rtlil.cc:2874:Mux$2933 [1];
  assign \$auto$builder.cc:338:Biop$2977  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$auto$rtlil.cc:2896:Demux$2909 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:2896:Demux$2909 [72] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:2896:Demux$2909 [144] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:2896:Demux$2909 [216] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:2896:Demux$2909 [288] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:2896:Demux$2909 [360] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:2896:Demux$2909 [432] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:2896:Demux$2909 [504] = sbr_port_select_i == 3'h7;
  (* src = "../rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17334  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:2896:Demux$2909 [288], \$auto$rtlil.cc:2896:Demux$2909 [216], \$auto$rtlil.cc:2896:Demux$2909 [144], \$auto$rtlil.cc:2896:Demux$2909 [72], \$auto$rtlil.cc:2896:Demux$2909 [0] };
  assign \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2935  = \$auto$builder.cc:338:Biop$2897  & (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2874:Mux$2933 [1];
  assign \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2934  = \$auto$builder.cc:338:Biop$2897  ? (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2875:Bwmux$2927  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_gnt = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2935 ;
  assign mgr_ports_req_o = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2934 ;
  (* src = "../rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$auto$builder.cc:338:Biop$2977 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$2961 [36:2], \$auto$rtlil.cc:2874:Mux$2961 [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:2895:Bmux$2931 [1:0] = \$auto$rtlil.cc:2874:Mux$2933 ;
  assign \$auto$rtlil.cc:2895:Bmux$2941 [0] = \$auto$rtlil.cc:2874:Mux$2943 ;
  assign { \$auto$rtlil.cc:2896:Demux$2909 [575:505], \$auto$rtlil.cc:2896:Demux$2909 [503:433], \$auto$rtlil.cc:2896:Demux$2909 [431:361], \$auto$rtlil.cc:2896:Demux$2909 [359:289], \$auto$rtlil.cc:2896:Demux$2909 [287:217], \$auto$rtlil.cc:2896:Demux$2909 [215:145], \$auto$rtlil.cc:2896:Demux$2909 [143:73], \$auto$rtlil.cc:2896:Demux$2909 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:2895:Bmux$2931 [36:2], \$auto$rtlil.cc:2874:Mux$2933  } = \$auto$bmuxmap.cc:84:execute$18200 ;
  assign { \$auto$rtlil.cc:2895:Bmux$2941 [71:1], \$auto$rtlil.cc:2874:Mux$2943  } = \$auto$bmuxmap.cc:84:execute$18210 ;
  assign { sbr_port_rsp_o[36:2], \$auto$rtlil.cc:2874:Mux$2961 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$18220 ;
endmodule

(* src = "../rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18222 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18227 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18230 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$18232 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$18237 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$18240 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18242 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18247 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18250 ;
  wire \$auto$builder.cc:338:Biop$2996 ;
  wire \$auto$builder.cc:338:Biop$2998 ;
  wire \$auto$builder.cc:338:Biop$3000 ;
  wire \$auto$builder.cc:338:Biop$3004 ;
  wire \$auto$builder.cc:338:Biop$3006 ;
  wire \$auto$builder.cc:338:Biop$3086 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17337 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:2874:Mux$3042 ;
  wire \$auto$rtlil.cc:2874:Mux$3052 ;
  (* unused_bits = "1" *)
  wire [36:0] \$auto$rtlil.cc:2874:Mux$3070 ;
  wire [359:0] \$auto$rtlil.cc:2875:Bwmux$3036 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$auto$rtlil.cc:2895:Bmux$3040 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$auto$rtlil.cc:2895:Bmux$3050 ;
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$auto$rtlil.cc:2896:Demux$3018 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3043 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3044 ;
  (* src = "../rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "../rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "../rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "../rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "../rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "../rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "../rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "../rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "../rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "../rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$auto$bmuxmap.cc:84:execute$18222 [36:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18222 [73:37] = sbr_port_select_i[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18222 [110:74] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18222 [147:111] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18227 [36:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18222 [73:37] : \$auto$bmuxmap.cc:84:execute$18222 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18227 [73:37] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18222 [147:111] : \$auto$bmuxmap.cc:84:execute$18222 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18230  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18227 [73:37] : \$auto$bmuxmap.cc:84:execute$18227 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18232 [71:0] = sbr_port_select_i[0] ? mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$18232 [143:72] = sbr_port_select_i[0] ? mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$18232 [215:144] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$18232 [287:216] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18237 [71:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18232 [143:72] : \$auto$bmuxmap.cc:84:execute$18232 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18237 [143:72] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18232 [287:216] : \$auto$bmuxmap.cc:84:execute$18232 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$18240  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18237 [143:72] : \$auto$bmuxmap.cc:84:execute$18237 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18242 [36:0] = select_q[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18242 [73:37] = select_q[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18242 [110:74] = select_q[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18242 [147:111] = select_q[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18247 [36:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18242 [73:37] : \$auto$bmuxmap.cc:84:execute$18242 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18247 [73:37] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18242 [147:111] : \$auto$bmuxmap.cc:84:execute$18242 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18250  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$18247 [73:37] : \$auto$bmuxmap.cc:84:execute$18247 [36:0];
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$auto$builder.cc:128:Bwmux$3035  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17337 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [288], 1'h0, \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [216], 1'h0, \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [144], 1'h0, \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [72], 1'h0, \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], \$auto$rtlil.cc:2896:Demux$3018 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3036 )
  );
  assign \$auto$builder.cc:338:Biop$2996  = sbr_port_select_i == select_q;
  assign \$auto$builder.cc:338:Biop$2998  = ~ in_flight;
  assign \$auto$builder.cc:338:Biop$3000  = \$auto$builder.cc:338:Biop$2996  || \$auto$builder.cc:338:Biop$2998 ;
  assign \$auto$builder.cc:338:Biop$3004  = in_flight && sbr_port_rsp_o[0];
  assign \$auto$builder.cc:338:Biop$3006  = \$auto$builder.cc:338:Biop$3000  || \$auto$builder.cc:338:Biop$3004 ;
  assign cnt_up = \$auto$rtlil.cc:2874:Mux$3052  && \$auto$rtlil.cc:2874:Mux$3042 [1];
  assign \$auto$builder.cc:338:Biop$3086  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$auto$rtlil.cc:2896:Demux$3018 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:2896:Demux$3018 [72] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:2896:Demux$3018 [144] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:2896:Demux$3018 [216] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:2896:Demux$3018 [288] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:2896:Demux$3018 [360] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:2896:Demux$3018 [432] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:2896:Demux$3018 [504] = sbr_port_select_i == 3'h7;
  (* src = "../rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17337  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:2896:Demux$3018 [288], \$auto$rtlil.cc:2896:Demux$3018 [216], \$auto$rtlil.cc:2896:Demux$3018 [144], \$auto$rtlil.cc:2896:Demux$3018 [72], \$auto$rtlil.cc:2896:Demux$3018 [0] };
  assign \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3044  = \$auto$builder.cc:338:Biop$3006  & (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2874:Mux$3042 [1];
  assign \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3043  = \$auto$builder.cc:338:Biop$3006  ? (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2875:Bwmux$3036  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_gnt = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3044 ;
  assign mgr_ports_req_o = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3043 ;
  (* src = "../rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$auto$builder.cc:338:Biop$3086 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$3070 [36:2], \$auto$rtlil.cc:2874:Mux$3070 [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:2895:Bmux$3040 [1:0] = \$auto$rtlil.cc:2874:Mux$3042 ;
  assign \$auto$rtlil.cc:2895:Bmux$3050 [0] = \$auto$rtlil.cc:2874:Mux$3052 ;
  assign { \$auto$rtlil.cc:2896:Demux$3018 [575:505], \$auto$rtlil.cc:2896:Demux$3018 [503:433], \$auto$rtlil.cc:2896:Demux$3018 [431:361], \$auto$rtlil.cc:2896:Demux$3018 [359:289], \$auto$rtlil.cc:2896:Demux$3018 [287:217], \$auto$rtlil.cc:2896:Demux$3018 [215:145], \$auto$rtlil.cc:2896:Demux$3018 [143:73], \$auto$rtlil.cc:2896:Demux$3018 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:2895:Bmux$3040 [36:2], \$auto$rtlil.cc:2874:Mux$3042  } = \$auto$bmuxmap.cc:84:execute$18230 ;
  assign { \$auto$rtlil.cc:2895:Bmux$3050 [71:1], \$auto$rtlil.cc:2874:Mux$3052  } = \$auto$bmuxmap.cc:84:execute$18240 ;
  assign { sbr_port_rsp_o[36:2], \$auto$rtlil.cc:2874:Mux$3070 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$18250 ;
endmodule

(* src = "../rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18252 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18257 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18260 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$18262 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$18267 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$18270 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18272 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18277 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18280 ;
  wire \$auto$builder.cc:338:Biop$3105 ;
  wire \$auto$builder.cc:338:Biop$3107 ;
  wire \$auto$builder.cc:338:Biop$3109 ;
  wire \$auto$builder.cc:338:Biop$3113 ;
  wire \$auto$builder.cc:338:Biop$3115 ;
  wire \$auto$builder.cc:338:Biop$3195 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17340 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:2874:Mux$3151 ;
  wire \$auto$rtlil.cc:2874:Mux$3161 ;
  (* unused_bits = "1" *)
  wire [36:0] \$auto$rtlil.cc:2874:Mux$3179 ;
  wire [359:0] \$auto$rtlil.cc:2875:Bwmux$3145 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$auto$rtlil.cc:2895:Bmux$3149 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$auto$rtlil.cc:2895:Bmux$3159 ;
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$auto$rtlil.cc:2896:Demux$3127 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3152 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3153 ;
  (* src = "../rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "../rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "../rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "../rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "../rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "../rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "../rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "../rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "../rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "../rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$auto$bmuxmap.cc:84:execute$18252 [36:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18252 [73:37] = sbr_port_select_i[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18252 [110:74] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18252 [147:111] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18257 [36:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18252 [73:37] : \$auto$bmuxmap.cc:84:execute$18252 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18257 [73:37] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18252 [147:111] : \$auto$bmuxmap.cc:84:execute$18252 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18260  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18257 [73:37] : \$auto$bmuxmap.cc:84:execute$18257 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18262 [71:0] = sbr_port_select_i[0] ? mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$18262 [143:72] = sbr_port_select_i[0] ? mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$18262 [215:144] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$18262 [287:216] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18267 [71:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18262 [143:72] : \$auto$bmuxmap.cc:84:execute$18262 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18267 [143:72] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18262 [287:216] : \$auto$bmuxmap.cc:84:execute$18262 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$18270  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18267 [143:72] : \$auto$bmuxmap.cc:84:execute$18267 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18272 [36:0] = select_q[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18272 [73:37] = select_q[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18272 [110:74] = select_q[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18272 [147:111] = select_q[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18277 [36:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18272 [73:37] : \$auto$bmuxmap.cc:84:execute$18272 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18277 [73:37] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18272 [147:111] : \$auto$bmuxmap.cc:84:execute$18272 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18280  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$18277 [73:37] : \$auto$bmuxmap.cc:84:execute$18277 [36:0];
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$auto$builder.cc:128:Bwmux$3144  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17340 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [288], 1'h0, \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [216], 1'h0, \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [144], 1'h0, \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [72], 1'h0, \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], \$auto$rtlil.cc:2896:Demux$3127 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3145 )
  );
  assign \$auto$builder.cc:338:Biop$3105  = sbr_port_select_i == select_q;
  assign \$auto$builder.cc:338:Biop$3107  = ~ in_flight;
  assign \$auto$builder.cc:338:Biop$3109  = \$auto$builder.cc:338:Biop$3105  || \$auto$builder.cc:338:Biop$3107 ;
  assign \$auto$builder.cc:338:Biop$3113  = in_flight && sbr_port_rsp_o[0];
  assign \$auto$builder.cc:338:Biop$3115  = \$auto$builder.cc:338:Biop$3109  || \$auto$builder.cc:338:Biop$3113 ;
  assign cnt_up = \$auto$rtlil.cc:2874:Mux$3161  && \$auto$rtlil.cc:2874:Mux$3151 [1];
  assign \$auto$builder.cc:338:Biop$3195  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$auto$rtlil.cc:2896:Demux$3127 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:2896:Demux$3127 [72] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:2896:Demux$3127 [144] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:2896:Demux$3127 [216] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:2896:Demux$3127 [288] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:2896:Demux$3127 [360] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:2896:Demux$3127 [432] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:2896:Demux$3127 [504] = sbr_port_select_i == 3'h7;
  (* src = "../rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17340  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:2896:Demux$3127 [288], \$auto$rtlil.cc:2896:Demux$3127 [216], \$auto$rtlil.cc:2896:Demux$3127 [144], \$auto$rtlil.cc:2896:Demux$3127 [72], \$auto$rtlil.cc:2896:Demux$3127 [0] };
  assign \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3153  = \$auto$builder.cc:338:Biop$3115  & (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2874:Mux$3151 [1];
  assign \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3152  = \$auto$builder.cc:338:Biop$3115  ? (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2875:Bwmux$3145  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_gnt = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3153 ;
  assign mgr_ports_req_o = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3152 ;
  (* src = "../rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$auto$builder.cc:338:Biop$3195 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$3179 [36:2], \$auto$rtlil.cc:2874:Mux$3179 [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:2895:Bmux$3149 [1:0] = \$auto$rtlil.cc:2874:Mux$3151 ;
  assign \$auto$rtlil.cc:2895:Bmux$3159 [0] = \$auto$rtlil.cc:2874:Mux$3161 ;
  assign { \$auto$rtlil.cc:2896:Demux$3127 [575:505], \$auto$rtlil.cc:2896:Demux$3127 [503:433], \$auto$rtlil.cc:2896:Demux$3127 [431:361], \$auto$rtlil.cc:2896:Demux$3127 [359:289], \$auto$rtlil.cc:2896:Demux$3127 [287:217], \$auto$rtlil.cc:2896:Demux$3127 [215:145], \$auto$rtlil.cc:2896:Demux$3127 [143:73], \$auto$rtlil.cc:2896:Demux$3127 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:2895:Bmux$3149 [36:2], \$auto$rtlil.cc:2874:Mux$3151  } = \$auto$bmuxmap.cc:84:execute$18260 ;
  assign { \$auto$rtlil.cc:2895:Bmux$3159 [71:1], \$auto$rtlil.cc:2874:Mux$3161  } = \$auto$bmuxmap.cc:84:execute$18270 ;
  assign { sbr_port_rsp_o[36:2], \$auto$rtlil.cc:2874:Mux$3179 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$18280 ;
endmodule

(* src = "../rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18282 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18287 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18290 ;
  wire [287:0] \$auto$bmuxmap.cc:84:execute$18292 ;
  wire [143:0] \$auto$bmuxmap.cc:84:execute$18297 ;
  wire [71:0] \$auto$bmuxmap.cc:84:execute$18300 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18302 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18307 ;
  wire [36:0] \$auto$bmuxmap.cc:84:execute$18310 ;
  wire \$auto$builder.cc:338:Biop$3214 ;
  wire \$auto$builder.cc:338:Biop$3216 ;
  wire \$auto$builder.cc:338:Biop$3218 ;
  wire \$auto$builder.cc:338:Biop$3222 ;
  wire \$auto$builder.cc:338:Biop$3224 ;
  wire \$auto$builder.cc:338:Biop$3304 ;
  wire [4:0] \$auto$opt_expr.cc:205:group_cell_inputs$17343 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:2874:Mux$3260 ;
  wire \$auto$rtlil.cc:2874:Mux$3270 ;
  (* unused_bits = "1" *)
  wire [36:0] \$auto$rtlil.cc:2874:Mux$3288 ;
  wire [359:0] \$auto$rtlil.cc:2875:Bwmux$3254 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36" *)
  wire [36:0] \$auto$rtlil.cc:2895:Bmux$3258 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71" *)
  wire [71:0] \$auto$rtlil.cc:2895:Bmux$3268 ;
  (* unused_bits = "360 432 504" *)
  wire [575:0] \$auto$rtlil.cc:2896:Demux$3236 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [359:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3261 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3262 ;
  (* src = "../rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "../rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "../rtl/obi/obi_demux.sv:28.38" *)
  output [359:0] mgr_ports_req_o;
  wire [359:0] mgr_ports_req_o;
  (* src = "../rtl/obi/obi_demux.sv:29.38" *)
  input [184:0] mgr_ports_rsp_i;
  wire [184:0] mgr_ports_rsp_i;
  (* src = "../rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "../rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "../rtl/obi/obi_demux.sv:25.38" *)
  input [71:0] sbr_port_req_i;
  wire [71:0] sbr_port_req_i;
  (* src = "../rtl/obi/obi_demux.sv:26.38" *)
  output [36:0] sbr_port_rsp_o;
  wire [36:0] sbr_port_rsp_o;
  (* src = "../rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "../rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$auto$bmuxmap.cc:84:execute$18282 [36:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18282 [73:37] = sbr_port_select_i[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18282 [110:74] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18282 [147:111] = sbr_port_select_i[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18287 [36:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18282 [73:37] : \$auto$bmuxmap.cc:84:execute$18282 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18287 [73:37] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18282 [147:111] : \$auto$bmuxmap.cc:84:execute$18282 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18290  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18287 [73:37] : \$auto$bmuxmap.cc:84:execute$18287 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18292 [71:0] = sbr_port_select_i[0] ? mgr_ports_req_o[143:72] : mgr_ports_req_o[71:0];
  assign \$auto$bmuxmap.cc:84:execute$18292 [143:72] = sbr_port_select_i[0] ? mgr_ports_req_o[287:216] : mgr_ports_req_o[215:144];
  assign \$auto$bmuxmap.cc:84:execute$18292 [215:144] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : mgr_ports_req_o[359:288];
  assign \$auto$bmuxmap.cc:84:execute$18292 [287:216] = sbr_port_select_i[0] ? 72'hxxxxxxxxxxxxxxxxxx : 72'hxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18297 [71:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18292 [143:72] : \$auto$bmuxmap.cc:84:execute$18292 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18297 [143:72] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18292 [287:216] : \$auto$bmuxmap.cc:84:execute$18292 [215:144];
  assign \$auto$bmuxmap.cc:84:execute$18300  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18297 [143:72] : \$auto$bmuxmap.cc:84:execute$18297 [71:0];
  assign \$auto$bmuxmap.cc:84:execute$18302 [36:0] = select_q[0] ? mgr_ports_rsp_i[73:37] : mgr_ports_rsp_i[36:0];
  assign \$auto$bmuxmap.cc:84:execute$18302 [73:37] = select_q[0] ? mgr_ports_rsp_i[147:111] : mgr_ports_rsp_i[110:74];
  assign \$auto$bmuxmap.cc:84:execute$18302 [110:74] = select_q[0] ? 37'hxxxxxxxxxx : mgr_ports_rsp_i[184:148];
  assign \$auto$bmuxmap.cc:84:execute$18302 [147:111] = select_q[0] ? 37'hxxxxxxxxxx : 37'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18307 [36:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18302 [73:37] : \$auto$bmuxmap.cc:84:execute$18302 [36:0];
  assign \$auto$bmuxmap.cc:84:execute$18307 [73:37] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18302 [147:111] : \$auto$bmuxmap.cc:84:execute$18302 [110:74];
  assign \$auto$bmuxmap.cc:84:execute$18310  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$18307 [73:37] : \$auto$bmuxmap.cc:84:execute$18307 [36:0];
  \$bwmux  #(
    .WIDTH(32'd360)
  ) \$auto$builder.cc:128:Bwmux$3253  (
    .A({ 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [4], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [3], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [2], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [1], 71'h000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17343 [0] }),
    .B({ sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx, sbr_port_req_i[71:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [288], 1'h0, \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [216], 1'h0, \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [144], 1'h0, \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [72], 1'h0, \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], \$auto$rtlil.cc:2896:Demux$3236 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3254 )
  );
  assign \$auto$builder.cc:338:Biop$3214  = sbr_port_select_i == select_q;
  assign \$auto$builder.cc:338:Biop$3216  = ~ in_flight;
  assign \$auto$builder.cc:338:Biop$3218  = \$auto$builder.cc:338:Biop$3214  || \$auto$builder.cc:338:Biop$3216 ;
  assign \$auto$builder.cc:338:Biop$3222  = in_flight && sbr_port_rsp_o[0];
  assign \$auto$builder.cc:338:Biop$3224  = \$auto$builder.cc:338:Biop$3218  || \$auto$builder.cc:338:Biop$3222 ;
  assign cnt_up = \$auto$rtlil.cc:2874:Mux$3270  && \$auto$rtlil.cc:2874:Mux$3260 [1];
  assign \$auto$builder.cc:338:Biop$3304  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$auto$rtlil.cc:2896:Demux$3236 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:2896:Demux$3236 [72] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:2896:Demux$3236 [144] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:2896:Demux$3236 [216] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:2896:Demux$3236 [288] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:2896:Demux$3236 [360] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:2896:Demux$3236 [432] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:2896:Demux$3236 [504] = sbr_port_select_i == 3'h7;
  (* src = "../rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17343  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:2896:Demux$3236 [288], \$auto$rtlil.cc:2896:Demux$3236 [216], \$auto$rtlil.cc:2896:Demux$3236 [144], \$auto$rtlil.cc:2896:Demux$3236 [72], \$auto$rtlil.cc:2896:Demux$3236 [0] };
  assign \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3262  = \$auto$builder.cc:338:Biop$3224  & (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2874:Mux$3260 [1];
  assign \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3261  = \$auto$builder.cc:338:Biop$3224  ? (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2875:Bwmux$3254  : 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_gnt = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$3262 ;
  assign mgr_ports_req_o = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 360'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$3261 ;
  (* src = "../rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$auto$builder.cc:338:Biop$3304 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$3288 [36:2], \$auto$rtlil.cc:2874:Mux$3288 [0] } = { sbr_port_rsp_o[36:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:2895:Bmux$3258 [1:0] = \$auto$rtlil.cc:2874:Mux$3260 ;
  assign \$auto$rtlil.cc:2895:Bmux$3268 [0] = \$auto$rtlil.cc:2874:Mux$3270 ;
  assign { \$auto$rtlil.cc:2896:Demux$3236 [575:505], \$auto$rtlil.cc:2896:Demux$3236 [503:433], \$auto$rtlil.cc:2896:Demux$3236 [431:361], \$auto$rtlil.cc:2896:Demux$3236 [359:289], \$auto$rtlil.cc:2896:Demux$3236 [287:217], \$auto$rtlil.cc:2896:Demux$3236 [215:145], \$auto$rtlil.cc:2896:Demux$3236 [143:73], \$auto$rtlil.cc:2896:Demux$3236 [71:1] } = 568'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:2895:Bmux$3258 [36:2], \$auto$rtlil.cc:2874:Mux$3260  } = \$auto$bmuxmap.cc:84:execute$18290 ;
  assign { \$auto$rtlil.cc:2895:Bmux$3268 [71:1], \$auto$rtlil.cc:2874:Mux$3270  } = \$auto$bmuxmap.cc:84:execute$18300 ;
  assign { sbr_port_rsp_o[36:2], \$auto$rtlil.cc:2874:Mux$3288 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$18310 ;
endmodule

(* src = "../rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_croc.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire [155:0] \$auto$bmuxmap.cc:84:execute$18312 ;
  wire [77:0] \$auto$bmuxmap.cc:84:execute$18317 ;
  wire [38:0] \$auto$bmuxmap.cc:84:execute$18320 ;
  wire [295:0] \$auto$bmuxmap.cc:84:execute$18322 ;
  wire [147:0] \$auto$bmuxmap.cc:84:execute$18327 ;
  wire [73:0] \$auto$bmuxmap.cc:84:execute$18330 ;
  wire [155:0] \$auto$bmuxmap.cc:84:execute$18332 ;
  wire [77:0] \$auto$bmuxmap.cc:84:execute$18337 ;
  wire [38:0] \$auto$bmuxmap.cc:84:execute$18340 ;
  wire \$auto$builder.cc:338:Biop$1042 ;
  wire \$auto$builder.cc:338:Biop$1044 ;
  wire \$auto$builder.cc:338:Biop$1046 ;
  wire \$auto$builder.cc:338:Biop$1050 ;
  wire \$auto$builder.cc:338:Biop$1052 ;
  wire \$auto$builder.cc:338:Biop$1132 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17346 ;
  (* unused_bits = "0" *)
  wire [1:0] \$auto$rtlil.cc:2874:Mux$1088 ;
  wire \$auto$rtlil.cc:2874:Mux$1098 ;
  (* unused_bits = "1" *)
  wire [38:0] \$auto$rtlil.cc:2874:Mux$1116 ;
  wire [443:0] \$auto$rtlil.cc:2875:Bwmux$1082 ;
  (* unused_bits = "0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38" *)
  wire [38:0] \$auto$rtlil.cc:2895:Bmux$1086 ;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" *)
  wire [73:0] \$auto$rtlil.cc:2895:Bmux$1096 ;
  (* unused_bits = "444 518" *)
  wire [591:0] \$auto$rtlil.cc:2896:Demux$1064 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [443:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$1089 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$1090 ;
  (* src = "../rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "../rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "../rtl/obi/obi_demux.sv:28.38" *)
  output [443:0] mgr_ports_req_o;
  wire [443:0] mgr_ports_req_o;
  (* src = "../rtl/obi/obi_demux.sv:29.38" *)
  input [233:0] mgr_ports_rsp_i;
  wire [233:0] mgr_ports_rsp_i;
  (* src = "../rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "../rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "../rtl/obi/obi_demux.sv:25.38" *)
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  (* src = "../rtl/obi/obi_demux.sv:26.38" *)
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  (* src = "../rtl/obi/obi_demux.sv:24.38" *)
  input [2:0] sbr_port_select_i;
  wire [2:0] sbr_port_select_i;
  (* src = "../rtl/obi/obi_demux.sv:44.22" *)
  reg [2:0] select_q;
  assign \$auto$bmuxmap.cc:84:execute$18312 [38:0] = sbr_port_select_i[0] ? mgr_ports_rsp_i[77:39] : mgr_ports_rsp_i[38:0];
  assign \$auto$bmuxmap.cc:84:execute$18312 [77:39] = sbr_port_select_i[0] ? mgr_ports_rsp_i[155:117] : mgr_ports_rsp_i[116:78];
  assign \$auto$bmuxmap.cc:84:execute$18312 [116:78] = sbr_port_select_i[0] ? mgr_ports_rsp_i[233:195] : mgr_ports_rsp_i[194:156];
  assign \$auto$bmuxmap.cc:84:execute$18312 [155:117] = sbr_port_select_i[0] ? 39'hxxxxxxxxxx : 39'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18317 [38:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18312 [77:39] : \$auto$bmuxmap.cc:84:execute$18312 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$18317 [77:39] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18312 [155:117] : \$auto$bmuxmap.cc:84:execute$18312 [116:78];
  assign \$auto$bmuxmap.cc:84:execute$18320  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18317 [77:39] : \$auto$bmuxmap.cc:84:execute$18317 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$18322 [73:0] = sbr_port_select_i[0] ? mgr_ports_req_o[147:74] : mgr_ports_req_o[73:0];
  assign \$auto$bmuxmap.cc:84:execute$18322 [147:74] = sbr_port_select_i[0] ? mgr_ports_req_o[295:222] : mgr_ports_req_o[221:148];
  assign \$auto$bmuxmap.cc:84:execute$18322 [221:148] = sbr_port_select_i[0] ? mgr_ports_req_o[443:370] : mgr_ports_req_o[369:296];
  assign \$auto$bmuxmap.cc:84:execute$18322 [295:222] = sbr_port_select_i[0] ? 74'hxxxxxxxxxxxxxxxxxxx : 74'hxxxxxxxxxxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18327 [73:0] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18322 [147:74] : \$auto$bmuxmap.cc:84:execute$18322 [73:0];
  assign \$auto$bmuxmap.cc:84:execute$18327 [147:74] = sbr_port_select_i[1] ? \$auto$bmuxmap.cc:84:execute$18322 [295:222] : \$auto$bmuxmap.cc:84:execute$18322 [221:148];
  assign \$auto$bmuxmap.cc:84:execute$18330  = sbr_port_select_i[2] ? \$auto$bmuxmap.cc:84:execute$18327 [147:74] : \$auto$bmuxmap.cc:84:execute$18327 [73:0];
  assign \$auto$bmuxmap.cc:84:execute$18332 [38:0] = select_q[0] ? mgr_ports_rsp_i[77:39] : mgr_ports_rsp_i[38:0];
  assign \$auto$bmuxmap.cc:84:execute$18332 [77:39] = select_q[0] ? mgr_ports_rsp_i[155:117] : mgr_ports_rsp_i[116:78];
  assign \$auto$bmuxmap.cc:84:execute$18332 [116:78] = select_q[0] ? mgr_ports_rsp_i[233:195] : mgr_ports_rsp_i[194:156];
  assign \$auto$bmuxmap.cc:84:execute$18332 [155:117] = select_q[0] ? 39'hxxxxxxxxxx : 39'hxxxxxxxxxx;
  assign \$auto$bmuxmap.cc:84:execute$18337 [38:0] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18332 [77:39] : \$auto$bmuxmap.cc:84:execute$18332 [38:0];
  assign \$auto$bmuxmap.cc:84:execute$18337 [77:39] = select_q[1] ? \$auto$bmuxmap.cc:84:execute$18332 [155:117] : \$auto$bmuxmap.cc:84:execute$18332 [116:78];
  assign \$auto$bmuxmap.cc:84:execute$18340  = select_q[2] ? \$auto$bmuxmap.cc:84:execute$18337 [77:39] : \$auto$bmuxmap.cc:84:execute$18337 [38:0];
  \$bwmux  #(
    .WIDTH(32'd444)
  ) \$auto$builder.cc:128:Bwmux$1081  (
    .A({ 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [5], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [4], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [3], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [2], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [1], 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17346 [0] }),
    .B({ sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx, sbr_port_req_i[73:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [370], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [296], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [222], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [148], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [74], 1'h0, \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], \$auto$rtlil.cc:2896:Demux$1064 [0], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$1082 )
  );
  assign \$auto$builder.cc:338:Biop$1042  = sbr_port_select_i == select_q;
  assign \$auto$builder.cc:338:Biop$1044  = ~ in_flight;
  assign \$auto$builder.cc:338:Biop$1046  = \$auto$builder.cc:338:Biop$1042  || \$auto$builder.cc:338:Biop$1044 ;
  assign \$auto$builder.cc:338:Biop$1050  = in_flight && sbr_port_rsp_o[0];
  assign \$auto$builder.cc:338:Biop$1052  = \$auto$builder.cc:338:Biop$1046  || \$auto$builder.cc:338:Biop$1050 ;
  assign cnt_up = \$auto$rtlil.cc:2874:Mux$1098  && \$auto$rtlil.cc:2874:Mux$1088 [1];
  assign \$auto$builder.cc:338:Biop$1132  = cnt_up ^ sbr_port_rsp_o[0];
  assign \$auto$rtlil.cc:2896:Demux$1064 [0] = sbr_port_select_i == 3'h0;
  assign \$auto$rtlil.cc:2896:Demux$1064 [74] = sbr_port_select_i == 3'h1;
  assign \$auto$rtlil.cc:2896:Demux$1064 [148] = sbr_port_select_i == 3'h2;
  assign \$auto$rtlil.cc:2896:Demux$1064 [222] = sbr_port_select_i == 3'h3;
  assign \$auto$rtlil.cc:2896:Demux$1064 [296] = sbr_port_select_i == 3'h4;
  assign \$auto$rtlil.cc:2896:Demux$1064 [370] = sbr_port_select_i == 3'h5;
  assign \$auto$rtlil.cc:2896:Demux$1064 [444] = sbr_port_select_i == 3'h6;
  assign \$auto$rtlil.cc:2896:Demux$1064 [518] = sbr_port_select_i == 3'h7;
  (* src = "../rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 3'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17346  = { sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0], sbr_port_req_i[0] } & { \$auto$rtlil.cc:2896:Demux$1064 [370], \$auto$rtlil.cc:2896:Demux$1064 [296], \$auto$rtlil.cc:2896:Demux$1064 [222], \$auto$rtlil.cc:2896:Demux$1064 [148], \$auto$rtlil.cc:2896:Demux$1064 [74], \$auto$rtlil.cc:2896:Demux$1064 [0] };
  assign \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$1090  = \$auto$builder.cc:338:Biop$1052  & (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2874:Mux$1088 [1];
  assign \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$1089  = \$auto$builder.cc:338:Biop$1052  ? (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2875:Bwmux$1082  : 444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_gnt = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$1090 ;
  assign mgr_ports_req_o = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 444'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$1089 ;
  (* src = "../rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_croc.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(sbr_port_rsp_o[0]),
    .en_i(\$auto$builder.cc:338:Biop$1132 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2874:Mux$1116 [38:2], \$auto$rtlil.cc:2874:Mux$1116 [0] } = { sbr_port_rsp_o[38:2], sbr_port_rsp_o[0] };
  assign \$auto$rtlil.cc:2895:Bmux$1086 [1:0] = \$auto$rtlil.cc:2874:Mux$1088 ;
  assign \$auto$rtlil.cc:2895:Bmux$1096 [0] = \$auto$rtlil.cc:2874:Mux$1098 ;
  assign { \$auto$rtlil.cc:2896:Demux$1064 [591:519], \$auto$rtlil.cc:2896:Demux$1064 [517:445], \$auto$rtlil.cc:2896:Demux$1064 [443:371], \$auto$rtlil.cc:2896:Demux$1064 [369:297], \$auto$rtlil.cc:2896:Demux$1064 [295:223], \$auto$rtlil.cc:2896:Demux$1064 [221:149], \$auto$rtlil.cc:2896:Demux$1064 [147:75], \$auto$rtlil.cc:2896:Demux$1064 [73:1] } = 584'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign sbr_port_rsp_o[1] = sbr_port_gnt;
  assign { \$auto$rtlil.cc:2895:Bmux$1086 [38:2], \$auto$rtlil.cc:2874:Mux$1088  } = \$auto$bmuxmap.cc:84:execute$18320 ;
  assign { \$auto$rtlil.cc:2895:Bmux$1096 [73:1], \$auto$rtlil.cc:2874:Mux$1098  } = \$auto$bmuxmap.cc:84:execute$18330 ;
  assign { sbr_port_rsp_o[38:2], \$auto$rtlil.cc:2874:Mux$1116 [1], sbr_port_rsp_o[0] } = \$auto$bmuxmap.cc:84:execute$18340 ;
endmodule

(* src = "../rtl/obi/obi_demux.sv:7.8" *)
module \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux (clk_i, rst_ni, mgr_ports_req_o, mgr_ports_rsp_i, sbr_port_select_i, sbr_port_req_i, sbr_port_rsp_o);
  wire \$auto$builder.cc:338:Biop$2639 ;
  wire \$auto$builder.cc:338:Biop$2641 ;
  wire \$auto$builder.cc:338:Biop$2643 ;
  wire \$auto$builder.cc:338:Biop$2647 ;
  wire \$auto$builder.cc:338:Biop$2649 ;
  wire \$auto$builder.cc:338:Biop$2709 ;
  wire \$auto$opt_expr.cc:205:group_cell_inputs$17351 ;
  wire \$auto$rtlil.cc:2791:Lt$2653 ;
  wire [73:0] \$auto$rtlil.cc:2874:Mux$2669 ;
  wire [73:0] \$auto$rtlil.cc:2875:Bwmux$2671 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire [73:0] \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2676 ;
  (* src = "../rtl/obi/obi_demux.sv:56.7-60.10" *)
  wire \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2677 ;
  (* src = "../rtl/obi/obi_demux.sv:21.38" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_demux.sv:39.9" *)
  wire cnt_up;
  (* src = "../rtl/obi/obi_demux.sv:40.28" *)
  wire in_flight;
  (* src = "../rtl/obi/obi_demux.sv:28.38" *)
  output [73:0] mgr_ports_req_o;
  wire [73:0] mgr_ports_req_o;
  (* src = "../rtl/obi/obi_demux.sv:29.38" *)
  input [38:0] mgr_ports_rsp_i;
  wire [38:0] mgr_ports_rsp_i;
  (* src = "../rtl/obi/obi_demux.sv:39.27" *)
  wire overflow;
  (* src = "../rtl/obi/obi_demux.sv:22.38" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_demux.sv:41.9" *)
  wire sbr_port_gnt;
  (* src = "../rtl/obi/obi_demux.sv:25.38" *)
  input [73:0] sbr_port_req_i;
  wire [73:0] sbr_port_req_i;
  (* src = "../rtl/obi/obi_demux.sv:26.38" *)
  output [38:0] sbr_port_rsp_o;
  wire [38:0] sbr_port_rsp_o;
  (* src = "../rtl/obi/obi_demux.sv:24.38" *)
  input sbr_port_select_i;
  wire sbr_port_select_i;
  (* src = "../rtl/obi/obi_demux.sv:44.22" *)
  reg select_q;
  assign \$auto$rtlil.cc:2874:Mux$2669 [73] = ~ sbr_port_select_i;
  \$bwmux  #(
    .WIDTH(32'd74)
  ) \$auto$builder.cc:128:Bwmux$2670  (
    .A({ 73'h0000000000000000000, \$auto$opt_expr.cc:205:group_cell_inputs$17351  }),
    .B({ sbr_port_req_i[73:1], 1'hx }),
    .S({ \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$2671 )
  );
  assign \$auto$builder.cc:338:Biop$2639  = sbr_port_select_i == select_q;
  assign \$auto$builder.cc:338:Biop$2641  = ~ in_flight;
  assign \$auto$builder.cc:338:Biop$2643  = \$auto$builder.cc:338:Biop$2639  || \$auto$builder.cc:338:Biop$2641 ;
  assign \$auto$builder.cc:338:Biop$2647  = in_flight && mgr_ports_rsp_i[0];
  assign \$auto$builder.cc:338:Biop$2649  = \$auto$builder.cc:338:Biop$2643  || \$auto$builder.cc:338:Biop$2647 ;
  assign cnt_up = mgr_ports_req_o[0] && mgr_ports_rsp_i[1];
  assign \$auto$builder.cc:338:Biop$2709  = cnt_up ^ mgr_ports_rsp_i[0];
  (* src = "../rtl/obi/obi_demux.sv:101.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) select_q <= 1'h0;
    else if (cnt_up) select_q <= sbr_port_select_i;
  assign \$auto$rtlil.cc:2791:Lt$2653  = ! sbr_port_select_i;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17351  = sbr_port_req_i[0] & \$auto$rtlil.cc:2791:Lt$2653 ;
  assign \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2677  = \$auto$builder.cc:338:Biop$2649  & (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) mgr_ports_rsp_i[1];
  assign \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2676  = \$auto$builder.cc:338:Biop$2649  ? (* src = "../rtl/obi/obi_demux.sv:56.93-60.10|../rtl/obi/obi_demux.sv:56.7-60.10" *) \$auto$rtlil.cc:2875:Bwmux$2671  : 74'h0000000000000000000;
  assign sbr_port_gnt = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\sbr_port_gnt$2677 ;
  assign mgr_ports_req_o = overflow ? (* src = "../rtl/obi/obi_demux.sv:56.7-60.10|../rtl/obi/obi_demux.sv:55.5-61.8" *) 74'h0000000000000000000 : \$auto$slang_frontend.cc:694:finish$\mgr_ports_req_o$2676 ;
  (* src = "../rtl/obi/obi_demux.sv:87.5" *)
  \delta_counter$croc_chip.i_croc_soc.i_user.i_obi_demux.i_counter  i_counter (
    .clear_i(1'h0),
    .clk_i(clk_i),
    .d_i(1'h0),
    .delta_i(1'h1),
    .down_i(mgr_ports_rsp_i[0]),
    .en_i(\$auto$builder.cc:338:Biop$2709 ),
    .load_i(1'h0),
    .overflow_o(overflow),
    .q_o(in_flight),
    .rst_ni(rst_ni)
  );
  assign \$auto$rtlil.cc:2874:Mux$2669 [72:0] = { \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], \$auto$rtlil.cc:2874:Mux$2669 [73], 1'h0 };
  assign sbr_port_rsp_o = { mgr_ports_rsp_i[38:2], sbr_port_gnt, mgr_ports_rsp_i[0] };
endmodule

(* src = "../rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_periph_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$auto$builder.cc:338:Biop$1144 ;
  (* src = "../rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "../rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "../rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "../rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "../rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$auto$builder.cc:338:Biop$1144  = obi_req_i[0] && obi_rsp_o[1];
  assign obi_rsp_o[1] = ~ fifo_full;
  assign fifo_pop = ~ fifo_empty;
  (* src = "../rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_periph_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$auto$builder.cc:338:Biop$1144 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "../rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_croc.i_xbar_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$auto$builder.cc:338:Biop$1027 ;
  (* src = "../rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "../rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "../rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "../rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "../rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$auto$builder.cc:338:Biop$1027  = obi_req_i[0] && obi_rsp_o[1];
  assign obi_rsp_o[1] = ~ fifo_full;
  assign fifo_pop = ~ fifo_empty;
  (* src = "../rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_xbar_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$auto$builder.cc:338:Biop$1027 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "../rtl/obi/obi_err_sbr.sv:7.8" *)
module \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err (clk_i, rst_ni, testmode_i, obi_req_i, obi_rsp_o);
  wire \$auto$builder.cc:338:Biop$2721 ;
  (* src = "../rtl/obi/obi_err_sbr.sv:19.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.20" *)
  wire fifo_empty;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.9" *)
  wire fifo_full;
  (* src = "../rtl/obi/obi_err_sbr.sv:28.32" *)
  wire fifo_pop;
  (* src = "../rtl/obi/obi_err_sbr.sv:23.20" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "../rtl/obi/obi_err_sbr.sv:24.20" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "../rtl/obi/obi_err_sbr.sv:27.30" *)
  wire [2:0] rid;
  (* src = "../rtl/obi/obi_err_sbr.sv:20.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_err_sbr.sv:21.16" *)
  input testmode_i;
  wire testmode_i;
  assign \$auto$builder.cc:338:Biop$2721  = obi_req_i[0] && obi_rsp_o[1];
  assign obi_rsp_o[1] = ~ fifo_full;
  assign fifo_pop = ~ fifo_empty;
  (* src = "../rtl/obi/obi_err_sbr.sv:50.5" *)
  \fifo_v3$croc_chip.i_croc_soc.i_user.i_user_err.i_id_fifo  i_id_fifo (
    .clk_i(clk_i),
    .data_i(obi_req_i[4:2]),
    .data_o(rid),
    .empty_o(fifo_empty),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(fifo_pop),
    .push_i(\$auto$builder.cc:338:Biop$2721 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign { obi_rsp_o[38:2], obi_rsp_o[0] } = { 32'hbadcab1e, rid, 2'h2, fifo_pop };
endmodule

(* src = "../rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3313 ;
  wire \$auto$builder.cc:338:Biop$3320 ;
  wire \$auto$builder.cc:364:Unop$3311 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17355 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3355 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3369 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3337 ;
  (* src = "../rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "../rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "../rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "../rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "../rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "../rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "../rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "../rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "../rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "../rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "../rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "../rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "../rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3354  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17355 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17355 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17355 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17355 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17355 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3337 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3355 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3368  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3355 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3369 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3382  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3369 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3337 [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$auto$builder.cc:338:Biop$3313  = mgr_port_rsp_i[1] && \$auto$builder.cc:364:Unop$3311 ;
  assign mgr_port_req_o[0] = mgr_port_req && \$auto$builder.cc:364:Unop$3311 ;
  assign \$auto$builder.cc:338:Biop$3320  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$builder.cc:364:Unop$3311  = ~ fifo_full;
  assign \$auto$rtlil.cc:2896:Demux$3337 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:2896:Demux$3337 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:2896:Demux$3337 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:2896:Demux$3337 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17355  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [34] };
  (* src = "../rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3320 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3313 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3337 [138:105], \$auto$rtlil.cc:2896:Demux$3337 [103:70], \$auto$rtlil.cc:2896:Demux$3337 [68:35], \$auto$rtlil.cc:2896:Demux$3337 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], \$auto$rtlil.cc:2896:Demux$3337 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], \$auto$rtlil.cc:2896:Demux$3337 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], \$auto$rtlil.cc:2896:Demux$3337 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], \$auto$rtlil.cc:2896:Demux$3337 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "../rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3401 ;
  wire \$auto$builder.cc:338:Biop$3408 ;
  wire \$auto$builder.cc:364:Unop$3399 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17358 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3443 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3457 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3425 ;
  (* src = "../rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "../rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "../rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "../rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "../rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "../rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "../rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "../rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "../rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "../rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "../rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "../rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "../rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3442  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17358 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17358 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17358 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17358 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17358 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3425 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3443 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3456  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3443 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3457 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3470  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3457 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3425 [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$auto$builder.cc:338:Biop$3401  = mgr_port_rsp_i[1] && \$auto$builder.cc:364:Unop$3399 ;
  assign mgr_port_req_o[0] = mgr_port_req && \$auto$builder.cc:364:Unop$3399 ;
  assign \$auto$builder.cc:338:Biop$3408  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$builder.cc:364:Unop$3399  = ~ fifo_full;
  assign \$auto$rtlil.cc:2896:Demux$3425 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:2896:Demux$3425 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:2896:Demux$3425 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:2896:Demux$3425 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17358  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [34] };
  (* src = "../rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3408 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3401 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3425 [138:105], \$auto$rtlil.cc:2896:Demux$3425 [103:70], \$auto$rtlil.cc:2896:Demux$3425 [68:35], \$auto$rtlil.cc:2896:Demux$3425 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], \$auto$rtlil.cc:2896:Demux$3425 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], \$auto$rtlil.cc:2896:Demux$3425 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], \$auto$rtlil.cc:2896:Demux$3425 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], \$auto$rtlil.cc:2896:Demux$3425 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "../rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3489 ;
  wire \$auto$builder.cc:338:Biop$3496 ;
  wire \$auto$builder.cc:364:Unop$3487 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17361 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3531 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3545 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3513 ;
  (* src = "../rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "../rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "../rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "../rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "../rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "../rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "../rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "../rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "../rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "../rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "../rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "../rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "../rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3530  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17361 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17361 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17361 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17361 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17361 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3513 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3531 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3544  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3531 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3545 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3558  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3545 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3513 [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$auto$builder.cc:338:Biop$3489  = mgr_port_rsp_i[1] && \$auto$builder.cc:364:Unop$3487 ;
  assign mgr_port_req_o[0] = mgr_port_req && \$auto$builder.cc:364:Unop$3487 ;
  assign \$auto$builder.cc:338:Biop$3496  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$builder.cc:364:Unop$3487  = ~ fifo_full;
  assign \$auto$rtlil.cc:2896:Demux$3513 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:2896:Demux$3513 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:2896:Demux$3513 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:2896:Demux$3513 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17361  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [34] };
  (* src = "../rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3496 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3489 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3513 [138:105], \$auto$rtlil.cc:2896:Demux$3513 [103:70], \$auto$rtlil.cc:2896:Demux$3513 [68:35], \$auto$rtlil.cc:2896:Demux$3513 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], \$auto$rtlil.cc:2896:Demux$3513 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], \$auto$rtlil.cc:2896:Demux$3513 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], \$auto$rtlil.cc:2896:Demux$3513 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], \$auto$rtlil.cc:2896:Demux$3513 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "../rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3577 ;
  wire \$auto$builder.cc:338:Biop$3584 ;
  wire \$auto$builder.cc:364:Unop$3575 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17364 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3619 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3633 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3601 ;
  (* src = "../rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "../rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "../rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "../rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "../rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "../rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "../rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "../rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "../rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "../rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "../rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "../rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "../rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3618  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17364 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17364 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17364 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17364 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17364 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3601 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3619 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3632  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3619 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3633 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3646  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3633 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3601 [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$auto$builder.cc:338:Biop$3577  = mgr_port_rsp_i[1] && \$auto$builder.cc:364:Unop$3575 ;
  assign mgr_port_req_o[0] = mgr_port_req && \$auto$builder.cc:364:Unop$3575 ;
  assign \$auto$builder.cc:338:Biop$3584  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$builder.cc:364:Unop$3575  = ~ fifo_full;
  assign \$auto$rtlil.cc:2896:Demux$3601 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:2896:Demux$3601 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:2896:Demux$3601 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:2896:Demux$3601 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17364  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [34] };
  (* src = "../rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3584 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3577 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3601 [138:105], \$auto$rtlil.cc:2896:Demux$3601 [103:70], \$auto$rtlil.cc:2896:Demux$3601 [68:35], \$auto$rtlil.cc:2896:Demux$3601 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], \$auto$rtlil.cc:2896:Demux$3601 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], \$auto$rtlil.cc:2896:Demux$3601 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], \$auto$rtlil.cc:2896:Demux$3601 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], \$auto$rtlil.cc:2896:Demux$3601 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "../rtl/obi/obi_mux.sv:10.8" *)
module \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_port_req_o, mgr_port_rsp_i);
  wire \$auto$builder.cc:338:Biop$3665 ;
  wire \$auto$builder.cc:338:Biop$3672 ;
  wire \$auto$builder.cc:364:Unop$3663 ;
  wire [127:0] \$auto$opt_expr.cc:205:group_cell_inputs$17367 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3707 ;
  wire [139:0] \$auto$rtlil.cc:2875:Bwmux$3721 ;
  wire [139:0] \$auto$rtlil.cc:2896:Demux$3689 ;
  (* src = "../rtl/obi/obi_mux.sv:34.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_mux.sv:60.23" *)
  wire fifo_full;
  (* src = "../rtl/obi/obi_mux.sv:58.21" *)
  wire [70:0] mgr_port_a_in_sbr;
  (* src = "../rtl/obi/obi_mux.sv:60.9" *)
  wire mgr_port_req;
  (* src = "../rtl/obi/obi_mux.sv:41.47" *)
  output [73:0] mgr_port_req_o;
  wire [73:0] mgr_port_req_o;
  (* src = "../rtl/obi/obi_mux.sv:42.47" *)
  input [38:0] mgr_port_rsp_i;
  wire [38:0] mgr_port_rsp_i;
  (* src = "../rtl/obi/obi_mux.sv:59.49" *)
  wire [1:0] response_id;
  (* src = "../rtl/obi/obi_mux.sv:35.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_mux.sv:50.42" *)
  wire [3:0] sbr_ports_gnt;
  (* src = "../rtl/obi/obi_mux.sv:38.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "../rtl/obi/obi_mux.sv:39.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "../rtl/obi/obi_mux.sv:141.39" *)
  wire [139:0] sbr_rsp_r;
  (* src = "../rtl/obi/obi_mux.sv:140.27" *)
  wire [3:0] sbr_rsp_rvalid;
  (* src = "../rtl/obi/obi_mux.sv:59.36" *)
  wire [1:0] selected_id;
  (* src = "../rtl/obi/obi_mux.sv:36.16" *)
  input testmode_i;
  wire testmode_i;
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3706  (
    .A({ \$auto$opt_expr.cc:205:group_cell_inputs$17367 [127], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [123], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [119], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [115], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [111], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [107], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [103], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [99], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [95], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [91], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [87], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [83], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [79], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [75], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [71], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [67], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [63], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [59], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [55], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [51], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [47], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [43], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [39], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [35], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [31], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [27], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [23], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [19], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [15], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [11], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [7], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [3], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17367 [126], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [122], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [118], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [114], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [110], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [106], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [102], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [98], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [94], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [90], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [86], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [82], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [78], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [74], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [70], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [66], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [62], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [58], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [54], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [50], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [46], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [42], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [38], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [34], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [30], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [26], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [22], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [18], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [14], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [10], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [6], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [2], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17367 [125], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [121], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [117], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [113], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [109], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [105], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [101], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [97], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [93], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [89], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [85], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [81], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [77], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [73], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [69], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [65], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [61], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [57], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [53], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [49], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [45], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [41], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [37], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [33], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [29], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [25], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [21], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [17], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [13], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [9], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [5], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [1], 3'h0, \$auto$opt_expr.cc:205:group_cell_inputs$17367 [124], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [120], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [116], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [112], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [108], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [104], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [100], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [96], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [92], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [88], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [84], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [80], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [76], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [72], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [68], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [64], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [60], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [56], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [52], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [48], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [44], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [40], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [36], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [32], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [28], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [24], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [20], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [16], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [12], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [8], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [4], \$auto$opt_expr.cc:205:group_cell_inputs$17367 [0], 3'h0 }),
    .B({ 32'hxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 34'hxxxxxxxxx, mgr_port_rsp_i[4], 2'hx }),
    .S({ 32'h00000000, \$auto$rtlil.cc:2896:Demux$3689 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [34], 2'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3707 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3720  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3707 ),
    .B({ 33'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 34'hxxxxxxxxx, mgr_port_rsp_i[3], 1'hx }),
    .S({ 33'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [34], 1'h0 }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$3721 )
  );
  \$bwmux  #(
    .WIDTH(32'd140)
  ) \$auto$builder.cc:128:Bwmux$3734  (
    .A(\$auto$rtlil.cc:2875:Bwmux$3721 ),
    .B({ 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2], 34'hxxxxxxxxx, mgr_port_rsp_i[2] }),
    .S({ 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [139], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [104], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [69], 34'h000000000, \$auto$rtlil.cc:2896:Demux$3689 [34] }),
    .Y(sbr_rsp_r)
  );
  assign \$auto$builder.cc:338:Biop$3665  = mgr_port_rsp_i[1] && \$auto$builder.cc:364:Unop$3663 ;
  assign mgr_port_req_o[0] = mgr_port_req && \$auto$builder.cc:364:Unop$3663 ;
  assign \$auto$builder.cc:338:Biop$3672  = mgr_port_req_o[0] && mgr_port_rsp_i[1];
  assign \$auto$builder.cc:364:Unop$3663  = ~ fifo_full;
  assign \$auto$rtlil.cc:2896:Demux$3689 [34] = response_id == 2'h0;
  assign \$auto$rtlil.cc:2896:Demux$3689 [69] = response_id == 2'h1;
  assign \$auto$rtlil.cc:2896:Demux$3689 [104] = response_id == 2'h2;
  assign \$auto$rtlil.cc:2896:Demux$3689 [139] = response_id == 2'h3;
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17367  = { mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38], mgr_port_rsp_i[38:37], mgr_port_rsp_i[37], mgr_port_rsp_i[37], mgr_port_rsp_i[37:36], mgr_port_rsp_i[36], mgr_port_rsp_i[36], mgr_port_rsp_i[36:35], mgr_port_rsp_i[35], mgr_port_rsp_i[35], mgr_port_rsp_i[35:34], mgr_port_rsp_i[34], mgr_port_rsp_i[34], mgr_port_rsp_i[34:33], mgr_port_rsp_i[33], mgr_port_rsp_i[33], mgr_port_rsp_i[33:32], mgr_port_rsp_i[32], mgr_port_rsp_i[32], mgr_port_rsp_i[32:31], mgr_port_rsp_i[31], mgr_port_rsp_i[31], mgr_port_rsp_i[31:30], mgr_port_rsp_i[30], mgr_port_rsp_i[30], mgr_port_rsp_i[30:29], mgr_port_rsp_i[29], mgr_port_rsp_i[29], mgr_port_rsp_i[29:28], mgr_port_rsp_i[28], mgr_port_rsp_i[28], mgr_port_rsp_i[28:27], mgr_port_rsp_i[27], mgr_port_rsp_i[27], mgr_port_rsp_i[27:26], mgr_port_rsp_i[26], mgr_port_rsp_i[26], mgr_port_rsp_i[26:25], mgr_port_rsp_i[25], mgr_port_rsp_i[25], mgr_port_rsp_i[25:24], mgr_port_rsp_i[24], mgr_port_rsp_i[24], mgr_port_rsp_i[24:23], mgr_port_rsp_i[23], mgr_port_rsp_i[23], mgr_port_rsp_i[23:22], mgr_port_rsp_i[22], mgr_port_rsp_i[22], mgr_port_rsp_i[22:21], mgr_port_rsp_i[21], mgr_port_rsp_i[21], mgr_port_rsp_i[21:20], mgr_port_rsp_i[20], mgr_port_rsp_i[20], mgr_port_rsp_i[20:19], mgr_port_rsp_i[19], mgr_port_rsp_i[19], mgr_port_rsp_i[19:18], mgr_port_rsp_i[18], mgr_port_rsp_i[18], mgr_port_rsp_i[18:17], mgr_port_rsp_i[17], mgr_port_rsp_i[17], mgr_port_rsp_i[17:16], mgr_port_rsp_i[16], mgr_port_rsp_i[16], mgr_port_rsp_i[16:15], mgr_port_rsp_i[15], mgr_port_rsp_i[15], mgr_port_rsp_i[15:14], mgr_port_rsp_i[14], mgr_port_rsp_i[14], mgr_port_rsp_i[14:13], mgr_port_rsp_i[13], mgr_port_rsp_i[13], mgr_port_rsp_i[13:12], mgr_port_rsp_i[12], mgr_port_rsp_i[12], mgr_port_rsp_i[12:11], mgr_port_rsp_i[11], mgr_port_rsp_i[11], mgr_port_rsp_i[11:10], mgr_port_rsp_i[10], mgr_port_rsp_i[10], mgr_port_rsp_i[10:9], mgr_port_rsp_i[9], mgr_port_rsp_i[9], mgr_port_rsp_i[9:8], mgr_port_rsp_i[8], mgr_port_rsp_i[8], mgr_port_rsp_i[8:7], mgr_port_rsp_i[7], mgr_port_rsp_i[7], mgr_port_rsp_i[7] } & { \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34] };
  assign sbr_rsp_rvalid = { mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0], mgr_port_rsp_i[0] } & { \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [34] };
  (* src = "../rtl/obi/obi_mux.sv:119.7" *)
  \fifo_v3$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.gen_no_id_assign.i_fifo  \gen_no_id_assign.i_fifo  (
    .clk_i(clk_i),
    .data_i(selected_id),
    .data_o(response_id),
    .flush_i(1'h0),
    .full_o(fifo_full),
    .pop_i(mgr_port_rsp_i[0]),
    .push_i(\$auto$builder.cc:338:Biop$3672 ),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_mux.sv:67.5" *)
  \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb  i_rr_arb (
    .clk_i(clk_i),
    .data_i({ sbr_ports_req_i[287:217], sbr_ports_req_i[215:145], sbr_ports_req_i[143:73], sbr_ports_req_i[71:1] }),
    .data_o(mgr_port_a_in_sbr),
    .flush_i(1'h0),
    .gnt_i(\$auto$builder.cc:338:Biop$3665 ),
    .gnt_o(sbr_ports_gnt),
    .idx_o(selected_id),
    .req_i({ sbr_ports_req_i[216], sbr_ports_req_i[144], sbr_ports_req_i[72], sbr_ports_req_i[0] }),
    .req_o(mgr_port_req),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign { \$auto$rtlil.cc:2896:Demux$3689 [138:105], \$auto$rtlil.cc:2896:Demux$3689 [103:70], \$auto$rtlil.cc:2896:Demux$3689 [68:35], \$auto$rtlil.cc:2896:Demux$3689 [33:0] } = { \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], \$auto$rtlil.cc:2896:Demux$3689 [139], 3'h0, \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], \$auto$rtlil.cc:2896:Demux$3689 [104], 3'h0, \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], \$auto$rtlil.cc:2896:Demux$3689 [69], 3'h0, \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], \$auto$rtlil.cc:2896:Demux$3689 [34], 3'h0 };
  assign mgr_port_req_o[73:1] = { mgr_port_a_in_sbr[70:2], selected_id, mgr_port_a_in_sbr[1:0] };
  assign sbr_ports_rsp_o = { sbr_rsp_r[139:105], sbr_ports_gnt[3], sbr_rsp_rvalid[3], sbr_rsp_r[104:70], sbr_ports_gnt[2], sbr_rsp_rvalid[2], sbr_rsp_r[69:35], sbr_ports_gnt[1], sbr_rsp_rvalid[1], sbr_rsp_r[34:0], sbr_ports_gnt[0], sbr_rsp_rvalid[0] };
endmodule

(* src = "../rtl/obi/obi_sram_shim.sv:7.8" *)
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  (* src = "../rtl/obi/obi_sram_shim.sv:23.41" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:25.41" *)
  output [3:0] be_o;
  wire [3:0] be_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:15.41" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:27.41" *)
  input gnt_i;
  wire gnt_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:38.36" *)
  reg [2:0] id_q;
  (* src = "../rtl/obi/obi_sram_shim.sv:18.41" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:19.41" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:28.41" *)
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:21.41" *)
  output req_o;
  wire req_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:16.41" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_sram_shim.sv:37.9" *)
  wire rvalid_d;
  (* src = "../rtl/obi/obi_sram_shim.sv:37.19" *)
  reg rvalid_q;
  (* src = "../rtl/obi/obi_sram_shim.sv:24.41" *)
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:22.41" *)
  output we_o;
  wire we_o;
  assign rvalid_d = obi_req_i[0] & gnt_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 3'h0;
    else id_q <= obi_req_i[4:2];
  (* src = "../rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rvalid_q <= 1'h0;
    else rvalid_q <= rvalid_d;
  assign be_o = obi_req_i[40:37];
  assign addr_o = obi_req_i[73:42];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

(* src = "../rtl/obi/obi_sram_shim.sv:7.8" *)
module \obi_sram_shim$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram_shim (clk_i, rst_ni, obi_req_i, obi_rsp_o, req_o, we_o, addr_o, wdata_o, be_o, gnt_i, rdata_i);
  (* src = "../rtl/obi/obi_sram_shim.sv:23.41" *)
  output [31:0] addr_o;
  wire [31:0] addr_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:25.41" *)
  output [3:0] be_o;
  wire [3:0] be_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:15.41" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:27.41" *)
  input gnt_i;
  wire gnt_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:38.36" *)
  reg [2:0] id_q;
  (* src = "../rtl/obi/obi_sram_shim.sv:18.41" *)
  input [73:0] obi_req_i;
  wire [73:0] obi_req_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:19.41" *)
  output [38:0] obi_rsp_o;
  wire [38:0] obi_rsp_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:28.41" *)
  input [31:0] rdata_i;
  wire [31:0] rdata_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:21.41" *)
  output req_o;
  wire req_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:16.41" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_sram_shim.sv:37.9" *)
  wire rvalid_d;
  (* src = "../rtl/obi/obi_sram_shim.sv:37.19" *)
  reg rvalid_q;
  (* src = "../rtl/obi/obi_sram_shim.sv:24.41" *)
  output [31:0] wdata_o;
  wire [31:0] wdata_o;
  (* src = "../rtl/obi/obi_sram_shim.sv:22.41" *)
  output we_o;
  wire we_o;
  assign rvalid_d = obi_req_i[0] & gnt_i;
  (* src = "../rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_q <= 3'h0;
    else id_q <= obi_req_i[4:2];
  (* src = "../rtl/obi/obi_sram_shim.sv:58.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rvalid_q <= 1'h0;
    else rvalid_q <= rvalid_d;
  assign be_o = obi_req_i[40:37];
  assign addr_o = obi_req_i[73:42];
  assign obi_rsp_o = { rdata_i, id_q, 2'h0, gnt_i, rvalid_q };
  assign req_o = obi_req_i[0];
  assign wdata_o = obi_req_i[36:5];
  assign we_o = obi_req_i[41];
endmodule

(* src = "../rtl/obi/obi_xbar.sv:8.8" *)
module \obi_xbar$croc_chip.i_croc_soc.i_croc.i_main_xbar (clk_i, rst_ni, testmode_i, sbr_ports_req_i, sbr_ports_rsp_o, mgr_ports_req_o, mgr_ports_rsp_i, addr_map_i, en_default_idx_i, default_idx_i);
  (* src = "../rtl/obi/obi_xbar.sv:50.47" *)
  input [383:0] addr_map_i;
  wire [383:0] addr_map_i;
  (* src = "../rtl/obi/obi_xbar.sv:40.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/obi/obi_xbar.sv:52.75" *)
  input [11:0] default_idx_i;
  wire [11:0] default_idx_i;
  (* src = "../rtl/obi/obi_xbar.sv:51.47" *)
  input [3:0] en_default_idx_i;
  wire [3:0] en_default_idx_i;
  (* src = "../rtl/obi/obi_xbar.sv:47.47" *)
  output [369:0] mgr_ports_req_o;
  wire [369:0] mgr_ports_req_o;
  (* src = "../rtl/obi/obi_xbar.sv:48.47" *)
  input [194:0] mgr_ports_rsp_i;
  wire [194:0] mgr_ports_rsp_i;
  (* src = "../rtl/obi/obi_xbar.sv:62.57" *)
  wire [1439:0] mgr_reqs;
  (* src = "../rtl/obi/obi_xbar.sv:63.57" *)
  wire [739:0] mgr_rsps;
  (* src = "../rtl/obi/obi_xbar.sv:41.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/obi/obi_xbar.sv:55.68" *)
  wire [11:0] sbr_port_select;
  (* src = "../rtl/obi/obi_xbar.sv:44.47" *)
  input [287:0] sbr_ports_req_i;
  wire [287:0] sbr_ports_req_i;
  (* src = "../rtl/obi/obi_xbar.sv:45.47" *)
  output [147:0] sbr_ports_rsp_o;
  wire [147:0] sbr_ports_rsp_o;
  (* src = "../rtl/obi/obi_xbar.sv:42.16" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_addr_decode  \gen_demux[0].i_addr_decode  (
    .addr_i(sbr_ports_req_i[71:40]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[2:0]),
    .en_default_idx_i(en_default_idx_i[0]),
    .idx_o(sbr_port_select[2:0])
  );
  (* src = "../rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[0].i_demux  \gen_demux[0].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1223:1152], mgr_reqs[935:864], mgr_reqs[647:576], mgr_reqs[359:288], mgr_reqs[71:0] }),
    .mgr_ports_rsp_i({ mgr_rsps[628:592], mgr_rsps[480:444], mgr_rsps[332:296], mgr_rsps[184:148], mgr_rsps[36:0] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[71:0]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[36:0]),
    .sbr_port_select_i(sbr_port_select[2:0])
  );
  (* src = "../rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_addr_decode  \gen_demux[1].i_addr_decode  (
    .addr_i(sbr_ports_req_i[143:112]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[5:3]),
    .en_default_idx_i(en_default_idx_i[1]),
    .idx_o(sbr_port_select[5:3])
  );
  (* src = "../rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[1].i_demux  \gen_demux[1].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1295:1224], mgr_reqs[1007:936], mgr_reqs[719:648], mgr_reqs[431:360], mgr_reqs[143:72] }),
    .mgr_ports_rsp_i({ mgr_rsps[665:629], mgr_rsps[517:481], mgr_rsps[369:333], mgr_rsps[221:185], mgr_rsps[73:37] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[143:72]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[73:37]),
    .sbr_port_select_i(sbr_port_select[5:3])
  );
  (* src = "../rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_addr_decode  \gen_demux[2].i_addr_decode  (
    .addr_i(sbr_ports_req_i[215:184]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[8:6]),
    .en_default_idx_i(en_default_idx_i[2]),
    .idx_o(sbr_port_select[8:6])
  );
  (* src = "../rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[2].i_demux  \gen_demux[2].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1367:1296], mgr_reqs[1079:1008], mgr_reqs[791:720], mgr_reqs[503:432], mgr_reqs[215:144] }),
    .mgr_ports_rsp_i({ mgr_rsps[702:666], mgr_rsps[554:518], mgr_rsps[406:370], mgr_rsps[258:222], mgr_rsps[110:74] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[215:144]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[110:74]),
    .sbr_port_select_i(sbr_port_select[8:6])
  );
  (* src = "../rtl/obi/obi_xbar.sv:71.7" *)
  \addr_decode$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_addr_decode  \gen_demux[3].i_addr_decode  (
    .addr_i(sbr_ports_req_i[287:256]),
    .addr_map_i(addr_map_i),
    .default_idx_i(default_idx_i[11:9]),
    .en_default_idx_i(en_default_idx_i[3]),
    .idx_o(sbr_port_select[11:9])
  );
  (* src = "../rtl/obi/obi_xbar.sv:87.7" *)
  \obi_demux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_demux[3].i_demux  \gen_demux[3].i_demux  (
    .clk_i(clk_i),
    .mgr_ports_req_o({ mgr_reqs[1439:1368], mgr_reqs[1151:1080], mgr_reqs[863:792], mgr_reqs[575:504], mgr_reqs[287:216] }),
    .mgr_ports_rsp_i({ mgr_rsps[739:703], mgr_rsps[591:555], mgr_rsps[443:407], mgr_rsps[295:259], mgr_rsps[147:111] }),
    .rst_ni(rst_ni),
    .sbr_port_req_i(sbr_ports_req_i[287:216]),
    .sbr_port_rsp_o(sbr_ports_rsp_o[147:111]),
    .sbr_port_select_i(sbr_port_select[11:9])
  );
  (* src = "../rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux  \gen_mux[0].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[73:0]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[38:0]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[287:0]),
    .sbr_ports_rsp_o(mgr_rsps[147:0]),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux  \gen_mux[1].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[147:74]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[77:39]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[575:288]),
    .sbr_ports_rsp_o(mgr_rsps[295:148]),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux  \gen_mux[2].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[221:148]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[116:78]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[863:576]),
    .sbr_ports_rsp_o(mgr_rsps[443:296]),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux  \gen_mux[3].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[295:222]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[155:117]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1151:864]),
    .sbr_ports_rsp_o(mgr_rsps[591:444]),
    .testmode_i(testmode_i)
  );
  (* src = "../rtl/obi/obi_xbar.sv:145.7" *)
  \obi_mux$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux  \gen_mux[4].i_mux  (
    .clk_i(clk_i),
    .mgr_port_req_o(mgr_ports_req_o[369:296]),
    .mgr_port_rsp_i(mgr_ports_rsp_i[194:156]),
    .rst_ni(rst_ni),
    .sbr_ports_req_i(mgr_reqs[1439:1152]),
    .sbr_ports_rsp_o(mgr_rsps[739:592]),
    .testmode_i(testmode_i)
  );
endmodule

(* src = "../rtl/register_interface/periph_to_reg.sv:13.8" *)
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl_translate (clk_i, rst_ni, req_i, wen_i, gnt_o, r_valid_o, r_opc_o, wdata_i, be_i, add_i, id_i, r_rdata_o, r_id_o, reg_req_o, reg_rsp_i);
  (* src = "../rtl/register_interface/periph_to_reg.sv:25.28" *)
  input [31:0] add_i;
  wire [31:0] add_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:28.28" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:21.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:30.28" *)
  output gnt_o;
  wire gnt_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:29.28" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:33.28" *)
  output [2:0] r_id_o;
  reg [2:0] r_id_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:32.28" *)
  output r_opc_o;
  reg r_opc_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:31.28" *)
  output [31:0] r_rdata_o;
  reg [31:0] r_rdata_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:34.28" *)
  output r_valid_o;
  reg r_valid_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:36.28" *)
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:37.28" *)
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:24.28" *)
  input req_i;
  wire req_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:22.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/register_interface/periph_to_reg.sv:27.28" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:26.28" *)
  input wen_i;
  wire wen_i;
  assign gnt_o = req_i & reg_rsp_i[0];
  assign reg_req_o[37] = ~ wen_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_id_o <= 3'h0;
    else r_id_o <= id_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_opc_o <= 1'h0;
    else r_opc_o <= reg_rsp_i[1];
  (* src = "../rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_rdata_o <= 32'd0;
    else r_rdata_o <= reg_rsp_i[33:2];
  (* src = "../rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_valid_o <= 1'h0;
    else r_valid_o <= gnt_o;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

(* src = "../rtl/register_interface/periph_to_reg.sv:13.8" *)
module \periph_to_reg$croc_chip.i_croc_soc.i_croc.i_uart_translate (clk_i, rst_ni, req_i, wen_i, gnt_o, r_valid_o, r_opc_o, wdata_i, be_i, add_i, id_i, r_rdata_o, r_id_o, reg_req_o, reg_rsp_i);
  (* src = "../rtl/register_interface/periph_to_reg.sv:25.28" *)
  input [31:0] add_i;
  wire [31:0] add_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:28.28" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:21.28" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:30.28" *)
  output gnt_o;
  wire gnt_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:29.28" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:33.28" *)
  output [2:0] r_id_o;
  reg [2:0] r_id_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:32.28" *)
  output r_opc_o;
  reg r_opc_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:31.28" *)
  output [31:0] r_rdata_o;
  reg [31:0] r_rdata_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:34.28" *)
  output r_valid_o;
  reg r_valid_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:36.28" *)
  output [69:0] reg_req_o;
  wire [69:0] reg_req_o;
  (* src = "../rtl/register_interface/periph_to_reg.sv:37.28" *)
  input [33:0] reg_rsp_i;
  wire [33:0] reg_rsp_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:24.28" *)
  input req_i;
  wire req_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:22.28" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/register_interface/periph_to_reg.sv:27.28" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:26.28" *)
  input wen_i;
  wire wen_i;
  assign gnt_o = req_i & reg_rsp_i[0];
  assign reg_req_o[37] = ~ wen_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_id_o <= 3'h0;
    else r_id_o <= id_i;
  (* src = "../rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_opc_o <= 1'h0;
    else r_opc_o <= reg_rsp_i[1];
  (* src = "../rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_rdata_o <= 32'd0;
    else r_rdata_o <= reg_rsp_i[33:2];
  (* src = "../rtl/register_interface/periph_to_reg.sv:52.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) r_valid_o <= 1'h0;
    else r_valid_o <= gnt_o;
  assign { reg_req_o[69:38], reg_req_o[36:0] } = { add_i, wdata_i, be_i, req_i };
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output [31:0] q;
  reg [31:0] q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output [31:0] qs;
  wire [31:0] qs;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire [31:0] wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 32'd268435456;
    else if (wr_en) q <= wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h0;
    else if (wr_en) q <= wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output [31:0] q;
  reg [31:0] q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output [31:0] qs;
  wire [31:0] qs;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire [31:0] wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 32'd0;
    else if (wr_en) q <= wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h0;
    else if (wr_en) q <= wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:7.8" *)
module \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly (clk_i, rst_ni, we, wd, de, d, q, qs, qe);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:12.9" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:22.18" *)
  input d;
  wire d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:21.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:26.25" *)
  output q;
  reg q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:25.25" *)
  output qe;
  reg qe;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:27.25" *)
  output qs;
  wire qs;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:13.9" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:18.18" *)
  input wd;
  wire wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:17.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:31.18" *)
  wire wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:30.18" *)
  wire wr_en;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:54.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) q <= 1'h1;
    else if (wr_en) q <= wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:46.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) qe <= 1'h0;
    else qe <= we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg.sv:36.5" *)
  \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb  wr_en_data_arb (
    .d(d),
    .de(de),
    .q(q),
    .wd(wd),
    .we(we),
    .wr_data(wr_data),
    .wr_en(wr_en)
  );
  assign qs = q;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input [31:0] q;
  wire [31:0] q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output [31:0] wr_data;
  wire [31:0] wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input [31:0] d;
  wire [31:0] d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input [31:0] q;
  wire [31:0] q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input [31:0] wd;
  wire [31:0] wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output [31:0] wr_data;
  wire [31:0] wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:7.8" *)
module \prim_subreg_arb$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly.wr_en_data_arb (we, wd, de, d, q, wr_en, wr_data);
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:18.18" *)
  input d;
  wire d;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:17.18" *)
  input de;
  wire de;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:21.18" *)
  input q;
  wire q;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:14.18" *)
  input wd;
  wire wd;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:13.18" *)
  input we;
  wire we;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:25.25" *)
  output wr_data;
  wire wr_data;
  (* src = "../rtl/register_interface/lowrisc_opentitan/prim_subreg_arb.sv:24.25" *)
  output wr_en;
  wire wr_en;
  assign wr_en = we | de;
  assign wr_data = we ? wd : d;
endmodule

(* src = "../rtl/register_interface/reg_to_apb.sv:7.8" *)
module \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb (clk_i, rst_ni, reg_req_i, reg_rsp_o, apb_req_o, apb_rsp_i);
  (* src = "../rtl/register_interface/reg_to_apb.sv:59.9-59.47" *)
  wire \$auto$slang_frontend.cc:694:finish$\state_d$4213 ;
  (* src = "../rtl/register_interface/reg_to_apb.sv:26.20" *)
  output [73:0] apb_req_o;
  wire [73:0] apb_req_o;
  (* src = "../rtl/register_interface/reg_to_apb.sv:27.20" *)
  input [33:0] apb_rsp_i;
  wire [33:0] apb_rsp_i;
  (* src = "../rtl/register_interface/reg_to_apb.sv:18.20" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/register_interface/reg_to_apb.sv:22.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "../rtl/register_interface/reg_to_apb.sv:23.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "../rtl/register_interface/reg_to_apb.sv:19.20" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/register_interface/reg_to_apb.sv:32.11" *)
  wire state_d;
  (* src = "../rtl/register_interface/reg_to_apb.sv:32.20" *)
  reg state_q;
  (* src = "../rtl/register_interface/reg_to_apb.sv:66.3" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 1'h0;
    else state_q <= state_d;
  assign \$auto$slang_frontend.cc:694:finish$\state_d$4213  = ~ (* src = "../rtl/register_interface/reg_to_apb.sv:59.31-59.47|../rtl/register_interface/reg_to_apb.sv:59.9-59.47" *) apb_rsp_i[33];
  assign state_d = state_q ? (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/register_interface/reg_to_apb.sv:56.15-60.10|../rtl/register_interface/reg_to_apb.sv:52.5-63.12" *) \$auto$slang_frontend.cc:694:finish$\state_d$4213  : reg_req_i[0];
  assign reg_rsp_o[0] = state_q & (* full_case = 32'd1 *) (* parallel_case = 32'd1 *) (* src = "../rtl/register_interface/reg_to_apb.sv:56.15-60.10|../rtl/register_interface/reg_to_apb.sv:52.5-63.12" *) apb_rsp_i[33];
  assign apb_req_o = { reg_req_i[69:38], 3'h2, reg_req_i[0], state_q, reg_req_i[37:1] };
  assign reg_rsp_o[33:1] = apb_rsp_i[32:0];
endmodule

(* src = "../rtl/apb_uart/reg_uart_wrap.sv:31.8" *)
module \reg_uart_wrap$croc_chip.i_croc_soc.i_croc.i_uart (clk_i, rst_ni, reg_req_i, reg_rsp_o, intr_o, cts_ni, dsr_ni, dcd_ni, rin_ni, sin_i, sout_o, out1_no, out2_no, rts_no, dtr_no);
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:36.16" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:49.16" *)
  input cts_ni;
  wire cts_ni;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:51.16" *)
  input dcd_ni;
  wire dcd_ni;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:50.16" *)
  input dsr_ni;
  wire dsr_ni;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:48.16" *)
  output dtr_no;
  wire dtr_no;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:44.16" *)
  output intr_o;
  wire intr_o;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:45.16" *)
  output out1_no;
  wire out1_no;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:46.16" *)
  output out2_no;
  wire out2_no;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:40.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:41.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:52.16" *)
  input rin_ni;
  wire rin_ni;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:37.16" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:47.16" *)
  output rts_no;
  wire rts_no;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:53.16" *)
  input sin_i;
  wire sin_i;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:54.16" *)
  output sout_o;
  wire sout_o;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:59.22" *)
  (* unused_bits = "0 1 2 3 39 40 41 42 43 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73" *)
  wire [73:0] uart_apb_req;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:60.22" *)
  wire [33:0] uart_apb_rsp;
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:76.12" *)
  \apb_uart$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart  i_apb_uart (
    .CLK(clk_i),
    .CTSN(cts_ni),
    .DCDN(dcd_ni),
    .DSRN(dsr_ni),
    .DTRN(dtr_no),
    .INT(intr_o),
    .OUT1N(out1_no),
    .OUT2N(out2_no),
    .PADDR(uart_apb_req[46:44]),
    .PENABLE(uart_apb_req[37]),
    .PRDATA(uart_apb_rsp[32:1]),
    .PREADY(uart_apb_rsp[33]),
    .PSEL(uart_apb_req[38]),
    .PSLVERR(uart_apb_rsp[0]),
    .PWDATA(uart_apb_req[35:4]),
    .PWRITE(uart_apb_req[36]),
    .RIN(rin_ni),
    .RSTN(rst_ni),
    .RTSN(rts_no),
    .SIN(sin_i),
    .SOUT(sout_o)
  );
  (* src = "../rtl/apb_uart/reg_uart_wrap.sv:67.5" *)
  \reg_to_apb$croc_chip.i_croc_soc.i_croc.i_uart.i_reg_uart_reg_to_apb  i_reg_uart_reg_to_apb (
    .apb_req_o(uart_apb_req),
    .apb_rsp_i(uart_apb_rsp),
    .clk_i(clk_i),
    .reg_req_i(reg_req_i),
    .reg_rsp_o(reg_rsp_o),
    .rst_ni(rst_ni)
  );
endmodule

(* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$6727 ;
  wire \$auto$builder.cc:338:Biop$6733 ;
  wire \$auto$builder.cc:338:Biop$6751 ;
  wire \$auto$builder.cc:338:Biop$6757 ;
  wire \$auto$builder.cc:338:Biop$6767 ;
  wire \$auto$builder.cc:338:Biop$6785 ;
  wire \$auto$builder.cc:338:Biop$6807 ;
  wire \$auto$builder.cc:338:Biop$6833 ;
  wire \$auto$builder.cc:364:Unop$6695 ;
  wire \$auto$builder.cc:364:Unop$6783 ;
  wire \$auto$builder.cc:364:Unop$6797 ;
  wire \$auto$builder.cc:364:Unop$6805 ;
  wire \$auto$builder.cc:364:Unop$6819 ;
  wire \$auto$builder.cc:364:Unop$6831 ;
  wire \$auto$builder.cc:364:Unop$6845 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17880 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6709 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6717 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$6779 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$auto$builder.cc:364:Unop$6695 ;
  assign \$auto$builder.cc:338:Biop$6751  = 2'h3 > \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$6757  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$6767  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \$auto$builder.cc:338:Biop$6785  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$auto$builder.cc:364:Unop$6783  | \$auto$builder.cc:338:Biop$6785 ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$auto$builder.cc:364:Unop$6797 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$auto$builder.cc:338:Biop$6807  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$auto$builder.cc:364:Unop$6805  | \$auto$builder.cc:338:Biop$6807 ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$auto$builder.cc:364:Unop$6819 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$auto$builder.cc:338:Biop$6833  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$auto$builder.cc:364:Unop$6831  | \$auto$builder.cc:338:Biop$6833 ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$auto$builder.cc:364:Unop$6845 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign \$auto$builder.cc:364:Unop$6695  = ~ gnt_i;
  assign \$auto$builder.cc:364:Unop$6783  = ~ \gen_arbiter.req_nodes [1];
  assign \$auto$builder.cc:364:Unop$6797  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$6805  = ~ \gen_arbiter.req_d [0];
  assign \$auto$builder.cc:364:Unop$6819  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$6831  = ~ \gen_arbiter.req_d [2];
  assign \$auto$builder.cc:364:Unop$6845  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17880 ) \gen_arbiter.rr_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$6779 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17880  = | { \$auto$builder.cc:338:Biop$6767 , flush_i };
  assign \$auto$builder.cc:338:Biop$6727  = ! \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$6733  = | \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$builder.cc:338:Biop$6727  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$builder.cc:338:Biop$6733  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$builder.cc:338:Biop$6751  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$builder.cc:338:Biop$6757  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  (* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6709 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6717 ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$6779  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6717  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6709  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[0].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$7000 ;
  wire \$auto$builder.cc:338:Biop$7006 ;
  wire \$auto$builder.cc:338:Biop$7024 ;
  wire \$auto$builder.cc:338:Biop$7030 ;
  wire \$auto$builder.cc:338:Biop$7040 ;
  wire \$auto$builder.cc:338:Biop$7058 ;
  wire \$auto$builder.cc:338:Biop$7080 ;
  wire \$auto$builder.cc:338:Biop$7106 ;
  wire \$auto$builder.cc:364:Unop$6968 ;
  wire \$auto$builder.cc:364:Unop$7056 ;
  wire \$auto$builder.cc:364:Unop$7070 ;
  wire \$auto$builder.cc:364:Unop$7078 ;
  wire \$auto$builder.cc:364:Unop$7092 ;
  wire \$auto$builder.cc:364:Unop$7104 ;
  wire \$auto$builder.cc:364:Unop$7118 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17883 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6982 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6990 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7052 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$auto$builder.cc:364:Unop$6968 ;
  assign \$auto$builder.cc:338:Biop$7024  = 2'h3 > \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7030  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7040  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \$auto$builder.cc:338:Biop$7058  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$auto$builder.cc:364:Unop$7056  | \$auto$builder.cc:338:Biop$7058 ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$auto$builder.cc:364:Unop$7070 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$auto$builder.cc:338:Biop$7080  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$auto$builder.cc:364:Unop$7078  | \$auto$builder.cc:338:Biop$7080 ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$auto$builder.cc:364:Unop$7092 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$auto$builder.cc:338:Biop$7106  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$auto$builder.cc:364:Unop$7104  | \$auto$builder.cc:338:Biop$7106 ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$auto$builder.cc:364:Unop$7118 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign \$auto$builder.cc:364:Unop$6968  = ~ gnt_i;
  assign \$auto$builder.cc:364:Unop$7056  = ~ \gen_arbiter.req_nodes [1];
  assign \$auto$builder.cc:364:Unop$7070  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$7078  = ~ \gen_arbiter.req_d [0];
  assign \$auto$builder.cc:364:Unop$7092  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$7104  = ~ \gen_arbiter.req_d [2];
  assign \$auto$builder.cc:364:Unop$7118  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17883 ) \gen_arbiter.rr_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7052 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17883  = | { \$auto$builder.cc:338:Biop$7040 , flush_i };
  assign \$auto$builder.cc:338:Biop$7000  = ! \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7006  = | \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$builder.cc:338:Biop$7000  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$builder.cc:338:Biop$7006  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$builder.cc:338:Biop$7024  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$builder.cc:338:Biop$7030  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  (* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6982 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6990 ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7052  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$6990  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$6982  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[1].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$7273 ;
  wire \$auto$builder.cc:338:Biop$7279 ;
  wire \$auto$builder.cc:338:Biop$7297 ;
  wire \$auto$builder.cc:338:Biop$7303 ;
  wire \$auto$builder.cc:338:Biop$7313 ;
  wire \$auto$builder.cc:338:Biop$7331 ;
  wire \$auto$builder.cc:338:Biop$7353 ;
  wire \$auto$builder.cc:338:Biop$7379 ;
  wire \$auto$builder.cc:364:Unop$7241 ;
  wire \$auto$builder.cc:364:Unop$7329 ;
  wire \$auto$builder.cc:364:Unop$7343 ;
  wire \$auto$builder.cc:364:Unop$7351 ;
  wire \$auto$builder.cc:364:Unop$7365 ;
  wire \$auto$builder.cc:364:Unop$7377 ;
  wire \$auto$builder.cc:364:Unop$7391 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17886 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7255 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7263 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7325 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$auto$builder.cc:364:Unop$7241 ;
  assign \$auto$builder.cc:338:Biop$7297  = 2'h3 > \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7303  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7313  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \$auto$builder.cc:338:Biop$7331  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$auto$builder.cc:364:Unop$7329  | \$auto$builder.cc:338:Biop$7331 ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$auto$builder.cc:364:Unop$7343 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$auto$builder.cc:338:Biop$7353  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$auto$builder.cc:364:Unop$7351  | \$auto$builder.cc:338:Biop$7353 ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$auto$builder.cc:364:Unop$7365 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$auto$builder.cc:338:Biop$7379  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$auto$builder.cc:364:Unop$7377  | \$auto$builder.cc:338:Biop$7379 ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$auto$builder.cc:364:Unop$7391 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign \$auto$builder.cc:364:Unop$7241  = ~ gnt_i;
  assign \$auto$builder.cc:364:Unop$7329  = ~ \gen_arbiter.req_nodes [1];
  assign \$auto$builder.cc:364:Unop$7343  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$7351  = ~ \gen_arbiter.req_d [0];
  assign \$auto$builder.cc:364:Unop$7365  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$7377  = ~ \gen_arbiter.req_d [2];
  assign \$auto$builder.cc:364:Unop$7391  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17886 ) \gen_arbiter.rr_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7325 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17886  = | { \$auto$builder.cc:338:Biop$7313 , flush_i };
  assign \$auto$builder.cc:338:Biop$7273  = ! \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7279  = | \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$builder.cc:338:Biop$7273  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$builder.cc:338:Biop$7279  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$builder.cc:338:Biop$7297  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$builder.cc:338:Biop$7303  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  (* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7255 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7263 ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7325  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7263  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7255  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[2].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$7546 ;
  wire \$auto$builder.cc:338:Biop$7552 ;
  wire \$auto$builder.cc:338:Biop$7570 ;
  wire \$auto$builder.cc:338:Biop$7576 ;
  wire \$auto$builder.cc:338:Biop$7586 ;
  wire \$auto$builder.cc:338:Biop$7604 ;
  wire \$auto$builder.cc:338:Biop$7626 ;
  wire \$auto$builder.cc:338:Biop$7652 ;
  wire \$auto$builder.cc:364:Unop$7514 ;
  wire \$auto$builder.cc:364:Unop$7602 ;
  wire \$auto$builder.cc:364:Unop$7616 ;
  wire \$auto$builder.cc:364:Unop$7624 ;
  wire \$auto$builder.cc:364:Unop$7638 ;
  wire \$auto$builder.cc:364:Unop$7650 ;
  wire \$auto$builder.cc:364:Unop$7664 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17889 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7528 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7536 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7598 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$auto$builder.cc:364:Unop$7514 ;
  assign \$auto$builder.cc:338:Biop$7570  = 2'h3 > \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7576  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7586  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \$auto$builder.cc:338:Biop$7604  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$auto$builder.cc:364:Unop$7602  | \$auto$builder.cc:338:Biop$7604 ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$auto$builder.cc:364:Unop$7616 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$auto$builder.cc:338:Biop$7626  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$auto$builder.cc:364:Unop$7624  | \$auto$builder.cc:338:Biop$7626 ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$auto$builder.cc:364:Unop$7638 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$auto$builder.cc:338:Biop$7652  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$auto$builder.cc:364:Unop$7650  | \$auto$builder.cc:338:Biop$7652 ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$auto$builder.cc:364:Unop$7664 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign \$auto$builder.cc:364:Unop$7514  = ~ gnt_i;
  assign \$auto$builder.cc:364:Unop$7602  = ~ \gen_arbiter.req_nodes [1];
  assign \$auto$builder.cc:364:Unop$7616  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$7624  = ~ \gen_arbiter.req_d [0];
  assign \$auto$builder.cc:364:Unop$7638  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$7650  = ~ \gen_arbiter.req_d [2];
  assign \$auto$builder.cc:364:Unop$7664  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17889 ) \gen_arbiter.rr_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7598 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17889  = | { \$auto$builder.cc:338:Biop$7586 , flush_i };
  assign \$auto$builder.cc:338:Biop$7546  = ! \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7552  = | \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$builder.cc:338:Biop$7546  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$builder.cc:338:Biop$7552  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$builder.cc:338:Biop$7570  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$builder.cc:338:Biop$7576  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  (* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7528 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7536 ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7598  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7536  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7528  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[3].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "../rtl/common_cells/rr_arb_tree.sv:49.8" *)
module \rr_arb_tree$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb (clk_i, rst_ni, req_i, gnt_o, req_o, gnt_i, idx_o, flush_i, data_i, data_o, rr_i);
  wire \$auto$builder.cc:338:Biop$7819 ;
  wire \$auto$builder.cc:338:Biop$7825 ;
  wire \$auto$builder.cc:338:Biop$7843 ;
  wire \$auto$builder.cc:338:Biop$7849 ;
  wire \$auto$builder.cc:338:Biop$7859 ;
  wire \$auto$builder.cc:338:Biop$7877 ;
  wire \$auto$builder.cc:338:Biop$7899 ;
  wire \$auto$builder.cc:338:Biop$7925 ;
  wire \$auto$builder.cc:364:Unop$7787 ;
  wire \$auto$builder.cc:364:Unop$7875 ;
  wire \$auto$builder.cc:364:Unop$7889 ;
  wire \$auto$builder.cc:364:Unop$7897 ;
  wire \$auto$builder.cc:364:Unop$7911 ;
  wire \$auto$builder.cc:364:Unop$7923 ;
  wire \$auto$builder.cc:364:Unop$7937 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17892 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7801 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7809 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *)
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7871 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:89.31" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:103.31" *)
  input [283:0] data_i;
  wire [283:0] data_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:109.31" *)
  output [70:0] data_o;
  wire [70:0] data_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:93.31" *)
  input flush_i;
  wire flush_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:126.33" *)
  wire [212:0] \gen_arbiter.data_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.40" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.40" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.53" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:193.27" *)
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:192.27" *)
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:191.27" *)
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.16" *)
  wire \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:146.24" *)
  reg \gen_arbiter.gen_int_rr.gen_lock.lock_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:147.27" *)
  reg [3:0] \gen_arbiter.gen_int_rr.gen_lock.req_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:245.15" *)
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:127.33" *)
  wire [2:0] \gen_arbiter.gnt_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:131.33" *)
  wire [3:0] \gen_arbiter.req_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:128.33" *)
  wire [2:0] \gen_arbiter.req_nodes ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:130.33" *)
  reg [1:0] \gen_arbiter.rr_q ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:107.31" *)
  input gnt_i;
  wire gnt_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:100.31" *)
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:111.31" *)
  output [1:0] idx_o;
  wire [1:0] idx_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:97.31" *)
  input [3:0] req_i;
  wire [3:0] req_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:105.31" *)
  output req_o;
  wire req_o;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:95.31" *)
  input [1:0] rr_i;
  wire [1:0] rr_i;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:91.31" *)
  input rst_ni;
  wire rst_ni;
  assign \gen_arbiter.gen_int_rr.gen_lock.lock_d  = req_o & \$auto$builder.cc:364:Unop$7787 ;
  assign \$auto$builder.cc:338:Biop$7843  = 2'h3 > \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7849  = 2'h3 <= \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7859  = gnt_i && req_o;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \$auto$builder.cc:338:Biop$7877  = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = \$auto$builder.cc:364:Unop$7875  | \$auto$builder.cc:338:Biop$7877 ;
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & \$auto$builder.cc:364:Unop$7889 ;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_d [0] | \gen_arbiter.req_d [1];
  assign \$auto$builder.cc:338:Biop$7899  = \gen_arbiter.req_d [1] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = \$auto$builder.cc:364:Unop$7897  | \$auto$builder.cc:338:Biop$7899 ;
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & \$auto$builder.cc:364:Unop$7911 ;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [2] = \gen_arbiter.req_d [2] | \gen_arbiter.req_d [3];
  assign \$auto$builder.cc:338:Biop$7925  = \gen_arbiter.req_d [3] & \gen_arbiter.rr_q [0];
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = \$auto$builder.cc:364:Unop$7923  | \$auto$builder.cc:338:Biop$7925 ;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & \$auto$builder.cc:364:Unop$7937 ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign \$auto$builder.cc:364:Unop$7787  = ~ gnt_i;
  assign \$auto$builder.cc:364:Unop$7875  = ~ \gen_arbiter.req_nodes [1];
  assign \$auto$builder.cc:364:Unop$7889  = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$7897  = ~ \gen_arbiter.req_d [0];
  assign \$auto$builder.cc:364:Unop$7911  = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \$auto$builder.cc:364:Unop$7923  = ~ \gen_arbiter.req_d [2];
  assign \$auto$builder.cc:364:Unop$7937  = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:226.7" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17892 ) \gen_arbiter.rr_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7871 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17892  = | { \$auto$builder.cc:338:Biop$7859 , flush_i };
  assign \$auto$builder.cc:338:Biop$7819  = ! \gen_arbiter.rr_q ;
  assign \$auto$builder.cc:338:Biop$7825  = | \gen_arbiter.rr_q ;
  assign \gen_arbiter.req_d  = \gen_arbiter.gen_int_rr.gen_lock.lock_q  ? \gen_arbiter.gen_int_rr.gen_lock.req_q  : req_i;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = \$auto$builder.cc:338:Biop$7819  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = \$auto$builder.cc:338:Biop$7825  & \gen_arbiter.req_d [1];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = \gen_arbiter.rr_q [1] ? 1'h0 : \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = \gen_arbiter.rr_q [1] & \gen_arbiter.req_d [2];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = \$auto$builder.cc:338:Biop$7843  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = \$auto$builder.cc:338:Biop$7849  & \gen_arbiter.req_d [3];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  (* src = "../rtl/common_cells/rr_arb_tree.sv:152.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= 1'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.lock_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7801 ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:175.9" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.gen_int_rr.gen_lock.req_q  <= 4'h0;
    else \gen_arbiter.gen_int_rr.gen_lock.req_q  <= \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7809 ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.rr_q$7871  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:231.13-231.26|../rtl/common_cells/rr_arb_tree.sv:230.11-234.14" *) 2'h0 : \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.req_q$7809  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:180.15-180.28|../rtl/common_cells/rr_arb_tree.sv:179.13-183.16" *) 4'h0 : \gen_arbiter.req_d ;
  assign \$auto$slang_frontend.cc:694:finish$\gen_arbiter.gen_int_rr.gen_lock.lock_q$7801  = flush_i ? (* full_case = 32'd1 *) (* src = "../rtl/common_cells/rr_arb_tree.sv:157.15-157.28|../rtl/common_cells/rr_arb_tree.sv:156.13-160.16" *) 1'h0 : \gen_arbiter.gen_int_rr.gen_lock.lock_d ;
  (* src = "../rtl/common_cells/rr_arb_tree.sv:212.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3:1], \gen_arbiter.req_d [0] })
  );
  (* src = "../rtl/common_cells/rr_arb_tree.sv:203.11" *)
  \lzc$croc_chip.i_croc_soc.i_croc.i_main_xbar.gen_mux[4].i_mux.i_rr_arb.gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i({ \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3:1], 1'h0 })
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = \gen_arbiter.req_d [0];
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = 1'h0;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
endmodule

(* src = "../rtl/common_cells/rstgen.sv:13.8" *)
module \rstgen$croc_chip.i_croc_soc.i_rstgen (clk_i, rst_ni, test_mode_i, rst_no, init_no);
  (* src = "../rtl/common_cells/rstgen.sv:14.18" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/rstgen.sv:18.18" *)
  output init_no;
  wire init_no;
  (* src = "../rtl/common_cells/rstgen.sv:15.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/rstgen.sv:17.18" *)
  output rst_no;
  wire rst_no;
  (* src = "../rtl/common_cells/rstgen.sv:16.18" *)
  input test_mode_i;
  wire test_mode_i;
  (* src = "../rtl/common_cells/rstgen.sv:21.19" *)
  \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass  i_rstgen_bypass (
    .clk_i(clk_i),
    .init_no(init_no),
    .rst_ni(rst_ni),
    .rst_no(rst_no),
    .rst_test_mode_ni(rst_ni),
    .test_mode_i(test_mode_i)
  );
endmodule

(* src = "../rtl/common_cells/rstgen_bypass.sv:15.8" *)
module \rstgen_bypass$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass (clk_i, rst_ni, test_mode_i, rst_no, init_no, rst_test_mode_ni);
  (* src = "../rtl/common_cells/rstgen_bypass.sv:18.18" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/common_cells/rstgen_bypass.sv:23.18" *)
  output init_no;
  wire init_no;
  (* src = "../rtl/common_cells/rstgen_bypass.sv:27.11" *)
  wire rst_n;
  (* src = "../rtl/common_cells/rstgen_bypass.sv:19.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/rstgen_bypass.sv:22.18" *)
  output rst_no;
  wire rst_no;
  (* src = "../rtl/common_cells/rstgen_bypass.sv:20.18" *)
  input rst_test_mode_ni;
  wire rst_test_mode_ni;
  (* src = "../rtl/common_cells/rstgen_bypass.sv:29.25" *)
  reg [3:0] synch_regs_q;
  (* src = "../rtl/common_cells/rstgen_bypass.sv:21.18" *)
  input test_mode_i;
  wire test_mode_i;
  (* src = "../rtl/common_cells/rstgen_bypass.sv:53.5" *)
  always @(posedge clk_i, negedge rst_n)
    if (!rst_n) synch_regs_q <= 4'h0;
    else synch_regs_q <= { synch_regs_q[2:0], 1'h1 };
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/rstgen_bypass.sv:46.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no  i_tc_clk_mux2_init_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(1'h1),
    .clk_o(init_no),
    .clk_sel_i(test_mode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/rstgen_bypass.sv:32.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n  i_tc_clk_mux2_rst_n (
    .clk0_i(rst_ni),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_n),
    .clk_sel_i(test_mode_i)
  );
  (* keep_hierarchy = 32'd1 *)
  (* src = "../rtl/common_cells/rstgen_bypass.sv:39.17" *)
  \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no  i_tc_clk_mux2_rst_no (
    .clk0_i(synch_regs_q[3]),
    .clk1_i(rst_test_mode_ni),
    .clk_o(rst_no),
    .clk_sel_i(test_mode_i)
  );
endmodule

(* src = "../rtl/apb_uart/slib_clock_div.sv:35.8" *)
module \slib_clock_div$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG2 (CLK, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8545 ;
  wire [2:0] \$auto$builder.cc:338:Biop$8549 ;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:58.7-66.26" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\iCounter$8550 ;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:56.5-67.20" *)
  wire \$auto$slang_frontend.cc:694:finish$\iQ$8553 ;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:39.16" *)
  output Q;
  reg Q;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:44.27" *)
  reg [2:0] iCounter;
  assign \$auto$builder.cc:338:Biop$8545  = iCounter == 3'h7;
  assign \$auto$builder.cc:338:Biop$8549  = iCounter + 1'h1;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 3'h0;
    else if (CE) iCounter <= \$auto$slang_frontend.cc:694:finish$\iCounter$8550 ;
  (* src = "../rtl/apb_uart/slib_clock_div.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$auto$slang_frontend.cc:694:finish$\iQ$8553 ;
  assign \$auto$slang_frontend.cc:694:finish$\iCounter$8550  = \$auto$builder.cc:338:Biop$8545  ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_clock_div.sv:59.19-62.26|../rtl/apb_uart/slib_clock_div.sv:58.7-66.26" *) 3'h0 : \$auto$builder.cc:338:Biop$8549 ;
  assign \$auto$slang_frontend.cc:694:finish$\iQ$8553  = CE & (* src = "../rtl/apb_uart/slib_clock_div.sv:58.7-66.26|../rtl/apb_uart/slib_clock_div.sv:56.5-67.20" *) \$auto$builder.cc:338:Biop$8545 ;
endmodule

(* src = "../rtl/apb_uart/slib_counter.sv:35.8" *)
module \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC (CLK, D, Q, RST, CLEAR, LOAD, ENABLE, DOWN, OVERFLOW);
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17896 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17899 ;
  wire [4:0] \$auto$opt_share.cc:222:merge_operators$17439 ;
  wire [4:0] \$auto$rtlil.cc:2874:Mux$17441 ;
  (* src = "../rtl/apb_uart/slib_counter.sv:63.11-78.11" *)
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\iCounter$10038 ;
  (* src = "../rtl/apb_uart/slib_counter.sv:58.6-78.11" *)
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\iCounter$10039 ;
  (* src = "../rtl/apb_uart/slib_counter.sv:80.6-83.11" *)
  wire \$auto$slang_frontend.cc:694:finish$\iCounter[4]$10044 ;
  (* src = "../rtl/apb_uart/slib_counter.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "../rtl/apb_uart/slib_counter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_counter.sv:42.28" *)
  input [3:0] D;
  wire [3:0] D;
  (* src = "../rtl/apb_uart/slib_counter.sv:41.14" *)
  input DOWN;
  wire DOWN;
  (* src = "../rtl/apb_uart/slib_counter.sv:40.14" *)
  input ENABLE;
  wire ENABLE;
  (* src = "../rtl/apb_uart/slib_counter.sv:39.14" *)
  input LOAD;
  wire LOAD;
  (* src = "../rtl/apb_uart/slib_counter.sv:44.16" *)
  output OVERFLOW;
  reg OVERFLOW;
  (* src = "../rtl/apb_uart/slib_counter.sv:43.30" *)
  output [3:0] Q;
  reg [3:0] Q;
  (* src = "../rtl/apb_uart/slib_counter.sv:37.14" *)
  input RST;
  wire RST;
  assign \$auto$opt_share.cc:222:merge_operators$17439  = { OVERFLOW, Q } - { \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], 1'h1 };
  (* src = "../rtl/apb_uart/slib_counter.sv:50.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) OVERFLOW <= 1'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17896 ) OVERFLOW <= \$auto$slang_frontend.cc:694:finish$\iCounter[4]$10044 ;
  (* src = "../rtl/apb_uart/slib_counter.sv:50.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 4'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17899 ) Q <= \$auto$slang_frontend.cc:694:finish$\iCounter$10039 [3:0];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17896  = | { ENABLE, LOAD, OVERFLOW, CLEAR };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17899  = | { ENABLE, LOAD, CLEAR };
  assign \$auto$rtlil.cc:2874:Mux$17441 [4] = ~ DOWN;
  assign \$auto$slang_frontend.cc:694:finish$\iCounter[4]$10044  = OVERFLOW ? (* src = "../rtl/apb_uart/slib_counter.sv:82.11-82.32|../rtl/apb_uart/slib_counter.sv:80.6-83.11" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\iCounter$10039 [4];
  assign \$auto$slang_frontend.cc:694:finish$\iCounter$10038  = LOAD ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_counter.sv:65.11-65.45|../rtl/apb_uart/slib_counter.sv:63.11-78.11" *) { 1'h0, D } : \$auto$opt_share.cc:222:merge_operators$17439 ;
  assign \$auto$slang_frontend.cc:694:finish$\iCounter$10039  = CLEAR ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_counter.sv:61.11-61.25|../rtl/apb_uart/slib_counter.sv:58.6-78.11" *) 5'h00 : \$auto$slang_frontend.cc:694:finish$\iCounter$10038 ;
  assign \$auto$rtlil.cc:2874:Mux$17441 [3:0] = { \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], \$auto$rtlil.cc:2874:Mux$17441 [4], 1'h1 };
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BIDET (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8403 ;
  wire \$auto$builder.cc:338:Biop$8415 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8403  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8403  && D;
  assign \$auto$builder.cc:338:Biop$8415  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8415 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_CTS (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8426 ;
  wire \$auto$builder.cc:338:Biop$8438 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8426  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8426  && D;
  assign \$auto$builder.cc:338:Biop$8438  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8438 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DCD (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8495 ;
  wire \$auto$builder.cc:338:Biop$8507 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8495  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8495  && D;
  assign \$auto$builder.cc:338:Biop$8507  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8507 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_DSR (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8449 ;
  wire \$auto$builder.cc:338:Biop$8461 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8449  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8449  && D;
  assign \$auto$builder.cc:338:Biop$8461  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8461 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_ED_RI (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8472 ;
  wire \$auto$builder.cc:338:Biop$8484 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8472  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8472  && D;
  assign \$auto$builder.cc:338:Biop$8484  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8484 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_FEDET (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8380 ;
  wire \$auto$builder.cc:338:Biop$8392 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8380  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8380  && D;
  assign \$auto$builder.cc:338:Biop$8392  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8392 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC_THRE_ED (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8334 ;
  wire \$auto$builder.cc:338:Biop$8346 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8334  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8334  && D;
  assign \$auto$builder.cc:338:Biop$8346  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8346 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_PEDET (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8357 ;
  wire \$auto$builder.cc:338:Biop$8369 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8357  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8357  && D;
  assign \$auto$builder.cc:338:Biop$8369  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8369 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_edge_detect.sv:35.8" *)
module \slib_edge_detect$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RCLK (CLK, D, RST, RE, FE);
  wire \$auto$builder.cc:338:Biop$8558 ;
  wire \$auto$builder.cc:338:Biop$8570 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:40.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:39.16" *)
  output RE;
  wire RE;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:44.5" *)
  reg iDd;
  assign \$auto$builder.cc:338:Biop$8558  = ~ iDd;
  assign RE = \$auto$builder.cc:338:Biop$8558  && D;
  assign \$auto$builder.cc:338:Biop$8570  = ~ D;
  assign FE = iDd && \$auto$builder.cc:338:Biop$8570 ;
  (* src = "../rtl/apb_uart/slib_edge_detect.sv:46.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDd <= 1'h0;
    else iDd <= D;
endmodule

(* src = "../rtl/apb_uart/slib_fifo.sv:35.8" *)
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire [351:0] \$auto$bmuxmap.cc:84:execute$18342 ;
  wire [175:0] \$auto$bmuxmap.cc:84:execute$18375 ;
  wire [87:0] \$auto$bmuxmap.cc:84:execute$18392 ;
  wire [43:0] \$auto$bmuxmap.cc:84:execute$18401 ;
  wire [21:0] \$auto$bmuxmap.cc:84:execute$18406 ;
  wire [10:0] \$auto$bmuxmap.cc:84:execute$18409 ;
  wire \$auto$builder.cc:338:Biop$8763 ;
  wire \$auto$builder.cc:338:Biop$8765 ;
  wire \$auto$builder.cc:338:Biop$8778 ;
  wire \$auto$builder.cc:338:Biop$8780 ;
  wire [6:0] \$auto$builder.cc:338:Biop$8784 ;
  wire \$auto$builder.cc:338:Biop$8789 ;
  wire \$auto$builder.cc:338:Biop$8791 ;
  (* unused_bits = "7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$auto$builder.cc:338:Biop$8795 ;
  wire \$auto$builder.cc:338:Biop$8804 ;
  wire \$auto$builder.cc:338:Biop$8917 ;
  wire \$auto$builder.cc:338:Biop$8921 ;
  wire \$auto$builder.cc:338:Biop$8925 ;
  wire \$auto$builder.cc:338:Biop$8932 ;
  wire \$auto$builder.cc:338:Biop$8936 ;
  wire \$auto$builder.cc:338:Biop$8940 ;
  wire \$auto$demuxmap.cc:63:execute$18550 ;
  wire \$auto$demuxmap.cc:63:execute$18553 ;
  wire \$auto$demuxmap.cc:63:execute$18556 ;
  wire \$auto$demuxmap.cc:63:execute$18559 ;
  wire \$auto$demuxmap.cc:63:execute$18562 ;
  wire \$auto$demuxmap.cc:63:execute$18565 ;
  wire \$auto$demuxmap.cc:63:execute$18568 ;
  wire \$auto$demuxmap.cc:63:execute$18571 ;
  wire \$auto$demuxmap.cc:63:execute$18574 ;
  wire \$auto$demuxmap.cc:63:execute$18577 ;
  wire \$auto$demuxmap.cc:63:execute$18580 ;
  wire \$auto$demuxmap.cc:63:execute$18583 ;
  wire \$auto$demuxmap.cc:63:execute$18586 ;
  wire \$auto$demuxmap.cc:63:execute$18589 ;
  wire \$auto$demuxmap.cc:63:execute$18592 ;
  wire \$auto$demuxmap.cc:63:execute$18595 ;
  wire \$auto$demuxmap.cc:63:execute$18598 ;
  wire \$auto$demuxmap.cc:63:execute$18601 ;
  wire \$auto$demuxmap.cc:63:execute$18604 ;
  wire \$auto$demuxmap.cc:63:execute$18607 ;
  wire \$auto$demuxmap.cc:63:execute$18610 ;
  wire \$auto$demuxmap.cc:63:execute$18613 ;
  wire \$auto$demuxmap.cc:63:execute$18616 ;
  wire \$auto$demuxmap.cc:63:execute$18619 ;
  wire \$auto$demuxmap.cc:63:execute$18622 ;
  wire \$auto$demuxmap.cc:63:execute$18625 ;
  wire \$auto$demuxmap.cc:63:execute$18628 ;
  wire \$auto$demuxmap.cc:63:execute$18631 ;
  wire \$auto$demuxmap.cc:63:execute$18634 ;
  wire \$auto$demuxmap.cc:63:execute$18637 ;
  wire \$auto$demuxmap.cc:63:execute$18640 ;
  wire \$auto$demuxmap.cc:63:execute$18643 ;
  wire \$auto$demuxmap.cc:63:execute$18646 ;
  wire \$auto$demuxmap.cc:63:execute$18649 ;
  wire \$auto$demuxmap.cc:63:execute$18652 ;
  wire \$auto$demuxmap.cc:63:execute$18655 ;
  wire \$auto$demuxmap.cc:63:execute$18658 ;
  wire \$auto$demuxmap.cc:63:execute$18661 ;
  wire \$auto$demuxmap.cc:63:execute$18664 ;
  wire \$auto$demuxmap.cc:63:execute$18667 ;
  wire \$auto$demuxmap.cc:63:execute$18670 ;
  wire \$auto$demuxmap.cc:63:execute$18673 ;
  wire \$auto$demuxmap.cc:63:execute$18676 ;
  wire \$auto$demuxmap.cc:63:execute$18679 ;
  wire \$auto$demuxmap.cc:63:execute$18682 ;
  wire \$auto$demuxmap.cc:63:execute$18685 ;
  wire \$auto$demuxmap.cc:63:execute$18688 ;
  wire \$auto$demuxmap.cc:63:execute$18691 ;
  wire \$auto$demuxmap.cc:63:execute$18694 ;
  wire \$auto$demuxmap.cc:63:execute$18697 ;
  wire \$auto$demuxmap.cc:63:execute$18700 ;
  wire \$auto$demuxmap.cc:63:execute$18703 ;
  wire \$auto$demuxmap.cc:63:execute$18706 ;
  wire \$auto$demuxmap.cc:63:execute$18709 ;
  wire \$auto$demuxmap.cc:63:execute$18712 ;
  wire \$auto$demuxmap.cc:63:execute$18715 ;
  wire \$auto$demuxmap.cc:63:execute$18718 ;
  wire \$auto$demuxmap.cc:63:execute$18721 ;
  wire \$auto$demuxmap.cc:63:execute$18724 ;
  wire \$auto$demuxmap.cc:63:execute$18727 ;
  wire \$auto$demuxmap.cc:63:execute$18730 ;
  wire \$auto$demuxmap.cc:63:execute$18733 ;
  wire \$auto$demuxmap.cc:63:execute$18736 ;
  wire \$auto$demuxmap.cc:63:execute$18739 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17902 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17905 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17908 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17390 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17394 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$18159 ;
  wire \$auto$rtlil.cc:2797:Ge$8889 ;
  wire [5:0] \$auto$rtlil.cc:2874:Mux$18161 ;
  wire [10:0] \$auto$rtlil.cc:2874:Mux$8906 ;
  wire [703:0] \$auto$rtlil.cc:2875:Bwmux$8897 ;
  wire [703:0] \$auto$rtlil.cc:2896:Demux$8895 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iRDAddr$8802 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:133.3-150.10" *)
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\iUSAGE$8946 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iWRAddr$8801 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "../rtl/apb_uart/slib_fifo.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_fifo.sv:41.28" *)
  input [10:0] D;
  wire [10:0] D;
  (* src = "../rtl/apb_uart/slib_fifo.sv:43.16" *)
  output EMPTY;
  reg EMPTY;
  (* src = "../rtl/apb_uart/slib_fifo.sv:44.16" *)
  output FULL;
  wire FULL;
  (* src = "../rtl/apb_uart/slib_fifo.sv:42.30" *)
  output [10:0] Q;
  reg [10:0] Q;
  (* src = "../rtl/apb_uart/slib_fifo.sv:40.14" *)
  input READ;
  wire READ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_fifo.sv:45.31" *)
  output [5:0] USAGE;
  reg [5:0] USAGE;
  (* src = "../rtl/apb_uart/slib_fifo.sv:39.14" *)
  input WRITE;
  wire WRITE;
  (* src = "../rtl/apb_uart/slib_fifo.sv:55.17" *)
  reg [703:0] iFIFOMem;
  (* src = "../rtl/apb_uart/slib_fifo.sv:52.16" *)
  reg [6:0] iRDAddr;
  (* src = "../rtl/apb_uart/slib_fifo.sv:51.16" *)
  reg [6:0] iWRAddr;
  assign \$auto$bmuxmap.cc:84:execute$18342 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[21:11] : iFIFOMem[10:0];
  assign \$auto$bmuxmap.cc:84:execute$18342 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[43:33] : iFIFOMem[32:22];
  assign \$auto$bmuxmap.cc:84:execute$18342 [32:22] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[65:55] : iFIFOMem[54:44];
  assign \$auto$bmuxmap.cc:84:execute$18342 [43:33] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[87:77] : iFIFOMem[76:66];
  assign \$auto$bmuxmap.cc:84:execute$18342 [54:44] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[109:99] : iFIFOMem[98:88];
  assign \$auto$bmuxmap.cc:84:execute$18342 [65:55] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[131:121] : iFIFOMem[120:110];
  assign \$auto$bmuxmap.cc:84:execute$18342 [76:66] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[153:143] : iFIFOMem[142:132];
  assign \$auto$bmuxmap.cc:84:execute$18342 [87:77] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[175:165] : iFIFOMem[164:154];
  assign \$auto$bmuxmap.cc:84:execute$18342 [98:88] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[197:187] : iFIFOMem[186:176];
  assign \$auto$bmuxmap.cc:84:execute$18342 [109:99] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[219:209] : iFIFOMem[208:198];
  assign \$auto$bmuxmap.cc:84:execute$18342 [120:110] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[241:231] : iFIFOMem[230:220];
  assign \$auto$bmuxmap.cc:84:execute$18342 [131:121] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[263:253] : iFIFOMem[252:242];
  assign \$auto$bmuxmap.cc:84:execute$18342 [142:132] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[285:275] : iFIFOMem[274:264];
  assign \$auto$bmuxmap.cc:84:execute$18342 [153:143] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[307:297] : iFIFOMem[296:286];
  assign \$auto$bmuxmap.cc:84:execute$18342 [164:154] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[329:319] : iFIFOMem[318:308];
  assign \$auto$bmuxmap.cc:84:execute$18342 [175:165] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[351:341] : iFIFOMem[340:330];
  assign \$auto$bmuxmap.cc:84:execute$18342 [186:176] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[373:363] : iFIFOMem[362:352];
  assign \$auto$bmuxmap.cc:84:execute$18342 [197:187] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[395:385] : iFIFOMem[384:374];
  assign \$auto$bmuxmap.cc:84:execute$18342 [208:198] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[417:407] : iFIFOMem[406:396];
  assign \$auto$bmuxmap.cc:84:execute$18342 [219:209] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[439:429] : iFIFOMem[428:418];
  assign \$auto$bmuxmap.cc:84:execute$18342 [230:220] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[461:451] : iFIFOMem[450:440];
  assign \$auto$bmuxmap.cc:84:execute$18342 [241:231] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[483:473] : iFIFOMem[472:462];
  assign \$auto$bmuxmap.cc:84:execute$18342 [252:242] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[505:495] : iFIFOMem[494:484];
  assign \$auto$bmuxmap.cc:84:execute$18342 [263:253] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[527:517] : iFIFOMem[516:506];
  assign \$auto$bmuxmap.cc:84:execute$18342 [274:264] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[549:539] : iFIFOMem[538:528];
  assign \$auto$bmuxmap.cc:84:execute$18342 [285:275] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[571:561] : iFIFOMem[560:550];
  assign \$auto$bmuxmap.cc:84:execute$18342 [296:286] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[593:583] : iFIFOMem[582:572];
  assign \$auto$bmuxmap.cc:84:execute$18342 [307:297] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[615:605] : iFIFOMem[604:594];
  assign \$auto$bmuxmap.cc:84:execute$18342 [318:308] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[637:627] : iFIFOMem[626:616];
  assign \$auto$bmuxmap.cc:84:execute$18342 [329:319] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[659:649] : iFIFOMem[648:638];
  assign \$auto$bmuxmap.cc:84:execute$18342 [340:330] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[681:671] : iFIFOMem[670:660];
  assign \$auto$bmuxmap.cc:84:execute$18342 [351:341] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [0] ? iFIFOMem[703:693] : iFIFOMem[692:682];
  assign \$auto$bmuxmap.cc:84:execute$18375 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [21:11] : \$auto$bmuxmap.cc:84:execute$18342 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$18375 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [43:33] : \$auto$bmuxmap.cc:84:execute$18342 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$18375 [32:22] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [65:55] : \$auto$bmuxmap.cc:84:execute$18342 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$18375 [43:33] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [87:77] : \$auto$bmuxmap.cc:84:execute$18342 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$18375 [54:44] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [109:99] : \$auto$bmuxmap.cc:84:execute$18342 [98:88];
  assign \$auto$bmuxmap.cc:84:execute$18375 [65:55] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [131:121] : \$auto$bmuxmap.cc:84:execute$18342 [120:110];
  assign \$auto$bmuxmap.cc:84:execute$18375 [76:66] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [153:143] : \$auto$bmuxmap.cc:84:execute$18342 [142:132];
  assign \$auto$bmuxmap.cc:84:execute$18375 [87:77] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [175:165] : \$auto$bmuxmap.cc:84:execute$18342 [164:154];
  assign \$auto$bmuxmap.cc:84:execute$18375 [98:88] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [197:187] : \$auto$bmuxmap.cc:84:execute$18342 [186:176];
  assign \$auto$bmuxmap.cc:84:execute$18375 [109:99] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [219:209] : \$auto$bmuxmap.cc:84:execute$18342 [208:198];
  assign \$auto$bmuxmap.cc:84:execute$18375 [120:110] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [241:231] : \$auto$bmuxmap.cc:84:execute$18342 [230:220];
  assign \$auto$bmuxmap.cc:84:execute$18375 [131:121] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [263:253] : \$auto$bmuxmap.cc:84:execute$18342 [252:242];
  assign \$auto$bmuxmap.cc:84:execute$18375 [142:132] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [285:275] : \$auto$bmuxmap.cc:84:execute$18342 [274:264];
  assign \$auto$bmuxmap.cc:84:execute$18375 [153:143] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [307:297] : \$auto$bmuxmap.cc:84:execute$18342 [296:286];
  assign \$auto$bmuxmap.cc:84:execute$18375 [164:154] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [329:319] : \$auto$bmuxmap.cc:84:execute$18342 [318:308];
  assign \$auto$bmuxmap.cc:84:execute$18375 [175:165] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [1] ? \$auto$bmuxmap.cc:84:execute$18342 [351:341] : \$auto$bmuxmap.cc:84:execute$18342 [340:330];
  assign \$auto$bmuxmap.cc:84:execute$18392 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [2] ? \$auto$bmuxmap.cc:84:execute$18375 [21:11] : \$auto$bmuxmap.cc:84:execute$18375 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$18392 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [2] ? \$auto$bmuxmap.cc:84:execute$18375 [43:33] : \$auto$bmuxmap.cc:84:execute$18375 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$18392 [32:22] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [2] ? \$auto$bmuxmap.cc:84:execute$18375 [65:55] : \$auto$bmuxmap.cc:84:execute$18375 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$18392 [43:33] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [2] ? \$auto$bmuxmap.cc:84:execute$18375 [87:77] : \$auto$bmuxmap.cc:84:execute$18375 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$18392 [54:44] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [2] ? \$auto$bmuxmap.cc:84:execute$18375 [109:99] : \$auto$bmuxmap.cc:84:execute$18375 [98:88];
  assign \$auto$bmuxmap.cc:84:execute$18392 [65:55] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [2] ? \$auto$bmuxmap.cc:84:execute$18375 [131:121] : \$auto$bmuxmap.cc:84:execute$18375 [120:110];
  assign \$auto$bmuxmap.cc:84:execute$18392 [76:66] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [2] ? \$auto$bmuxmap.cc:84:execute$18375 [153:143] : \$auto$bmuxmap.cc:84:execute$18375 [142:132];
  assign \$auto$bmuxmap.cc:84:execute$18392 [87:77] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [2] ? \$auto$bmuxmap.cc:84:execute$18375 [175:165] : \$auto$bmuxmap.cc:84:execute$18375 [164:154];
  assign \$auto$bmuxmap.cc:84:execute$18401 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [3] ? \$auto$bmuxmap.cc:84:execute$18392 [21:11] : \$auto$bmuxmap.cc:84:execute$18392 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$18401 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [3] ? \$auto$bmuxmap.cc:84:execute$18392 [43:33] : \$auto$bmuxmap.cc:84:execute$18392 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$18401 [32:22] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [3] ? \$auto$bmuxmap.cc:84:execute$18392 [65:55] : \$auto$bmuxmap.cc:84:execute$18392 [54:44];
  assign \$auto$bmuxmap.cc:84:execute$18401 [43:33] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [3] ? \$auto$bmuxmap.cc:84:execute$18392 [87:77] : \$auto$bmuxmap.cc:84:execute$18392 [76:66];
  assign \$auto$bmuxmap.cc:84:execute$18406 [10:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [4] ? \$auto$bmuxmap.cc:84:execute$18401 [21:11] : \$auto$bmuxmap.cc:84:execute$18401 [10:0];
  assign \$auto$bmuxmap.cc:84:execute$18406 [21:11] = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [4] ? \$auto$bmuxmap.cc:84:execute$18401 [43:33] : \$auto$bmuxmap.cc:84:execute$18401 [32:22];
  assign \$auto$bmuxmap.cc:84:execute$18409  = \$auto$opt_expr.cc:205:group_cell_inputs$17394 [5] ? \$auto$bmuxmap.cc:84:execute$18406 [21:11] : \$auto$bmuxmap.cc:84:execute$18406 [10:0];
  \$bwmux  #(
    .WIDTH(32'd704)
  ) \$auto$builder.cc:128:Bwmux$8896  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10] }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$8897 )
  );
  assign \$auto$builder.cc:338:Biop$8763  = iRDAddr[5:0] == iWRAddr[5:0];
  assign \$auto$builder.cc:338:Biop$8765  = iRDAddr[6] != iWRAddr[6];
  assign FULL = \$auto$builder.cc:338:Biop$8763  && \$auto$builder.cc:338:Biop$8765 ;
  assign \$auto$builder.cc:338:Biop$8778  = ~ FULL;
  assign \$auto$builder.cc:338:Biop$8780  = WRITE && \$auto$builder.cc:338:Biop$8778 ;
  assign \$auto$builder.cc:338:Biop$8784  = iWRAddr + 1'h1;
  assign \$auto$builder.cc:338:Biop$8789  = ~ EMPTY;
  assign \$auto$builder.cc:338:Biop$8791  = READ && \$auto$builder.cc:338:Biop$8789 ;
  assign \$auto$builder.cc:338:Biop$8795 [6:0] = iRDAddr + 1'h1;
  assign \$auto$builder.cc:338:Biop$8804  = iRDAddr == iWRAddr;
  assign \$auto$builder.cc:338:Biop$8917  = ~ READ;
  assign \$auto$builder.cc:338:Biop$8921  = \$auto$builder.cc:338:Biop$8917  && WRITE;
  assign \$auto$builder.cc:338:Biop$8925  = \$auto$builder.cc:338:Biop$8921  && \$auto$builder.cc:338:Biop$8778 ;
  assign \$auto$builder.cc:338:Biop$8932  = ~ WRITE;
  assign \$auto$builder.cc:338:Biop$8936  = \$auto$builder.cc:338:Biop$8932  && READ;
  assign \$auto$builder.cc:338:Biop$8940  = \$auto$builder.cc:338:Biop$8936  && \$auto$builder.cc:338:Biop$8789 ;
  assign \$auto$opt_share.cc:222:merge_operators$18159  = USAGE - { \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], 1'h1 };
  assign \$auto$rtlil.cc:2797:Ge$8889  = $signed({ 1'h1, \$auto$opt_expr.cc:205:group_cell_inputs$17390  }) >= $signed(7'h40);
  assign \$auto$demuxmap.cc:63:execute$18550  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h00;
  assign \$auto$demuxmap.cc:63:execute$18553  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h01;
  assign \$auto$demuxmap.cc:63:execute$18556  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h02;
  assign \$auto$demuxmap.cc:63:execute$18559  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h03;
  assign \$auto$demuxmap.cc:63:execute$18562  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h04;
  assign \$auto$demuxmap.cc:63:execute$18565  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h05;
  assign \$auto$demuxmap.cc:63:execute$18568  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h06;
  assign \$auto$demuxmap.cc:63:execute$18571  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h07;
  assign \$auto$demuxmap.cc:63:execute$18574  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h08;
  assign \$auto$demuxmap.cc:63:execute$18577  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h09;
  assign \$auto$demuxmap.cc:63:execute$18580  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h0a;
  assign \$auto$demuxmap.cc:63:execute$18583  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h0b;
  assign \$auto$demuxmap.cc:63:execute$18586  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h0c;
  assign \$auto$demuxmap.cc:63:execute$18589  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h0d;
  assign \$auto$demuxmap.cc:63:execute$18592  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h0e;
  assign \$auto$demuxmap.cc:63:execute$18595  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h0f;
  assign \$auto$demuxmap.cc:63:execute$18598  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h10;
  assign \$auto$demuxmap.cc:63:execute$18601  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h11;
  assign \$auto$demuxmap.cc:63:execute$18604  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h12;
  assign \$auto$demuxmap.cc:63:execute$18607  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h13;
  assign \$auto$demuxmap.cc:63:execute$18610  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h14;
  assign \$auto$demuxmap.cc:63:execute$18613  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h15;
  assign \$auto$demuxmap.cc:63:execute$18616  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h16;
  assign \$auto$demuxmap.cc:63:execute$18619  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h17;
  assign \$auto$demuxmap.cc:63:execute$18622  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h18;
  assign \$auto$demuxmap.cc:63:execute$18625  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h19;
  assign \$auto$demuxmap.cc:63:execute$18628  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h1a;
  assign \$auto$demuxmap.cc:63:execute$18631  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h1b;
  assign \$auto$demuxmap.cc:63:execute$18634  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h1c;
  assign \$auto$demuxmap.cc:63:execute$18637  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h1d;
  assign \$auto$demuxmap.cc:63:execute$18640  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h1e;
  assign \$auto$demuxmap.cc:63:execute$18643  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h1f;
  assign \$auto$demuxmap.cc:63:execute$18646  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h20;
  assign \$auto$demuxmap.cc:63:execute$18649  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h21;
  assign \$auto$demuxmap.cc:63:execute$18652  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h22;
  assign \$auto$demuxmap.cc:63:execute$18655  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h23;
  assign \$auto$demuxmap.cc:63:execute$18658  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h24;
  assign \$auto$demuxmap.cc:63:execute$18661  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h25;
  assign \$auto$demuxmap.cc:63:execute$18664  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h26;
  assign \$auto$demuxmap.cc:63:execute$18667  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h27;
  assign \$auto$demuxmap.cc:63:execute$18670  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h28;
  assign \$auto$demuxmap.cc:63:execute$18673  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h29;
  assign \$auto$demuxmap.cc:63:execute$18676  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h2a;
  assign \$auto$demuxmap.cc:63:execute$18679  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h2b;
  assign \$auto$demuxmap.cc:63:execute$18682  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h2c;
  assign \$auto$demuxmap.cc:63:execute$18685  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h2d;
  assign \$auto$demuxmap.cc:63:execute$18688  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h2e;
  assign \$auto$demuxmap.cc:63:execute$18691  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h2f;
  assign \$auto$demuxmap.cc:63:execute$18694  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h30;
  assign \$auto$demuxmap.cc:63:execute$18697  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h31;
  assign \$auto$demuxmap.cc:63:execute$18700  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h32;
  assign \$auto$demuxmap.cc:63:execute$18703  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h33;
  assign \$auto$demuxmap.cc:63:execute$18706  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h34;
  assign \$auto$demuxmap.cc:63:execute$18709  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h35;
  assign \$auto$demuxmap.cc:63:execute$18712  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h36;
  assign \$auto$demuxmap.cc:63:execute$18715  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h37;
  assign \$auto$demuxmap.cc:63:execute$18718  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h38;
  assign \$auto$demuxmap.cc:63:execute$18721  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h39;
  assign \$auto$demuxmap.cc:63:execute$18724  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h3a;
  assign \$auto$demuxmap.cc:63:execute$18727  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h3b;
  assign \$auto$demuxmap.cc:63:execute$18730  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h3c;
  assign \$auto$demuxmap.cc:63:execute$18733  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h3d;
  assign \$auto$demuxmap.cc:63:execute$18736  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h3e;
  assign \$auto$demuxmap.cc:63:execute$18739  = \$auto$opt_expr.cc:205:group_cell_inputs$17390  == 6'h3f;
  assign \$auto$rtlil.cc:2896:Demux$8895 [10] = \$auto$demuxmap.cc:63:execute$18550  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [21] = \$auto$demuxmap.cc:63:execute$18553  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [32] = \$auto$demuxmap.cc:63:execute$18556  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [43] = \$auto$demuxmap.cc:63:execute$18559  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [54] = \$auto$demuxmap.cc:63:execute$18562  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [65] = \$auto$demuxmap.cc:63:execute$18565  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [76] = \$auto$demuxmap.cc:63:execute$18568  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [87] = \$auto$demuxmap.cc:63:execute$18571  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [98] = \$auto$demuxmap.cc:63:execute$18574  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [109] = \$auto$demuxmap.cc:63:execute$18577  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [120] = \$auto$demuxmap.cc:63:execute$18580  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [131] = \$auto$demuxmap.cc:63:execute$18583  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [142] = \$auto$demuxmap.cc:63:execute$18586  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [153] = \$auto$demuxmap.cc:63:execute$18589  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [164] = \$auto$demuxmap.cc:63:execute$18592  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [175] = \$auto$demuxmap.cc:63:execute$18595  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [186] = \$auto$demuxmap.cc:63:execute$18598  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [197] = \$auto$demuxmap.cc:63:execute$18601  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [208] = \$auto$demuxmap.cc:63:execute$18604  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [219] = \$auto$demuxmap.cc:63:execute$18607  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [230] = \$auto$demuxmap.cc:63:execute$18610  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [241] = \$auto$demuxmap.cc:63:execute$18613  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [252] = \$auto$demuxmap.cc:63:execute$18616  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [263] = \$auto$demuxmap.cc:63:execute$18619  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [274] = \$auto$demuxmap.cc:63:execute$18622  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [285] = \$auto$demuxmap.cc:63:execute$18625  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [296] = \$auto$demuxmap.cc:63:execute$18628  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [307] = \$auto$demuxmap.cc:63:execute$18631  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [318] = \$auto$demuxmap.cc:63:execute$18634  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [329] = \$auto$demuxmap.cc:63:execute$18637  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [340] = \$auto$demuxmap.cc:63:execute$18640  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [351] = \$auto$demuxmap.cc:63:execute$18643  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [362] = \$auto$demuxmap.cc:63:execute$18646  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [373] = \$auto$demuxmap.cc:63:execute$18649  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [384] = \$auto$demuxmap.cc:63:execute$18652  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [395] = \$auto$demuxmap.cc:63:execute$18655  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [406] = \$auto$demuxmap.cc:63:execute$18658  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [417] = \$auto$demuxmap.cc:63:execute$18661  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [428] = \$auto$demuxmap.cc:63:execute$18664  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [439] = \$auto$demuxmap.cc:63:execute$18667  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [450] = \$auto$demuxmap.cc:63:execute$18670  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [461] = \$auto$demuxmap.cc:63:execute$18673  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [472] = \$auto$demuxmap.cc:63:execute$18676  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [483] = \$auto$demuxmap.cc:63:execute$18679  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [494] = \$auto$demuxmap.cc:63:execute$18682  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [505] = \$auto$demuxmap.cc:63:execute$18685  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [516] = \$auto$demuxmap.cc:63:execute$18688  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [527] = \$auto$demuxmap.cc:63:execute$18691  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [538] = \$auto$demuxmap.cc:63:execute$18694  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [549] = \$auto$demuxmap.cc:63:execute$18697  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [560] = \$auto$demuxmap.cc:63:execute$18700  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [571] = \$auto$demuxmap.cc:63:execute$18703  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [582] = \$auto$demuxmap.cc:63:execute$18706  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [593] = \$auto$demuxmap.cc:63:execute$18709  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [604] = \$auto$demuxmap.cc:63:execute$18712  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [615] = \$auto$demuxmap.cc:63:execute$18715  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [626] = \$auto$demuxmap.cc:63:execute$18718  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [637] = \$auto$demuxmap.cc:63:execute$18721  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [648] = \$auto$demuxmap.cc:63:execute$18724  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [659] = \$auto$demuxmap.cc:63:execute$18727  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [670] = \$auto$demuxmap.cc:63:execute$18730  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [681] = \$auto$demuxmap.cc:63:execute$18733  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [692] = \$auto$demuxmap.cc:63:execute$18736  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8895 [703] = \$auto$demuxmap.cc:63:execute$18739  ? \$auto$rtlil.cc:2797:Ge$8889  : 1'h0;
  (* src = "../rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iWRAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17902 ) iWRAddr <= \$auto$slang_frontend.cc:694:finish$\iWRAddr$8801 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:124.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) USAGE <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17905 ) USAGE <= \$auto$slang_frontend.cc:694:finish$\iUSAGE$8946 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iRDAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17908 ) iRDAddr <= \$auto$slang_frontend.cc:694:finish$\iRDAddr$8802 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[604:594] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[604:594] <= \$auto$rtlil.cc:2875:Bwmux$8897 [604:594];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[615:605] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[615:605] <= \$auto$rtlil.cc:2875:Bwmux$8897 [615:605];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[626:616] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[626:616] <= \$auto$rtlil.cc:2875:Bwmux$8897 [626:616];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[637:627] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[637:627] <= \$auto$rtlil.cc:2875:Bwmux$8897 [637:627];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[10:0] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[10:0] <= \$auto$rtlil.cc:2875:Bwmux$8897 [10:0];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[21:11] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[21:11] <= \$auto$rtlil.cc:2875:Bwmux$8897 [21:11];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[32:22] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[32:22] <= \$auto$rtlil.cc:2875:Bwmux$8897 [32:22];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[43:33] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[43:33] <= \$auto$rtlil.cc:2875:Bwmux$8897 [43:33];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[648:638] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[648:638] <= \$auto$rtlil.cc:2875:Bwmux$8897 [648:638];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[54:44] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[54:44] <= \$auto$rtlil.cc:2875:Bwmux$8897 [54:44];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[65:55] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[65:55] <= \$auto$rtlil.cc:2875:Bwmux$8897 [65:55];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[76:66] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[76:66] <= \$auto$rtlil.cc:2875:Bwmux$8897 [76:66];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[87:77] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[87:77] <= \$auto$rtlil.cc:2875:Bwmux$8897 [87:77];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[98:88] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[98:88] <= \$auto$rtlil.cc:2875:Bwmux$8897 [98:88];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[109:99] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[109:99] <= \$auto$rtlil.cc:2875:Bwmux$8897 [109:99];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[120:110] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[120:110] <= \$auto$rtlil.cc:2875:Bwmux$8897 [120:110];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[131:121] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[131:121] <= \$auto$rtlil.cc:2875:Bwmux$8897 [131:121];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[142:132] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[142:132] <= \$auto$rtlil.cc:2875:Bwmux$8897 [142:132];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[153:143] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[153:143] <= \$auto$rtlil.cc:2875:Bwmux$8897 [153:143];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[659:649] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[659:649] <= \$auto$rtlil.cc:2875:Bwmux$8897 [659:649];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[164:154] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[164:154] <= \$auto$rtlil.cc:2875:Bwmux$8897 [164:154];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[175:165] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[175:165] <= \$auto$rtlil.cc:2875:Bwmux$8897 [175:165];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[186:176] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[186:176] <= \$auto$rtlil.cc:2875:Bwmux$8897 [186:176];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[197:187] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[197:187] <= \$auto$rtlil.cc:2875:Bwmux$8897 [197:187];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[208:198] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[208:198] <= \$auto$rtlil.cc:2875:Bwmux$8897 [208:198];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[219:209] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[219:209] <= \$auto$rtlil.cc:2875:Bwmux$8897 [219:209];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[230:220] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[230:220] <= \$auto$rtlil.cc:2875:Bwmux$8897 [230:220];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[241:231] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[241:231] <= \$auto$rtlil.cc:2875:Bwmux$8897 [241:231];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[252:242] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[252:242] <= \$auto$rtlil.cc:2875:Bwmux$8897 [252:242];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[263:253] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[263:253] <= \$auto$rtlil.cc:2875:Bwmux$8897 [263:253];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[670:660] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[670:660] <= \$auto$rtlil.cc:2875:Bwmux$8897 [670:660];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[274:264] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[274:264] <= \$auto$rtlil.cc:2875:Bwmux$8897 [274:264];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[285:275] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[285:275] <= \$auto$rtlil.cc:2875:Bwmux$8897 [285:275];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[296:286] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[296:286] <= \$auto$rtlil.cc:2875:Bwmux$8897 [296:286];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[307:297] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[307:297] <= \$auto$rtlil.cc:2875:Bwmux$8897 [307:297];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[318:308] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[318:308] <= \$auto$rtlil.cc:2875:Bwmux$8897 [318:308];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[329:319] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[329:319] <= \$auto$rtlil.cc:2875:Bwmux$8897 [329:319];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[340:330] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[340:330] <= \$auto$rtlil.cc:2875:Bwmux$8897 [340:330];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[351:341] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[351:341] <= \$auto$rtlil.cc:2875:Bwmux$8897 [351:341];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[362:352] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[362:352] <= \$auto$rtlil.cc:2875:Bwmux$8897 [362:352];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[373:363] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[373:363] <= \$auto$rtlil.cc:2875:Bwmux$8897 [373:363];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[681:671] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[681:671] <= \$auto$rtlil.cc:2875:Bwmux$8897 [681:671];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[384:374] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[384:374] <= \$auto$rtlil.cc:2875:Bwmux$8897 [384:374];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[395:385] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[395:385] <= \$auto$rtlil.cc:2875:Bwmux$8897 [395:385];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[406:396] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[406:396] <= \$auto$rtlil.cc:2875:Bwmux$8897 [406:396];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[417:407] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[417:407] <= \$auto$rtlil.cc:2875:Bwmux$8897 [417:407];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[428:418] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[428:418] <= \$auto$rtlil.cc:2875:Bwmux$8897 [428:418];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[439:429] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[439:429] <= \$auto$rtlil.cc:2875:Bwmux$8897 [439:429];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[450:440] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[450:440] <= \$auto$rtlil.cc:2875:Bwmux$8897 [450:440];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[461:451] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[461:451] <= \$auto$rtlil.cc:2875:Bwmux$8897 [461:451];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[472:462] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[472:462] <= \$auto$rtlil.cc:2875:Bwmux$8897 [472:462];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[483:473] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[483:473] <= \$auto$rtlil.cc:2875:Bwmux$8897 [483:473];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[692:682] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[692:682] <= \$auto$rtlil.cc:2875:Bwmux$8897 [692:682];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[494:484] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[494:484] <= \$auto$rtlil.cc:2875:Bwmux$8897 [494:484];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[505:495] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[505:495] <= \$auto$rtlil.cc:2875:Bwmux$8897 [505:495];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[516:506] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[516:506] <= \$auto$rtlil.cc:2875:Bwmux$8897 [516:506];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[527:517] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[527:517] <= \$auto$rtlil.cc:2875:Bwmux$8897 [527:517];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[538:528] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[538:528] <= \$auto$rtlil.cc:2875:Bwmux$8897 [538:528];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[549:539] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[549:539] <= \$auto$rtlil.cc:2875:Bwmux$8897 [549:539];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[560:550] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[560:550] <= \$auto$rtlil.cc:2875:Bwmux$8897 [560:550];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[571:561] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[571:561] <= \$auto$rtlil.cc:2875:Bwmux$8897 [571:561];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[582:572] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[582:572] <= \$auto$rtlil.cc:2875:Bwmux$8897 [582:572];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[593:583] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[593:583] <= \$auto$rtlil.cc:2875:Bwmux$8897 [593:583];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[703:693] <= 11'h000;
    else if (\$auto$builder.cc:338:Biop$8780 ) iFIFOMem[703:693] <= \$auto$rtlil.cc:2875:Bwmux$8897 [703:693];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17902  = | { \$auto$builder.cc:338:Biop$8780 , CLEAR };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17905  = | { \$auto$builder.cc:338:Biop$8940 , \$auto$builder.cc:338:Biop$8925 , CLEAR };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17908  = | { \$auto$builder.cc:338:Biop$8791 , CLEAR };
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17390  = ~ iWRAddr[5:0];
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17394  = ~ iRDAddr[5:0];
  assign \$auto$rtlil.cc:2874:Mux$18161 [5] = ~ \$auto$builder.cc:338:Biop$8940 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 11'h000;
    else Q <= \$auto$rtlil.cc:2874:Mux$8906 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) EMPTY <= 1'h1;
    else EMPTY <= \$auto$builder.cc:338:Biop$8804 ;
  assign \$auto$slang_frontend.cc:694:finish$\iUSAGE$8946  = CLEAR ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_fifo.sv:136.1-136.13|../rtl/apb_uart/slib_fifo.sv:133.3-150.10" *) 6'h00 : \$auto$opt_share.cc:222:merge_operators$18159 ;
  assign \$auto$slang_frontend.cc:694:finish$\iRDAddr$8802  = CLEAR ? (* src = "../rtl/apb_uart/slib_fifo.sv:82.11-87.10|../rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$auto$builder.cc:338:Biop$8795 [6:0];
  assign \$auto$slang_frontend.cc:694:finish$\iWRAddr$8801  = CLEAR ? (* src = "../rtl/apb_uart/slib_fifo.sv:82.11-87.10|../rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$auto$builder.cc:338:Biop$8784 ;
  assign \$auto$rtlil.cc:2874:Mux$18161 [4:0] = { \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], \$auto$rtlil.cc:2874:Mux$18161 [5], 1'h1 };
  assign { \$auto$rtlil.cc:2896:Demux$8895 [702:693], \$auto$rtlil.cc:2896:Demux$8895 [691:682], \$auto$rtlil.cc:2896:Demux$8895 [680:671], \$auto$rtlil.cc:2896:Demux$8895 [669:660], \$auto$rtlil.cc:2896:Demux$8895 [658:649], \$auto$rtlil.cc:2896:Demux$8895 [647:638], \$auto$rtlil.cc:2896:Demux$8895 [636:627], \$auto$rtlil.cc:2896:Demux$8895 [625:616], \$auto$rtlil.cc:2896:Demux$8895 [614:605], \$auto$rtlil.cc:2896:Demux$8895 [603:594], \$auto$rtlil.cc:2896:Demux$8895 [592:583], \$auto$rtlil.cc:2896:Demux$8895 [581:572], \$auto$rtlil.cc:2896:Demux$8895 [570:561], \$auto$rtlil.cc:2896:Demux$8895 [559:550], \$auto$rtlil.cc:2896:Demux$8895 [548:539], \$auto$rtlil.cc:2896:Demux$8895 [537:528], \$auto$rtlil.cc:2896:Demux$8895 [526:517], \$auto$rtlil.cc:2896:Demux$8895 [515:506], \$auto$rtlil.cc:2896:Demux$8895 [504:495], \$auto$rtlil.cc:2896:Demux$8895 [493:484], \$auto$rtlil.cc:2896:Demux$8895 [482:473], \$auto$rtlil.cc:2896:Demux$8895 [471:462], \$auto$rtlil.cc:2896:Demux$8895 [460:451], \$auto$rtlil.cc:2896:Demux$8895 [449:440], \$auto$rtlil.cc:2896:Demux$8895 [438:429], \$auto$rtlil.cc:2896:Demux$8895 [427:418], \$auto$rtlil.cc:2896:Demux$8895 [416:407], \$auto$rtlil.cc:2896:Demux$8895 [405:396], \$auto$rtlil.cc:2896:Demux$8895 [394:385], \$auto$rtlil.cc:2896:Demux$8895 [383:374], \$auto$rtlil.cc:2896:Demux$8895 [372:363], \$auto$rtlil.cc:2896:Demux$8895 [361:352], \$auto$rtlil.cc:2896:Demux$8895 [350:341], \$auto$rtlil.cc:2896:Demux$8895 [339:330], \$auto$rtlil.cc:2896:Demux$8895 [328:319], \$auto$rtlil.cc:2896:Demux$8895 [317:308], \$auto$rtlil.cc:2896:Demux$8895 [306:297], \$auto$rtlil.cc:2896:Demux$8895 [295:286], \$auto$rtlil.cc:2896:Demux$8895 [284:275], \$auto$rtlil.cc:2896:Demux$8895 [273:264], \$auto$rtlil.cc:2896:Demux$8895 [262:253], \$auto$rtlil.cc:2896:Demux$8895 [251:242], \$auto$rtlil.cc:2896:Demux$8895 [240:231], \$auto$rtlil.cc:2896:Demux$8895 [229:220], \$auto$rtlil.cc:2896:Demux$8895 [218:209], \$auto$rtlil.cc:2896:Demux$8895 [207:198], \$auto$rtlil.cc:2896:Demux$8895 [196:187], \$auto$rtlil.cc:2896:Demux$8895 [185:176], \$auto$rtlil.cc:2896:Demux$8895 [174:165], \$auto$rtlil.cc:2896:Demux$8895 [163:154], \$auto$rtlil.cc:2896:Demux$8895 [152:143], \$auto$rtlil.cc:2896:Demux$8895 [141:132], \$auto$rtlil.cc:2896:Demux$8895 [130:121], \$auto$rtlil.cc:2896:Demux$8895 [119:110], \$auto$rtlil.cc:2896:Demux$8895 [108:99], \$auto$rtlil.cc:2896:Demux$8895 [97:88], \$auto$rtlil.cc:2896:Demux$8895 [86:77], \$auto$rtlil.cc:2896:Demux$8895 [75:66], \$auto$rtlil.cc:2896:Demux$8895 [64:55], \$auto$rtlil.cc:2896:Demux$8895 [53:44], \$auto$rtlil.cc:2896:Demux$8895 [42:33], \$auto$rtlil.cc:2896:Demux$8895 [31:22], \$auto$rtlil.cc:2896:Demux$8895 [20:11], \$auto$rtlil.cc:2896:Demux$8895 [9:0] } = { \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [703], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [692], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [681], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [670], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [659], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [648], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [637], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [626], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [615], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [604], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [593], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [582], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [571], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [560], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [549], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [538], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [527], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [516], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [505], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [494], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [483], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [472], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [461], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [450], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [439], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [428], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [417], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [406], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [395], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [384], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [373], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [362], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [351], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [340], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [329], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [318], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [307], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [296], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [285], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [274], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [263], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [252], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [241], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [230], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [219], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [208], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [197], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [186], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [175], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [164], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [153], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [142], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [131], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [120], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [109], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [98], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [87], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [76], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [65], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [54], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [43], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [32], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [21], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10], \$auto$rtlil.cc:2896:Demux$8895 [10] };
  assign \$auto$rtlil.cc:2874:Mux$8906  = \$auto$bmuxmap.cc:84:execute$18409 ;
endmodule

(* src = "../rtl/apb_uart/slib_fifo.sv:35.8" *)
module \slib_fifo$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TXFF (CLK, D, FULL, Q, RST, CLEAR, WRITE, READ, EMPTY, USAGE);
  wire [255:0] \$auto$bmuxmap.cc:84:execute$18411 ;
  wire [127:0] \$auto$bmuxmap.cc:84:execute$18444 ;
  wire [63:0] \$auto$bmuxmap.cc:84:execute$18461 ;
  wire [31:0] \$auto$bmuxmap.cc:84:execute$18470 ;
  wire [15:0] \$auto$bmuxmap.cc:84:execute$18475 ;
  wire [7:0] \$auto$bmuxmap.cc:84:execute$18478 ;
  wire \$auto$builder.cc:338:Biop$8578 ;
  wire \$auto$builder.cc:338:Biop$8580 ;
  wire \$auto$builder.cc:338:Biop$8593 ;
  wire \$auto$builder.cc:338:Biop$8595 ;
  wire [6:0] \$auto$builder.cc:338:Biop$8599 ;
  wire \$auto$builder.cc:338:Biop$8604 ;
  wire \$auto$builder.cc:338:Biop$8606 ;
  (* unused_bits = "7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$auto$builder.cc:338:Biop$8610 ;
  wire \$auto$builder.cc:338:Biop$8619 ;
  wire \$auto$builder.cc:338:Biop$8732 ;
  wire \$auto$builder.cc:338:Biop$8736 ;
  wire \$auto$builder.cc:338:Biop$8740 ;
  wire \$auto$builder.cc:338:Biop$8747 ;
  wire \$auto$builder.cc:338:Biop$8751 ;
  wire \$auto$builder.cc:338:Biop$8755 ;
  wire \$auto$demuxmap.cc:63:execute$18742 ;
  wire \$auto$demuxmap.cc:63:execute$18745 ;
  wire \$auto$demuxmap.cc:63:execute$18748 ;
  wire \$auto$demuxmap.cc:63:execute$18751 ;
  wire \$auto$demuxmap.cc:63:execute$18754 ;
  wire \$auto$demuxmap.cc:63:execute$18757 ;
  wire \$auto$demuxmap.cc:63:execute$18760 ;
  wire \$auto$demuxmap.cc:63:execute$18763 ;
  wire \$auto$demuxmap.cc:63:execute$18766 ;
  wire \$auto$demuxmap.cc:63:execute$18769 ;
  wire \$auto$demuxmap.cc:63:execute$18772 ;
  wire \$auto$demuxmap.cc:63:execute$18775 ;
  wire \$auto$demuxmap.cc:63:execute$18778 ;
  wire \$auto$demuxmap.cc:63:execute$18781 ;
  wire \$auto$demuxmap.cc:63:execute$18784 ;
  wire \$auto$demuxmap.cc:63:execute$18787 ;
  wire \$auto$demuxmap.cc:63:execute$18790 ;
  wire \$auto$demuxmap.cc:63:execute$18793 ;
  wire \$auto$demuxmap.cc:63:execute$18796 ;
  wire \$auto$demuxmap.cc:63:execute$18799 ;
  wire \$auto$demuxmap.cc:63:execute$18802 ;
  wire \$auto$demuxmap.cc:63:execute$18805 ;
  wire \$auto$demuxmap.cc:63:execute$18808 ;
  wire \$auto$demuxmap.cc:63:execute$18811 ;
  wire \$auto$demuxmap.cc:63:execute$18814 ;
  wire \$auto$demuxmap.cc:63:execute$18817 ;
  wire \$auto$demuxmap.cc:63:execute$18820 ;
  wire \$auto$demuxmap.cc:63:execute$18823 ;
  wire \$auto$demuxmap.cc:63:execute$18826 ;
  wire \$auto$demuxmap.cc:63:execute$18829 ;
  wire \$auto$demuxmap.cc:63:execute$18832 ;
  wire \$auto$demuxmap.cc:63:execute$18835 ;
  wire \$auto$demuxmap.cc:63:execute$18838 ;
  wire \$auto$demuxmap.cc:63:execute$18841 ;
  wire \$auto$demuxmap.cc:63:execute$18844 ;
  wire \$auto$demuxmap.cc:63:execute$18847 ;
  wire \$auto$demuxmap.cc:63:execute$18850 ;
  wire \$auto$demuxmap.cc:63:execute$18853 ;
  wire \$auto$demuxmap.cc:63:execute$18856 ;
  wire \$auto$demuxmap.cc:63:execute$18859 ;
  wire \$auto$demuxmap.cc:63:execute$18862 ;
  wire \$auto$demuxmap.cc:63:execute$18865 ;
  wire \$auto$demuxmap.cc:63:execute$18868 ;
  wire \$auto$demuxmap.cc:63:execute$18871 ;
  wire \$auto$demuxmap.cc:63:execute$18874 ;
  wire \$auto$demuxmap.cc:63:execute$18877 ;
  wire \$auto$demuxmap.cc:63:execute$18880 ;
  wire \$auto$demuxmap.cc:63:execute$18883 ;
  wire \$auto$demuxmap.cc:63:execute$18886 ;
  wire \$auto$demuxmap.cc:63:execute$18889 ;
  wire \$auto$demuxmap.cc:63:execute$18892 ;
  wire \$auto$demuxmap.cc:63:execute$18895 ;
  wire \$auto$demuxmap.cc:63:execute$18898 ;
  wire \$auto$demuxmap.cc:63:execute$18901 ;
  wire \$auto$demuxmap.cc:63:execute$18904 ;
  wire \$auto$demuxmap.cc:63:execute$18907 ;
  wire \$auto$demuxmap.cc:63:execute$18910 ;
  wire \$auto$demuxmap.cc:63:execute$18913 ;
  wire \$auto$demuxmap.cc:63:execute$18916 ;
  wire \$auto$demuxmap.cc:63:execute$18919 ;
  wire \$auto$demuxmap.cc:63:execute$18922 ;
  wire \$auto$demuxmap.cc:63:execute$18925 ;
  wire \$auto$demuxmap.cc:63:execute$18928 ;
  wire \$auto$demuxmap.cc:63:execute$18931 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17975 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17978 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$17981 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17398 ;
  wire [5:0] \$auto$opt_expr.cc:205:group_cell_inputs$17402 ;
  wire [5:0] \$auto$opt_share.cc:222:merge_operators$18164 ;
  wire \$auto$rtlil.cc:2797:Ge$8704 ;
  wire [5:0] \$auto$rtlil.cc:2874:Mux$18166 ;
  wire [7:0] \$auto$rtlil.cc:2874:Mux$8721 ;
  wire [511:0] \$auto$rtlil.cc:2875:Bwmux$8712 ;
  wire [511:0] \$auto$rtlil.cc:2896:Demux$8710 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iRDAddr$8617 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:133.3-150.10" *)
  wire [5:0] \$auto$slang_frontend.cc:694:finish$\iUSAGE$8761 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:81.1-87.10" *)
  wire [6:0] \$auto$slang_frontend.cc:694:finish$\iWRAddr$8616 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:38.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "../rtl/apb_uart/slib_fifo.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_fifo.sv:41.28" *)
  input [7:0] D;
  wire [7:0] D;
  (* src = "../rtl/apb_uart/slib_fifo.sv:43.16" *)
  output EMPTY;
  reg EMPTY;
  (* src = "../rtl/apb_uart/slib_fifo.sv:44.16" *)
  output FULL;
  wire FULL;
  (* src = "../rtl/apb_uart/slib_fifo.sv:42.30" *)
  output [7:0] Q;
  reg [7:0] Q;
  (* src = "../rtl/apb_uart/slib_fifo.sv:40.14" *)
  input READ;
  wire READ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_fifo.sv:45.31" *)
  output [5:0] USAGE;
  reg [5:0] USAGE;
  (* src = "../rtl/apb_uart/slib_fifo.sv:39.14" *)
  input WRITE;
  wire WRITE;
  (* src = "../rtl/apb_uart/slib_fifo.sv:55.17" *)
  reg [511:0] iFIFOMem;
  (* src = "../rtl/apb_uart/slib_fifo.sv:52.16" *)
  reg [6:0] iRDAddr;
  (* src = "../rtl/apb_uart/slib_fifo.sv:51.16" *)
  reg [6:0] iWRAddr;
  assign \$auto$bmuxmap.cc:84:execute$18411 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[15:8] : iFIFOMem[7:0];
  assign \$auto$bmuxmap.cc:84:execute$18411 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[31:24] : iFIFOMem[23:16];
  assign \$auto$bmuxmap.cc:84:execute$18411 [23:16] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[47:40] : iFIFOMem[39:32];
  assign \$auto$bmuxmap.cc:84:execute$18411 [31:24] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[63:56] : iFIFOMem[55:48];
  assign \$auto$bmuxmap.cc:84:execute$18411 [39:32] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[79:72] : iFIFOMem[71:64];
  assign \$auto$bmuxmap.cc:84:execute$18411 [47:40] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[95:88] : iFIFOMem[87:80];
  assign \$auto$bmuxmap.cc:84:execute$18411 [55:48] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[111:104] : iFIFOMem[103:96];
  assign \$auto$bmuxmap.cc:84:execute$18411 [63:56] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[127:120] : iFIFOMem[119:112];
  assign \$auto$bmuxmap.cc:84:execute$18411 [71:64] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[143:136] : iFIFOMem[135:128];
  assign \$auto$bmuxmap.cc:84:execute$18411 [79:72] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[159:152] : iFIFOMem[151:144];
  assign \$auto$bmuxmap.cc:84:execute$18411 [87:80] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[175:168] : iFIFOMem[167:160];
  assign \$auto$bmuxmap.cc:84:execute$18411 [95:88] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[191:184] : iFIFOMem[183:176];
  assign \$auto$bmuxmap.cc:84:execute$18411 [103:96] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[207:200] : iFIFOMem[199:192];
  assign \$auto$bmuxmap.cc:84:execute$18411 [111:104] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[223:216] : iFIFOMem[215:208];
  assign \$auto$bmuxmap.cc:84:execute$18411 [119:112] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[239:232] : iFIFOMem[231:224];
  assign \$auto$bmuxmap.cc:84:execute$18411 [127:120] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[255:248] : iFIFOMem[247:240];
  assign \$auto$bmuxmap.cc:84:execute$18411 [135:128] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[271:264] : iFIFOMem[263:256];
  assign \$auto$bmuxmap.cc:84:execute$18411 [143:136] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[287:280] : iFIFOMem[279:272];
  assign \$auto$bmuxmap.cc:84:execute$18411 [151:144] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[303:296] : iFIFOMem[295:288];
  assign \$auto$bmuxmap.cc:84:execute$18411 [159:152] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[319:312] : iFIFOMem[311:304];
  assign \$auto$bmuxmap.cc:84:execute$18411 [167:160] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[335:328] : iFIFOMem[327:320];
  assign \$auto$bmuxmap.cc:84:execute$18411 [175:168] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[351:344] : iFIFOMem[343:336];
  assign \$auto$bmuxmap.cc:84:execute$18411 [183:176] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[367:360] : iFIFOMem[359:352];
  assign \$auto$bmuxmap.cc:84:execute$18411 [191:184] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[383:376] : iFIFOMem[375:368];
  assign \$auto$bmuxmap.cc:84:execute$18411 [199:192] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[399:392] : iFIFOMem[391:384];
  assign \$auto$bmuxmap.cc:84:execute$18411 [207:200] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[415:408] : iFIFOMem[407:400];
  assign \$auto$bmuxmap.cc:84:execute$18411 [215:208] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[431:424] : iFIFOMem[423:416];
  assign \$auto$bmuxmap.cc:84:execute$18411 [223:216] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[447:440] : iFIFOMem[439:432];
  assign \$auto$bmuxmap.cc:84:execute$18411 [231:224] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[463:456] : iFIFOMem[455:448];
  assign \$auto$bmuxmap.cc:84:execute$18411 [239:232] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[479:472] : iFIFOMem[471:464];
  assign \$auto$bmuxmap.cc:84:execute$18411 [247:240] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[495:488] : iFIFOMem[487:480];
  assign \$auto$bmuxmap.cc:84:execute$18411 [255:248] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [0] ? iFIFOMem[511:504] : iFIFOMem[503:496];
  assign \$auto$bmuxmap.cc:84:execute$18444 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [15:8] : \$auto$bmuxmap.cc:84:execute$18411 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$18444 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [31:24] : \$auto$bmuxmap.cc:84:execute$18411 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$18444 [23:16] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [47:40] : \$auto$bmuxmap.cc:84:execute$18411 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$18444 [31:24] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [63:56] : \$auto$bmuxmap.cc:84:execute$18411 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$18444 [39:32] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [79:72] : \$auto$bmuxmap.cc:84:execute$18411 [71:64];
  assign \$auto$bmuxmap.cc:84:execute$18444 [47:40] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [95:88] : \$auto$bmuxmap.cc:84:execute$18411 [87:80];
  assign \$auto$bmuxmap.cc:84:execute$18444 [55:48] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [111:104] : \$auto$bmuxmap.cc:84:execute$18411 [103:96];
  assign \$auto$bmuxmap.cc:84:execute$18444 [63:56] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [127:120] : \$auto$bmuxmap.cc:84:execute$18411 [119:112];
  assign \$auto$bmuxmap.cc:84:execute$18444 [71:64] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [143:136] : \$auto$bmuxmap.cc:84:execute$18411 [135:128];
  assign \$auto$bmuxmap.cc:84:execute$18444 [79:72] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [159:152] : \$auto$bmuxmap.cc:84:execute$18411 [151:144];
  assign \$auto$bmuxmap.cc:84:execute$18444 [87:80] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [175:168] : \$auto$bmuxmap.cc:84:execute$18411 [167:160];
  assign \$auto$bmuxmap.cc:84:execute$18444 [95:88] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [191:184] : \$auto$bmuxmap.cc:84:execute$18411 [183:176];
  assign \$auto$bmuxmap.cc:84:execute$18444 [103:96] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [207:200] : \$auto$bmuxmap.cc:84:execute$18411 [199:192];
  assign \$auto$bmuxmap.cc:84:execute$18444 [111:104] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [223:216] : \$auto$bmuxmap.cc:84:execute$18411 [215:208];
  assign \$auto$bmuxmap.cc:84:execute$18444 [119:112] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [239:232] : \$auto$bmuxmap.cc:84:execute$18411 [231:224];
  assign \$auto$bmuxmap.cc:84:execute$18444 [127:120] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [1] ? \$auto$bmuxmap.cc:84:execute$18411 [255:248] : \$auto$bmuxmap.cc:84:execute$18411 [247:240];
  assign \$auto$bmuxmap.cc:84:execute$18461 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [2] ? \$auto$bmuxmap.cc:84:execute$18444 [15:8] : \$auto$bmuxmap.cc:84:execute$18444 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$18461 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [2] ? \$auto$bmuxmap.cc:84:execute$18444 [31:24] : \$auto$bmuxmap.cc:84:execute$18444 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$18461 [23:16] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [2] ? \$auto$bmuxmap.cc:84:execute$18444 [47:40] : \$auto$bmuxmap.cc:84:execute$18444 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$18461 [31:24] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [2] ? \$auto$bmuxmap.cc:84:execute$18444 [63:56] : \$auto$bmuxmap.cc:84:execute$18444 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$18461 [39:32] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [2] ? \$auto$bmuxmap.cc:84:execute$18444 [79:72] : \$auto$bmuxmap.cc:84:execute$18444 [71:64];
  assign \$auto$bmuxmap.cc:84:execute$18461 [47:40] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [2] ? \$auto$bmuxmap.cc:84:execute$18444 [95:88] : \$auto$bmuxmap.cc:84:execute$18444 [87:80];
  assign \$auto$bmuxmap.cc:84:execute$18461 [55:48] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [2] ? \$auto$bmuxmap.cc:84:execute$18444 [111:104] : \$auto$bmuxmap.cc:84:execute$18444 [103:96];
  assign \$auto$bmuxmap.cc:84:execute$18461 [63:56] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [2] ? \$auto$bmuxmap.cc:84:execute$18444 [127:120] : \$auto$bmuxmap.cc:84:execute$18444 [119:112];
  assign \$auto$bmuxmap.cc:84:execute$18470 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [3] ? \$auto$bmuxmap.cc:84:execute$18461 [15:8] : \$auto$bmuxmap.cc:84:execute$18461 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$18470 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [3] ? \$auto$bmuxmap.cc:84:execute$18461 [31:24] : \$auto$bmuxmap.cc:84:execute$18461 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$18470 [23:16] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [3] ? \$auto$bmuxmap.cc:84:execute$18461 [47:40] : \$auto$bmuxmap.cc:84:execute$18461 [39:32];
  assign \$auto$bmuxmap.cc:84:execute$18470 [31:24] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [3] ? \$auto$bmuxmap.cc:84:execute$18461 [63:56] : \$auto$bmuxmap.cc:84:execute$18461 [55:48];
  assign \$auto$bmuxmap.cc:84:execute$18475 [7:0] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [4] ? \$auto$bmuxmap.cc:84:execute$18470 [15:8] : \$auto$bmuxmap.cc:84:execute$18470 [7:0];
  assign \$auto$bmuxmap.cc:84:execute$18475 [15:8] = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [4] ? \$auto$bmuxmap.cc:84:execute$18470 [31:24] : \$auto$bmuxmap.cc:84:execute$18470 [23:16];
  assign \$auto$bmuxmap.cc:84:execute$18478  = \$auto$opt_expr.cc:205:group_cell_inputs$17402 [5] ? \$auto$bmuxmap.cc:84:execute$18475 [15:8] : \$auto$bmuxmap.cc:84:execute$18475 [7:0];
  \$bwmux  #(
    .WIDTH(32'd512)
  ) \$auto$builder.cc:128:Bwmux$8711  (
    .A(iFIFOMem),
    .B({ D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D }),
    .S({ \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7] }),
    .Y(\$auto$rtlil.cc:2875:Bwmux$8712 )
  );
  assign \$auto$builder.cc:338:Biop$8578  = iRDAddr[5:0] == iWRAddr[5:0];
  assign \$auto$builder.cc:338:Biop$8580  = iRDAddr[6] != iWRAddr[6];
  assign FULL = \$auto$builder.cc:338:Biop$8578  && \$auto$builder.cc:338:Biop$8580 ;
  assign \$auto$builder.cc:338:Biop$8593  = ~ FULL;
  assign \$auto$builder.cc:338:Biop$8595  = WRITE && \$auto$builder.cc:338:Biop$8593 ;
  assign \$auto$builder.cc:338:Biop$8599  = iWRAddr + 1'h1;
  assign \$auto$builder.cc:338:Biop$8604  = ~ EMPTY;
  assign \$auto$builder.cc:338:Biop$8606  = READ && \$auto$builder.cc:338:Biop$8604 ;
  assign \$auto$builder.cc:338:Biop$8610 [6:0] = iRDAddr + 1'h1;
  assign \$auto$builder.cc:338:Biop$8619  = iRDAddr == iWRAddr;
  assign \$auto$builder.cc:338:Biop$8732  = ~ READ;
  assign \$auto$builder.cc:338:Biop$8736  = \$auto$builder.cc:338:Biop$8732  && WRITE;
  assign \$auto$builder.cc:338:Biop$8740  = \$auto$builder.cc:338:Biop$8736  && \$auto$builder.cc:338:Biop$8593 ;
  assign \$auto$builder.cc:338:Biop$8747  = ~ WRITE;
  assign \$auto$builder.cc:338:Biop$8751  = \$auto$builder.cc:338:Biop$8747  && READ;
  assign \$auto$builder.cc:338:Biop$8755  = \$auto$builder.cc:338:Biop$8751  && \$auto$builder.cc:338:Biop$8604 ;
  assign \$auto$opt_share.cc:222:merge_operators$18164  = USAGE - { \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], 1'h1 };
  assign \$auto$rtlil.cc:2797:Ge$8704  = $signed({ 1'h1, \$auto$opt_expr.cc:205:group_cell_inputs$17398  }) >= $signed(7'h40);
  assign \$auto$demuxmap.cc:63:execute$18742  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h00;
  assign \$auto$demuxmap.cc:63:execute$18745  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h01;
  assign \$auto$demuxmap.cc:63:execute$18748  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h02;
  assign \$auto$demuxmap.cc:63:execute$18751  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h03;
  assign \$auto$demuxmap.cc:63:execute$18754  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h04;
  assign \$auto$demuxmap.cc:63:execute$18757  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h05;
  assign \$auto$demuxmap.cc:63:execute$18760  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h06;
  assign \$auto$demuxmap.cc:63:execute$18763  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h07;
  assign \$auto$demuxmap.cc:63:execute$18766  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h08;
  assign \$auto$demuxmap.cc:63:execute$18769  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h09;
  assign \$auto$demuxmap.cc:63:execute$18772  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h0a;
  assign \$auto$demuxmap.cc:63:execute$18775  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h0b;
  assign \$auto$demuxmap.cc:63:execute$18778  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h0c;
  assign \$auto$demuxmap.cc:63:execute$18781  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h0d;
  assign \$auto$demuxmap.cc:63:execute$18784  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h0e;
  assign \$auto$demuxmap.cc:63:execute$18787  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h0f;
  assign \$auto$demuxmap.cc:63:execute$18790  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h10;
  assign \$auto$demuxmap.cc:63:execute$18793  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h11;
  assign \$auto$demuxmap.cc:63:execute$18796  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h12;
  assign \$auto$demuxmap.cc:63:execute$18799  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h13;
  assign \$auto$demuxmap.cc:63:execute$18802  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h14;
  assign \$auto$demuxmap.cc:63:execute$18805  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h15;
  assign \$auto$demuxmap.cc:63:execute$18808  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h16;
  assign \$auto$demuxmap.cc:63:execute$18811  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h17;
  assign \$auto$demuxmap.cc:63:execute$18814  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h18;
  assign \$auto$demuxmap.cc:63:execute$18817  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h19;
  assign \$auto$demuxmap.cc:63:execute$18820  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h1a;
  assign \$auto$demuxmap.cc:63:execute$18823  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h1b;
  assign \$auto$demuxmap.cc:63:execute$18826  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h1c;
  assign \$auto$demuxmap.cc:63:execute$18829  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h1d;
  assign \$auto$demuxmap.cc:63:execute$18832  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h1e;
  assign \$auto$demuxmap.cc:63:execute$18835  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h1f;
  assign \$auto$demuxmap.cc:63:execute$18838  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h20;
  assign \$auto$demuxmap.cc:63:execute$18841  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h21;
  assign \$auto$demuxmap.cc:63:execute$18844  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h22;
  assign \$auto$demuxmap.cc:63:execute$18847  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h23;
  assign \$auto$demuxmap.cc:63:execute$18850  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h24;
  assign \$auto$demuxmap.cc:63:execute$18853  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h25;
  assign \$auto$demuxmap.cc:63:execute$18856  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h26;
  assign \$auto$demuxmap.cc:63:execute$18859  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h27;
  assign \$auto$demuxmap.cc:63:execute$18862  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h28;
  assign \$auto$demuxmap.cc:63:execute$18865  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h29;
  assign \$auto$demuxmap.cc:63:execute$18868  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h2a;
  assign \$auto$demuxmap.cc:63:execute$18871  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h2b;
  assign \$auto$demuxmap.cc:63:execute$18874  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h2c;
  assign \$auto$demuxmap.cc:63:execute$18877  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h2d;
  assign \$auto$demuxmap.cc:63:execute$18880  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h2e;
  assign \$auto$demuxmap.cc:63:execute$18883  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h2f;
  assign \$auto$demuxmap.cc:63:execute$18886  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h30;
  assign \$auto$demuxmap.cc:63:execute$18889  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h31;
  assign \$auto$demuxmap.cc:63:execute$18892  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h32;
  assign \$auto$demuxmap.cc:63:execute$18895  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h33;
  assign \$auto$demuxmap.cc:63:execute$18898  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h34;
  assign \$auto$demuxmap.cc:63:execute$18901  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h35;
  assign \$auto$demuxmap.cc:63:execute$18904  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h36;
  assign \$auto$demuxmap.cc:63:execute$18907  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h37;
  assign \$auto$demuxmap.cc:63:execute$18910  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h38;
  assign \$auto$demuxmap.cc:63:execute$18913  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h39;
  assign \$auto$demuxmap.cc:63:execute$18916  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h3a;
  assign \$auto$demuxmap.cc:63:execute$18919  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h3b;
  assign \$auto$demuxmap.cc:63:execute$18922  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h3c;
  assign \$auto$demuxmap.cc:63:execute$18925  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h3d;
  assign \$auto$demuxmap.cc:63:execute$18928  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h3e;
  assign \$auto$demuxmap.cc:63:execute$18931  = \$auto$opt_expr.cc:205:group_cell_inputs$17398  == 6'h3f;
  assign \$auto$rtlil.cc:2896:Demux$8710 [7] = \$auto$demuxmap.cc:63:execute$18742  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [15] = \$auto$demuxmap.cc:63:execute$18745  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [23] = \$auto$demuxmap.cc:63:execute$18748  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [31] = \$auto$demuxmap.cc:63:execute$18751  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [39] = \$auto$demuxmap.cc:63:execute$18754  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [47] = \$auto$demuxmap.cc:63:execute$18757  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [55] = \$auto$demuxmap.cc:63:execute$18760  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [63] = \$auto$demuxmap.cc:63:execute$18763  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [71] = \$auto$demuxmap.cc:63:execute$18766  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [79] = \$auto$demuxmap.cc:63:execute$18769  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [87] = \$auto$demuxmap.cc:63:execute$18772  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [95] = \$auto$demuxmap.cc:63:execute$18775  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [103] = \$auto$demuxmap.cc:63:execute$18778  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [111] = \$auto$demuxmap.cc:63:execute$18781  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [119] = \$auto$demuxmap.cc:63:execute$18784  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [127] = \$auto$demuxmap.cc:63:execute$18787  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [135] = \$auto$demuxmap.cc:63:execute$18790  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [143] = \$auto$demuxmap.cc:63:execute$18793  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [151] = \$auto$demuxmap.cc:63:execute$18796  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [159] = \$auto$demuxmap.cc:63:execute$18799  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [167] = \$auto$demuxmap.cc:63:execute$18802  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [175] = \$auto$demuxmap.cc:63:execute$18805  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [183] = \$auto$demuxmap.cc:63:execute$18808  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [191] = \$auto$demuxmap.cc:63:execute$18811  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [199] = \$auto$demuxmap.cc:63:execute$18814  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [207] = \$auto$demuxmap.cc:63:execute$18817  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [215] = \$auto$demuxmap.cc:63:execute$18820  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [223] = \$auto$demuxmap.cc:63:execute$18823  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [231] = \$auto$demuxmap.cc:63:execute$18826  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [239] = \$auto$demuxmap.cc:63:execute$18829  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [247] = \$auto$demuxmap.cc:63:execute$18832  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [255] = \$auto$demuxmap.cc:63:execute$18835  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [263] = \$auto$demuxmap.cc:63:execute$18838  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [271] = \$auto$demuxmap.cc:63:execute$18841  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [279] = \$auto$demuxmap.cc:63:execute$18844  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [287] = \$auto$demuxmap.cc:63:execute$18847  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [295] = \$auto$demuxmap.cc:63:execute$18850  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [303] = \$auto$demuxmap.cc:63:execute$18853  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [311] = \$auto$demuxmap.cc:63:execute$18856  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [319] = \$auto$demuxmap.cc:63:execute$18859  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [327] = \$auto$demuxmap.cc:63:execute$18862  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [335] = \$auto$demuxmap.cc:63:execute$18865  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [343] = \$auto$demuxmap.cc:63:execute$18868  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [351] = \$auto$demuxmap.cc:63:execute$18871  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [359] = \$auto$demuxmap.cc:63:execute$18874  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [367] = \$auto$demuxmap.cc:63:execute$18877  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [375] = \$auto$demuxmap.cc:63:execute$18880  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [383] = \$auto$demuxmap.cc:63:execute$18883  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [391] = \$auto$demuxmap.cc:63:execute$18886  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [399] = \$auto$demuxmap.cc:63:execute$18889  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [407] = \$auto$demuxmap.cc:63:execute$18892  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [415] = \$auto$demuxmap.cc:63:execute$18895  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [423] = \$auto$demuxmap.cc:63:execute$18898  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [431] = \$auto$demuxmap.cc:63:execute$18901  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [439] = \$auto$demuxmap.cc:63:execute$18904  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [447] = \$auto$demuxmap.cc:63:execute$18907  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [455] = \$auto$demuxmap.cc:63:execute$18910  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [463] = \$auto$demuxmap.cc:63:execute$18913  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [471] = \$auto$demuxmap.cc:63:execute$18916  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [479] = \$auto$demuxmap.cc:63:execute$18919  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [487] = \$auto$demuxmap.cc:63:execute$18922  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [495] = \$auto$demuxmap.cc:63:execute$18925  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [503] = \$auto$demuxmap.cc:63:execute$18928  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$8710 [511] = \$auto$demuxmap.cc:63:execute$18931  ? \$auto$rtlil.cc:2797:Ge$8704  : 1'h0;
  (* src = "../rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iWRAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17975 ) iWRAddr <= \$auto$slang_frontend.cc:694:finish$\iWRAddr$8616 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:124.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) USAGE <= 6'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17978 ) USAGE <= \$auto$slang_frontend.cc:694:finish$\iUSAGE$8761 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iRDAddr <= 7'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$17981 ) iRDAddr <= \$auto$slang_frontend.cc:694:finish$\iRDAddr$8617 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[439:432] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[439:432] <= \$auto$rtlil.cc:2875:Bwmux$8712 [439:432];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[447:440] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[447:440] <= \$auto$rtlil.cc:2875:Bwmux$8712 [447:440];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[455:448] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[455:448] <= \$auto$rtlil.cc:2875:Bwmux$8712 [455:448];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[463:456] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[463:456] <= \$auto$rtlil.cc:2875:Bwmux$8712 [463:456];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[7:0] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[7:0] <= \$auto$rtlil.cc:2875:Bwmux$8712 [7:0];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[15:8] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[15:8] <= \$auto$rtlil.cc:2875:Bwmux$8712 [15:8];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[23:16] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[23:16] <= \$auto$rtlil.cc:2875:Bwmux$8712 [23:16];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[31:24] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[31:24] <= \$auto$rtlil.cc:2875:Bwmux$8712 [31:24];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[471:464] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[471:464] <= \$auto$rtlil.cc:2875:Bwmux$8712 [471:464];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[39:32] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[39:32] <= \$auto$rtlil.cc:2875:Bwmux$8712 [39:32];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[47:40] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[47:40] <= \$auto$rtlil.cc:2875:Bwmux$8712 [47:40];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[55:48] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[55:48] <= \$auto$rtlil.cc:2875:Bwmux$8712 [55:48];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[63:56] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[63:56] <= \$auto$rtlil.cc:2875:Bwmux$8712 [63:56];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[71:64] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[71:64] <= \$auto$rtlil.cc:2875:Bwmux$8712 [71:64];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[79:72] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[79:72] <= \$auto$rtlil.cc:2875:Bwmux$8712 [79:72];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[87:80] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[87:80] <= \$auto$rtlil.cc:2875:Bwmux$8712 [87:80];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[95:88] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[95:88] <= \$auto$rtlil.cc:2875:Bwmux$8712 [95:88];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[103:96] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[103:96] <= \$auto$rtlil.cc:2875:Bwmux$8712 [103:96];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[111:104] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[111:104] <= \$auto$rtlil.cc:2875:Bwmux$8712 [111:104];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[479:472] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[479:472] <= \$auto$rtlil.cc:2875:Bwmux$8712 [479:472];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[119:112] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[119:112] <= \$auto$rtlil.cc:2875:Bwmux$8712 [119:112];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[127:120] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[127:120] <= \$auto$rtlil.cc:2875:Bwmux$8712 [127:120];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[135:128] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[135:128] <= \$auto$rtlil.cc:2875:Bwmux$8712 [135:128];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[143:136] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[143:136] <= \$auto$rtlil.cc:2875:Bwmux$8712 [143:136];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[151:144] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[151:144] <= \$auto$rtlil.cc:2875:Bwmux$8712 [151:144];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[159:152] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[159:152] <= \$auto$rtlil.cc:2875:Bwmux$8712 [159:152];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[167:160] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[167:160] <= \$auto$rtlil.cc:2875:Bwmux$8712 [167:160];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[175:168] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[175:168] <= \$auto$rtlil.cc:2875:Bwmux$8712 [175:168];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[183:176] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[183:176] <= \$auto$rtlil.cc:2875:Bwmux$8712 [183:176];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[191:184] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[191:184] <= \$auto$rtlil.cc:2875:Bwmux$8712 [191:184];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[487:480] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[487:480] <= \$auto$rtlil.cc:2875:Bwmux$8712 [487:480];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[199:192] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[199:192] <= \$auto$rtlil.cc:2875:Bwmux$8712 [199:192];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[207:200] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[207:200] <= \$auto$rtlil.cc:2875:Bwmux$8712 [207:200];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[215:208] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[215:208] <= \$auto$rtlil.cc:2875:Bwmux$8712 [215:208];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[223:216] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[223:216] <= \$auto$rtlil.cc:2875:Bwmux$8712 [223:216];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[231:224] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[231:224] <= \$auto$rtlil.cc:2875:Bwmux$8712 [231:224];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[239:232] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[239:232] <= \$auto$rtlil.cc:2875:Bwmux$8712 [239:232];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[247:240] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[247:240] <= \$auto$rtlil.cc:2875:Bwmux$8712 [247:240];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[255:248] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[255:248] <= \$auto$rtlil.cc:2875:Bwmux$8712 [255:248];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[263:256] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[263:256] <= \$auto$rtlil.cc:2875:Bwmux$8712 [263:256];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[271:264] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[271:264] <= \$auto$rtlil.cc:2875:Bwmux$8712 [271:264];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[495:488] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[495:488] <= \$auto$rtlil.cc:2875:Bwmux$8712 [495:488];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[279:272] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[279:272] <= \$auto$rtlil.cc:2875:Bwmux$8712 [279:272];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[287:280] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[287:280] <= \$auto$rtlil.cc:2875:Bwmux$8712 [287:280];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[295:288] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[295:288] <= \$auto$rtlil.cc:2875:Bwmux$8712 [295:288];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[303:296] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[303:296] <= \$auto$rtlil.cc:2875:Bwmux$8712 [303:296];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[311:304] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[311:304] <= \$auto$rtlil.cc:2875:Bwmux$8712 [311:304];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[319:312] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[319:312] <= \$auto$rtlil.cc:2875:Bwmux$8712 [319:312];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[327:320] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[327:320] <= \$auto$rtlil.cc:2875:Bwmux$8712 [327:320];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[335:328] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[335:328] <= \$auto$rtlil.cc:2875:Bwmux$8712 [335:328];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[343:336] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[343:336] <= \$auto$rtlil.cc:2875:Bwmux$8712 [343:336];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[351:344] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[351:344] <= \$auto$rtlil.cc:2875:Bwmux$8712 [351:344];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[503:496] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[503:496] <= \$auto$rtlil.cc:2875:Bwmux$8712 [503:496];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[359:352] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[359:352] <= \$auto$rtlil.cc:2875:Bwmux$8712 [359:352];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[367:360] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[367:360] <= \$auto$rtlil.cc:2875:Bwmux$8712 [367:360];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[375:368] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[375:368] <= \$auto$rtlil.cc:2875:Bwmux$8712 [375:368];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[383:376] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[383:376] <= \$auto$rtlil.cc:2875:Bwmux$8712 [383:376];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[391:384] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[391:384] <= \$auto$rtlil.cc:2875:Bwmux$8712 [391:384];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[399:392] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[399:392] <= \$auto$rtlil.cc:2875:Bwmux$8712 [399:392];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[407:400] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[407:400] <= \$auto$rtlil.cc:2875:Bwmux$8712 [407:400];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[415:408] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[415:408] <= \$auto$rtlil.cc:2875:Bwmux$8712 [415:408];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[423:416] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[423:416] <= \$auto$rtlil.cc:2875:Bwmux$8712 [423:416];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[431:424] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[431:424] <= \$auto$rtlil.cc:2875:Bwmux$8712 [431:424];
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iFIFOMem[511:504] <= 8'h00;
    else if (\$auto$builder.cc:338:Biop$8595 ) iFIFOMem[511:504] <= \$auto$rtlil.cc:2875:Bwmux$8712 [511:504];
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17975  = | { \$auto$builder.cc:338:Biop$8595 , CLEAR };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17978  = | { \$auto$builder.cc:338:Biop$8755 , \$auto$builder.cc:338:Biop$8740 , CLEAR };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$17981  = | { \$auto$builder.cc:338:Biop$8606 , CLEAR };
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17398  = ~ iWRAddr[5:0];
  assign \$auto$opt_expr.cc:205:group_cell_inputs$17402  = ~ iRDAddr[5:0];
  assign \$auto$rtlil.cc:2874:Mux$18166 [5] = ~ \$auto$builder.cc:338:Biop$8755 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 8'h00;
    else Q <= \$auto$rtlil.cc:2874:Mux$8721 ;
  (* src = "../rtl/apb_uart/slib_fifo.sv:59.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) EMPTY <= 1'h1;
    else EMPTY <= \$auto$builder.cc:338:Biop$8619 ;
  assign \$auto$slang_frontend.cc:694:finish$\iUSAGE$8761  = CLEAR ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_fifo.sv:136.1-136.13|../rtl/apb_uart/slib_fifo.sv:133.3-150.10" *) 6'h00 : \$auto$opt_share.cc:222:merge_operators$18164 ;
  assign \$auto$slang_frontend.cc:694:finish$\iRDAddr$8617  = CLEAR ? (* src = "../rtl/apb_uart/slib_fifo.sv:82.11-87.10|../rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$auto$builder.cc:338:Biop$8610 [6:0];
  assign \$auto$slang_frontend.cc:694:finish$\iWRAddr$8616  = CLEAR ? (* src = "../rtl/apb_uart/slib_fifo.sv:82.11-87.10|../rtl/apb_uart/slib_fifo.sv:81.1-87.10" *) 7'h00 : \$auto$builder.cc:338:Biop$8599 ;
  assign \$auto$rtlil.cc:2874:Mux$18166 [4:0] = { \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], \$auto$rtlil.cc:2874:Mux$18166 [5], 1'h1 };
  assign { \$auto$rtlil.cc:2896:Demux$8710 [510:504], \$auto$rtlil.cc:2896:Demux$8710 [502:496], \$auto$rtlil.cc:2896:Demux$8710 [494:488], \$auto$rtlil.cc:2896:Demux$8710 [486:480], \$auto$rtlil.cc:2896:Demux$8710 [478:472], \$auto$rtlil.cc:2896:Demux$8710 [470:464], \$auto$rtlil.cc:2896:Demux$8710 [462:456], \$auto$rtlil.cc:2896:Demux$8710 [454:448], \$auto$rtlil.cc:2896:Demux$8710 [446:440], \$auto$rtlil.cc:2896:Demux$8710 [438:432], \$auto$rtlil.cc:2896:Demux$8710 [430:424], \$auto$rtlil.cc:2896:Demux$8710 [422:416], \$auto$rtlil.cc:2896:Demux$8710 [414:408], \$auto$rtlil.cc:2896:Demux$8710 [406:400], \$auto$rtlil.cc:2896:Demux$8710 [398:392], \$auto$rtlil.cc:2896:Demux$8710 [390:384], \$auto$rtlil.cc:2896:Demux$8710 [382:376], \$auto$rtlil.cc:2896:Demux$8710 [374:368], \$auto$rtlil.cc:2896:Demux$8710 [366:360], \$auto$rtlil.cc:2896:Demux$8710 [358:352], \$auto$rtlil.cc:2896:Demux$8710 [350:344], \$auto$rtlil.cc:2896:Demux$8710 [342:336], \$auto$rtlil.cc:2896:Demux$8710 [334:328], \$auto$rtlil.cc:2896:Demux$8710 [326:320], \$auto$rtlil.cc:2896:Demux$8710 [318:312], \$auto$rtlil.cc:2896:Demux$8710 [310:304], \$auto$rtlil.cc:2896:Demux$8710 [302:296], \$auto$rtlil.cc:2896:Demux$8710 [294:288], \$auto$rtlil.cc:2896:Demux$8710 [286:280], \$auto$rtlil.cc:2896:Demux$8710 [278:272], \$auto$rtlil.cc:2896:Demux$8710 [270:264], \$auto$rtlil.cc:2896:Demux$8710 [262:256], \$auto$rtlil.cc:2896:Demux$8710 [254:248], \$auto$rtlil.cc:2896:Demux$8710 [246:240], \$auto$rtlil.cc:2896:Demux$8710 [238:232], \$auto$rtlil.cc:2896:Demux$8710 [230:224], \$auto$rtlil.cc:2896:Demux$8710 [222:216], \$auto$rtlil.cc:2896:Demux$8710 [214:208], \$auto$rtlil.cc:2896:Demux$8710 [206:200], \$auto$rtlil.cc:2896:Demux$8710 [198:192], \$auto$rtlil.cc:2896:Demux$8710 [190:184], \$auto$rtlil.cc:2896:Demux$8710 [182:176], \$auto$rtlil.cc:2896:Demux$8710 [174:168], \$auto$rtlil.cc:2896:Demux$8710 [166:160], \$auto$rtlil.cc:2896:Demux$8710 [158:152], \$auto$rtlil.cc:2896:Demux$8710 [150:144], \$auto$rtlil.cc:2896:Demux$8710 [142:136], \$auto$rtlil.cc:2896:Demux$8710 [134:128], \$auto$rtlil.cc:2896:Demux$8710 [126:120], \$auto$rtlil.cc:2896:Demux$8710 [118:112], \$auto$rtlil.cc:2896:Demux$8710 [110:104], \$auto$rtlil.cc:2896:Demux$8710 [102:96], \$auto$rtlil.cc:2896:Demux$8710 [94:88], \$auto$rtlil.cc:2896:Demux$8710 [86:80], \$auto$rtlil.cc:2896:Demux$8710 [78:72], \$auto$rtlil.cc:2896:Demux$8710 [70:64], \$auto$rtlil.cc:2896:Demux$8710 [62:56], \$auto$rtlil.cc:2896:Demux$8710 [54:48], \$auto$rtlil.cc:2896:Demux$8710 [46:40], \$auto$rtlil.cc:2896:Demux$8710 [38:32], \$auto$rtlil.cc:2896:Demux$8710 [30:24], \$auto$rtlil.cc:2896:Demux$8710 [22:16], \$auto$rtlil.cc:2896:Demux$8710 [14:8], \$auto$rtlil.cc:2896:Demux$8710 [6:0] } = { \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [511], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [503], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [495], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [487], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [479], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [471], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [463], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [455], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [447], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [439], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [431], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [423], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [415], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [407], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [399], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [391], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [383], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [375], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [367], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [359], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [351], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [343], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [335], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [327], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [319], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [311], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [303], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [295], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [287], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [279], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [271], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [263], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [255], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [247], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [239], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [231], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [223], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [215], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [207], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [199], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [191], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [183], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [175], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [167], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [159], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [151], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [143], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [135], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [127], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [119], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [111], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [103], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [95], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [87], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [79], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [71], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [63], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [55], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [47], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [39], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [31], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [23], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [15], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7], \$auto$rtlil.cc:2896:Demux$8710 [7] };
  assign \$auto$rtlil.cc:2874:Mux$8721  = \$auto$bmuxmap.cc:84:execute$18478 ;
endmodule

(* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_CTS (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8124 ;
  wire \$auto$builder.cc:338:Biop$8126 ;
  wire \$auto$builder.cc:338:Biop$8132 ;
  wire \$auto$builder.cc:338:Biop$8134 ;
  wire \$auto$builder.cc:338:Biop$8136 ;
  wire \$auto$builder.cc:338:Biop$8145 ;
  wire \$auto$builder.cc:338:Biop$8149 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18048 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18050 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18169 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18171 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$8152 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$8153 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$auto$builder.cc:338:Biop$8124  = iCount != 2'h2;
  assign \$auto$builder.cc:338:Biop$8126  = D && \$auto$builder.cc:338:Biop$8124 ;
  assign \$auto$opt_share.cc:222:merge_operators$18169  = iCount + { \$auto$rtlil.cc:2874:Mux$18171 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$8132  = ~ D;
  assign \$auto$builder.cc:338:Biop$8134  = | iCount;
  assign \$auto$builder.cc:338:Biop$8136  = \$auto$builder.cc:338:Biop$8132  && \$auto$builder.cc:338:Biop$8134 ;
  assign \$auto$builder.cc:338:Biop$8145  = iCount == 2'h2;
  assign \$auto$builder.cc:338:Biop$8149  = ! iCount;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18050 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18169 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18048  = | { \$auto$builder.cc:338:Biop$8136 , \$auto$builder.cc:338:Biop$8126  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18050  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18048 , CE };
  assign \$auto$rtlil.cc:2874:Mux$18171 [1] = ~ \$auto$builder.cc:338:Biop$8126 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$auto$slang_frontend.cc:694:finish$\Q$8153 ;
  assign \$auto$slang_frontend.cc:694:finish$\Q$8152  = \$auto$builder.cc:338:Biop$8149  ? (* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$auto$slang_frontend.cc:694:finish$\Q$8153  = \$auto$slang_frontend.cc:694:finish$\Q$8152  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$auto$builder.cc:338:Biop$8145 ;
  assign \$auto$rtlil.cc:2874:Mux$18171 [0] = 1'h1;
endmodule

(* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DCD (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8204 ;
  wire \$auto$builder.cc:338:Biop$8206 ;
  wire \$auto$builder.cc:338:Biop$8212 ;
  wire \$auto$builder.cc:338:Biop$8214 ;
  wire \$auto$builder.cc:338:Biop$8216 ;
  wire \$auto$builder.cc:338:Biop$8225 ;
  wire \$auto$builder.cc:338:Biop$8229 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18053 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18055 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18174 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18176 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$8232 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$8233 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$auto$builder.cc:338:Biop$8204  = iCount != 2'h2;
  assign \$auto$builder.cc:338:Biop$8206  = D && \$auto$builder.cc:338:Biop$8204 ;
  assign \$auto$opt_share.cc:222:merge_operators$18174  = iCount + { \$auto$rtlil.cc:2874:Mux$18176 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$8212  = ~ D;
  assign \$auto$builder.cc:338:Biop$8214  = | iCount;
  assign \$auto$builder.cc:338:Biop$8216  = \$auto$builder.cc:338:Biop$8212  && \$auto$builder.cc:338:Biop$8214 ;
  assign \$auto$builder.cc:338:Biop$8225  = iCount == 2'h2;
  assign \$auto$builder.cc:338:Biop$8229  = ! iCount;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18055 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18174 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18053  = | { \$auto$builder.cc:338:Biop$8216 , \$auto$builder.cc:338:Biop$8206  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18055  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18053 , CE };
  assign \$auto$rtlil.cc:2874:Mux$18176 [1] = ~ \$auto$builder.cc:338:Biop$8206 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$auto$slang_frontend.cc:694:finish$\Q$8233 ;
  assign \$auto$slang_frontend.cc:694:finish$\Q$8232  = \$auto$builder.cc:338:Biop$8229  ? (* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$auto$slang_frontend.cc:694:finish$\Q$8233  = \$auto$slang_frontend.cc:694:finish$\Q$8232  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$auto$builder.cc:338:Biop$8225 ;
  assign \$auto$rtlil.cc:2874:Mux$18176 [0] = 1'h1;
endmodule

(* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_DSR (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8164 ;
  wire \$auto$builder.cc:338:Biop$8166 ;
  wire \$auto$builder.cc:338:Biop$8172 ;
  wire \$auto$builder.cc:338:Biop$8174 ;
  wire \$auto$builder.cc:338:Biop$8176 ;
  wire \$auto$builder.cc:338:Biop$8185 ;
  wire \$auto$builder.cc:338:Biop$8189 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18058 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18060 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18179 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18181 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$8192 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$8193 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$auto$builder.cc:338:Biop$8164  = iCount != 2'h2;
  assign \$auto$builder.cc:338:Biop$8166  = D && \$auto$builder.cc:338:Biop$8164 ;
  assign \$auto$opt_share.cc:222:merge_operators$18179  = iCount + { \$auto$rtlil.cc:2874:Mux$18181 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$8172  = ~ D;
  assign \$auto$builder.cc:338:Biop$8174  = | iCount;
  assign \$auto$builder.cc:338:Biop$8176  = \$auto$builder.cc:338:Biop$8172  && \$auto$builder.cc:338:Biop$8174 ;
  assign \$auto$builder.cc:338:Biop$8185  = iCount == 2'h2;
  assign \$auto$builder.cc:338:Biop$8189  = ! iCount;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18060 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18179 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18058  = | { \$auto$builder.cc:338:Biop$8176 , \$auto$builder.cc:338:Biop$8166  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18060  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18058 , CE };
  assign \$auto$rtlil.cc:2874:Mux$18181 [1] = ~ \$auto$builder.cc:338:Biop$8166 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$auto$slang_frontend.cc:694:finish$\Q$8193 ;
  assign \$auto$slang_frontend.cc:694:finish$\Q$8192  = \$auto$builder.cc:338:Biop$8189  ? (* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$auto$slang_frontend.cc:694:finish$\Q$8193  = \$auto$slang_frontend.cc:694:finish$\Q$8192  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$auto$builder.cc:338:Biop$8185 ;
  assign \$auto$rtlil.cc:2874:Mux$18181 [0] = 1'h1;
endmodule

(* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IF_RI (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$8244 ;
  wire \$auto$builder.cc:338:Biop$8246 ;
  wire \$auto$builder.cc:338:Biop$8252 ;
  wire \$auto$builder.cc:338:Biop$8254 ;
  wire \$auto$builder.cc:338:Biop$8256 ;
  wire \$auto$builder.cc:338:Biop$8265 ;
  wire \$auto$builder.cc:338:Biop$8269 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18063 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18065 ;
  wire [1:0] \$auto$opt_share.cc:222:merge_operators$18184 ;
  wire [1:0] \$auto$rtlil.cc:2874:Mux$18186 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$8272 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$8273 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [1:0] iCount;
  assign \$auto$builder.cc:338:Biop$8244  = iCount != 2'h2;
  assign \$auto$builder.cc:338:Biop$8246  = D && \$auto$builder.cc:338:Biop$8244 ;
  assign \$auto$opt_share.cc:222:merge_operators$18184  = iCount + { \$auto$rtlil.cc:2874:Mux$18186 [1], 1'h1 };
  assign \$auto$builder.cc:338:Biop$8252  = ~ D;
  assign \$auto$builder.cc:338:Biop$8254  = | iCount;
  assign \$auto$builder.cc:338:Biop$8256  = \$auto$builder.cc:338:Biop$8252  && \$auto$builder.cc:338:Biop$8254 ;
  assign \$auto$builder.cc:338:Biop$8265  = iCount == 2'h2;
  assign \$auto$builder.cc:338:Biop$8269  = ! iCount;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 2'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18065 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18184 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18063  = | { \$auto$builder.cc:338:Biop$8256 , \$auto$builder.cc:338:Biop$8246  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18065  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18063 , CE };
  assign \$auto$rtlil.cc:2874:Mux$18186 [1] = ~ \$auto$builder.cc:338:Biop$8246 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$auto$slang_frontend.cc:694:finish$\Q$8273 ;
  assign \$auto$slang_frontend.cc:694:finish$\Q$8272  = \$auto$builder.cc:338:Biop$8269  ? (* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$auto$slang_frontend.cc:694:finish$\Q$8273  = \$auto$slang_frontend.cc:694:finish$\Q$8272  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$auto$builder.cc:338:Biop$8265 ;
  assign \$auto$rtlil.cc:2874:Mux$18186 [0] = 1'h1;
endmodule

(* src = "../rtl/apb_uart/slib_input_filter.sv:35.8" *)
module \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB (CLK, D, Q, RST, CE);
  wire \$auto$builder.cc:338:Biop$10081 ;
  wire \$auto$builder.cc:338:Biop$10083 ;
  wire \$auto$builder.cc:338:Biop$10089 ;
  wire \$auto$builder.cc:338:Biop$10091 ;
  wire \$auto$builder.cc:338:Biop$10093 ;
  wire \$auto$builder.cc:338:Biop$10102 ;
  wire \$auto$builder.cc:338:Biop$10106 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18068 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18070 ;
  wire [2:0] \$auto$opt_share.cc:222:merge_operators$18189 ;
  wire [2:0] \$auto$rtlil.cc:2874:Mux$18191 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$10109 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *)
  wire \$auto$slang_frontend.cc:694:finish$\Q$10110 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:39.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:40.16" *)
  output Q;
  reg Q;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:45.26" *)
  reg [2:0] iCount;
  assign \$auto$builder.cc:338:Biop$10081  = iCount != 3'h4;
  assign \$auto$builder.cc:338:Biop$10083  = D && \$auto$builder.cc:338:Biop$10081 ;
  assign \$auto$opt_share.cc:222:merge_operators$18189  = iCount + { \$auto$rtlil.cc:2874:Mux$18191 [2], \$auto$rtlil.cc:2874:Mux$18191 [2], 1'h1 };
  assign \$auto$builder.cc:338:Biop$10089  = ~ D;
  assign \$auto$builder.cc:338:Biop$10091  = | iCount;
  assign \$auto$builder.cc:338:Biop$10093  = \$auto$builder.cc:338:Biop$10089  && \$auto$builder.cc:338:Biop$10091 ;
  assign \$auto$builder.cc:338:Biop$10102  = iCount == 3'h4;
  assign \$auto$builder.cc:338:Biop$10106  = ! iCount;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCount <= 3'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18070 ) iCount <= \$auto$opt_share.cc:222:merge_operators$18189 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18068  = | { \$auto$builder.cc:338:Biop$10093 , \$auto$builder.cc:338:Biop$10083  };
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18070  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18068 , CE };
  assign \$auto$rtlil.cc:2874:Mux$18191 [2] = ~ \$auto$builder.cc:338:Biop$10083 ;
  (* src = "../rtl/apb_uart/slib_input_filter.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$auto$slang_frontend.cc:694:finish$\Q$10110 ;
  assign \$auto$slang_frontend.cc:694:finish$\Q$10109  = \$auto$builder.cc:338:Biop$10106  ? (* src = "../rtl/apb_uart/slib_input_filter.sv:74.16-74.27|../rtl/apb_uart/slib_input_filter.sv:72.16-75.16" *) 1'h0 : Q;
  assign \$auto$slang_frontend.cc:694:finish$\Q$10110  = \$auto$slang_frontend.cc:694:finish$\Q$10109  | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_input_filter.sv:70.16-70.27|../rtl/apb_uart/slib_input_filter.sv:68.11-75.16" *) \$auto$builder.cc:338:Biop$10102 ;
  assign \$auto$rtlil.cc:2874:Mux$18191 [1:0] = { \$auto$rtlil.cc:2874:Mux$18191 [2], 1'h1 };
endmodule

(* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_CTS (CLK, D, Q, RST);
  (* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DCD (CLK, D, Q, RST);
  (* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_DSR (CLK, D, Q, RST);
  (* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_RI (CLK, D, Q, RST);
  (* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "../rtl/apb_uart/slib_input_sync.sv:35.8" *)
module \slib_input_sync$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IS_SIN (CLK, D, Q, RST);
  (* src = "../rtl/apb_uart/slib_input_sync.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:38.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:39.16" *)
  output Q;
  wire Q;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:43.11" *)
  reg [1:0] iD;
  (* src = "../rtl/apb_uart/slib_input_sync.sv:45.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iD <= 2'h0;
    else iD <= { iD[0], D };
  assign Q = iD[1];
endmodule

(* src = "../rtl/apb_uart/slib_mv_filter.sv:35.8" *)
module \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF (CLK, D, Q, RST, CLEAR, SAMPLE);
  wire \$auto$builder.cc:338:Biop$10049 ;
  wire \$auto$builder.cc:338:Biop$10057 ;
  wire [4:0] \$auto$builder.cc:338:Biop$10061 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18073 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18075 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18077 ;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *)
  wire [4:0] \$auto$slang_frontend.cc:694:finish$\iCounter$10069 ;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iQ$10064 ;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *)
  wire \$auto$slang_frontend.cc:694:finish$\iQ$10070 ;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:39.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:40.14" *)
  input D;
  wire D;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:41.16" *)
  output Q;
  reg Q;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:38.14" *)
  input SAMPLE;
  wire SAMPLE;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:45.15" *)
  reg [4:0] iCounter;
  assign \$auto$builder.cc:338:Biop$10049  = iCounter >= 4'ha;
  assign \$auto$builder.cc:338:Biop$10057  = SAMPLE && D;
  assign \$auto$builder.cc:338:Biop$10061  = iCounter + 1'h1;
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:48.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 5'h00;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18077 ) iCounter <= \$auto$slang_frontend.cc:694:finish$\iCounter$10069 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18073  = | { \$auto$builder.cc:338:Biop$10057 , \$auto$builder.cc:338:Biop$10049 , CLEAR };
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18075  = { \$auto$builder.cc:338:Biop$10049 , CLEAR } != 2'h2;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18077  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18075 , \$auto$opt_dff.cc:194:make_patterns_logic$18073  };
  (* src = "../rtl/apb_uart/slib_mv_filter.sv:48.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) Q <= 1'h0;
    else Q <= \$auto$slang_frontend.cc:694:finish$\iQ$10070 ;
  assign \$auto$slang_frontend.cc:694:finish$\iQ$10070  = CLEAR ? (* src = "../rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|../rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *) 1'h0 : \$auto$slang_frontend.cc:694:finish$\iQ$10064 ;
  assign \$auto$slang_frontend.cc:694:finish$\iCounter$10069  = CLEAR ? (* src = "../rtl/apb_uart/slib_mv_filter.sv:69.10-73.13|../rtl/apb_uart/slib_mv_filter.sv:68.8-73.13" *) 5'h00 : \$auto$builder.cc:338:Biop$10061 ;
  assign \$auto$slang_frontend.cc:694:finish$\iQ$10064  = Q | (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/slib_mv_filter.sv:59.13-59.25|../rtl/apb_uart/slib_mv_filter.sv:57.8-67.13" *) \$auto$builder.cc:338:Biop$10049 ;
endmodule

(* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:10.8" *)
module \soc_ctrl_reg_top$croc_chip.i_croc_soc.i_croc.i_soc_ctrl (clk_i, rst_ni, reg_req_i, reg_rsp_o, reg2hw, hw2reg, devmode_i);
  wire \$auto$builder.cc:338:Biop$1162 ;
  wire \$auto$builder.cc:338:Biop$1177 ;
  wire [3:0] \$auto$builder.cc:338:Biop$1190 ;
  wire \$auto$builder.cc:338:Biop$1194 ;
  wire \$auto$builder.cc:338:Biop$1202 ;
  wire \$auto$builder.cc:338:Biop$1204 ;
  wire \$auto$builder.cc:338:Biop$1212 ;
  wire \$auto$builder.cc:338:Biop$1214 ;
  wire \$auto$builder.cc:338:Biop$1222 ;
  wire \$auto$builder.cc:338:Biop$1224 ;
  wire \$auto$builder.cc:338:Biop$1232 ;
  wire \$auto$builder.cc:338:Biop$1234 ;
  wire \$auto$builder.cc:338:Biop$1238 ;
  wire \$auto$builder.cc:338:Biop$1244 ;
  wire \$auto$builder.cc:338:Biop$1250 ;
  wire \$auto$builder.cc:338:Biop$1256 ;
  wire \$auto$builder.cc:338:Biop$1262 ;
  wire \$auto$builder.cc:364:Unop$1158 ;
  wire \$auto$builder.cc:364:Unop$1181 ;
  wire \$auto$builder.cc:364:Unop$1192 ;
  wire \$auto$builder.cc:364:Unop$1240 ;
  wire \$auto$rtlil.cc:2747:LogicNot$1183 ;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:226.15" *)
  wire [4:0] addr_hit;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.18" *)
  wire addrmiss;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:72.16" *)
  wire [31:0] bootaddr_qs;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:74.9" *)
  wire bootaddr_we;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:81.9" *)
  wire bootmode_qs;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:83.9" *)
  wire bootmode_we;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:16.15" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:78.16" *)
  wire [31:0] corestatus_qs;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:80.9" *)
  wire corestatus_we;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:26.9" *)
  input devmode_i;
  wire devmode_i;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:75.9" *)
  wire fetchen_qs;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:77.9" *)
  wire fetchen_we;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:22.46" *)
  input [3:0] hw2reg;
  wire [3:0] hw2reg;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:21.46" *)
  output [66:0] reg2hw;
  wire [66:0] reg2hw;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:41.19" *)
  wire reg_error;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:40.19" *)
  wire [31:0] reg_rdata;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:36.19" *)
  wire reg_re;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:18.20" *)
  input [69:0] reg_req_i;
  wire [69:0] reg_req_i;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:19.20" *)
  output [33:0] reg_rsp_o;
  wire [33:0] reg_rsp_o;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:35.19" *)
  wire reg_we;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:17.15" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:84.9" *)
  wire sram_dly_qs;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:86.9" *)
  wire sram_dly_we;
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:43.28" *)
  wire wr_err;
  assign \$auto$rtlil.cc:2747:LogicNot$1183  = ! \$auto$builder.cc:364:Unop$1181 ;
  assign reg_we = reg_req_i[0] & reg_req_i[37];
  assign reg_re = reg_req_i[0] & \$auto$builder.cc:364:Unop$1158 ;
  assign \$auto$builder.cc:338:Biop$1162  = devmode_i & addrmiss;
  assign reg_error = \$auto$builder.cc:338:Biop$1162  | wr_err;
  assign addr_hit[0] = ! reg_req_i[42:38];
  assign addr_hit[1] = reg_req_i[42:38] == 3'h4;
  assign addr_hit[2] = reg_req_i[42:38] == 4'h8;
  assign addr_hit[3] = reg_req_i[42:38] == 4'hc;
  assign addr_hit[4] = reg_req_i[42:38] == 5'h10;
  assign \$auto$builder.cc:338:Biop$1177  = reg_re || reg_we;
  assign \$auto$builder.cc:338:Biop$1194  = addr_hit[0] & \$auto$builder.cc:364:Unop$1192 ;
  assign \$auto$builder.cc:338:Biop$1202  = addr_hit[1] & \$auto$builder.cc:338:Biop$1190 [0];
  assign \$auto$builder.cc:338:Biop$1204  = \$auto$builder.cc:338:Biop$1194  | \$auto$builder.cc:338:Biop$1202 ;
  assign \$auto$builder.cc:338:Biop$1212  = addr_hit[2] & \$auto$builder.cc:364:Unop$1192 ;
  assign \$auto$builder.cc:338:Biop$1214  = \$auto$builder.cc:338:Biop$1204  | \$auto$builder.cc:338:Biop$1212 ;
  assign \$auto$builder.cc:338:Biop$1222  = addr_hit[3] & \$auto$builder.cc:338:Biop$1190 [0];
  assign \$auto$builder.cc:338:Biop$1224  = \$auto$builder.cc:338:Biop$1214  | \$auto$builder.cc:338:Biop$1222 ;
  assign \$auto$builder.cc:338:Biop$1232  = addr_hit[4] & \$auto$builder.cc:338:Biop$1190 [0];
  assign \$auto$builder.cc:338:Biop$1234  = \$auto$builder.cc:338:Biop$1224  | \$auto$builder.cc:338:Biop$1232 ;
  assign wr_err = reg_we & \$auto$builder.cc:338:Biop$1234 ;
  assign \$auto$builder.cc:338:Biop$1238  = addr_hit[0] & reg_we;
  assign bootaddr_we = \$auto$builder.cc:338:Biop$1238  & \$auto$builder.cc:364:Unop$1240 ;
  assign \$auto$builder.cc:338:Biop$1244  = addr_hit[1] & reg_we;
  assign fetchen_we = \$auto$builder.cc:338:Biop$1244  & \$auto$builder.cc:364:Unop$1240 ;
  assign \$auto$builder.cc:338:Biop$1250  = addr_hit[2] & reg_we;
  assign corestatus_we = \$auto$builder.cc:338:Biop$1250  & \$auto$builder.cc:364:Unop$1240 ;
  assign \$auto$builder.cc:338:Biop$1256  = addr_hit[3] & reg_we;
  assign bootmode_we = \$auto$builder.cc:338:Biop$1256  & \$auto$builder.cc:364:Unop$1240 ;
  assign \$auto$builder.cc:338:Biop$1262  = addr_hit[4] & reg_we;
  assign sram_dly_we = \$auto$builder.cc:338:Biop$1262  & \$auto$builder.cc:364:Unop$1240 ;
  assign \$auto$builder.cc:364:Unop$1158  = ~ reg_req_i[37];
  assign \$auto$builder.cc:364:Unop$1181  = | addr_hit;
  assign \$auto$builder.cc:338:Biop$1190  = ~ reg_req_i[4:1];
  assign \$auto$builder.cc:364:Unop$1192  = | \$auto$builder.cc:338:Biop$1190 ;
  assign \$auto$builder.cc:364:Unop$1240  = ! reg_error;
  assign addrmiss = \$auto$builder.cc:338:Biop$1177  & \$auto$rtlil.cc:2747:LogicNot$1183 ;
  function [31:0] \$procmux$15364 ;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* parallel_case = 32'd1 *)
    (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:284.9-284.41|../rtl/soc_ctrl/soc_ctrl_reg_top.sv:266.5-290.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        \$procmux$15364  = b[31:0];
      5'b???1?:
        \$procmux$15364  = b[63:32];
      5'b??1??:
        \$procmux$15364  = b[95:64];
      5'b?1???:
        \$procmux$15364  = b[127:96];
      5'b1????:
        \$procmux$15364  = b[159:128];
      default:
        \$procmux$15364  = a;
    endcase
  endfunction
  assign reg_rdata = \$procmux$15364 (32'd4294967295, { bootaddr_qs, 31'h00000000, fetchen_qs, corestatus_qs, 31'h00000000, bootmode_qs, 31'h00000000, sram_dly_qs }, { addr_hit[0], addr_hit[1], addr_hit[2], addr_hit[3], addr_hit[4] });
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:95.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootaddr  u_bootaddr (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[66:35]),
    .qs(bootaddr_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(bootaddr_we)
  );
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:176.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_bootmode  u_bootmode (
    .clk_i(clk_i),
    .d(hw2reg[1]),
    .de(hw2reg[0]),
    .q(reg2hw[1]),
    .qs(bootmode_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(bootmode_we)
  );
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:149.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_corestatus  u_corestatus (
    .clk_i(clk_i),
    .d(32'd0),
    .de(1'h0),
    .q(reg2hw[33:2]),
    .qs(corestatus_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[36:5]),
    .we(corestatus_we)
  );
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:122.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_fetchen  u_fetchen (
    .clk_i(clk_i),
    .d(hw2reg[3]),
    .de(hw2reg[2]),
    .q(reg2hw[34]),
    .qs(fetchen_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(fetchen_we)
  );
  (* src = "../rtl/soc_ctrl/soc_ctrl_reg_top.sv:203.5" *)
  \prim_subreg$croc_chip.i_croc_soc.i_croc.i_soc_ctrl.u_sram_dly  u_sram_dly (
    .clk_i(clk_i),
    .d(1'h0),
    .de(1'h0),
    .q(reg2hw[0]),
    .qs(sram_dly_qs),
    .rst_ni(rst_ni),
    .wd(reg_req_i[5]),
    .we(sram_dly_we)
  );
  assign reg_rsp_o = { reg_rdata, reg_error, 1'h1 };
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_req.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_a.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_cdc_reset_ctrlr.i_cdc_reset_ctrlr_half_b.i_state_transition_cdc_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_dst.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_cdc.i_cdc_resp.i_src.i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [2:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 3'h0;
    else reg_q <= { reg_q[1:0], serial_i };
  assign serial_o = reg_q[2];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[0].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[10].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[11].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[12].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[13].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[14].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[15].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[16].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[17].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[18].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[19].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[1].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[20].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[21].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[22].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[23].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[24].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[25].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[26].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[27].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[28].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[29].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[2].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[30].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[31].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[3].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[4].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[5].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[6].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[7].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[8].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_croc.i_gpio.gen_gpios[9].i_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../rtl/common_cells/sync.sv:13.8" *)
module \sync$croc_chip.i_croc_soc.i_ext_intr_sync (clk_i, rst_ni, serial_i, serial_o);
  (* src = "../rtl/common_cells/sync.sv:17.18" *)
  input clk_i;
  wire clk_i;
  (* async_reg = "true" *)
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:25.23" *)
  reg [1:0] reg_q;
  (* src = "../rtl/common_cells/sync.sv:18.18" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/common_cells/sync.sv:19.18" *)
  input serial_i;
  wire serial_i;
  (* src = "../rtl/common_cells/sync.sv:20.18" *)
  output serial_o;
  wire serial_o;
  (* keep = "true" *)
  (* src = "../rtl/common_cells/sync.sv:27.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) reg_q <= 2'h0;
    else reg_q <= { reg_q[0], serial_i };
  assign serial_o = reg_q[1];
endmodule

(* src = "../ihp13/tc_clk.sv:9.8" *)
module \tc_clk_inverter$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_tck_inv (clk_i, clk_o);
  (* src = "../ihp13/tc_clk.sv:10.18" *)
  input clk_i;
  wire clk_i;
  (* src = "../ihp13/tc_clk.sv:11.18" *)
  output clk_o;
  wire clk_o;
  (* keep = 1'h1 *)
  (* src = "../ihp13/tc_clk.sv:14.16" *)
  sg13g2_inv_1 i_inv (
    .A(clk_i),
    .Y(clk_o)
  );
endmodule

(* src = "../ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_croc.i_dmi_jtag.i_dmi_jtag_tap.i_dft_tck_mux (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "../ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "../ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "../ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "../ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "../ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "../ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_init_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "../ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "../ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "../ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "../ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "../ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "../ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_n (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "../ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "../ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "../ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "../ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "../ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "../ihp13/tc_clk.sv:33.8" *)
module \tc_clk_mux2$croc_chip.i_croc_soc.i_rstgen.i_rstgen_bypass.i_tc_clk_mux2_rst_no (clk0_i, clk1_i, clk_sel_i, clk_o);
  (* src = "../ihp13/tc_clk.sv:34.18" *)
  input clk0_i;
  wire clk0_i;
  (* src = "../ihp13/tc_clk.sv:35.18" *)
  input clk1_i;
  wire clk1_i;
  (* src = "../ihp13/tc_clk.sv:37.18" *)
  output clk_o;
  wire clk_o;
  (* src = "../ihp13/tc_clk.sv:36.18" *)
  input clk_sel_i;
  wire clk_sel_i;
  (* keep = 1'h1 *)
  (* src = "../ihp13/tc_clk.sv:40.17" *)
  sg13g2_mux2_1 i_mux (
    .A0(clk0_i),
    .A1(clk1_i),
    .S(clk_sel_i),
    .X(clk_o)
  );
endmodule

(* src = "../ihp13/tc_sram_impl.sv:73.8" *)
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[0].i_sram (clk_i, rst_ni, req_i, impl_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$auto$builder.cc:338:Biop$606 ;
  wire \$auto$builder.cc:364:Unop$216 ;
  wire \$auto$builder.cc:364:Unop$604 ;
  (* src = "../ihp13/tc_sram_impl.sv:100.32" *)
  input [8:0] addr_i;
  wire [8:0] addr_i;
  (* src = "../ihp13/tc_sram_impl.sv:102.32" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "../ihp13/tc_sram_impl.sv:92.32" *)
  input clk_i;
  wire clk_i;
  (* src = "../ihp13/tc_sram_impl.sv:223.36" *)
  wire [63:0] \gen_512x32xBx1.bm64 ;
  (* src = "../ihp13/tc_sram_impl.sv:223.27" *)
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  (* src = "../ihp13/tc_sram_impl.sv:224.18" *)
  reg \gen_512x32xBx1.sel_q ;
  (* src = "../ihp13/tc_sram_impl.sv:95.32" *)
  input impl_i;
  wire impl_i;
  (* src = "../ihp13/tc_sram_impl.sv:96.32" *)
  output impl_o;
  wire impl_o;
  (* src = "../ihp13/tc_sram_impl.sv:104.32" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "../ihp13/tc_sram_impl.sv:98.32" *)
  input req_i;
  wire req_i;
  (* src = "../ihp13/tc_sram_impl.sv:93.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../ihp13/tc_sram_impl.sv:101.32" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "../ihp13/tc_sram_impl.sv:99.32" *)
  input we_i;
  wire we_i;
  assign \gen_512x32xBx1.bm64 [15] = be_i[0] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [14] = be_i[0] & \$auto$builder.cc:364:Unop$216 ;
  assign \gen_512x32xBx1.bm64 [31] = be_i[1] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [30] = be_i[1] & \$auto$builder.cc:364:Unop$216 ;
  assign \gen_512x32xBx1.bm64 [46] = be_i[2] & \$auto$builder.cc:364:Unop$216 ;
  assign \gen_512x32xBx1.bm64 [47] = be_i[2] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [63] = be_i[3] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [62] = be_i[3] & \$auto$builder.cc:364:Unop$216 ;
  assign \$auto$builder.cc:338:Biop$606  = req_i & \$auto$builder.cc:364:Unop$604 ;
  assign \$auto$builder.cc:364:Unop$216  = ~ addr_i[0];
  assign \$auto$builder.cc:364:Unop$604  = ~ we_i;
  (* src = "../ihp13/tc_sram_impl.sv:246.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_512x32xBx1.sel_q  <= 1'h0;
    else if (\$auto$builder.cc:338:Biop$606 ) \gen_512x32xBx1.sel_q  <= addr_i[0];
  assign rdata_o[31] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [63] : \gen_512x32xBx1.rdata64 [62];
  assign rdata_o[30] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [61] : \gen_512x32xBx1.rdata64 [60];
  assign rdata_o[29] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [59] : \gen_512x32xBx1.rdata64 [58];
  assign rdata_o[28] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [57] : \gen_512x32xBx1.rdata64 [56];
  assign rdata_o[27] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [55] : \gen_512x32xBx1.rdata64 [54];
  assign rdata_o[26] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [53] : \gen_512x32xBx1.rdata64 [52];
  assign rdata_o[25] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [51] : \gen_512x32xBx1.rdata64 [50];
  assign rdata_o[24] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [49] : \gen_512x32xBx1.rdata64 [48];
  assign rdata_o[23] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [47] : \gen_512x32xBx1.rdata64 [46];
  assign rdata_o[22] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [45] : \gen_512x32xBx1.rdata64 [44];
  assign rdata_o[21] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [43] : \gen_512x32xBx1.rdata64 [42];
  assign rdata_o[20] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [41] : \gen_512x32xBx1.rdata64 [40];
  assign rdata_o[19] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [39] : \gen_512x32xBx1.rdata64 [38];
  assign rdata_o[18] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [37] : \gen_512x32xBx1.rdata64 [36];
  assign rdata_o[17] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [35] : \gen_512x32xBx1.rdata64 [34];
  assign rdata_o[16] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [33] : \gen_512x32xBx1.rdata64 [32];
  assign rdata_o[15] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [31] : \gen_512x32xBx1.rdata64 [30];
  assign rdata_o[14] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [29] : \gen_512x32xBx1.rdata64 [28];
  assign rdata_o[13] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [27] : \gen_512x32xBx1.rdata64 [26];
  assign rdata_o[12] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [25] : \gen_512x32xBx1.rdata64 [24];
  assign rdata_o[11] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [23] : \gen_512x32xBx1.rdata64 [22];
  assign rdata_o[10] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [21] : \gen_512x32xBx1.rdata64 [20];
  assign rdata_o[9] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [19] : \gen_512x32xBx1.rdata64 [18];
  assign rdata_o[8] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [17] : \gen_512x32xBx1.rdata64 [16];
  assign rdata_o[7] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [15] : \gen_512x32xBx1.rdata64 [14];
  assign rdata_o[6] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [13] : \gen_512x32xBx1.rdata64 [12];
  assign rdata_o[5] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [11] : \gen_512x32xBx1.rdata64 [10];
  assign rdata_o[4] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [9] : \gen_512x32xBx1.rdata64 [8];
  assign rdata_o[3] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [7] : \gen_512x32xBx1.rdata64 [6];
  assign rdata_o[2] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [5] : \gen_512x32xBx1.rdata64 [4];
  assign rdata_o[1] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [3] : \gen_512x32xBx1.rdata64 [2];
  assign rdata_o[0] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [1] : \gen_512x32xBx1.rdata64 [0];
  (* src = "../ihp13/tc_sram_impl.sv:251.37" *)
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$auto$builder.cc:364:Unop$604 ),
    .A_WEN(we_i)
  );
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign impl_o = 1'hx;
endmodule

(* src = "../ihp13/tc_sram_impl.sv:73.8" *)
module \tc_sram_impl$croc_chip.i_croc_soc.i_croc.gen_sram_bank[1].i_sram (clk_i, rst_ni, req_i, impl_i, we_i, addr_i, wdata_i, be_i, rdata_o, impl_o);
  wire \$auto$builder.cc:338:Biop$1015 ;
  wire \$auto$builder.cc:364:Unop$1013 ;
  wire \$auto$builder.cc:364:Unop$625 ;
  (* src = "../ihp13/tc_sram_impl.sv:100.32" *)
  input [8:0] addr_i;
  wire [8:0] addr_i;
  (* src = "../ihp13/tc_sram_impl.sv:102.32" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "../ihp13/tc_sram_impl.sv:92.32" *)
  input clk_i;
  wire clk_i;
  (* src = "../ihp13/tc_sram_impl.sv:223.36" *)
  wire [63:0] \gen_512x32xBx1.bm64 ;
  (* src = "../ihp13/tc_sram_impl.sv:223.27" *)
  wire [63:0] \gen_512x32xBx1.rdata64 ;
  (* src = "../ihp13/tc_sram_impl.sv:224.18" *)
  reg \gen_512x32xBx1.sel_q ;
  (* src = "../ihp13/tc_sram_impl.sv:95.32" *)
  input impl_i;
  wire impl_i;
  (* src = "../ihp13/tc_sram_impl.sv:96.32" *)
  output impl_o;
  wire impl_o;
  (* src = "../ihp13/tc_sram_impl.sv:104.32" *)
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  (* src = "../ihp13/tc_sram_impl.sv:98.32" *)
  input req_i;
  wire req_i;
  (* src = "../ihp13/tc_sram_impl.sv:93.32" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../ihp13/tc_sram_impl.sv:101.32" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "../ihp13/tc_sram_impl.sv:99.32" *)
  input we_i;
  wire we_i;
  assign \gen_512x32xBx1.bm64 [63] = be_i[3] & addr_i[0];
  assign \$auto$builder.cc:338:Biop$1015  = req_i & \$auto$builder.cc:364:Unop$1013 ;
  assign \gen_512x32xBx1.bm64 [15] = be_i[0] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [14] = be_i[0] & \$auto$builder.cc:364:Unop$625 ;
  assign \gen_512x32xBx1.bm64 [31] = be_i[1] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [30] = be_i[1] & \$auto$builder.cc:364:Unop$625 ;
  assign \gen_512x32xBx1.bm64 [46] = be_i[2] & \$auto$builder.cc:364:Unop$625 ;
  assign \gen_512x32xBx1.bm64 [47] = be_i[2] & addr_i[0];
  assign \gen_512x32xBx1.bm64 [62] = be_i[3] & \$auto$builder.cc:364:Unop$625 ;
  assign \$auto$builder.cc:364:Unop$1013  = ~ we_i;
  assign \$auto$builder.cc:364:Unop$625  = ~ addr_i[0];
  (* src = "../ihp13/tc_sram_impl.sv:246.5" *)
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_512x32xBx1.sel_q  <= 1'h0;
    else if (\$auto$builder.cc:338:Biop$1015 ) \gen_512x32xBx1.sel_q  <= addr_i[0];
  assign rdata_o[31] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [63] : \gen_512x32xBx1.rdata64 [62];
  assign rdata_o[30] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [61] : \gen_512x32xBx1.rdata64 [60];
  assign rdata_o[29] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [59] : \gen_512x32xBx1.rdata64 [58];
  assign rdata_o[28] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [57] : \gen_512x32xBx1.rdata64 [56];
  assign rdata_o[27] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [55] : \gen_512x32xBx1.rdata64 [54];
  assign rdata_o[26] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [53] : \gen_512x32xBx1.rdata64 [52];
  assign rdata_o[25] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [51] : \gen_512x32xBx1.rdata64 [50];
  assign rdata_o[24] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [49] : \gen_512x32xBx1.rdata64 [48];
  assign rdata_o[23] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [47] : \gen_512x32xBx1.rdata64 [46];
  assign rdata_o[22] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [45] : \gen_512x32xBx1.rdata64 [44];
  assign rdata_o[21] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [43] : \gen_512x32xBx1.rdata64 [42];
  assign rdata_o[20] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [41] : \gen_512x32xBx1.rdata64 [40];
  assign rdata_o[19] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [39] : \gen_512x32xBx1.rdata64 [38];
  assign rdata_o[18] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [37] : \gen_512x32xBx1.rdata64 [36];
  assign rdata_o[17] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [35] : \gen_512x32xBx1.rdata64 [34];
  assign rdata_o[16] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [33] : \gen_512x32xBx1.rdata64 [32];
  assign rdata_o[15] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [31] : \gen_512x32xBx1.rdata64 [30];
  assign rdata_o[14] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [29] : \gen_512x32xBx1.rdata64 [28];
  assign rdata_o[13] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [27] : \gen_512x32xBx1.rdata64 [26];
  assign rdata_o[12] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [25] : \gen_512x32xBx1.rdata64 [24];
  assign rdata_o[11] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [23] : \gen_512x32xBx1.rdata64 [22];
  assign rdata_o[10] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [21] : \gen_512x32xBx1.rdata64 [20];
  assign rdata_o[9] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [19] : \gen_512x32xBx1.rdata64 [18];
  assign rdata_o[8] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [17] : \gen_512x32xBx1.rdata64 [16];
  assign rdata_o[7] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [15] : \gen_512x32xBx1.rdata64 [14];
  assign rdata_o[6] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [13] : \gen_512x32xBx1.rdata64 [12];
  assign rdata_o[5] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [11] : \gen_512x32xBx1.rdata64 [10];
  assign rdata_o[4] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [9] : \gen_512x32xBx1.rdata64 [8];
  assign rdata_o[3] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [7] : \gen_512x32xBx1.rdata64 [6];
  assign rdata_o[2] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [5] : \gen_512x32xBx1.rdata64 [4];
  assign rdata_o[1] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [3] : \gen_512x32xBx1.rdata64 [2];
  assign rdata_o[0] = \gen_512x32xBx1.sel_q  ? (* full_case = 32'd1 *) (* src = "../ihp13/tc_sram_impl.sv:236.13-236.42|../ihp13/tc_sram_impl.sv:235.11-239.14" *) \gen_512x32xBx1.rdata64 [1] : \gen_512x32xBx1.rdata64 [0];
  (* src = "../ihp13/tc_sram_impl.sv:251.37" *)
  RM_IHPSG13_1P_256x64_c2_bm_bist \gen_512x32xBx1.i_cut  (
    .A_ADDR(addr_i[8:1]),
    .A_BIST_ADDR(8'h00),
    .A_BIST_BM(64'h0000000000000000),
    .A_BIST_CLK(1'h0),
    .A_BIST_DIN(64'h0000000000000000),
    .A_BIST_EN(1'h0),
    .A_BIST_MEN(1'h0),
    .A_BIST_REN(1'h0),
    .A_BIST_WEN(1'h0),
    .A_BM({ \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] }),
    .A_CLK(clk_i),
    .A_DIN({ wdata_i[31], wdata_i[31:30], wdata_i[30:29], wdata_i[29:28], wdata_i[28:27], wdata_i[27:26], wdata_i[26:25], wdata_i[25:24], wdata_i[24:23], wdata_i[23:22], wdata_i[22:21], wdata_i[21:20], wdata_i[20:19], wdata_i[19:18], wdata_i[18:17], wdata_i[17:16], wdata_i[16:15], wdata_i[15:14], wdata_i[14:13], wdata_i[13:12], wdata_i[12:11], wdata_i[11:10], wdata_i[10:9], wdata_i[9:8], wdata_i[8:7], wdata_i[7:6], wdata_i[6:5], wdata_i[5:4], wdata_i[4:3], wdata_i[3:2], wdata_i[2:1], wdata_i[1:0], wdata_i[0] }),
    .A_DLY(impl_i),
    .A_DOUT(\gen_512x32xBx1.rdata64 ),
    .A_MEN(req_i),
    .A_REN(\$auto$builder.cc:364:Unop$1013 ),
    .A_WEN(we_i)
  );
  assign { \gen_512x32xBx1.bm64 [61:48], \gen_512x32xBx1.bm64 [45:32], \gen_512x32xBx1.bm64 [29:16], \gen_512x32xBx1.bm64 [13:0] } = { \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [63:62], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [47:46], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [31:30], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14], \gen_512x32xBx1.bm64 [15:14] };
  assign impl_o = 1'hx;
endmodule

(* src = "../rtl/timer_unit/timer_unit_blackbox.sv:37.8" *)
module \timer_unit$croc_chip.i_croc_soc.i_croc.i_timer (clk_i, rst_ni, ref_clk_i, req_i, wen_i, gnt_o, r_valid_o, r_opc_o, event_lo_i, event_hi_i, irq_lo_o, irq_hi_o, busy_o, addr_i, wdata_i, be_i, id_i, r_rdata_o, r_id_o);
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:48.39" *)
  input [31:0] addr_i;
  wire [31:0] addr_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:51.39" *)
  input [3:0] be_i;
  wire [3:0] be_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:66.39" *)
  output busy_o;
  wire busy_o;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:42.39" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:61.39" *)
  input event_hi_i;
  wire event_hi_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:60.39" *)
  input event_lo_i;
  wire event_lo_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:53.39" *)
  output gnt_o;
  wire gnt_o;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:52.39" *)
  input [2:0] id_i;
  wire [2:0] id_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:64.39" *)
  output irq_hi_o;
  wire irq_hi_o;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:63.39" *)
  output irq_lo_o;
  wire irq_lo_o;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:57.39" *)
  output [2:0] r_id_o;
  wire [2:0] r_id_o;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:56.39" *)
  output r_opc_o;
  wire r_opc_o;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:58.39" *)
  output [31:0] r_rdata_o;
  wire [31:0] r_rdata_o;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:55.39" *)
  output r_valid_o;
  wire r_valid_o;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:45.39" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:47.39" *)
  input req_i;
  wire req_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:43.39" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:50.39" *)
  input [31:0] wdata_i;
  wire [31:0] wdata_i;
  (* src = "../rtl/timer_unit/timer_unit_blackbox.sv:49.39" *)
  input wen_i;
  wire wen_i;
  assign busy_o = 1'hx;
  assign gnt_o = 1'hx;
  assign irq_hi_o = 1'hx;
  assign irq_lo_o = 1'hx;
  assign r_id_o = 3'hx;
  assign r_opc_o = 1'hx;
  assign r_rdata_o = 32'hxxxxxxxx;
  assign r_valid_o = 1'hx;
endmodule

(* src = "../rtl/apb_uart/uart_baudgen.sv:35.8" *)
module \uart_baudgen$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_BG16 (CLK, RST, CE, CLEAR, DIVIDER, BAUDTICK);
  wire [15:0] \$auto$builder.cc:338:Biop$8526 ;
  wire \$auto$builder.cc:338:Biop$8530 ;
  (* unused_bits = "16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] \$auto$builder.cc:338:Biop$8534 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18082 ;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:57.3-65.18" *)
  wire [15:0] \$auto$slang_frontend.cc:694:finish$\iCounter$8528 ;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:67.5-72.18" *)
  wire [15:0] \$auto$slang_frontend.cc:694:finish$\iCounter$8536 ;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:41.16" *)
  output BAUDTICK;
  reg BAUDTICK;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:38.14" *)
  input CE;
  wire CE;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:39.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:40.21" *)
  input [15:0] DIVIDER;
  wire [15:0] DIVIDER;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:45.12" *)
  reg [15:0] iCounter;
  assign \$auto$builder.cc:338:Biop$8526  = iCounter - 1'h1;
  assign \$auto$builder.cc:338:Biop$8530  = ! iCounter;
  assign \$auto$builder.cc:338:Biop$8534 [15:0] = DIVIDER - 1'h1;
  (* src = "../rtl/apb_uart/uart_baudgen.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iCounter <= 16'h0000;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18082 ) iCounter <= \$auto$slang_frontend.cc:694:finish$\iCounter$8536 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18082  = | { \$auto$builder.cc:338:Biop$8530 , CLEAR, CE };
  (* src = "../rtl/apb_uart/uart_baudgen.sv:47.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) BAUDTICK <= 1'h0;
    else BAUDTICK <= \$auto$builder.cc:338:Biop$8530 ;
  assign \$auto$slang_frontend.cc:694:finish$\iCounter$8536  = \$auto$builder.cc:338:Biop$8530  ? (* src = "../rtl/apb_uart/uart_baudgen.sv:68.11-72.18|../rtl/apb_uart/uart_baudgen.sv:67.5-72.18" *) \$auto$builder.cc:338:Biop$8534 [15:0] : \$auto$slang_frontend.cc:694:finish$\iCounter$8528 ;
  assign \$auto$slang_frontend.cc:694:finish$\iCounter$8528  = CLEAR ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_baudgen.sv:60.1-60.131|../rtl/apb_uart/uart_baudgen.sv:57.3-65.18" *) 16'h0000 : \$auto$builder.cc:338:Biop$8526 ;
endmodule

(* src = "../rtl/apb_uart/uart_interrupt.sv:35.8" *)
module \uart_interrupt$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_IIC (CLK, INT, RST, IER, LSR, THI, RDA, CTI, AFE, MSR, IIR);
  wire \$auto$builder.cc:338:Biop$8275 ;
  wire \$auto$builder.cc:338:Biop$8277 ;
  wire \$auto$builder.cc:338:Biop$8279 ;
  wire \$auto$builder.cc:338:Biop$8291 ;
  wire \$auto$builder.cc:338:Biop$8293 ;
  wire \$auto$builder.cc:338:Biop$8295 ;
  wire \$auto$builder.cc:338:Biop$8297 ;
  wire \$auto$builder.cc:364:Unop$8289 ;
  wire \$auto$slang_frontend.cc:694:finish$\iIIR$8323 ;
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\iIIR$8324 ;
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\iIIR$8325 ;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:73.13-92.13" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\iIIR$8326 ;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:69.8-92.13" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\iIIR$8327 ;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:43.14" *)
  input AFE;
  wire AFE;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:42.14" *)
  input CTI;
  wire CTI;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:38.20" *)
  input [3:0] IER;
  wire [3:0] IER;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:45.22" *)
  output [3:0] IIR;
  reg [3:0] IIR;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:46.16" *)
  output INT;
  wire INT;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:39.20" *)
  input [4:0] LSR;
  wire [4:0] LSR;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:44.20" *)
  input [3:0] MSR;
  wire [3:0] MSR;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:41.14" *)
  input RDA;
  wire RDA;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:40.14" *)
  input THI;
  wire THI;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:52.5" *)
  wire iCTIInterrupt;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:54.5" *)
  wire iMSRInterrupt;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:51.5" *)
  wire iRDAInterrupt;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:50.5" *)
  wire iRLSInterrupt;
  (* src = "../rtl/apb_uart/uart_interrupt.sv:53.5" *)
  wire iTHRInterrupt;
  assign \$auto$builder.cc:338:Biop$8275  = LSR[1] | LSR[2];
  assign \$auto$builder.cc:338:Biop$8277  = \$auto$builder.cc:338:Biop$8275  | LSR[3];
  assign \$auto$builder.cc:338:Biop$8279  = \$auto$builder.cc:338:Biop$8277  | LSR[4];
  assign iRLSInterrupt = IER[2] && \$auto$builder.cc:338:Biop$8279 ;
  assign iRDAInterrupt = IER[0] && RDA;
  assign iCTIInterrupt = IER[0] && CTI;
  assign iTHRInterrupt = IER[1] && THI;
  assign \$auto$builder.cc:338:Biop$8291  = MSR[0] && \$auto$builder.cc:364:Unop$8289 ;
  assign \$auto$builder.cc:338:Biop$8293  = \$auto$builder.cc:338:Biop$8291  | MSR[1];
  assign \$auto$builder.cc:338:Biop$8295  = \$auto$builder.cc:338:Biop$8293  | MSR[2];
  assign \$auto$builder.cc:338:Biop$8297  = \$auto$builder.cc:338:Biop$8295  | MSR[3];
  assign iMSRInterrupt = IER[3] && \$auto$builder.cc:338:Biop$8297 ;
  assign \$auto$builder.cc:364:Unop$8289  = ~ AFE;
  assign INT = ~ IIR[0];
  (* src = "../rtl/apb_uart/uart_interrupt.sv:62.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) IIR <= 4'h1;
    else IIR <= \$auto$slang_frontend.cc:694:finish$\iIIR$8327 ;
  assign \$auto$slang_frontend.cc:694:finish$\iIIR$8323  = ~ (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_interrupt.sv:87.13-87.29|../rtl/apb_uart/uart_interrupt.sv:85.13-92.13" *) iMSRInterrupt;
  assign \$auto$slang_frontend.cc:694:finish$\iIIR$8324  = iTHRInterrupt ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_interrupt.sv:83.13-83.29|../rtl/apb_uart/uart_interrupt.sv:81.13-92.13" *) 2'h2 : { 1'h0, \$auto$slang_frontend.cc:694:finish$\iIIR$8323  };
  assign \$auto$slang_frontend.cc:694:finish$\iIIR$8325  = iRDAInterrupt ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_interrupt.sv:79.13-79.29|../rtl/apb_uart/uart_interrupt.sv:77.13-92.13" *) 3'h4 : { 1'h0, \$auto$slang_frontend.cc:694:finish$\iIIR$8324  };
  assign \$auto$slang_frontend.cc:694:finish$\iIIR$8326  = iCTIInterrupt ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_interrupt.sv:75.13-75.29|../rtl/apb_uart/uart_interrupt.sv:73.13-92.13" *) 4'hc : { 1'h0, \$auto$slang_frontend.cc:694:finish$\iIIR$8325  };
  assign \$auto$slang_frontend.cc:694:finish$\iIIR$8327  = iRLSInterrupt ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_interrupt.sv:71.13-71.29|../rtl/apb_uart/uart_interrupt.sv:69.8-92.13" *) 4'h6 : \$auto$slang_frontend.cc:694:finish$\iIIR$8326 ;
endmodule

(* src = "../rtl/apb_uart/uart_receiver.sv:35.8" *)
module \uart_receiver$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX (BI, CLK, SIN, RST, FE, WLS, STB, PEN, EPS, SP, RXCLK, RXCLEAR, PE, DOUT, RXFINISHED);
  wire \$auto$builder.cc:338:Biop$9097 ;
  wire \$auto$builder.cc:338:Biop$9099 ;
  wire \$auto$builder.cc:338:Biop$9101 ;
  wire \$auto$builder.cc:338:Biop$9103 ;
  wire \$auto$builder.cc:338:Biop$9105 ;
  wire \$auto$builder.cc:338:Biop$9107 ;
  wire \$auto$builder.cc:338:Biop$9109 ;
  wire \$auto$builder.cc:338:Biop$9124 ;
  wire \$auto$builder.cc:338:Biop$9126 ;
  wire [3:0] \$auto$builder.cc:338:Biop$9144 ;
  wire \$auto$builder.cc:338:Biop$9150 ;
  wire \$auto$builder.cc:338:Biop$9152 ;
  wire \$auto$builder.cc:338:Biop$9154 ;
  wire \$auto$builder.cc:338:Biop$9156 ;
  wire \$auto$builder.cc:338:Biop$9158 ;
  wire \$auto$builder.cc:338:Biop$9160 ;
  wire \$auto$builder.cc:338:Biop$9162 ;
  wire \$auto$builder.cc:338:Biop$9164 ;
  wire \$auto$builder.cc:338:Biop$9166 ;
  wire \$auto$builder.cc:338:Biop$9168 ;
  wire \$auto$builder.cc:338:Biop$9170 ;
  wire \$auto$builder.cc:338:Biop$9172 ;
  wire \$auto$builder.cc:338:Biop$9174 ;
  wire \$auto$builder.cc:338:Biop$9176 ;
  wire \$auto$builder.cc:338:Biop$9222 ;
  wire \$auto$builder.cc:338:Biop$9242 ;
  wire \$auto$builder.cc:338:Biop$9246 ;
  wire \$auto$builder.cc:338:Biop$9259 ;
  wire \$auto$builder.cc:338:Biop$9266 ;
  wire \$auto$builder.cc:338:Biop$9276 ;
  wire \$auto$builder.cc:338:Biop$9284 ;
  wire \$auto$builder.cc:338:Biop$9286 ;
  wire \$auto$builder.cc:338:Biop$9288 ;
  wire \$auto$builder.cc:364:Unop$9111 ;
  wire \$auto$demuxmap.cc:63:execute$18934 ;
  wire \$auto$demuxmap.cc:63:execute$18937 ;
  wire \$auto$demuxmap.cc:63:execute$18940 ;
  wire \$auto$demuxmap.cc:63:execute$18943 ;
  wire \$auto$demuxmap.cc:63:execute$18946 ;
  wire \$auto$demuxmap.cc:63:execute$18949 ;
  wire \$auto$demuxmap.cc:63:execute$18952 ;
  wire \$auto$demuxmap.cc:63:execute$18955 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18085 ;
  wire \$auto$rtlil.cc:2791:Lt$9130 ;
  wire [7:0] \$auto$rtlil.cc:2875:Bwmux$9142 ;
  wire [7:0] \$auto$rtlil.cc:2896:Demux$9138 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:169.3-172.18" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9191 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:183.7-186.26" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9200 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:181.5-192.18" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9201 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:199.7-206.26" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9210 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:197.3-211.18" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9211 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:216.3-223.18" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9216 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:228.3-244.18" *)
  wire [2:0] \$auto$slang_frontend.cc:694:finish$\NState$9228 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:284.11-287.34" *)
  wire \$auto$slang_frontend.cc:694:finish$\PE$9264 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:282.9-297.14" *)
  wire \$auto$slang_frontend.cc:694:finish$\PE$9270 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:279.1-303.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\PE$9271 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:132.8-145.13" *)
  wire [7:0] \$auto$slang_frontend.cc:694:finish$\iDOUT$9148 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:132.8-145.13" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\iDataCount$9147 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:274.3-277.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\iParityReceived$9249 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:279.1-303.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\iParityReceived$9272 ;
  wire \$procmux$12747_CMP ;
  wire \$procmux$12800_CMP ;
  wire \$procmux$12823_CMP ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:48.16" *)
  output BI;
  wire BI;
  (* src = "../rtl/apb_uart/uart_receiver.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/uart_receiver.sv:60.12" *)
  reg [2:0] CState;
  (* src = "../rtl/apb_uart/uart_receiver.sv:49.22" *)
  output [7:0] DOUT;
  reg [7:0] DOUT;
  (* src = "../rtl/apb_uart/uart_receiver.sv:43.14" *)
  input EPS;
  wire EPS;
  (* src = "../rtl/apb_uart/uart_receiver.sv:47.16" *)
  output FE;
  wire FE;
  (* src = "../rtl/apb_uart/uart_receiver.sv:60.20" *)
  wire [2:0] NState;
  (* src = "../rtl/apb_uart/uart_receiver.sv:46.16" *)
  output PE;
  reg PE;
  (* src = "../rtl/apb_uart/uart_receiver.sv:42.14" *)
  input PEN;
  wire PEN;
  (* src = "../rtl/apb_uart/uart_receiver.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/uart_receiver.sv:39.14" *)
  input RXCLEAR;
  wire RXCLEAR;
  (* src = "../rtl/apb_uart/uart_receiver.sv:38.14" *)
  input RXCLK;
  wire RXCLK;
  (* src = "../rtl/apb_uart/uart_receiver.sv:50.16" *)
  output RXFINISHED;
  wire RXFINISHED;
  (* src = "../rtl/apb_uart/uart_receiver.sv:45.14" *)
  input SIN;
  wire SIN;
  (* src = "../rtl/apb_uart/uart_receiver.sv:44.14" *)
  input SP;
  wire SP;
  (* src = "../rtl/apb_uart/uart_receiver.sv:41.14" *)
  input STB;
  wire STB;
  (* src = "../rtl/apb_uart/uart_receiver.sv:40.20" *)
  input [1:0] WLS;
  wire [1:0] WLS;
  (* src = "../rtl/apb_uart/uart_receiver.sv:61.11" *)
  (* unused_bits = "0 1 2" *)
  wire [3:0] iBaudCount;
  (* src = "../rtl/apb_uart/uart_receiver.sv:62.5" *)
  wire iBaudCountClear;
  (* src = "../rtl/apb_uart/uart_receiver.sv:63.5" *)
  wire iBaudStep;
  (* src = "../rtl/apb_uart/uart_receiver.sv:64.5" *)
  reg iBaudStepD;
  (* src = "../rtl/apb_uart/uart_receiver.sv:70.11" *)
  reg [3:0] iDataCount;
  (* src = "../rtl/apb_uart/uart_receiver.sv:72.5" *)
  wire iDataCountFinish;
  (* src = "../rtl/apb_uart/uart_receiver.sv:71.5" *)
  wire iDataCountInit;
  (* src = "../rtl/apb_uart/uart_receiver.sv:66.5" *)
  wire iFSIN;
  (* src = "../rtl/apb_uart/uart_receiver.sv:67.5" *)
  wire iFStopBit;
  (* src = "../rtl/apb_uart/uart_receiver.sv:65.5" *)
  wire iFilterClear;
  (* src = "../rtl/apb_uart/uart_receiver.sv:68.5" *)
  wire iParity;
  (* src = "../rtl/apb_uart/uart_receiver.sv:69.5" *)
  reg iParityReceived;
  \$bwmux  #(
    .WIDTH(32'd8)
  ) \$auto$builder.cc:128:Bwmux$9141  (
    .A(DOUT),
    .B({ iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN, iFSIN }),
    .S(\$auto$rtlil.cc:2896:Demux$9138 ),
    .Y(\$auto$rtlil.cc:2875:Bwmux$9142 )
  );
  assign iFilterClear = iBaudStepD | iBaudCountClear;
  assign \$auto$builder.cc:338:Biop$9097  = DOUT[7] ^ DOUT[6];
  assign \$auto$builder.cc:338:Biop$9099  = \$auto$builder.cc:338:Biop$9097  ^ DOUT[5];
  assign \$auto$builder.cc:338:Biop$9101  = \$auto$builder.cc:338:Biop$9099  ^ DOUT[4];
  assign \$auto$builder.cc:338:Biop$9103  = \$auto$builder.cc:338:Biop$9101  ^ DOUT[3];
  assign \$auto$builder.cc:338:Biop$9105  = \$auto$builder.cc:338:Biop$9103  ^ DOUT[2];
  assign \$auto$builder.cc:338:Biop$9107  = \$auto$builder.cc:338:Biop$9105  ^ DOUT[1];
  assign \$auto$builder.cc:338:Biop$9109  = \$auto$builder.cc:338:Biop$9107  ^ DOUT[0];
  assign iParity = \$auto$builder.cc:338:Biop$9109  ^ \$auto$builder.cc:364:Unop$9111 ;
  assign \$auto$builder.cc:338:Biop$9124  = ~ iDataCountFinish;
  assign \$auto$builder.cc:338:Biop$9126  = iBaudStep && \$auto$builder.cc:338:Biop$9124 ;
  assign \$auto$builder.cc:338:Biop$9144  = iDataCount + 1'h1;
  assign \$auto$builder.cc:338:Biop$9150  = ! WLS;
  assign \$auto$builder.cc:338:Biop$9152  = iDataCount == 3'h5;
  assign \$auto$builder.cc:338:Biop$9154  = \$auto$builder.cc:338:Biop$9150  && \$auto$builder.cc:338:Biop$9152 ;
  assign \$auto$builder.cc:338:Biop$9156  = WLS == 1'h1;
  assign \$auto$builder.cc:338:Biop$9158  = iDataCount == 3'h6;
  assign \$auto$builder.cc:338:Biop$9160  = \$auto$builder.cc:338:Biop$9156  && \$auto$builder.cc:338:Biop$9158 ;
  assign \$auto$builder.cc:338:Biop$9162  = \$auto$builder.cc:338:Biop$9154  | \$auto$builder.cc:338:Biop$9160 ;
  assign \$auto$builder.cc:338:Biop$9164  = WLS == 2'h2;
  assign \$auto$builder.cc:338:Biop$9166  = iDataCount == 3'h7;
  assign \$auto$builder.cc:338:Biop$9168  = \$auto$builder.cc:338:Biop$9164  && \$auto$builder.cc:338:Biop$9166 ;
  assign \$auto$builder.cc:338:Biop$9170  = \$auto$builder.cc:338:Biop$9162  | \$auto$builder.cc:338:Biop$9168 ;
  assign \$auto$builder.cc:338:Biop$9172  = WLS == 2'h3;
  assign \$auto$builder.cc:338:Biop$9174  = iDataCount == 4'h8;
  assign \$auto$builder.cc:338:Biop$9176  = \$auto$builder.cc:338:Biop$9172  && \$auto$builder.cc:338:Biop$9174 ;
  assign iDataCountFinish = \$auto$builder.cc:338:Biop$9170  | \$auto$builder.cc:338:Biop$9176 ;
  assign \$auto$builder.cc:338:Biop$9222  = ~ iFStopBit;
  assign \$auto$builder.cc:338:Biop$9242  = CState == 2'h3;
  assign \$auto$builder.cc:338:Biop$9246  = \$auto$builder.cc:338:Biop$9242  && iBaudStep;
  assign \$auto$builder.cc:338:Biop$9259  = EPS ^ iParityReceived;
  assign \$auto$builder.cc:338:Biop$9266  = iParity != iParityReceived;
  assign \$auto$builder.cc:338:Biop$9276  = CState == 3'h4;
  assign FE = \$auto$builder.cc:338:Biop$9222  && \$auto$builder.cc:338:Biop$9276 ;
  assign \$auto$builder.cc:338:Biop$9284  = ! DOUT;
  assign \$auto$builder.cc:338:Biop$9286  = ~ iParityReceived;
  assign \$auto$builder.cc:338:Biop$9288  = \$auto$builder.cc:338:Biop$9284  && \$auto$builder.cc:338:Biop$9286 ;
  assign BI = \$auto$builder.cc:338:Biop$9288  && FE;
  assign \$auto$builder.cc:364:Unop$9111  = ~ EPS;
  assign \$auto$demuxmap.cc:63:execute$18934  = iDataCount[2:0] == 3'h0;
  assign \$auto$demuxmap.cc:63:execute$18937  = iDataCount[2:0] == 3'h1;
  assign \$auto$demuxmap.cc:63:execute$18940  = iDataCount[2:0] == 3'h2;
  assign \$auto$demuxmap.cc:63:execute$18943  = iDataCount[2:0] == 3'h3;
  assign \$auto$demuxmap.cc:63:execute$18946  = iDataCount[2:0] == 3'h4;
  assign \$auto$demuxmap.cc:63:execute$18949  = iDataCount[2:0] == 3'h5;
  assign \$auto$demuxmap.cc:63:execute$18952  = iDataCount[2:0] == 3'h6;
  assign \$auto$demuxmap.cc:63:execute$18955  = iDataCount[2:0] == 3'h7;
  assign \$auto$rtlil.cc:2896:Demux$9138 [0] = \$auto$demuxmap.cc:63:execute$18934  ? \$auto$rtlil.cc:2791:Lt$9130  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$9138 [1] = \$auto$demuxmap.cc:63:execute$18937  ? \$auto$rtlil.cc:2791:Lt$9130  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$9138 [2] = \$auto$demuxmap.cc:63:execute$18940  ? \$auto$rtlil.cc:2791:Lt$9130  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$9138 [3] = \$auto$demuxmap.cc:63:execute$18943  ? \$auto$rtlil.cc:2791:Lt$9130  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$9138 [4] = \$auto$demuxmap.cc:63:execute$18946  ? \$auto$rtlil.cc:2791:Lt$9130  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$9138 [5] = \$auto$demuxmap.cc:63:execute$18949  ? \$auto$rtlil.cc:2791:Lt$9130  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$9138 [6] = \$auto$demuxmap.cc:63:execute$18952  ? \$auto$rtlil.cc:2791:Lt$9130  : 1'h0;
  assign \$auto$rtlil.cc:2896:Demux$9138 [7] = \$auto$demuxmap.cc:63:execute$18955  ? \$auto$rtlil.cc:2791:Lt$9130  : 1'h0;
  (* src = "../rtl/apb_uart/uart_receiver.sv:123.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iDataCount <= 4'h0;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18085 ) iDataCount <= \$auto$slang_frontend.cc:694:finish$\iDataCount$9147 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:123.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) DOUT <= 8'h00;
    else if (\$auto$opt_dff.cc:194:make_patterns_logic$18085 ) DOUT <= \$auto$slang_frontend.cc:694:finish$\iDOUT$9148 ;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18085  = | { iDataCountInit, \$auto$builder.cc:338:Biop$9126  };
  assign \$auto$rtlil.cc:2791:Lt$9130  = ! iDataCount[3];
  assign iDataCountInit = | { \$procmux$12823_CMP , iBaudCountClear };
  (* src = "../rtl/apb_uart/uart_receiver.sv:150.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) CState <= 3'h0;
    else CState <= NState;
  (* src = "../rtl/apb_uart/uart_receiver.sv:265.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) PE <= 1'h0;
    else PE <= \$auto$slang_frontend.cc:694:finish$\PE$9271 ;
  (* src = "../rtl/apb_uart/uart_receiver.sv:102.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iBaudStepD <= 1'h0;
    else iBaudStepD <= iBaudStep;
  (* src = "../rtl/apb_uart/uart_receiver.sv:265.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iParityReceived <= 1'h0;
    else iParityReceived <= \$auto$slang_frontend.cc:694:finish$\iParityReceived$9272 ;
  assign \$auto$slang_frontend.cc:694:finish$\iDOUT$9148  = iDataCountInit ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:133.10-137.13|../rtl/apb_uart/uart_receiver.sv:132.8-145.13" *) 8'h00 : \$auto$rtlil.cc:2875:Bwmux$9142 ;
  assign \$auto$slang_frontend.cc:694:finish$\iDataCount$9147  = iDataCountInit ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:133.10-137.13|../rtl/apb_uart/uart_receiver.sv:132.8-145.13" *) 4'h0 : \$auto$builder.cc:338:Biop$9144 ;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9191 [0] = ~ (* src = "../rtl/apb_uart/uart_receiver.sv:251.7-251.23|../rtl/apb_uart/uart_receiver.sv:249.3-252.18" *) SIN;
  assign \$procmux$12747_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:249.3-252.18|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 3'h5;
  assign { \$auto$slang_frontend.cc:694:finish$\NState$9228 [2], \$auto$slang_frontend.cc:694:finish$\NState$9228 [0] } = iBaudCount[3] ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:230.7-239.26|../rtl/apb_uart/uart_receiver.sv:228.3-244.18" *) { \$auto$builder.cc:338:Biop$9222 , \$auto$builder.cc:338:Biop$9222  } : 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9216 [2:1] = iBaudStep ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:218.7-218.22|../rtl/apb_uart/uart_receiver.sv:216.3-223.18" *) 2'h2 : 2'h1;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9211  = iDataCountFinish ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:199.7-206.26|../rtl/apb_uart/uart_receiver.sv:197.3-211.18" *) { \$auto$slang_frontend.cc:694:finish$\NState$9210 [2:1], \$auto$slang_frontend.cc:694:finish$\NState$9210 [1] } : 3'h2;
  assign \$procmux$12800_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:197.3-211.18|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9210 [2:1] = PEN ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:201.11-201.25|../rtl/apb_uart/uart_receiver.sv:199.7-206.26" *) 2'h1 : 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9201 [1:0] = iBaudStep ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:183.7-186.26|../rtl/apb_uart/uart_receiver.sv:181.5-192.18" *) { \$auto$slang_frontend.cc:694:finish$\NState$9200 [1], 1'h0 } : 2'h1;
  assign \$procmux$12823_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:179.5-193.12|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9200 [1] = ~ (* src = "../rtl/apb_uart/uart_receiver.sv:185.11-185.26|../rtl/apb_uart/uart_receiver.sv:183.7-186.26" *) iFSIN;
  assign iBaudCountClear = ! (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:168.5-176.10|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) CState;
  function [2:0] \$procmux$12866 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/apb_uart/uart_receiver.sv:249.3-252.18|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" *)
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \$procmux$12866  = b[2:0];
      6'b????1?:
        \$procmux$12866  = b[5:3];
      6'b???1??:
        \$procmux$12866  = b[8:6];
      6'b??1???:
        \$procmux$12866  = b[11:9];
      6'b?1????:
        \$procmux$12866  = b[14:12];
      6'b1?????:
        \$procmux$12866  = b[17:15];
      default:
        \$procmux$12866  = a;
    endcase
  endfunction
  assign NState = \$procmux$12866 (3'h0, { 2'h0, \$auto$slang_frontend.cc:694:finish$\NState$9191 [0], 1'h0, \$auto$slang_frontend.cc:694:finish$\NState$9201 [1:0], \$auto$slang_frontend.cc:694:finish$\NState$9211 , \$auto$slang_frontend.cc:694:finish$\NState$9216 [2:1], \$auto$slang_frontend.cc:694:finish$\NState$9216 [1], \$auto$slang_frontend.cc:694:finish$\NState$9228 [2], 1'h0, \$auto$slang_frontend.cc:694:finish$\NState$9228 [0], \$auto$slang_frontend.cc:694:finish$\NState$9191 [0], 1'h0, \$auto$slang_frontend.cc:694:finish$\NState$9191 [0] }, { iBaudCountClear, \$procmux$12823_CMP , \$procmux$12800_CMP , \$auto$builder.cc:338:Biop$9242 , \$auto$builder.cc:338:Biop$9276 , \$procmux$12747_CMP  });
  assign RXFINISHED = \$auto$builder.cc:338:Biop$9276  & (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:228.3-244.18|../rtl/apb_uart/uart_receiver.sv:166.1-260.8" *) iBaudCount[3];
  assign \$auto$slang_frontend.cc:694:finish$\PE$9271  = PEN & (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:280.11-298.20|../rtl/apb_uart/uart_receiver.sv:279.1-303.18" *) \$auto$slang_frontend.cc:694:finish$\PE$9270 ;
  assign \$auto$slang_frontend.cc:694:finish$\PE$9270  = SP ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:284.11-287.34|../rtl/apb_uart/uart_receiver.sv:282.9-297.14" *) \$auto$slang_frontend.cc:694:finish$\PE$9264  : \$auto$builder.cc:338:Biop$9266 ;
  assign \$auto$slang_frontend.cc:694:finish$\PE$9264  = ~ (* src = "../rtl/apb_uart/uart_receiver.sv:286.15-286.27|../rtl/apb_uart/uart_receiver.sv:284.11-287.34" *) \$auto$builder.cc:338:Biop$9259 ;
  assign \$auto$slang_frontend.cc:694:finish$\iParityReceived$9272  = PEN & (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_receiver.sv:280.11-298.20|../rtl/apb_uart/uart_receiver.sv:279.1-303.18" *) \$auto$slang_frontend.cc:694:finish$\iParityReceived$9249 ;
  assign \$auto$slang_frontend.cc:694:finish$\iParityReceived$9249  = \$auto$builder.cc:338:Biop$9246  ? (* src = "../rtl/apb_uart/uart_receiver.sv:276.7-276.32|../rtl/apb_uart/uart_receiver.sv:274.3-277.18" *) iFSIN : iParityReceived;
  (* src = "../rtl/apb_uart/uart_receiver.sv:78.27" *)
  \slib_counter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_BRC  RX_BRC (
    .CLEAR(iBaudCountClear),
    .CLK(CLK),
    .D(4'h0),
    .DOWN(1'h0),
    .ENABLE(RXCLK),
    .LOAD(1'h0),
    .OVERFLOW(iBaudStep),
    .Q(iBaudCount),
    .RST(RST)
  );
  (* src = "../rtl/apb_uart/uart_receiver.sv:95.31" *)
  \slib_input_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_IFSB  RX_IFSB (
    .CE(RXCLK),
    .CLK(CLK),
    .D(SIN),
    .Q(iFStopBit),
    .RST(RST)
  );
  (* src = "../rtl/apb_uart/uart_receiver.sv:88.44" *)
  \slib_mv_filter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_RX.RX_MVF  RX_MVF (
    .CLEAR(iFilterClear),
    .CLK(CLK),
    .D(SIN),
    .Q(iFSIN),
    .RST(RST),
    .SAMPLE(RXCLK)
  );
  assign \$auto$slang_frontend.cc:694:finish$\NState$9191 [2:1] = 2'h0;
  assign { \$auto$slang_frontend.cc:694:finish$\NState$9200 [2], \$auto$slang_frontend.cc:694:finish$\NState$9200 [0] } = 2'h0;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9201 [2] = 1'h0;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9210 [0] = \$auto$slang_frontend.cc:694:finish$\NState$9210 [1];
  assign \$auto$slang_frontend.cc:694:finish$\NState$9216 [0] = \$auto$slang_frontend.cc:694:finish$\NState$9216 [1];
  assign \$auto$slang_frontend.cc:694:finish$\NState$9228 [1] = 1'h0;
endmodule

(* src = "../rtl/apb_uart/uart_transmitter.sv:35.8" *)
module \uart_transmitter$croc_chip.i_croc_soc.i_croc.i_uart.i_apb_uart.UART_TX (CLK, SOUT, RST, CLEAR, TXCLK, TXSTART, WLS, STB, PEN, EPS, SP, BC, DIN, TXFINISHED);
  wire \$auto$builder.cc:338:Biop$8959 ;
  wire \$auto$builder.cc:338:Biop$8963 ;
  wire \$auto$builder.cc:338:Biop$8965 ;
  wire \$auto$builder.cc:338:Biop$8967 ;
  wire \$auto$builder.cc:338:Biop$8993 ;
  wire \$auto$builder.cc:338:Biop$9003 ;
  wire \$auto$builder.cc:338:Biop$9053 ;
  wire \$auto$builder.cc:338:Biop$9055 ;
  wire \$auto$builder.cc:338:Biop$9057 ;
  wire \$auto$builder.cc:338:Biop$9071 ;
  wire \$auto$builder.cc:338:Biop$9073 ;
  wire \$auto$builder.cc:338:Biop$9075 ;
  wire \$auto$builder.cc:364:Unop$9031 ;
  wire \$auto$opt_dff.cc:194:make_patterns_logic$18092 ;
  wire \$auto$opt_dff.cc:219:make_patterns_logic$18094 ;
  wire \$auto$opt_reduce.cc:137:opt_pmux$17219 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:152.18-159.23" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\NState$8990 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:150.13-164.18" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\NState$8991 ;
  wire [1:0] \$auto$slang_frontend.cc:694:finish$\NState$9001 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:190.13-204.18" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\NState$9011 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:249.13-260.18" *)
  wire [3:0] \$auto$slang_frontend.cc:694:finish$\NState$9043 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:224.18-231.23" *)
  wire \$auto$slang_frontend.cc:694:finish$\iSout$9025 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:235.18-242.23" *)
  wire \$auto$slang_frontend.cc:694:finish$\iSout$9032 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:222.13-243.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\iSout$9033 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:82.13-99.18" *)
  wire \$auto$slang_frontend.cc:694:finish$\iTx2$8973 ;
  wire \$procmux$12975_CMP ;
  wire \$procmux$13005_CMP ;
  wire \$procmux$13016_CMP ;
  wire \$procmux$13041_CMP ;
  wire \$procmux$13068_CMP ;
  wire \$procmux$13100_CMP ;
  wire \$procmux$13101_CMP ;
  wire \$procmux$13102_CMP ;
  wire \$procmux$13103_CMP ;
  wire \$procmux$13104_CMP ;
  wire \$procmux$13106_CMP ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:46.14" *)
  input BC;
  wire BC;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:40.14" *)
  input CLEAR;
  wire CLEAR;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:36.14" *)
  input CLK;
  wire CLK;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:66.12" *)
  reg [3:0] CState;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:47.20" *)
  input [7:0] DIN;
  wire [7:0] DIN;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:44.14" *)
  input EPS;
  wire EPS;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:66.20" *)
  wire [3:0] NState;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:43.14" *)
  input PEN;
  wire PEN;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:37.14" *)
  input RST;
  wire RST;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:49.16" *)
  output SOUT;
  wire SOUT;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:45.14" *)
  input SP;
  wire SP;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:42.14" *)
  input STB;
  wire STB;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:38.14" *)
  input TXCLK;
  wire TXCLK;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:48.16" *)
  output TXFINISHED;
  reg TXFINISHED;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:39.14" *)
  input TXSTART;
  wire TXSTART;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:283.15" *)
  wire \TX_PAR.iP40 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:283.21" *)
  wire \TX_PAR.iP50 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:283.27" *)
  wire \TX_PAR.iP60 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:283.33" *)
  wire \TX_PAR.iP70 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:41.20" *)
  input [1:0] WLS;
  wire [1:0] WLS;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:297.9" *)
  reg iLast;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:69.5" *)
  wire iParity;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:68.5" *)
  wire iSout;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:67.5" *)
  reg iTx2;
  assign \$auto$builder.cc:338:Biop$8959  = ! WLS;
  assign \$auto$builder.cc:338:Biop$8963  = \$auto$builder.cc:338:Biop$8959  && STB;
  assign \$auto$builder.cc:338:Biop$8965  = CState == 4'hc;
  assign \$auto$builder.cc:338:Biop$8967  = \$auto$builder.cc:338:Biop$8963  && \$auto$builder.cc:338:Biop$8965 ;
  assign \$auto$builder.cc:338:Biop$8993  = WLS == 1'h1;
  assign \$auto$builder.cc:338:Biop$9003  = WLS == 2'h2;
  assign \$auto$builder.cc:338:Biop$9053  = DIN[4] ^ DIN[3];
  assign \$auto$builder.cc:338:Biop$9055  = \$auto$builder.cc:338:Biop$9053  ^ DIN[2];
  assign \$auto$builder.cc:338:Biop$9057  = \$auto$builder.cc:338:Biop$9055  ^ DIN[1];
  assign \TX_PAR.iP40  = \$auto$builder.cc:338:Biop$9057  ^ DIN[0];
  assign \TX_PAR.iP50  = DIN[5] ^ \TX_PAR.iP40 ;
  assign \TX_PAR.iP60  = DIN[6] ^ \TX_PAR.iP50 ;
  assign \TX_PAR.iP70  = DIN[7] ^ \TX_PAR.iP60 ;
  assign \$auto$builder.cc:338:Biop$9071  = ~ iLast;
  assign \$auto$builder.cc:338:Biop$9073  = CState == 4'hb;
  assign \$auto$builder.cc:338:Biop$9075  = \$auto$builder.cc:338:Biop$9071  && \$auto$builder.cc:338:Biop$9073 ;
  assign \$auto$builder.cc:364:Unop$9031  = ~ iParity;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:72.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) iTx2 <= 1'h0;
    else if (TXCLK) iTx2 <= \$auto$slang_frontend.cc:694:finish$\iTx2$8973 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:72.1" *)
  always @(posedge CLK, posedge RST)
    if (RST) CState <= 4'h0;
    else if (\$auto$opt_dff.cc:219:make_patterns_logic$18094 ) CState <= NState;
  assign \$auto$opt_dff.cc:194:make_patterns_logic$18092  = { \$auto$builder.cc:338:Biop$8967 , iTx2 } != 2'h1;
  assign \$auto$opt_dff.cc:219:make_patterns_logic$18094  = & { \$auto$opt_dff.cc:194:make_patterns_logic$18092 , TXCLK };
  assign \$auto$opt_reduce.cc:137:opt_pmux$17219  = | { \$procmux$13106_CMP , \$auto$builder.cc:338:Biop$8965  };
  assign SOUT = BC ? 1'h0 : iSout;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:298.5" *)
  always @(posedge CLK, posedge RST)
    if (RST) TXFINISHED <= 1'h0;
    else TXFINISHED <= \$auto$builder.cc:338:Biop$9075 ;
  (* src = "../rtl/apb_uart/uart_transmitter.sv:298.5" *)
  always @(posedge CLK, posedge RST)
    if (RST) iLast <= 1'h0;
    else iLast <= \$auto$builder.cc:338:Biop$9073 ;
  function [0:0] \$procmux$12939 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/apb_uart/uart_transmitter.sv:292.20-292.36|../rtl/apb_uart/uart_transmitter.sv:289.9-294.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \$procmux$12939  = b[0:0];
      3'b?1?:
        \$procmux$12939  = b[1:1];
      3'b1??:
        \$procmux$12939  = b[2:2];
      default:
        \$procmux$12939  = a;
    endcase
  endfunction
  assign iParity = \$procmux$12939 (\TX_PAR.iP70 , { \TX_PAR.iP40 , \TX_PAR.iP50 , \TX_PAR.iP60  }, { \$auto$builder.cc:338:Biop$8959 , \$auto$builder.cc:338:Biop$8993 , \$auto$builder.cc:338:Biop$9003  });
  assign { \$auto$slang_frontend.cc:694:finish$\NState$9043 [3], \$auto$slang_frontend.cc:694:finish$\NState$9043 [0] } = STB ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:251.18-251.34|../rtl/apb_uart/uart_transmitter.sv:249.13-260.18" *) 2'h2 : { 1'h0, TXSTART };
  assign \$auto$slang_frontend.cc:694:finish$\iSout$9032  = EPS ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:237.23-237.40|../rtl/apb_uart/uart_transmitter.sv:235.18-242.23" *) iParity : \$auto$builder.cc:364:Unop$9031 ;
  assign \$procmux$12975_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:221.10-245.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'ha;
  assign \$auto$slang_frontend.cc:694:finish$\iSout$9033  = SP ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:224.18-231.23|../rtl/apb_uart/uart_transmitter.sv:222.13-243.18" *) \$auto$slang_frontend.cc:694:finish$\iSout$9025  : \$auto$slang_frontend.cc:694:finish$\iSout$9032 ;
  assign \$auto$slang_frontend.cc:694:finish$\iSout$9025  = ~ (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:226.23-226.38|../rtl/apb_uart/uart_transmitter.sv:224.18-231.23" *) EPS;
  assign \$procmux$13005_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:208.10-218.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'h9;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9011 [1:0] = \$auto$builder.cc:338:Biop$9003  ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:192.18-199.23|../rtl/apb_uart/uart_transmitter.sv:190.13-204.18" *) { 1'h1, \$auto$slang_frontend.cc:694:finish$\NState$8990 [0] } : 2'h1;
  assign \$procmux$13016_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:188.10-205.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 4'h8;
  assign \$auto$slang_frontend.cc:694:finish$\NState$8990 [0] = ~ (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:194.23-194.37|../rtl/apb_uart/uart_transmitter.sv:192.18-199.23" *) PEN;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9001  = \$auto$builder.cc:338:Biop$8993  ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:172.18-179.23|../rtl/apb_uart/uart_transmitter.sv:170.13-184.18" *) { 1'h1, \$auto$slang_frontend.cc:694:finish$\NState$8990 [0] } : 2'h0;
  assign \$procmux$13041_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:168.10-185.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h7;
  assign { \$auto$slang_frontend.cc:694:finish$\NState$8991 [3:2], \$auto$slang_frontend.cc:694:finish$\NState$8991 [0] } = \$auto$builder.cc:338:Biop$8959  ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:152.18-159.23|../rtl/apb_uart/uart_transmitter.sv:150.13-164.18" *) { 2'h2, \$auto$slang_frontend.cc:694:finish$\NState$8990 [0] } : 3'h3;
  assign \$procmux$13068_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:148.10-165.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h6;
  function [3:0] \$procmux$13086 ;
    input [3:0] a;
    input [47:0] b;
    input [11:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/apb_uart/uart_transmitter.sv:265.8-268.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *)
    (* parallel_case *)
    casez (s)
      12'b???????????1:
        \$procmux$13086  = b[3:0];
      12'b??????????1?:
        \$procmux$13086  = b[7:4];
      12'b?????????1??:
        \$procmux$13086  = b[11:8];
      12'b????????1???:
        \$procmux$13086  = b[15:12];
      12'b???????1????:
        \$procmux$13086  = b[19:16];
      12'b??????1?????:
        \$procmux$13086  = b[23:20];
      12'b?????1??????:
        \$procmux$13086  = b[27:24];
      12'b????1???????:
        \$procmux$13086  = b[31:28];
      12'b???1????????:
        \$procmux$13086  = b[35:32];
      12'b??1?????????:
        \$procmux$13086  = b[39:36];
      12'b?1??????????:
        \$procmux$13086  = b[43:40];
      12'b1???????????:
        \$procmux$13086  = b[47:44];
      default:
        \$procmux$13086  = a;
    endcase
  endfunction
  assign NState = \$procmux$13086 (4'h0, { 20'h23456, \$auto$slang_frontend.cc:694:finish$\NState$8991 [3:2], 1'h1, \$auto$slang_frontend.cc:694:finish$\NState$8991 [0], 2'h2, \$auto$slang_frontend.cc:694:finish$\NState$9001 , 2'h2, \$auto$slang_frontend.cc:694:finish$\NState$9011 [1:0], 3'h5, \$auto$slang_frontend.cc:694:finish$\NState$8990 [0], 4'hb, \$auto$slang_frontend.cc:694:finish$\NState$9043 [3], \$auto$slang_frontend.cc:694:finish$\NState$9043 [3], 1'h0, \$auto$slang_frontend.cc:694:finish$\NState$9043 [0], 3'h0, TXSTART }, { \$procmux$13104_CMP , \$procmux$13103_CMP , \$procmux$13102_CMP , \$procmux$13101_CMP , \$procmux$13100_CMP , \$procmux$13068_CMP , \$procmux$13041_CMP , \$procmux$13016_CMP , \$procmux$13005_CMP , \$procmux$12975_CMP , \$auto$builder.cc:338:Biop$9073 , \$auto$opt_reduce.cc:137:opt_pmux$17219  });
  assign \$procmux$13100_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:142.10-145.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h5;
  assign \$procmux$13101_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:136.10-139.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 3'h4;
  assign \$procmux$13102_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:130.10-133.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 2'h3;
  assign \$procmux$13103_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:124.10-127.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 2'h2;
  assign \$procmux$13104_CMP  = CState == (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:118.10-121.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) 1'h1;
  assign \$procmux$13106_CMP  = ! (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:110.13-113.18|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *) CState;
  function [0:0] \$procmux$13130 ;
    input [0:0] a;
    input [9:0] b;
    input [9:0] s;
    (* full_case = 32'd1 *)
    (* src = "../rtl/apb_uart/uart_transmitter.sv:221.10-245.13|../rtl/apb_uart/uart_transmitter.sv:107.6-276.13" *)
    (* parallel_case *)
    casez (s)
      10'b?????????1:
        \$procmux$13130  = b[0:0];
      10'b????????1?:
        \$procmux$13130  = b[1:1];
      10'b???????1??:
        \$procmux$13130  = b[2:2];
      10'b??????1???:
        \$procmux$13130  = b[3:3];
      10'b?????1????:
        \$procmux$13130  = b[4:4];
      10'b????1?????:
        \$procmux$13130  = b[5:5];
      10'b???1??????:
        \$procmux$13130  = b[6:6];
      10'b??1???????:
        \$procmux$13130  = b[7:7];
      10'b?1????????:
        \$procmux$13130  = b[8:8];
      10'b1?????????:
        \$procmux$13130  = b[9:9];
      default:
        \$procmux$13130  = a;
    endcase
  endfunction
  assign iSout = \$procmux$13130 (1'h1, { 1'h0, DIN[0], DIN[1], DIN[2], DIN[3], DIN[4], DIN[5], DIN[6], DIN[7], \$auto$slang_frontend.cc:694:finish$\iSout$9033  }, { \$procmux$13104_CMP , \$procmux$13103_CMP , \$procmux$13102_CMP , \$procmux$13101_CMP , \$procmux$13100_CMP , \$procmux$13068_CMP , \$procmux$13041_CMP , \$procmux$13016_CMP , \$procmux$13005_CMP , \$procmux$12975_CMP  });
  assign \$auto$slang_frontend.cc:694:finish$\iTx2$8973  = iTx2 ? (* full_case = 32'd1 *) (* src = "../rtl/apb_uart/uart_transmitter.sv:83.15-86.18|../rtl/apb_uart/uart_transmitter.sv:82.13-99.18" *) \$auto$builder.cc:338:Biop$8967  : 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\NState$8990 [3:1] = 3'h5;
  assign \$auto$slang_frontend.cc:694:finish$\NState$8991 [1] = 1'h1;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9011 [3:2] = 2'h2;
  assign \$auto$slang_frontend.cc:694:finish$\NState$9043 [2:1] = { \$auto$slang_frontend.cc:694:finish$\NState$9043 [3], 1'h0 };
endmodule

(* src = "../rtl/user_domain.sv:8.8" *)
module \user_domain$croc_chip.i_croc_soc.i_user (clk_i, rst_ni, testmode_i, ref_clk_i, user_sbr_obi_req_i, user_sbr_obi_rsp_o, user_mgr_obi_req_o, user_mgr_obi_rsp_i, gpio_in_sync_i, interrupts_o);
  (* src = "../rtl/user_domain.sv:46.35" *)
  wire [73:0] all_user_sbr_obi_req;
  (* src = "../rtl/user_domain.sv:47.35" *)
  wire [38:0] all_user_sbr_obi_rsp;
  (* src = "../rtl/user_domain.sv:11.21" *)
  input clk_i;
  wire clk_i;
  (* src = "../rtl/user_domain.sv:22.38" *)
  input [31:0] gpio_in_sync_i;
  wire [31:0] gpio_in_sync_i;
  (* src = "../rtl/user_domain.sv:23.38" *)
  output [3:0] interrupts_o;
  wire [3:0] interrupts_o;
  (* src = "../rtl/user_domain.sv:12.21" *)
  input ref_clk_i;
  wire ref_clk_i;
  (* src = "../rtl/user_domain.sv:13.21" *)
  input rst_ni;
  wire rst_ni;
  (* src = "../rtl/user_domain.sv:14.21" *)
  input testmode_i;
  wire testmode_i;
  (* src = "../rtl/user_domain.sv:62.51" *)
  wire user_idx;
  (* src = "../rtl/user_domain.sv:19.24" *)
  output [71:0] user_mgr_obi_req_o;
  wire [71:0] user_mgr_obi_req_o;
  (* src = "../rtl/user_domain.sv:20.24" *)
  input [36:0] user_mgr_obi_rsp_i;
  wire [36:0] user_mgr_obi_rsp_i;
  (* src = "../rtl/user_domain.sv:16.24" *)
  input [73:0] user_sbr_obi_req_i;
  wire [73:0] user_sbr_obi_req_i;
  (* src = "../rtl/user_domain.sv:17.24" *)
  output [38:0] user_sbr_obi_rsp_o;
  wire [38:0] user_sbr_obi_rsp_o;
  (* src = "../rtl/user_domain.sv:70.5" *)
  \addr_decode$croc_chip.i_croc_soc.i_user.i_addr_decode_periphs  i_addr_decode_periphs (
    .addr_i(user_sbr_obi_req_i[73:42]),
    .addr_map_i(192'h000000000000000000000000000000000000000000000000),
    .default_idx_i(1'h0),
    .en_default_idx_i(1'h1),
    .idx_o(user_idx)
  );
  (* src = "../rtl/user_domain.sv:86.5" *)
  \obi_demux$croc_chip.i_croc_soc.i_user.i_obi_demux  i_obi_demux (
    .clk_i(clk_i),
    .mgr_ports_req_o(all_user_sbr_obi_req),
    .mgr_ports_rsp_i(all_user_sbr_obi_rsp),
    .rst_ni(rst_ni),
    .sbr_port_req_i(user_sbr_obi_req_i),
    .sbr_port_rsp_o(user_sbr_obi_rsp_o),
    .sbr_port_select_i(user_idx)
  );
  (* src = "../rtl/user_domain.sv:110.5" *)
  \obi_err_sbr$croc_chip.i_croc_soc.i_user.i_user_err  i_user_err (
    .clk_i(clk_i),
    .obi_req_i(all_user_sbr_obi_req),
    .obi_rsp_o(all_user_sbr_obi_rsp),
    .rst_ni(rst_ni),
    .testmode_i(testmode_i)
  );
  assign interrupts_o = 4'h0;
  assign user_mgr_obi_req_o = 72'h000000000000000000;
endmodule
